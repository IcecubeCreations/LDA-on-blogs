




Follow these 10 fundamental microservices design principles






















































SearchAppArchitecture




Search the TechTarget Network




Sign-up now. Start my free, unlimited access.

Login
Register




Techtarget Network
News
Features
Tips
Webinars

More Content


Answers
Definitions
Essential Guides
Opinions
Photo Stories
Podcasts
Quizzes
Tutorials

Sponsored Communities











SearchAppArchitecture





Topic  
								Enterprise architecture management
  




 API design and management
 Application development and design
 Application management tools and practices
 Application integration
All Topics





Follow:
















Tech Accelerator
An A-to-Z guide to a microservices architecture transition


Prev
Next
Microservices vs. SOA: Choose the right app architecture
What are some benefits of a microservices architecture?
Download this guide1









Tip


Follow these 10 fundamental microservices design principles



The right design principles enable microservices adopters to build an application from autonomous, cohesive components that can scale seamlessly. Here are 10 to follow.






Share this item with your network:



























































By


Joydip Kanjilal



	Published: 13 Jan 2020


 
Leading organizations understand the benefits they can gain by migrating existing apps to a microservices architecture and adopting the approach for new builds. However, there are inherent challenges application designers, architects and developers face around scalability, performance and deployment.








Use these 10 key microservices design principles as guidelines to build applications that meet expectations and avoid short- and long-term lifecycle issues. They range from conceptual, such as how to define the scope of a service and maintain data autonomy, to practical, such as what patterns to use to maximize network traffic performance.

1. Ensure high cohesion and low coupling
Cohesion and coupling are two terms often used interchangeably when describing a microservices architecture. The former relates to the degree of intradependence that exists between the modules of an application, and the latter is used for the degree of interdependencies.
You should design microservices so that cohesion is high and coupling is low. This plan creates microservices that are adaptable to changes, scalable and can be extended over time.



This article is part of
An A-to-Z guide to a microservices architecture transition

Which also includes:
What are some benefits of a microservices architecture?
5 core components of microservices architecture
10 microservices patterns all architects should know





Download1
Download this entire guide for FREE now!



The higher the cohesion, the better, because the modules work together. If cohesion is low, the application would send too many communications back and forth between the services, causing degraded performance and scalability.
Two components are loosely coupled when they are not interdependent, i.e., if they can function without the other and if any change in one component wouldn't break the functionality of the other. Loosely coupled components in an application should be easy to test because the component is isolatable.


2. Define the scope properly
You should define the functionality of a microservice, describing what it is intended to do. The scope of a microservice corresponds to the requirement of an independent business module. It's important to set a proper scope for each microservice in order to rationalize its size and define its boundaries.


3. Adhere to the Single Responsibility Principle
The Single Responsibility Principle states that a class should never have more than one reason for change. This principle is essential to designing a microservices-based application, because there should not be multiple responsibilities in a single microservice.


Create SOLID software
The term SOLID is a mnemonic acronym that corresponds to five design principles of software architecture:

Single responsibility
Open/closed
Liskov substitution
Interface segregation
Dependency inversion





4. Design for failure
One of the objectives of microservice architecture is to create fault-tolerant and resilient software systems. Failure or performance issues in one service should not affect other services. A memory leak, database connectivity problems or other issues in one microservice should not bring the entire application down.
Since the services in a microservices-based application are autonomous and independent, they can take advantage of the circuit breaker pattern, which is a means to cut off communication with one or more services that are down or experiencing errors.


5. Build around business capabilities
Each microservice should be designed to solve a business problem. The developer can use the appropriate technology stack for each business problem in each microservice. Unlike a monolithic application, you are not constrained to use a single best-fit homogenous technology stack for the whole architecture. This microservices design principle means developers should choose what's best and readily available for use in every component of the application.


6. Decentralize data
Unlike in monolithic applications, microservices each maintain their own copy of the data. In other words, each microservice has its own database. You should not set up multiple services to access or share the same database, since it defeats the purpose of autonomous microservice operation.
Data pertaining to a specific microservice is private to that service. Use APIs to let other services access a microservice's owned data. This design principle enforces centralized access control and enables the developers to implement audit logging and caching seamlessly. Aim for one or two database tables per service.



Compare monolithic and microservices architecture
  






7. Gear up process automation
A microservices design can deploy in several units, which the application team must manage. Automate the deployment process for microservices-based components via smart iterative release tooling, such as a CI/CD pipeline, potentially coupled with a DevOps culture.


8. Enable interservice communication
When you migrate an existing monolithic application to microservices, you must break apart many interrelated components; these services need a way to communicate. Microservices applications also enable diverse programming languages and approaches, as explained in the fifth microservices design principle, so an application might have services built with different technologies communicating with each other. APIs make it all work.
When you set up microservices APIs, abstract the implementation details of how a service works and only expose API methods to enable external access to the service. In this setup, a microservice can scale independently.


9. Monitor constantly
Microservices in production are distributed and interrelated. It is daunting to manually discover and identify errors. Instead, use an automated monitoring system that can track performance constantly. As part of the microservices design and deployment process, select a tool or set of tools that captures and analyzes data on services' performance, and generates useful metrics.


10. Manage traffic
Traffic to microservices in an application differs from one to the next. One service might have huge traffic while another is low-demand on the network. In each kind of traffic scenario, performance is an important factor. Take advantage of autoscaling and circuit breaker patterns to maximize performance.


Next Steps
Test your knowledge of microservices architectures
An intro to the 5 SOLID principles of object-oriented design







			Related Resources


The Forrester Wave: Enterprise Architecture Management Suites, Q1 2021
–SoftwareAG






Dig Deeper on Enterprise architecture management



8 fundamental microservices security best practices




By: Joydip Kanjilal




An A-to-Z guide to a microservices architecture transition




By: Stephen Bigelow




A quick rundown of multi-runtime microservices architecture




By: Joydip Kanjilal




Why microservices and IoT apps are perfect together




By: Joydip Kanjilal












Sponsored News


Building portable applications can help Indian firms avoid cloud lock-in
–VMware


One of the Keys to Digital Transformation Success:  Enhancing the Customer and ...
–Dell Technologies


Eliminating the App Learning Curve for Users Speeds Up Digital Transformation
–Citrix

See More






			Related Content


Divide and conquer in software architecture
– ComputerWeekly.com


The vicious cycle of circular dependencies in ...
– SearchAppArchitecture


An A-to-Z guide to a microservices architecture ...
– SearchAppArchitecture
















Latest TechTarget resources



							Software Quality





							Cloud Computing





							Java











SearchSoftwareQuality




Implement reliability testing methods, tools for better dev
Reliability testing can play an integral role in software development. Here are some methods and tools to incorporate into your ...



GitHub math support in Markdown useful but tardy
GitHub math support in Markdown took eight years to arrive. Had the feature been released in 2014, a wider audience might have ...



The ins and outs of low-code application testing
When teams use low-code for application development, it can save time and money. But don't neglect testing for potential issues ...






SearchCloudComputing




Implement these 4 AWS Organizations best practices
To successfully use AWS Organizations, admins must grasp key concepts related to organizational units, service control policies, ...



How to deploy an EKS cluster using Terraform
Terraform benefits include scalability, repeatable infrastructure and cost efficiency. Follow this step-by-step tutorial to learn...



Cost savings among the biggest cloud fallacies
Experts at the MIT Sloan CIO Symposium described the advantages that justify the high cost of moving to the cloud while ...






TheServerSide.com




Agile versus Scrum: What's the difference?
What's the difference between Agile and Scrum? What are their similarities? Learn how to compare and contrast these two popular ...



How to communicate effectively in the workplace
Don't bury the lead. Grab your audience's attention early. Be graceful when others disagree. These and other tips will help you ...



Either log or rethrow Java exceptions, but never do both
When an exception occurs in your Java code, you can log it or you can rethrow it -- but don't do both. Here's why you must avoid ...















About Us
Editorial Ethics Policy
Meet The Editors
Contact Us
Advertisers
Business Partners
Media Kit
Corporate Site


Contributors
Reprints
Answers
Definitions
E-Products
Events
Features


Guides
Opinions
Photo Stories
Quizzes
Tips
Tutorials
Videos




All Rights Reserved, 
Copyright 2019 - 2022, TechTarget


Privacy Policy



Cookie Preferences 



Do Not Sell My Personal Info












Close





