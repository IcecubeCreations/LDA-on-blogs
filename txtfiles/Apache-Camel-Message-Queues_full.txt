


Apache Camel - Message Queues




















 Home


 Coding Ground


 Jobs


 Whiteboard


 Tools


 Business















 Teach with us


 
 
 
 
 








 













Login





Category 


 Academic Tutorials
 Big Data & Analytics 
 Computer Programming 
 Computer Science 
 Databases 
 DevOps 
 Digital Marketing 
 Engineering Tutorials 
 Exams Syllabus 
 Famous Monuments 
 GATE Exams 
 Latest Technologies 
 Machine Learning 
 Mainframe Development 
 Management Tutorials 
 Mathematics Tutorials
 Microsoft Technologies 
 Misc tutorials 
 Mobile Development 
 Java Technologies 
 Python Technologies 
 SAP Tutorials 
 Programming Scripts 
 Selected Reading 
 Software Quality 
 Soft Skills 
 Telecom Tutorials 
 UPSC IAS Exams 
 Web Development 
 Sports Tutorials 
 XML Technologies 
 Multi-Language
 Interview Questions



















Prime Packs


Courses


eBooks


Library


 Q/A




Login













Apache Camel Tutorial
Apache Camel - Home
Apache Camel - Introduction
Apache Camel - Overview
Apache Camel - Features
Apache Camel - Architecture
Apache Camel - CamelContext
Apache Camel - Endpoints
Apache Camel - Components
Apache Camel - Message Queues
Apache Camel - Project
Using Camel with Spring
Apache Camel Useful Resources
Apache Camel - Quick Guide
Apache Camel - Useful Resources
Apache Camel - Discussion


Selected Reading
UPSC IAS Exams Notes
Developer's Best Practices
Questions and Answers
Effective Resume Writing
HR Interview Questions
Computer Glossary
Who is Who













Apache Camel - Message Queues


Advertisements








 Previous Page


Next Page  



Most of the integration projects use messaging as it helps in creating loosely coupled application architecture. Messaging can be either synchronous or asynchronous. JMS supports both point-to-point and publish-subscribe models. You use a Queue for point-to-point and Topic for a publish-subscribe model. On a Java platform, JMS - Java Messaging Service provides an interface to a messaging server. Apache activeMQ is one such open source JMS provider. Camel does not ship with a JMS provider; however, it can be configured to use activeMQ. To use this component, you need to include the following jars in your project - activemq, camel-spring, and camel-jms.
The following code snippet shows how to configure Camel for activeMQ.

<bean id = "jms" class = "org.apache.camel.component.jms.JmsComponent">
   <property name = "connectionFactory">
      <bean class="org.apache.activemq.ActiveMQConnectionFactory">
         <property name = "orderQueue" value = "tcp://localhost:61000" />
      </bean>
   </property>
</bean>

Here, the Camel application will start listening to a queue called orderQueue. The queue itself is set up in the activeMQ messaging server running on the local host and listing to port 61000. Once this is done, your application can send or receive message to this queue from any of the endpoints defined in your application.
Finally, it is time now to put everything together in a project to get a deeper understanding of how Camel applications are created.

 Previous Page
 Print Page
Next Page  


Advertisements








































 About us
  Refund Policy
 Terms of use
  Privacy Policy
 FAQ's
 Contact

© Copyright 2022. All Rights Reserved.



We make use of cookies to improve our user experience. By using this website, you agree with our Cookies Policy.
						Agree
Learn more














