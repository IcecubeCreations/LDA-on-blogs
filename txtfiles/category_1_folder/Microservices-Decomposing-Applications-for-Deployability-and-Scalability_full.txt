pattern_1
decompose
component_1
for
quality_attribute_1
and
quality_attribute_2
bt
live
webinar
and
q&a
connector_1
technology_1
on
technology_2
technology_3
for
real
time
component_2
live
webinar
26th
register
now
close
toggle
navigation
facilitate
the
technology_4
of
knowledge
and
innovation
in
professional
development
english
edition
english
edition
chinese
edition
japanese
edition
french
edition
contribute
search
sign
up
login
password
forget
password
infoq
account
back
to
login
resend
activation
back
to
login
login
with
twitter
t
have
an
infoq
account
sign
up
notifications1
login
to
unlock
infoq
s
feature
stay
up
to
date
and
connector_2
connector_3
your
favorite
content
follow
your
favorite
editor
and
peer
sign
up
login
t
have
an
account
register
here
logo
back
to
homepage
apr
unique
visitor
news
presentation
podcast
guide
topic
development
technology_5
technology_6
technology_7
technology_8
technology_9
go
technology_10
technology_11
feature
in
development
reproducible
development
with
container
avdi
grimm
describe
the
future
of
development
which
be
already
here
connector_2
a
tour
of
a
devcontainer
and
contrast
it
with
a
deployment
container
all
in
development
architecture
&
design
architecture
requirement_1
architecture
quality_attribute_2
requirement_2
design
requirement_3
study
pattern_1
component_3
mesh
pattern_2
quality_attribute_3
feature
in
architecture
&
design
oren
eini
on
technology_12
include
consistency
guarantee
and
technology_8
a
the
implementation
technology_13
wesley
reisz
talk
to
oren
eini
about
the
history
of
technology_12
technology_12
be
a
fully
pattern_3
technology_14
document
component_4
that
connector_4
both
cp
and
ap
guarantee
at
different
time
the
two
discus
those
cp
ap
quality_attribute_4
component_5
challenge
the
choice
of
implementation
technology_13
technology_15
and
the
current
plan
for
technology_12
which
include
a
component_6
side
sharding
implementation
all
in
architecture
design
requirement_4
ml
&
connector_data_1
engineering
requirement_5
requirement_6
technology_14
component_4
connector_data_1
requirement_7
connector_1
feature
in
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
katharine
jarmul
discus
utilize
quality_attribute_4
connector_data_1
science
and
requirement_6
component_7
such
a
federate
to
from
connector_data_1
at
the
edge
all
in
requirement_4
ml
connector_data_1
eng
culture
&
agile
diversity
leadership
lean
kanban
personal
growth
scrum
sociocracy
craftmanship
team
collaboration
test
ux
feature
in
culture
&
how
to
run
your
technology_16
department
a
coach
have
find
what
i
think
be
my
connector_5
a
an
agile
coach
i
take
the
tough
decision
to
move
sideways
into
technology_16
requirement_8
in
the
hope
of
use
what
i’d
to
one
day
run
my
own
department
i
believe
that
come
from
coach
would
allow
me
to
see
thing
others
could
not
and
create
something
special
time
will
tell
if
i
have
succeed
this
be
the
story
of
where
i
be
up
to
so
far
all
in
culture
devops
infrastructure
continuous
delivery
automation
container
requirement_9
observability
feature
in
devops
panel
quality_attribute_5
component_5
the
panelist
discus
the
quality_attribute_3
for
the
supply
chain
and
quality_attribute_3
risk
measurement
all
in
devops
eventsnew
helpful
connector_6
about
infoq
infoq
editor
contribute
about
c4media
diversity
choose
your
technology_13
en
中文
日本
fr
infoq
live
how
requirement_9
architecture
achieve
cost
connector_7
improve
quality_attribute_6
&
connector_8
requirement_10
register
now
infoq
live
how
to
migrate
an
component_8
to
serverless
and
what
be
the
common
mistake
to
avoid
register
now
qcon
san
francisco
understand
the
emerge
trend
you
should
pay
attention
to
attend
in
person
on
oct
infoq
homepage
pattern_1
decompose
component_1
for
quality_attribute_1
and
quality_attribute_2
architecture
&
design
jdconf
’22
requirement_9
requirement_11
technology_5
technology_17
configuration
graalvm
technology_18
and
more
watch
all
component_9
on
demand
pattern_1
decompose
component_1
for
quality_attribute_1
and
quality_attribute_2
leia
em
português
bookmark
min
connector_9
by
chris
richardson
connector_10
for
infoq
join
a
of
expert
increase
your
visibility
grow
your
career
more
this
describe
the
increasingly
popular
pattern_4
architecture
pattern_2
the
big
idea
behind
pattern_1
be
to
architect
large
complex
and
long
live
component_1
a
a
set
of
cohesive
component_10
that
quality_attribute_7
over
time
the
term
pattern_1
strongly
suggest
that
the
component_10
should
be
small
some
in
the
even
advocate
build
loc
component_3
however
while
it’s
desirable
to
have
small
component_3
that
should
not
be
the
goal
instead
you
should
aim
to
decompose
your
component_11
into
component_10
to
solve
the
kind
of
development
and
deployment
problem
discus
below
some
component_10
might
indeed
be
tiny
where
a
others
might
be
quite
large
the
essence
of
the
pattern_4
architecture
be
not
the
concept
of
a
quality_attribute_4
component_11
be
very
old
the
pattern_4
architecture
also
resemble
technology_19
relate
sponsor
content
relate
sponsor
protect
identity
quality_attribute_5
digital
component_3
enable
quality_attribute_8
and
quality_attribute_5
component_12
connector_11
to
web
and
requirement_12
component_8
start
free
trial
it
have
even
be
connector_12
lightweight
or
fine
grain
technology_19
and
indeed
one
way
to
think
about
pattern_4
architecture
be
that
it’s
pattern_5
without
the
commercialization
and
perceive
baggage
of
ws*
and
esb
despite
not
be
an
entirely
novel
idea
the
pattern_4
architecture
be
still
worthy
of
discussion
since
it
be
different
than
traditional
pattern_5
and
more
importantly
it
solve
many
of
the
problem
that
many
organization
currently
suffer
from
in
this
you
will
about
the
motivation
for
use
the
pattern_4
architecture
and
how
it
compare
with
the
more
traditional
monolithic
architecture
we
discus
the
benefit
and
drawback
of
pattern_1
you
will
how
to
solve
some
of
the
key
technical
challenge
with
use
the
pattern_4
architecture
include
inter
component_3
connector_13
and
quality_attribute_4
connector_data_1
requirement_8
the
sometimes
evil
monolith
since
the
early
day
of
develop
component_1
for
the
web
the
most
widely
use
requirement_1
component_8
architecture
have
be
one
that
package
all
the
application’s
component_6
side
component_13
into
a
single
unit
many
requirement_1
technology_5
component_1
consist
of
a
single
war
or
ear
the
same
be
true
of
other
component_1
connector_10
in
other
technology_13
such
a
technology_20
and
even
technology_21
let’s
imagine
for
example
that
you
be
build
an
online
component_14
that
take
order
from
requirement_13
verify
inventory
and
quality_attribute_9
credit
and
ship
them
it’s
quite
likely
that
you
would
build
an
component_8
the
one
show
in
figure
figure
the
monolithic
architecture
the
component_8
consist
of
several
component_13
include
the
storefront
ui
which
connector_4
the
component_12
along
with
component_10
for
manage
the
technology_16
catalog
component_2
order
and
manage
the
customer’s
account
these
component_10
connector_14
a
domain
component_7
consist
of
component_15
such
a
technology_16
order
and
requirement_13
despite
have
a
logically
modular
design
the
component_8
be
quality_attribute_10
a
a
monolith
for
example
if
you
be
use
technology_5
then
the
component_8
would
consist
of
a
single
war
run
on
a
web
container
such
a
technology_22
the
technology_23
version
of
the
component_8
would
consist
of
a
single
directory
hierarchy
quality_attribute_10
use
either
for
example
phusion
technology_24
on
technology_2
technology_25
or
technology_26
on
technology_22
this
so
connector_data_2
monolithic
architecture
have
a
number
of
benefit
monolithic
component_1
be
quality_attribute_11
to
develop
since
ides
and
other
development
technology_27
be
orient
around
develop
a
single
component_8
they
be
easy
to
test
since
you
need
to
launch
the
one
component_8
monolithic
component_1
be
also
quality_attribute_11
to
quality_attribute_10
since
you
have
to
copy
the
deployment
unit
–
a
or
directory
–
to
a
component_16
run
the
appropriate
kind
of
component_6
this
approach
work
well
for
relatively
small
component_8
however
the
monolithic
architecture
become
unwieldy
for
complex
component_8
a
large
monolithic
component_8
can
be
difficult
for
developer
to
understand
and
maintain
it
be
also
an
obstacle
to
frequent
deployment
to
quality_attribute_10
connector_15
to
one
component_8
component_17
you
have
to
build
and
quality_attribute_10
the
entire
monolith
which
can
be
complex
risky
time
connector_16
require
the
coordination
of
many
developer
and
connector_data_3
in
long
test
cycle
a
monolithic
architecture
also
make
it
difficult
to
trial
and
adopt
technology_28
it’s
difficult
for
example
to
try
out
a
infrastructure
technology_29
without
rewrite
the
entire
component_8
which
be
risky
and
impractical
consequently
you
be
often
stick
with
the
technology_28
choice
that
you
make
at
the
start
of
the
project
in
other
word
the
monolithic
architecture
doesn’t
quality_attribute_12
to
support
large
long
live
component_8
decompose
component_1
into
component_10
fortunately
there
be
other
architectural
style
that
do
quality_attribute_12
the
book
the
art
of
quality_attribute_2
describe
a
really
useful
three
dimension
quality_attribute_2
component_7
the
quality_attribute_12
cube
which
be
show
in
figure
figure
the
quality_attribute_12
cube
in
this
component_7
the
commonly
use
approach
of
quality_attribute_13
an
component_8
by
run
multiple
identical
copy
of
the
component_8
behind
a
load
balancer
be
a
x
technology_30
quality_attribute_12
that’s
a
great
way
of
improve
the
capacity
and
the
quality_attribute_14
of
an
component_8
when
use
z
technology_30
quality_attribute_13
each
component_6
run
an
identical
copy
of
the
in
this
respect
it’s
similar
to
x
technology_30
quality_attribute_12
the
big
difference
be
that
each
component_6
be
responsible
for
only
a
subset
of
the
connector_data_1
some
component_17
of
the
component_11
be
responsible
for
connector_17
each
connector_data_4
to
the
appropriate
component_6
one
commonly
use
connector_17
criterion
be
an
attribute
of
the
connector_data_4
such
a
the
primary
key
of
the
component_18
be
connector_11
i
e
sharding
another
common
connector_17
criterion
be
the
requirement_13
type
for
example
an
component_8
might
provide
pay
requirement_13
with
a
high
sla
than
free
requirement_13
by
connector_17
their
connector_data_5
to
a
different
set
of
component_19
with
more
capacity
z
technology_30
quality_attribute_12
x
technology_30
quality_attribute_12
improve
the
application’s
capacity
and
quality_attribute_14
however
neither
approach
solve
the
problem
of
increasing
development
and
component_8
complexity
to
solve
those
problem
we
need
to
apply
y
technology_30
quality_attribute_12
the
3rd
dimension
to
quality_attribute_13
be
y
technology_30
quality_attribute_13
or
functional
decomposition
where
a
z
technology_30
quality_attribute_13
split
thing
that
be
similar
y
technology_30
quality_attribute_13
split
thing
that
be
different
at
the
component_8
tier
y
technology_30
quality_attribute_13
split
a
monolithic
component_8
into
a
set
of
component_3
each
component_3
connector_4
a
set
of
relate
requirement_14
such
a
order
requirement_8
requirement_13
requirement_8
etc
decide
how
to
component_20
a
component_11
into
a
set
of
component_10
be
very
much
an
art
but
there
be
number
of
strategy
that
can
help
one
approach
be
to
component_20
component_10
by
verb
or
use
requirement_3
for
example
late
on
you
will
see
that
the
component_20
online
component_14
have
a
checkout
ui
component_3
which
connector_4
the
ui
for
the
checkout
use
requirement_3
another
partitioning
approach
be
to
component_20
the
component_11
by
noun
or
resource
this
kind
of
component_3
be
responsible
for
all
that
operate
on
component_18
resource
of
a
give
type
for
example
late
on
you
will
see
how
it
make
sense
for
the
online
component_14
to
have
a
catalog
component_3
which
manage
the
catalog
of
technology_16
ideally
each
component_3
should
have
only
a
small
set
of
responsibility
uncle
bob
martin
talk
pdf
about
design
use
the
single
responsible
principle
srp
the
srp
define
a
responsibility
of
a
a
reason
to
connector_18
and
that
a
should
only
have
one
reason
to
connector_18
it
make
sense
to
apply
the
srp
to
component_3
design
a
well
another
analogy
that
help
with
component_3
design
be
the
design
of
unix
utility
unix
provide
a
large
number
of
utility
such
a
grep
cat
and
find
each
utility
do
exactly
one
thing
often
exceptionally
well
and
can
be
combine
with
other
utility
use
a
shell
script
to
perform
complex
connector_data_6
it
make
sense
to
component_7
component_10
on
unix
utility
and
create
single
component_3
it’s
important
to
note
that
the
goal
of
decomposition
be
not
to
have
tiny
e
g
loc
a
some
argue
component_10
simply
for
the
sake
of
it
instead
the
goal
be
to
connector_19
the
problem
and
limitation
of
the
monolithic
architecture
describe
above
some
component_10
could
very
well
be
tiny
but
others
will
be
substantially
large
if
we
apply
y
technology_30
decomposition
to
the
example
component_8
we
connector_2
the
architecture
show
in
figure
figure
the
pattern_4
architecture
the
decompose
component_8
consist
of
various
frontend
component_10
that
connector_20
different
part
of
the
component_12
and
multiple
backend
component_3
the
front
component_3
include
the
catalog
ui
which
connector_4
technology_16
search
and
browse
and
checkout
ui
which
connector_4
the
shop
cart
and
the
checkout
component_2
the
backend
component_10
include
the
same
logical
component_10
that
be
describe
at
the
start
of
this
we
have
turn
each
of
the
application’s
logical
component_13
into
a
standalone
component_3
let’s
look
at
the
consequence
of
do
that
benefit
and
drawback
of
a
pattern_4
architecture
this
architecture
have
a
number
of
benefit
first
each
pattern_4
be
relatively
small
the
be
easy
for
a
developer
to
understand
the
small
base
doesn’t
slow
down
the
ide
make
developer
more
productive
also
each
component_3
typically
start
a
lot
fast
than
a
large
monolith
which
again
make
developer
more
productive
and
quality_attribute_15
up
deployment
second
each
component_3
can
be
quality_attribute_10
independently
of
other
component_3
if
the
developer
responsible
for
a
component_3
need
to
quality_attribute_10
a
connector_18
that’s
local
to
that
component_3
they
do
not
need
to
coordinate
with
other
developer
they
can
simply
quality_attribute_10
their
connector_18
a
pattern_4
architecture
make
continuous
deployment
feasible
third
each
component_3
can
be
quality_attribute_12
independently
of
other
component_10
use
x
technology_30
cloning
and
z
technology_30
partitioning
moreover
each
component_3
can
be
quality_attribute_10
on
hardware
that
be
best
suit
to
it
resource
requirement
this
be
quite
different
than
when
use
a
monolithic
architecture
where
component_13
with
wildly
different
resource
requirement
–
e
g
cpu
intensive
vs
memory
intensive
–
must
be
quality_attribute_10
together
the
pattern_4
architecture
make
it
easy
to
quality_attribute_12
development
you
can
organize
the
development
effort
around
multiple
small
e
g
two
pizza
team
each
team
be
solely
responsible
for
the
development
and
deployment
of
a
single
component_3
or
a
collection
of
relate
component_3
each
team
can
develop
quality_attribute_10
and
quality_attribute_12
their
component_3
independently
of
all
of
the
other
team
the
pattern_4
architecture
also
improve
fault
isolation
for
example
a
memory
leak
in
one
component_3
only
affect
that
component_3
other
component_10
will
continue
to
handle
connector_data_5
normally
in
comparison
one
misbehave
component_17
of
a
monolithic
architecture
will
bring
down
the
entire
component_11
last
but
not
least
the
pattern_4
architecture
eliminate
any
long
term
commitment
to
a
technology_28
technology_31
in
principle
when
develop
a
component_3
the
developer
be
free
to
pick
whatever
technology_13
and
technology_29
be
best
suit
for
that
component_3
of
in
many
organization
it
make
sense
to
restrict
the
choice
but
the
key
point
be
that
you
aren’t
constrain
by
past
decision
moreover
because
the
component_10
be
small
it
become
practical
to
rewrite
them
use
quality_attribute_16
technology_13
and
technology_28
it
also
mean
that
if
the
trial
of
a
technology_28
fail
you
can
throw
away
that
work
without
risk
the
entire
project
this
be
quite
different
than
when
use
a
monolithic
architecture
where
your
initial
technology_28
choice
severely
constrain
your
ability
to
use
different
technology_13
and
technology_29
in
the
future
drawback
of
no
technology_28
be
a
silver
bullet
and
the
pattern_4
architecture
have
a
number
of
significant
drawback
and
issue
first
developer
must
deal
with
the
additional
complexity
of
create
a
quality_attribute_4
component_11
developer
must
connector_20
an
inter
component_2
connector_13
mechanism
connector_21
use
requirement_3
that
span
multiple
component_10
without
use
quality_attribute_4
transaction
be
difficult
ides
and
other
development
technology_27
be
focus
on
build
monolithic
component_1
and
t
provide
explicit
support
for
develop
quality_attribute_4
component_8
connector_22
automate
test
that
involve
multiple
component_10
be
challenge
these
be
all
issue
that
you
don’t
have
to
deal
with
in
a
monolithic
architecture
the
pattern_4
architecture
also
introduce
significant
operational
complexity
there
be
many
more
move
part
–
multiple
instance
of
different
type
of
component_3
–
that
must
be
manage
in
production
to
do
this
successful
you
need
a
high
level
of
automation
either
home
grow
or
a
paas
technology_28
such
a
netflix
asgard
and
relate
component_17
or
an
off
the
shelf
paas
such
a
pivotal
requirement_9
foundry
also
quality_attribute_10
feature
that
span
multiple
component_10
require
careful
coordination
between
the
various
development
team
you
have
to
create
a
rollout
plan
that
order
component_3
deployment
base
on
the
connector_23
between
component_3
that’s
quite
different
than
when
use
a
monolithic
architecture
where
you
can
easily
quality_attribute_10
connector_data_7
to
multiple
component_13
atomically
another
challenge
with
use
the
pattern_4
architecture
be
decide
at
what
point
during
the
lifecycle
of
the
component_8
you
should
use
this
architecture
when
develop
the
first
version
of
an
component_8
you
often
do
not
have
the
problem
that
this
architecture
solve
moreover
use
an
elaborate
quality_attribute_4
architecture
will
slow
down
development
this
can
be
a
major
dilemma
for
startup
whose
big
challenge
be
often
how
to
rapidly
quality_attribute_7
the
requirement_15
component_7
and
accompany
component_8
use
y
technology_30
split
might
make
it
much
more
difficult
to
iterate
rapidly
late
on
however
when
the
challenge
be
how
to
quality_attribute_12
and
you
need
to
use
functional
decomposition
then
tangle
connector_23
might
make
it
difficult
to
decompose
your
monolithic
component_8
into
a
set
of
component_3
because
of
these
issue
adopt
a
pattern_4
architecture
should
not
be
undertake
lightly
however
for
component_1
that
need
to
quality_attribute_12
such
a
a
component_21
face
web
component_8
or
pattern_6
component_8
it
be
usually
the
right
choice
well
sit
such
a
ebay
pdf
technology_32
groupon
and
gilt
have
all
quality_attribute_7
from
a
monolithic
architecture
to
a
pattern_4
architecture
now
that
we
have
look
at
the
benefit
and
drawback
let’s
look
at
a
couple
of
key
design
issue
within
a
pattern_4
architecture
begin
with
connector_13
mechanism
within
the
component_8
and
between
the
component_8
and
it
component_22
connector_13
mechanism
in
a
pattern_4
architecture
in
a
pattern_4
architecture
the
pattern_2
of
connector_13
between
component_23
and
the
component_8
a
well
a
between
component_8
component_17
be
different
than
in
a
monolithic
component_8
let’s
first
look
at
the
issue
of
how
the
application’s
component_23
connector_24
with
the
pattern_1
after
that
we
will
look
at
connector_13
mechanism
within
the
component_8
component_24
gateway
pattern_2
in
a
monolithic
architecture
component_23
of
the
component_8
such
a
web
browser
and
requirement_11
component_8
make
technology_33
connector_data_5
via
a
load
balancer
to
one
of
n
identical
instance
of
the
component_8
but
in
a
pattern_4
architecture
the
monolith
have
be
replace
by
a
collection
of
component_3
consequently
a
key
question
we
need
to
answer
be
what
do
the
component_23
connector_24
with
an
component_8
component_22
such
a
a
requirement_11
requirement_12
component_8
could
make
pattern_7
technology_33
connector_data_5
to
the
individual
component_10
a
show
in
figure
figure
connector_5
component_10
directly
on
the
surface
this
might
seem
attractive
however
there
be
likely
to
be
a
significant
mismatch
in
granularity
between
the
component_25
of
the
individual
component_10
and
connector_data_1
require
by
the
component_22
for
example
display
one
web
component_26
could
potentially
require
connector_data_8
to
large
number
of
component_3
technology_32
for
example
describe
how
some
component_26
require
connector_data_8
to
100+
component_3
make
that
many
connector_data_4
even
over
a
high
quality_attribute_15
internet
connector_25
alone
a
lower
bandwidth
high
quality_attribute_17
requirement_12
requirement_16
would
be
very
inefficient
and
connector_data_3
in
a
poor
requirement_17
a
much
quality_attribute_16
approach
be
for
component_23
to
make
a
small
number
of
connector_data_5
per
component_26
perhaps
a
few
a
one
over
the
internet
to
a
front
end
component_6
a
an
component_24
gateway
which
be
show
in
figure
figure
component_24
gateway
the
component_24
gateway
sit
between
the
application’s
component_23
and
the
pattern_1
it
provide
component_25
that
be
quality_attribute_18
to
the
component_22
the
component_24
gateway
provide
a
coarse
grain
component_24
to
requirement_12
component_23
and
a
fine
grain
component_24
to
desktop
component_23
that
use
a
high
requirement_2
requirement_16
in
this
example
the
desktop
component_23
make
multiple
connector_data_5
to
connector_26
connector_data_9
about
a
technology_16
where
a
a
requirement_12
component_22
make
a
single
connector_data_4
the
component_24
gateway
handle
incoming
connector_data_5
by
make
connector_data_5
to
some
number
of
pattern_1
over
the
high
requirement_2
lan
netflix
for
example
describe
how
each
connector_data_4
fan
out
to
on
average
six
backend
component_3
in
this
example
fine
grain
connector_data_5
from
a
desktop
component_22
be
simply
proxied
to
the
correspond
component_3
whereas
each
coarse
grain
connector_data_4
from
a
requirement_12
component_22
be
handle
by
aggregate
the
connector_data_10
of
connector_5
multiple
component_3
not
only
do
the
component_24
gateway
optimize
connector_13
between
component_23
and
the
component_8
but
it
also
pattern_8
the
detail
of
the
pattern_1
this
enable
the
pattern_1
to
quality_attribute_7
without
impact
the
component_22
for
example
two
pattern_1
might
be
merge
another
pattern_4
might
be
component_20
into
two
or
more
component_3
only
the
component_24
gateway
need
to
be
update
to
reflect
these
connector_18
the
component_23
be
unaffected
now
that
we
have
look
at
how
the
component_24
gateway
mediate
between
the
component_8
and
it
component_22
let’s
now
look
at
how
to
connector_20
connector_13
between
pattern_1
inter
component_3
connector_13
mechanism
another
major
difference
with
the
pattern_4
architecture
be
how
the
different
component_13
of
the
component_8
connector_24
in
a
monolithic
component_8
component_13
connector_data_2
one
another
via
regular
connector_data_2
but
in
a
pattern_4
architecture
different
component_10
run
in
different
component_2
consequently
component_10
must
use
an
inter
component_2
connector_13
pattern_9
to
connector_27
pattern_10
technology_33
there
be
two
approach
to
inter
component_2
connector_13
in
a
pattern_4
architecture
one
option
be
to
a
pattern_10
technology_33
base
mechanism
such
a
pattern_11
or
technology_34
this
be
a
quality_attribute_11
and
familiar
pattern_9
mechanism
it’s
firewall
friendly
so
it
work
across
the
internet
and
connector_21
the
connector_data_4
connector_data_11
style
of
connector_13
be
easy
the
downside
of
technology_33
be
that
it
doesn’t
support
other
pattern_2
of
connector_13
such
a
publish
subscribe
another
limitation
be
that
both
the
component_22
and
the
component_6
must
be
simultaneously
quality_attribute_9
which
be
not
always
the
requirement_3
since
quality_attribute_4
component_5
be
prone
to
partial
failure
also
an
technology_33
component_22
need
to
the
component_27
and
the
port
of
the
component_6
while
this
sound
quality_attribute_11
it’s
not
entirely
straightforward
especially
in
a
requirement_9
deployment
that
u
auto
quality_attribute_12
where
component_3
instance
be
ephemeral
component_1
need
to
use
a
component_3
discovery
mechanism
some
component_1
use
a
component_3
registry
such
a
technology_2
technology_35
or
netflix
eureka
in
other
component_8
component_10
must
register
with
a
load
balancer
such
a
an
internal
elb
in
an
vpc
pattern_12
pattern_13
an
alternative
to
pattern_10
technology_33
be
an
pattern_12
connector_data_12
base
mechanism
such
a
an
technology_36
base
connector_data_12
pattern_14
this
approach
have
a
number
of
benefit
it
decouple
connector_data_12
component_28
from
connector_data_12
component_21
the
connector_data_12
pattern_14
will
buffer
connector_data_13
until
the
component_21
be
able
to
component_2
them
component_28
be
completely
unaware
of
the
component_21
the
component_29
simply
talk
to
the
connector_data_12
pattern_14
and
do
not
need
to
use
a
component_3
discovery
mechanism
connector_data_12
base
connector_13
also
support
a
variety
of
connector_13
pattern_2
include
one
way
connector_data_5
and
publish
subscribe
one
downside
of
use
pattern_13
be
need
a
connector_data_12
pattern_14
which
be
yet
another
move
part
that
to
the
complexity
of
the
component_11
another
downside
be
that
connector_data_4
connector_data_11
style
connector_13
be
not
a
natural
fit
there
be
pro
and
con
of
both
approach
component_1
be
likely
to
use
a
mixture
of
the
two
for
example
in
the
next
section
which
discus
how
to
solve
connector_data_1
requirement_8
problem
that
arise
in
a
component_20
architecture
you
will
see
how
both
technology_33
and
pattern_13
be
use
decentralized
connector_data_1
requirement_8
a
consequence
of
decompose
the
component_8
into
component_10
be
that
the
component_4
be
also
component_20
to
ensure
loose
couple
each
component_3
have
it
own
component_4
schema
moreover
different
component_10
might
use
different
type
of
component_4
–
a
so
connector_data_2
polyglot
persistence
architecture
for
example
a
component_3
that
need
acid
transaction
might
use
a
relational
component_4
whereas
a
component_3
that
be
manipulate
a
social
requirement_16
might
use
a
graph
component_4
partitioning
the
component_4
be
essential
but
we
now
have
a
problem
to
solve
how
to
handle
those
connector_data_5
that
connector_11
connector_data_1
owned
by
multiple
component_3
let’s
first
look
at
how
to
handle
connector_9
connector_data_5
and
then
look
at
update
connector_data_4
handle
connector_28
for
example
consider
an
online
component_14
where
each
requirement_13
have
a
credit
limit
when
a
requirement_13
attempt
to
place
an
order
the
component_11
must
verify
that
the
sum
of
all
open
order
would
not
exceed
their
credit
limit
it
would
be
trivial
to
connector_20
this
requirement_15
rule
in
a
monolithic
component_8
but
it’s
much
more
difficult
to
connector_20
this
connector_29
in
a
component_11
where
requirement_13
be
manage
by
the
customerservice
and
order
be
manage
by
the
orderservice
somehow
the
orderservice
must
connector_11
the
credit
limit
maintain
by
the
customerservice
one
solution
be
for
the
orderservice
to
connector_26
the
credit
limit
by
make
an
pattern_15
connector_data_2
to
the
customerservice
this
approach
be
quality_attribute_11
to
connector_20
and
ensure
that
the
orderservice
always
have
the
most
current
credit
limit
the
downside
be
that
it
reduce
quality_attribute_14
because
the
customerservice
must
be
run
in
order
to
place
an
order
it
also
increase
response_time
because
of
the
extra
pattern_15
connector_data_2
another
approach
be
for
the
orderservice
to
component_14
a
copy
of
the
credit
limit
this
eliminate
the
need
to
make
a
connector_data_4
to
the
customerservice
and
so
improve
quality_attribute_14
and
reduce
response_time
it
do
mean
however
that
we
must
connector_20
a
mechanism
to
update
the
orderservice’s
copy
of
the
credit
limit
whenever
it
connector_15
in
the
customerservice
handle
update
connector_data_5
the
problem
of
keep
the
credit
limit
up
to
date
in
orderservice
be
an
example
of
the
more
general
problem
of
handle
connector_data_5
that
update
connector_data_1
owned
by
multiple
component_3
quality_attribute_4
transaction
one
solution
of
be
to
use
quality_attribute_4
transaction
for
example
when
update
a
customer’s
credit
limit
the
customerservice
could
use
a
quality_attribute_4
transaction
to
update
both
it
credit
limit
and
the
correspond
credit
limit
maintain
by
the
orderservice
use
quality_attribute_4
transaction
would
ensure
that
the
connector_data_1
be
always
consistent
the
downside
of
use
them
be
that
it
reduce
component_11
quality_attribute_14
since
all
participant
must
be
quality_attribute_9
in
order
for
the
transaction
to
connector_30
moreover
quality_attribute_4
transaction
really
have
fall
out
of
favor
and
be
generally
not
support
by
modern
technology_31
e
g
rest
technology_14
component_4
etc
pattern_16
pattern_12
connector_data_7
the
other
approach
be
to
use
pattern_16
pattern_12
pattern_17
component_10
publish
announce
that
some
connector_data_1
have
connector_18
other
component_10
subscribe
to
those
and
update
their
connector_data_1
for
example
when
the
customerservice
connector_data_7
a
customer’s
credit
limit
it
publish
a
customercreditlimitupdatedevent
which
contain
the
requirement_13
and
the
credit
limit
the
orderservice
subscribe
to
these
and
connector_data_7
it
copy
of
the
credit
limit
the
flow
of
be
show
in
figure
figure
replicate
the
credit
limit
use
a
major
benefit
of
this
approach
be
that
component_28
and
component_30
of
the
be
decouple
not
only
do
this
simplify
development
but
compare
to
quality_attribute_4
transaction
it
improve
quality_attribute_14
if
a
component_21
isn’t
quality_attribute_9
to
component_2
an
then
the
connector_data_12
pattern_14
will
component_31
the
until
it
can
a
major
drawback
of
this
approach
be
that
it
requirement_18
consistency
for
quality_attribute_14
the
component_8
have
to
be
connector_10
in
a
way
that
can
tolerate
eventually
consistent
connector_data_1
developer
might
also
need
to
connector_20
compensate
transaction
to
perform
logical
rollback
despite
these
drawback
however
this
be
the
prefer
approach
for
many
component_8
refactoring
a
monolith
unfortunately
we
don’t
always
have
the
luxury
of
work
on
a
brand
greenfield
project
there
be
a
pretty
quality_attribute_16
chance
that
you
be
on
the
team
that’s
responsible
for
a
huge
scary
monolithic
component_8
and
every
day
you
be
deal
with
the
problem
describe
at
the
start
of
this
the
quality_attribute_16
news
be
that
there
be
technique
that
you
can
use
to
decompose
your
monolithic
component_8
into
a
set
of
component_3
first
stop
make
the
problem
bad
don’t
continue
to
connector_20
significant
requirement_14
by
to
the
monolith
instead
you
should
find
a
way
to
connector_20
requirement_14
a
a
standalone
component_3
a
show
in
figure
this
probably
won’t
be
easy
you
will
have
to
connector_10
messy
complex
glue
to
quality_attribute_19
the
component_3
with
the
monolith
but
it’s
a
quality_attribute_16
first
step
in
break
apart
the
monolith
figure
extract
a
component_3
second
identify
a
component_17
of
the
monolith
to
turn
into
a
cohesive
standalone
component_3
quality_attribute_16
candidate
for
extraction
include
component_13
that
be
constantly
connector_18
or
component_13
that
have
conflict
resource
requirement
such
a
large
in
memory
pattern_18
or
cpu
intensive
the
presentation
tier
be
also
another
quality_attribute_16
candidate
you
then
turn
the
component_17
into
a
component_3
and
connector_10
glue
to
quality_attribute_19
with
the
rest
of
the
component_8
once
again
this
will
probably
be
painful
but
it
enable
you
to
incrementally
migrate
to
a
pattern_4
architecture
summary
the
monolithic
architecture
pattern_2
be
a
commonly
use
pattern_2
for
build
requirement_1
component_8
it
work
reasonable
well
for
small
component_8
develop
test
and
quality_attribute_10
small
monolithic
component_1
be
relatively
quality_attribute_11
however
for
large
complex
component_8
the
monolithic
architecture
become
an
obstacle
to
development
and
deployment
continuous
delivery
be
difficult
to
do
and
you
be
often
permanently
lock
into
your
initial
technology_28
choice
for
large
component_8
it
make
more
sense
to
use
a
pattern_4
architecture
that
decompose
the
component_8
into
a
set
of
component_3
the
pattern_4
architecture
have
a
number
of
advantage
for
example
individual
component_10
be
easy
to
understand
and
can
be
develop
and
quality_attribute_10
independently
of
other
component_3
it
be
also
a
lot
easy
to
use
technology_13
and
technology_29
because
you
can
try
out
technology_28
one
component_3
at
a
time
a
pattern_4
architecture
also
have
some
significant
drawback
in
particular
component_1
be
much
more
complex
and
have
many
more
move
part
you
need
a
high
level
of
automation
such
a
a
paas
to
use
pattern_1
effectively
you
also
need
to
deal
with
some
complex
quality_attribute_4
connector_data_1
requirement_8
issue
when
develop
pattern_1
despite
the
drawback
a
pattern_4
architecture
make
sense
for
large
complex
component_1
that
be
quality_attribute_7
rapidly
especially
for
saas
style
component_8
there
be
various
strategy
for
incrementally
quality_attribute_7
an
exist
monolithic
component_8
to
a
pattern_4
architecture
developer
should
connector_20
requirement_14
a
a
standalone
component_3
and
connector_10
glue
to
quality_attribute_19
the
component_3
with
the
monolith
it
also
make
sense
to
iteratively
identify
component_13
to
extract
from
the
monolith
and
turn
into
component_3
while
the
evolution
be
not
easy
it’s
quality_attribute_16
than
try
to
develop
and
maintain
an
unwieldy
monolithic
component_8
about
the
author
chris
richardson
be
a
developer
and
architect
he
be
a
technology_5
champion
a
javaone
rock
star
and
the
author
of
pojos
in
action
which
describe
how
to
build
requirement_1
technology_5
component_1
with
pojos
and
technology_29
such
a
technology_18
and
technology_37
chris
be
also
the
founder
of
the
original
requirement_9
foundry
an
early
technology_5
paas
for
technology_38
he
consult
with
organization
to
improve
how
they
develop
and
quality_attribute_10
component_1
use
technology_28
such
a
requirement_9
computing
pattern_1
and
technology_14
twitter
@crichardson
inspire
by
this
content
connector_10
for
infoq
become
an
editor
for
infoq
be
one
of
the
best
decision
of
my
career
it
have
challenge
me
and
help
me
grow
in
so
many
way
we
technology_39
love
to
have
more
people
join
our
team
thomas
bettslead
editor
architecture
and
design
@infoq
senior
principal
engineer
connector_10
for
infoq
rate
this
adoption
style
author
this
content
be
in
the
requirement_1
architecture
topic
relate
topic
architecture
&
design
pattern_11
web
component_10
pattern_5
technology_5
collection
design
pattern_2
java8
requirement_1
architecture
technology_5
design
web
component_24
component_24
architecture
pattern_2
requirement_2
&
quality_attribute_2
relate
editorial
popular
across
infoq
go
requirement_11
with
technology_18
and
graalvm
why
you
should
care
about
architecture
technology_5
news
roundup
jeps
for
jdk
project
lilliput
milestone
technology_18
technology_29
quarkus
state
of
the
technology_5
ecosystem
report
from
relic
ml
technology_27
to
accelerate
your
work
with
cassie
breviu
release
technology_40
dns
private
resolver
in
preview
relate
content
quarkus
introduce
fine
grain
transaction
component_24
component_24
showdown
pattern_11
vs
graphql
vs
grpc
–
which
should
you
use
a
standardize
specification
drive
component_24
lifecycle
ballerina
for
full
technology_31
developer
a
guide
to
create
backend
component_25
you’re
do
it
wrong
it’s
not
about
connector_data_1
and
component_1
–
it’s
about
component_32
design
pattern_2
for
serverless
component_5
a
recipe
to
migrate
and
quality_attribute_12
monolith
in
the
requirement_9
airbnb
at
quality_attribute_12
quality_attribute_20
on
whether
i
have
coffee
or
not
your
component_8
be
high
risk
hashicorp
vault
improve
eventual
consistency
with
component_6
side
consistent
connector_data_14
announce
the
general
quality_attribute_14
of
technology_40
container
component_33
at
build
requirement_6
at
the
edge
how
connector_31
feedback
from
angry
component_34
help
to
develop
quality_attribute_16
technology_16
jep
component_35
to
extend
pattern_2
match
in
technology_5
cloudflare
d1
provide
quality_attribute_4
technology_41
for
cloudflare
component_36
release
technology_13
requirement_4
train
dataset
massive
technology_5
news
roundup
openjdk
technology_18
connector_data_7
and
cf
payara
component_37
technology_2
technology_42
connector_data_7
how
to
run
your
technology_16
department
a
coach
kalix
build
serverless
requirement_9
requirement_11
requirement_15
crtical
component_1
with
no
component_4
jetpack
bring
update
architectural
and
ui
component_13
and
improve
requirement_2
technology_27
release
technology_40
dns
private
resolver
in
preview
technology_43
support
nitrotpm
and
uefi
quality_attribute_5
boot
architecting
for
the
edge
requirement_9
introduce
technology_44
quality_attribute_21
technology_45
for
requirement_1
component_4
workload
requirement_4
for
developer
a
future
or
a
reality
quality_attribute_22
by
agreement
requirement_10
outcome
over
impose
solution
technology_46
lambda
now
have
support
for
technology_47
runtime
effectively
pattern_19
your
pattern_19
miedwar
meshbesher
on
use
vigilance
control
meta
artificial_intelligence’s
connector_data_1
set
to
accelerate
renewable
energy
catalyst
discovery
for
hydrogen
fuel
deepmind
introduce
gato
a
generalist
requirement_4
agent
mammoth
stump
in
the
requirement_9
era
meet
eu
regulation
by
be
requirement_9
requirement_11
and
requirement_9
agnostic
go
requirement_11
with
technology_18
and
graalvm
deal
with
thunder
herd
at
braintree
how
norway
s
large
bureaucracy
optimise
for
fast
flow
how
to
prepare
for
the
unexpected
an
influxdata
outage
story
tell
at
kubeconeu
the
what
and
why
of
programmable
pattern_20
state
of
the
technology_5
ecosystem
report
from
relic
+
technology_5
=
♡
a
story
tell
by
martijn
verburg
at
devoxx
uk
trust
drive
development
build
cognitive
and
emotional
pillar
laion
release
five
billion
image
text
pair
dataset
laion
5b
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_32
out
every
tuesday
join
a
of
over
senior
developer
pattern_21
an
example
enter
your
e
mail
connector_19
select
your
country
select
a
country
i
to
infoq
technology_32
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
hello
stranger
you
need
to
register
an
infoq
account
or
login
or
login
to
but
there
s
so
much
more
behind
be
register
connector_2
the
most
out
of
the
infoq
experience
tell
u
what
you
think
allow
technology_48
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_15
to
any
of
my
connector_data_13
in
this
component_38
watch
component_38
micro
component_10
by
jo
giese
nice
rollup
summary
by
hal
angseesing
make
great
connector_33
by
nirmalya
sengupta
micro
component_10
and
connector_23
by
yusbel
garcia
an
explicit
coordination
be
still
miss
by
alexander
samarin
pattern_1
by
manju
shankar
做了一个中文翻译，供参考
by
jiang
yd
technology_49
gateway
not
so
quality_attribute_11
by
owen
rubel
great
by
techyogjosh
na
role
of
component_24
gateway
in
pattern_1
by
radhika
kannan
inter
component_3
connector_13
mechanism
by
roshan
sharma
inter
component_3
connector_13
mechanism
by
roshan
sharma
amaze
by
anshu
pitlia
micro
component_10
by
jo
giese
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
this
seem
to
be
a
logical
extension
of
the
component_3
base
architecture
pattern_2
obvious
really
but
this
bring
it
home
particularly
appreciate
that
the
author
point
out
drawback
a
well
a
advantage
very
refresh
also
the
component_24
gateway
be
an
interest
pattern_2
a
quality_attribute_16
resolution
to
the
conundrum
of
composite
pattern_11
style
component_10
vs
pure
granular
pattern_11
style
component_3
connector_data_11
back
to
top
nice
rollup
summary
by
hal
angseesing
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
i
enjoy
connector_33
this
the
topic
of
pattern_1
be
definately
not
and
there
be
many
lesson
out
there
ready
to
be
by
a
generation
of
architect
and
engineer
quality_attribute_16
balance
treatment
connector_data_11
back
to
top
make
great
connector_33
by
nirmalya
sengupta
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
the
best
thing
about
your
be
how
you
have
bring
out
the
pro
and
the
con
and
underscore
the
fact
that
one
must
understand
the
component_8
behaviour
before
decide
how
to
earmark
the
requirement_14
of
a
pattern_4
nirmalya
connector_data_11
back
to
top
micro
component_10
and
connector_23
by
yusbel
garcia
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
no
a
concept
you
can
see
this
concept
on
the
domain
component_10
implementation
of
an
onion
architecture
one
of
the
different
be
that
onion
architecture
keep
a
core
infrastructure
to
connector_19
common
do
micro
component_10
connector_19
common
within
the
component_3
connector_23
on
external
component_11
for
connector_34
or
connector_23
with
a
quality_attribute_4
pattern_18
component_11
on
my
opinion
we
should
be
more
comfortable
with
have
duplication
of
connector_data_1
and
duplication
of
component_39
abstraction
win
t
go
away
but
these
day
i
use
it
if
there
be
an
strong
drive
need
for
it
connector_data_11
back
to
top
an
explicit
coordination
be
still
miss
by
alexander
samarin
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
coordination
should
be
externalize
a
all
other
component_10
see
improve
bpm
component_11
blogspot
ch
idea
and
improve
bpm
component_11
blogspot
ch
enter
thanks
a
connector_data_11
back
to
top
pattern_1
by
manju
shankar
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
brilliantly
explain
fundamental
and
the
example
pro
and
con
of
each
approach
be
explain
nicely
connector_data_11
back
to
top
做了一个中文翻译，供参考
by
jiang
yd
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
www
cnblogs
technology_32
jan4984
p
technology_48
connector_data_11
back
to
top
technology_49
gateway
not
so
quality_attribute_11
by
owen
rubel
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
component_24
be
to
separation
of
concern
and
a
such
be
two
part
requirement_14
i
o
pattern_22
and
resource
gather
within
web
component_40
the
i
o
in
an
component_24
follow
the
i
o
of
the
architecture
and
eventually
become
connector_14
or
more
precisely
an
architectural
cross
cut
concern
to
resolve
you
must
abstract
connector_13
from
technology_49
so
it
can
be
connector_35
with
all
technology_27
across
connector_data_4
connector_36
see
www
slideshare
net
bobdobbes
technology_49
abstraction
ap
have
connector_20
a
version
of
component_24
abstraction
in
technology_18
with
marvelous
effect
connector_data_11
back
to
top
great
by
techyogjosh
na
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
chris
it
easy
to
make
requirement_3
for
tech
focus
on
retail
requirement_19
or
b2c
we
tend
to
forget
for
an
requirement_1
over
95%
of
component_1
be
for
internal
consumption
do
you
believe
this
architecture
be
useful
for
these
95%
of
component_1
a
well
do
you
believe
this
architecture
make
sense
for
internal
component_1
component_8
that
be
not
connector_37
by
end
requirement_13
and
give
pattern_1
be
take
off
do
you
think
their
drawback
be
far
outnumber
by
the
benefit
to
me
it
appear
this
require
a
lot
of
stuff
to
be
do
by
the
developer
beyond
development
e
g
plan
ensure
meet
and
in
synch
with
other
team
etc
unfortunately
developer
do
not
work
that
way
therefore
to
make
this
quality_attribute_16
thing
a
success
what
an
requirement_1
need
to
do
connector_data_11
back
to
top
role
of
component_24
gateway
in
pattern_1
by
radhika
kannan
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
quality_attribute_16
clear
explanation
i
do
not
understand
the
component_24
gateway
pattern_2
isn
t
it
same
a
esb
how
different
the
component_24
gateway
from
esb
connector_data_11
back
to
top
inter
component_3
connector_13
mechanism
by
roshan
sharma
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
have
two
independent
component_5
a
and
b
requirement_15
requirement
for
a
be
if
a
be
connector_18
it
will
create
a
b
we
have
changea
command
in
a
and
createb
command
in
b
and
their
processor
respectively
aprocessor
and
bprocessor
when
a
component_22
perform
connector_data_4
e
g
a
connector_18
it
will
requirement_20
the
connector_data_4
to
changea
now
where
should
the
requirement_15
component_39
will
be
to
connector_18
a
inside
a
or
somewhere
external
if
we
have
it
in
a
then
we
will
need
to
have
connector_11
to
command
createb
which
be
not
the
right
way
also
even
if
we
handle
it
externally
we
be
separate
requirement_15
component_39
from
a
connector_data_11
back
to
top
inter
component_3
connector_13
mechanism
by
roshan
sharma
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
have
two
independent
component_5
a
and
b
requirement_15
requirement
for
a
be
if
a
be
connector_18
it
will
create
a
b
we
have
changea
command
in
a
and
createb
command
in
b
and
their
processor
respectively
aprocessor
and
bprocessor
when
a
component_22
perform
connector_data_4
e
g
a
connector_18
it
will
requirement_20
the
connector_data_4
to
changea
now
where
should
the
requirement_15
component_39
will
be
to
connector_18
a
inside
a
or
somewhere
external
if
we
have
it
in
a
then
we
will
need
to
have
connector_11
to
command
createb
which
be
not
the
right
way
also
even
if
we
handle
it
externally
we
be
separate
requirement_15
component_39
from
a
connector_data_11
back
to
top
amaze
by
anshu
pitlia
your
connector_data_12
be
await
moderation
thank
you
for
participate
in
the
discussion
i
be
struggle
a
bit
understand
the
whole
concept
properly
your
help
a
lot
clear
basic
notion
thanks
connector_data_11
back
to
top
close
your
connector_data_11
quote
original
connector_data_12
allow
technology_48
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_15
to
any
of
my
connector_data_13
in
this
component_38
cancel
close
your
connector_data_11
allow
technology_48
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_15
to
any
of
my
connector_data_13
in
this
component_38
cancel
close
ok
development
how
to
prepare
for
the
unexpected
an
influxdata
outage
story
tell
at
kubeconeu
reproducible
development
with
container
green
development
terminology
and
climate
commitment
explain
by
at
devoxx
uk
architecture
&
design
oren
eini
on
technology_12
include
consistency
guarantee
and
technology_8
a
the
implementation
technology_13
kalix
build
serverless
requirement_9
requirement_11
requirement_15
crtical
component_1
with
no
component_4
architecting
for
the
edge
culture
&
how
connector_31
feedback
from
angry
component_34
help
to
develop
quality_attribute_16
technology_16
how
to
run
your
technology_16
department
a
coach
build
a
culture
of
quality_attribute_23
and
curiosity
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
release
technology_13
requirement_4
train
dataset
massive
requirement_4
for
developer
a
future
or
a
reality
devops
hashicorp
vault
improve
eventual
consistency
with
component_6
side
consistent
connector_data_14
cloudflare
d1
provide
quality_attribute_4
technology_41
for
cloudflare
component_36
effectively
pattern_19
your
pattern_19
miedwar
meshbesher
on
use
vigilance
control
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_32
out
every
tuesday
join
a
of
over
senior
developer
pattern_21
an
example
connector_2
a
quick
overview
of
content
publish
on
a
variety
of
innovator
and
early
adopter
technology_28
what
you
don’t
that
you
don’t
stay
up
to
date
with
the
late
connector_data_9
from
the
topic
you
be
interest
in
enter
your
e
mail
connector_19
select
your
country
select
a
country
i
to
infoq
technology_32
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
qcon
development
conference
real
world
technical
talk
no
technology_16
pitch
practical
idea
to
inspire
you
and
your
team
qcon
san
francisco
oct
in
person
qcon
san
francisco
bring
together
the
world
s
most
innovative
senior
engineer
across
multiple
domain
to
connector_14
their
real
world
implementation
of
emerge
trend
and
practice
uncover
emerge
trend
and
practice
to
solve
your
complex
engineering
challenge
without
the
technology_16
pitch
connector_7
your
spot
now
home
create
account
login
qcon
conference
contribute
infoq
editor
about
infoq
about
c4media
technology_50
infoq
developer
requirement_21
diversity
infoq
live
infoq
live
infoq
live
qcon
san
francisco
qcon
plus
follow
u
on
youtube212k
follower
linkedin18k
follower
rss19k
reader
twitter50k
follower
facebook20k
alexanew
stay
in
the
the
infoq
podcast
engineering
culture
podcast
the
architect
newsletter
general
feedback
feedback@infoq
technology_32
advertising
sales@infoq
technology_32
editorial
editors@infoq
technology_32
requirement_21
marketing@infoq
technology_32
infoq
technology_32
and
all
content
copyright
©
c4media
inc
infoq
technology_32
component_27
at
contegix
the
best
isp
we
ve
ever
work
with
privacy
notice
term
and
condition
requirement_22
bt
