introducción
a
technology_1
technology_2
fundamentos
y
arquitectura
inicio
trabajá
con
nosotros
inicio
introducción
a
technology_1
technology_2
fundamentos
y
arquitectura
detalles
publicado
jueves
septiembre
escrito
por
sergio
ariel
guzman
la
aparición
de
nuevas
arquitecturas
de
y
la
necesidad
de
que
exista
comunicación
entre
ellas
dieron
pie
a
la
aparición
de
un
que
se
encargue
de
solucionar
esta
problemática
e
donde
technology_1
technology_2
aparece
en
escena
haciendo
del
desafío
de
la
integración
de
algo
sencillo
y
transparente
en
este
conoceremos
algunos
conceptos
básicos
de
technology_1
technology_2
y
su
arquitectura
si
queremos
entender
un
poco
más
sobre
los
fundamentos
de
technology_1
technology_2
hace
falta
conocer
que
son
los
patrones
de
integración
empresarial
para
empezar
podemos
comparar
estos
patrones
de
integración
con
otros
patrones
ya
conocidos
como
por
ejemplo
estrategy
singleton
y
factory
estos
patrones
son
una
forma
de
organizar
una
solución
a
un
determinado
problema
pero
no
son
en
sí
mismos
soluciones
no
ayudan
a
estructurar
mejor
nuestro
código
de
forma
quality_attribute_1
y
evita
que
perdamos
tiempo
en
soluciones
a
problemas
conocidos
y
ya
resueltos
con
este
mismo
objetivo
se
crearon
los
patrones
de
integración
empresarial
básicamente
proponen
diseñar
nuestras
soluciones
basadas
en
componentes
que
se
comunican
entre
si
utilizando
mensajes
de
entrada
y
de
salida
para
dejar
un
poco
más
en
claro
esto
podemos
ver
un
ejemplo
de
una
ruta
technology_2
con
la
que
podemos
integrar
do
aplicaciones
utilizando
technology_1
technology_2
con
technology_3
en
este
ejemplo
suponemos
que
hay
do
aplicaciones
que
manipulan
datos
de
empleados
una
está
montada
sobre
un
technology_4
rest
por
lo
que
solo
conoce
de
technology_5
y
la
otra
sobre
technology_6
protocolo
technology_7
por
lo
que
solo
conoce
de
technology_8
lo
primero
que
debemos
hacer
e
agregar
la
dependencia
de
technology_2
a
technology_6
pom
de
nuestro
proyecto
connector_1
technology_1
technology_2
technology_2
technology_3
boot
starter
version
version
connector_1
luego
declarar
una
clase
que
extienda
de
routebuilder
y
sobre
escribir
technology_6
método
configure
con
la
ruta
que
va
a
implementar
la
transformación
de
technology_5
a
technology_8
para
comunicar
la
do
aplicaciones
jsontoxmlintegractionroute
extend
routebuilder
{
configure
throw
exception
{
from
direct
employeejson2xml
unmarshal
xmljson
setheader
cxfconstants
operation_name
constant
postemployee
to
technology_9
technology_10
applicationsoap
technology_4
requirement_1
}
}
¡listo
technology_3
levanta
technology_6
contexto
technology_2
automáticamente
al
correr
la
aplicación
por
lo
que
queda
disponible
la
ruta
employeejson2xml
los
parámetros
enviados
al
invocar
esta
ruta
se
reciben
en
un
mensaje
compuesto
por
un
y
un
body
este
mensaje
sufre
la
transformaciones
de
los
procesos
unmarshal
y
xmljson
en
technology_6
body
queda
technology_6
connector_data_1
que
ante
era
un
technology_5
luego
technology_6
componente
technology_9
recibe
technology_6
mensaje
que
va
a
ser
enviado
a
la
aplicación
technology_11
para
esto
ante
se
le
agrego
una
propiedad
al
del
mensaje
para
indicarle
al
componente
que
operación
realizar
en
technology_6
servicio
eso
e
todo
ya
tenemos
una
ruta
en
technology_2
que
integra
do
aplicaciones
entonces
¿qué
e
technology_1
technology_2
technology_1
technology_2
e
un
technology_12
technology_13
de
código
abierto
que
se
enfoca
en
hacer
que
la
integración
de
sea
más
fácil
y
más
accesible
implementa
todos
los
patrones
de
integración
empresarial
posee
conectividad
con
una
gran
variedad
de
protocolos
de
transporte
y
soporta
dsl
lenguaje
especifico
de
dominio
para
hacer
más
sencillo
de
implementar
si
tomamos
como
ejemplo
al
patrón
pattern_1
para
entender
technology_2
podemos
observar
que
la
teoría
pattern_1
e
bastante
quality_attribute_2
y
podríamos
hacer
nuestras
propias
implementaciones
sin
ayuda
de
ningún
marco
pero
sin
embargo
existen
varios
technology_12
de
pattern_1
que
no
proporciona
toda
la
herramientas
necesarias
que
se
necesitan
para
desarrollar
un
proyecto
pattern_1
facilitándonos
gran
parte
del
trabajo
eso
e
exactamente
lo
que
technology_1
technology_2
e
para
los
patrones
de
integración
empresarial
e
technology_12
listo
para
desarrollar
soluciones
de
integración
de
implementando
eip
arquitectura
la
arquitectura
technology_2
se
basa
en
tres
part
fundamentales
motor
de
integración
y
ruteo
procesos
y
componentes
esto
se
ilustra
en
la
siguiente
figura
technology_6
módulo
de
componentes
proporciona
una
interfaz
para
comunicarse
con
technology_6
mundo
externo
a
través
de
que
se
especifican
como
uri
technology_6
módulo
de
procesadores
se
utiliza
para
gestionar
y
mediar
mensajes
entre
los
patrones
de
integración
empresarial
se
implementan
en
este
módulo
los
procesos
y
los
componentes
se
conectan
en
technology_6
módulo
de
motor
de
integración
y
ruteo
en
estas
conexiones
se
puede
filtrar
mensajes
basado
no
en
criterios
definidos
por
technology_6
usuario
existen
varias
opciones
para
escribir
estas
reglas
se
puede
usar
technology_13
technology_14
technology_15
o
incluso
technology_8
bueno
eso
e
todo
por
ahora
la
idea
de
este
e
introducirnos
a
los
fundamentos
y
conceptos
básicos
de
technology_1
technology_2
para
en
un
siguiente
meternos
de
lleno
en
esta
tecnología
¡hasta
technology_6
próximo
technology_2
technology_1
technology_2
buscá
en
technology_6
mandanos
tus
sugerencias
ayudanos
con
idea
para
los
artículos
de
este
a
contacto@somospnt
technology_16
¡seguínos
en
nuestras
rede
sociales
para
enterarte
de
los
últimos
technology_17
youtube
technology_13
technology_18
technology_19
technology_3
technology_12
equipos
coach
scrum
technology_20
patrones
relevamiento
agile
the
core
ágil
test
patrones
de
diseño
en
buenos
technology_21
argentina
connectis
argentina
bulnes
piso
buenos
technology_21
argentina
+54
contacto@somospnt
technology_16
siempre
en
contacto
somos
technology_6
equipo
de
desarrollo
de
connectis
argentina
y
queremos
conocerte
llamamos
o
envianos
un
y
te
respondemos
lo
ante
posible
technology_17
youtube
somospnt
technology_6
equipo
de
desarrollo
de
connectis
argentina
