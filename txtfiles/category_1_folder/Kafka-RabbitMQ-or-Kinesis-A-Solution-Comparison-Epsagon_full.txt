technology_1
technology_2
or
kinesis
–
a
solution
comparison
|
epsagon
epsagon
be
now
part
of
cisco
visit
the
cisco
techblog
to
connector_1
technical

about
emerge
tech
and
incubation
technology_3
technology_3
overview
requirement_1
sandbox
component_1
uptime
troubleshoot
technology_4
debug
technology_5
lambda
development
quality_attribute_1
pattern_1
serverless
requirement_2
requirement_3
resource
doc
interactive
tour
what
be
observability
about
requirement_4
career
partner
login
start
now
technology_3
technology_3
overview
requirement_1
sandbox
component_1
uptime
troubleshoot
technology_4
debug
technology_5
lambda
development
quality_attribute_1
pattern_1
serverless
requirement_2
requirement_3
resource
doc
interactive
tour
what
be
observability
about
requirement_4
career
partner
login
start
now
technology_1
technology_2
or
kinesis
–
a
solution
comparison
connector_2
by
nitzan
shapira


in
your
journey
to
connector_3
away
from
monolithic
component_2
and
start
connector_4
connector_data_1
component_3
you’ll
undoubtedly
have
to
compare
three
solution
that
have
each
tackle
the
quality_attribute_2
pattern_2
problem
in
different
way
kinesis
technology_1
and
technology_2
all
allow
you
to
build
your
pattern_3
component_1
but
which
should
you
choose
kinesis
create
by
and
component_4
on
web
component_5
technology_6
pride
itself
on
real
time
connector_data_2
component_3
for
hundred
of
gigabyte
of
connector_data_1
from
thousand
of
connector_data_1
component_6
technology_7
technology_1
be
develop
by
the
fine
folk
over
at
linkedin
and
work
a
quality_attribute_2
trace
component_7
despite
be
design
for
requirement_5
lastly
technology_2
be
a
general
purpose
connector_data_2
pattern_4
that
can
be
design
to
fit
any
quality_attribute_2
trace
need
but
come
with
a
slightly
steeper

curve
if
you
need
a
refresher
on
what
quality_attribute_2
component_8
be
or
if
you
aren’t
quite
sure
how
to
quality_attribute_2
connector_data_3
effectively
in
your
serverless
component_1
you
want
to
go
back
and
connector_1
a
few
of
the

that
we’ve
publish
on
the
topic
so
far
we
will
discus
the
feature
pro
and
con
of
the
three
component_5
in
question
and
also
present
use
requirement_6
to
help
determine
if
the
technology_8
in
question
line
up
with
your
requirement_7
goal
we
will
rate
each
component_7
per
four
different
topic
ease
of
connector_5
start
quality_attribute_3
manage
vs
unmanaged
quality_attribute_4
complexity
rat
will
be
from

to

with
the
winner
be
the
one
with
the
few
point
in
the
end
ease
of
connector_5
start
here
test
involve
measure
the
time
require
to
go
from
the
home
component_9
of
each
component_7
to
instal
it
configure
it
and
connector_5
a
“hello
world”
connector_data_2
up
and
work
we
should
also
be
able
to
tell
how
much
more
effort
would
be
require
to
connector_3
beyond
a
“hello
world”
example
technology_1
with
technology_1
an
example
be
up
and
run
in
under

minute
this
be
the
total
time
it
take
to
download
install
start
the
“zookeeper
”
and
connector_6
and
connector_7
a
connector_data_2
overall
technology_1
be
impressively
quality_attribute_5
and
easy
to
use
the
downside
however
be
that
in
order
to
create
a
production
ready
environment
you’ll
need
to
consult
additional
documentation
or
guide
in
order
to
fully
understand
how
technology_1
work
this
vastly
increase
the
time
from
“hello
world”
to
test
environment
standup
technology_2
technology_2
use
the
pika
technology_9
technology_10
be
more
in
line
with
initial
expectation
for
connector_5
start
it
require
a
bit
more
script
a
connector_8
connector_data_3
via
the
technology_9
terminal
do
not
work
out
instead
two
technology_9
script
“send
py”
and
“receive
py”
have
to
be
create
to
handle
the
connector_data_2
however
these
script
can
also
be
easily
modify
to
handle
a
whole
component_4
of
different
connector_data_4
make
technology_2
the
easy
to
connector_3
beyond
a
quality_attribute_5
“hello
world”
connector_data_2
to
something
quality_attribute_6
in
a
real
world
scenario
total
time
spend
on
technology_2

minute
kinesis
kinesis
be
requirement_8
component_4
so
you
think
that
it
would
be
much
easy
to
connector_3
up
and
run
no
download
or
instal
required–just
point
your
script
at
the
appropriate
resource
number
arn
and
be
on
your
way
but
in
the
end
kinesis
seem
to
have
more
step
than
the
other
component_7
to
make
test
a
true
to
a
production
scenario
a
possible
you
need
to
make
the
appropriate
technology_5
identity
and
connector_9
requirement_9
iam
role
to
handle
the
pattern_2
not
use
a
root
technology_5
account
so
you
don’t
have
to
create
the
script
and
component_10
them
somewhere
that
the
requirement_8
can
connector_9
you
also
need
to
create
the
iam
role
and
give
those
role
the
appropriate
permission
to
see
touch
and
connector_10
each
piece
of
the
requirement_8
infrastructure
after
create
an
iam
role
a
lambda

a
kinesis
connector_11
and
a
lambda
component_6
you
should
be
able
to
connector_3
the
“hello
world”
text
to
come
through
much
with
technology_2
some
quality_attribute_5
modification
could
allow
this
to
become
a
much
more
quality_attribute_7
example
but
for
most
the
initial
time
spend
set
up
kinesis
be
a
drawback
that
will
probably
outweigh
any
perceive
benefit
gain
all
in
all
it
take


hour
to
connector_3
kinesis
go
ease
of
connector_5
start
score
technology_1
–

technology_2
–

kinesis
–

quality_attribute_3
you
have
a
limit
test
environment
and
cannot
quality_attribute_8
this
out
to
what
it
would
look
in
a
real
world
scenario
but
you
can
connector_3
an
idea
of
the
quality_attribute_8
achieve
by
others
by
look
at
publish
white
paper
and
the
kind
of
that
be
build
on
each
of
these
component_7
technology_1
for
technology_1
technology_7
boast

000+
connector_data_3
component_3
per
second
combine
this
with
the
fact
that
it
combine
the
pattern_5
pattern_6
and
connector_12
connector_data_2
component_11
strategy
utilize
“consumer
groups”
and
you
have
a
quality_attribute_7
component_12
that
can
connector_6
and
connector_7
connector_data_3
across
numerous
domain
and
component_7
also
component_13
group
and
the
technology_1
architecture
can
be
modify
to
achieve
quality_attribute_9
requirement_10
base
on
the
number
of
component_14
in
your
cluster
a
well
a
the
number
of
component_13
group
you’re
attempt
to
provide
connector_data_3
to
technology_2
technology_2
be
even
more
impressive
boast
one
million
connector_data_3
per
second
when
quality_attribute_10
a
a
cluster
one
concern
however
be
that
technology_2
be
bind
by
a
single
technology_11
component_3
mean
that
it
can
quality_attribute_8
only
a
far
a
you
have
cpu
to
component_3
the
connector_data_2
with
requirement_8
component_15
allow
you
to
quality_attribute_8
infinitum
you
can
technically
solve
the
technology_2
quality_attribute_3
“issue”
by
throw
more
money
at
it
and

more
component_14
to
the
technology_2
cluster–perhaps
not
the
best
answer
but
a
quality_attribute_5
one
kinesis
finally
kinesis
be
build
into
a
requirement_8
component_16
a
a
component_7
solution
so
you
have
limit
visibility
into
how
it
all
work
you
have
to
trust
that
technology_5
be
do
it
best
to
provide
the
most
optimize
component_7
while
also
be
behold
to
an
auction
component_12
for
cpu
time
simply
due
to
this
lack
of
visibility
and
the
fact
that
you
can’t
tweak
it
requirement_10
kinesis
connector_13
the
low
mark
for
this
topic
quality_attribute_3
score
technology_1
–

technology_2
–

kinesis
–

ease
of
quality_attribute_4
quality_attribute_4
complexity
be
tricky
each
component_7
have
slightly
different
requirement
and
complexity
really
quality_attribute_11
on
the
team
in
question
and
it
particular
need
and
skill
to
keep
this
category
a
unbiased
a
possible
we’ll
look
at
routine
connector_data_5
that
need
to
be
perform
non
routine
or
“break
fix”
connector_data_5
that
come
up
and
the
requisite
skill
for
be
able
to
maintain
each
component_7
in
house
we
will
then
also
briefly
discus
manage
vs
unmanaged
option
for
each
quality_attribute_4
complexity
technology_1
for
technology_1
familiarity
with
apache’s
technology_12
virtual
component_17
jvms
be
a
plus
but
not
a
requirement
jvms
can
be
tricky
in
their
own
right
and
each
require
a
little
bit
of
tweak
in
order
to
smoothly
connector_3
it
up
and
run
cluster
requirement_9
become
the
most
important
aspect
of
technology_1
since
cluster

size
component_17
be
necessary
to
reach
quality_attribute_8
a
a
technology_13
technology_1
have
a
large
overhead
to
run
the
component_18
so
small
component_14
have
diminish

resource
mismatch
be
also
a
problem
for
large
component_19
since
technology_1
fluctuate
between
need
large
amount
of
component_3
power
and
large
amount
of
ram
several

size
component_14
in
a
cluster
can
handle
the
load
more
easily
than
a
small
number
of
large
component_20
technology_2
cluster
requirement_9
be
a
crucial
aspect
for
technology_2
but
the
cluster
component_3
be
much
easy
the
configuration
be
much
more
quality_attribute_12
and
the
status
connector_data_3
for
administrator
be
much
more
clear
and
concise
technology_2
simply
lend
itself
to
pattern_7
more
easily
due
to
it
quality_attribute_13
kinesis
finally
kinesis
requirement_9
be
really
more
about
technology_5
requirement_9
since
you’ll
be
utilize
various
technology_5
component_5
to
provide
the
input
and
output
from
kinesis
assume
you
have
a
few
technology_5
engineer
on
your
team
this
will
be
an
easy
feat
but
without
them
it
will
be
a
tough
slog
quality_attribute_4
complexity
score
technology_1
–

technology_2
–

kinesis
–

manage
vs
unmanaged
how
“hands
off”
can
you
be
with
each
of
the
above
technology_3
all
three
come
with
an
option
to
have
a
requirement_4
manage
the
component_7
for
you
if
you
do
decide
to
take
on
infrastructure
requirement_9
yourself
each
component_7
behave
slightly
differently
manage
technology_1
and
technology_2
yourself
mean
you’ll
need
to
provision
component_20
configure
the
component_7
maintain
hardware
architect
high
quality_attribute_14
manage
storage
and
backup
set
up
alarm
and
pattern_8
and
plan
for
load
connector_14
a
manage
component_7
technology_14
can
relieve
you
of
any
or
all
of
the
above
duty
since
kinesis
be
design
and
maintain
by
technology_6
it
be
technically
a
manage
component_7
in
and
of
itself–all
you
have
to
do
be
make
sure
your
input
can
be
component_3
by
it
component_11
the
score
for
quality_attribute_15
be
a
follow
technology_1
–


technology_2
–


kinesis
–

decision
time
we’ve
make
it
to
decision
time
you
can
review
all
score
in
the
component_21
below
remember
we’re
go
for
“lowest
score
wins”
in
this
scenario
final
score
comparison
technology_1
technology_2
kinesis
the
choice
of
a
quality_attribute_2
pattern_2
component_7
will
quality_attribute_11
on
each
organization’s
unique
need
these
rank
not
have
factor
in
the
appropriate
test
or
weight
that
would
be
necessary
for
deployment
in
your
give
environment
a
these
observation
differ
per
the
possibility
within
your
company’s
specific
use
requirement_6
conclusion
reach
here
could
also
connector_14
with
any
future
development
by
each
component_7
discuss
technology_2
be
the
clear
winner
here
technology_2
be
indeed
very
quality_attribute_16
but
also
limit
by
it
single
component_3
architecture
technology_1
be
by
far
the
easy
to
set
up
and
connector_3
start
with
but
flesh
out
a
quality_attribute_7
solution
take
a
bit
more
work
than
the
“hello
world”
example

on
kinesis
be
great
for
the
programmer
who
want
to
develop
their
without
have
to
mess
with
any
troublesome
hardware
or
component_4
component_16
but
lock
into
technology_5
with
kinesis
create
more
hoop
to
jump
through
than
it’s
worth
if
you’re
build
a
project
and
team
from
the
grind
up
and
be
look
to
utilize
a
quality_attribute_2
trace
component_7
then
these
score
can
serve
a
a
quality_attribute_9
measure
to
quality_attribute_9
understand
quality_attribute_2
trace
in
term
of
the
component_5
quality_attribute_17
to
you
what
they
have
to
offer
their
limitation
and
their
challenge
to
start
a
free
trial
with
epsagon
click
here
connector_1
more
on
quality_attribute_2
component_22
debug
quality_attribute_2
trace
use
requirement_5
common
design
pattern_9
in
quality_attribute_2
architecture
epsagon
connector_15
automate
quality_attribute_2
trace
for
technology_15
component_22
why
you
can’t
ignore
connector_16
to
pattern_1
and
requirement_5
for
serverless
stay
update
with
epsagon
relate

quality_attribute_2
connector_data_3
effectively
in
serverless
component_2
connector_1
more
how
to
set
up
technology_5
lambda
with
technology_16
everything
you
should

connector_1
more
privacy
requirement_11
term
of
use
requirement_11

w
21st
st
5th
floor
york
ny

info@epsagon
technology_17
requirement_3
requirement_2
requirement_4
career
partner
resource
doc
take
a
tour
what
be
observability
technology_3
technology_3
overview
requirement_1
sandbox
component_1
uptime
troubleshoot
technology_4
debug
lambda
development
quality_attribute_1
pattern_1
serverless
info@epsagon
technology_17
privacy
requirement_11
term
of
use
requirement_11
copyright
©
epsagon

this
us

to
improve
your
experience
we
ll
assume
you
re
ok
with
this
but
you
can
opt
out
if
you
wish
acceptlearn
more
privacy
&

requirement_11
close
privacy
overview
this
us

to
improve
your
experience
while
you
navigate
through
the

out
of
these
the

that
be
categorize
a
necessary
be
component_10
on
your
browser
a
they
be
essential
for
the
work
of
basic
requirement_12
of
the

we
also
use
third
party

that
help
u
analyze
and
understand
how
you
use
this

these

will
be
component_10
in
your
browser
only
with
your

you
also
have
the
option
to
opt
out
of
these

but
opt
out
of
some
of
these

affect
your
browse
experience
necessary
necessary
always
enable
necessary

be
essential
for
the
to
properly
this
category
only
include

that
ensure
basic
requirement_12
and
quality_attribute_18
feature
of
the

these

do
not
component_10
any
personal
connector_data_6
non
necessary
non
necessary
any

that
not
be
particularly
necessary
for
the
to
and
be
use
specifically
to
connector_17
component_23
personal
connector_data_1
via
requirement_13

other
embed
content
be
term
a
non
necessary

it
be
mandatory
to
procure
component_23
prior
to
run
these

on
your

connector_18
&
connector_19
