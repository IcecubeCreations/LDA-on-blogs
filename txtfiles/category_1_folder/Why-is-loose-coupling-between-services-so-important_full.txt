why
be
loose
couple
between
component_1
so
important
ben
morris

architecture
and
component_2
design
why
be
loose
couple
between
component_1
so
important


loose
couple
imply
that
component_1
be
independent
so
that
connector_1
in
one
component_3
will
not
affect
any
other
the
more
connector_2
you
have
between
component_3
the
more
likely
it
be
that
connector_1
will
have
wide
unpredictable
consequence
you
cannot
completely
isolate
component_3
any
collaboration
between
component_1
inevitably
give
rise
to
some
level
of
mutual
connector_2
component_1
will
need
some
common
characteristic
in
term
of
technology_1
behaviour
or
technology_2
this
inevitably
give
rise
to
a
degree
of
connector_2
though
this
couple
can
come
in
many
different
form
what
cause
couple
between
component_3
it’s
important
to
recognise
where
couple
come
from
so
you
be
in
a
quality_attribute_1
place
to
manage
connector_2
and
mitigate
any
negative
effect
they
have
behavioural
couple
occur
when
component_1
connector_3
responsibility
for
requirement_1
component_4
for
example
you
have
multiple
component_1
that
need
to
be
involve
in
produce
an
invoice
if
a
component_3
need
the
direct
support
of
another
to
fulfil
it
responsibility
the
implication
be
that
component_3
boundary
have
not
be
draw
correctly
this
be
the
most
common
form
of
couple
and
it
can
be
deal
with
by
redrawing
boundary
between
component_1
to
eliminate
“chatty”
relationship
the
style
of
requirement_2
can
also
be
relevant
a
pattern_1
connector_4
via
pattern_2
tend
to
encourage
more
loosely
couple
connector_5
than
direct
command
or
pattern_3
style
connector_4
knowledge
couple
be
a
similar
idea
and
it
imply
that
component_1
be
too
familiar
with
each
other’s
internal
implementation
the
sender
of
a
connector_data_1

something
about
how
the
receiver
will
respond
to
the
connector_data_2
this
even
go
so
far
a
provide
instruction
it’s
this
expectation
that
create
couple
a
component_1
become
dependent
on
the
internal
mechanic
of
external
component_3
schema
couple
describe
component_1
that
be
bind
to
a
common
set
of
or
schema
component_1
should
be
able
to
make
connector_1
to
their
internal
connector_data_3
without
break
anything
make
connector_1
to
external
connector_data_3
be
a
little
trickier
a
it
will
have
an
impact
on
collaborate
component_3
there
be
technique
that
can
help
to
mitigate
this
couple
component_5
should
seek
to
act
a
tolerant
reader
where
they
only
connector_6
those
part
of
an
component_6
contract
that
they
really
need
this
reduce
their
vulnerability
to
break
connector_1
in
apis
temporal
or
time
base
couple
occur
when
a
component_3
expect
an
immediate
connector_7
from
another
before
it
can
continue
component_4
this
be
particularly
prevalent
in
component_7
that
use
a
lot
of
request\response
style
connector_4
e
g
pattern_4
base
on
pattern_5
or
grpc
you
can
connector_8
this
by
reconsider
component_3
boundary
so
they
don’t
need
to
wait
on
external
component_3
alternatively
if
you
have
bet
the
farm
on
small
component_1
then
you
will
need
a
very
strong
story
around
failure
so
component_1
can
cope
with
the
inevitable
timeouts
and
transient
error
in
re
draw
component_3
boundary
there
can
be
a
requirement_3
off
between
different
type
of
couple
component_4
couple
happen
when
component_1
start
to
take
on
too
many
distinct
responsibility
this
give
rise
to
bloat
component_3
implementation
that
become
difficult
to
quality_attribute_2
or
connector_9
the
more
extreme
form
of
this
be
find
in
crm
or
erp
component_8
such
a
technology_3
or
technology_4
that
tend
to
become
“monster”
component_8
carry
our
multiple
responsibility
in
your
architecture
implementation
couple
describe
component_1
that
connector_3
implementation
detail
a
oppose
to
contract
or
schema
a
quality_attribute_1
example
here
be
where
one
component_3
us
the
component_9
technology_5
of
another
to
connector_10
with
it
this
bind
component_1
to
a
specific
technology_2
or
technology_6
if
they
want
to
collaborate
component_10
that
leak
implementation
detail
in
term
of
component_11
specific
construct
can
also
cause
implementation
couple
a
any
collaborate
component_3
will
need
to
connector_11
the
underlie
technology_7
finally
there
be
location
base
couple
where
a
component_3
expect
a
resource
to
exist
in
specific
location
this
be
normally
connector_8
by
some
form
of
pattern_6
or
component_3
locator
that
connector_data_4
a
series
of
logical
destination
to
their
physical
location
why
do
we
need
loose
couple
loose
couple
be
often
associate
with
quality_attribute_3
development
though
it
tend
to
have
a
wide
impact
over
time
requirement_4
quality_attribute_4
and
elasticity
in
a
tightly
couple
component_2
your
requirement_4
be
largely
dictate
by
your
slow
component_12
for
example
pattern_7
architecture
with
component_1
that
collaborate
via
technology_8
base
component_10
can
be
vulnerable
to
cascade
requirement_4
problem
where
one
component_12
slow
down
if
your
component_1
be
decouple
you
will
have
more
freedom
to
optimise
them
individually
for
specific
workload
your
ability
to
quality_attribute_2
be
also
determine
by
your
least
elastic
component_12
a
connector_12
component_13
be
often
the
cause
of
elasticity
limitation
either
because
they
be
difficult
or
expensive
to
quality_attribute_2
in
connector_7
to
connector_9
demand
productivity
and
automation
loose
couple
be
generally
associate
with
easy
deployment
in
their
excellent
book
“accelerate”
nicole
forsgren
et
al
look
at
the
association
between
high
perform
team
and
specific
engineering
practice
they
find
that
loose
couple
tend
to
be
associate
with
quality_attribute_1
productivity
in
term
of
the
frequency
and
quality_attribute_5
of
deployment
they
also
find
that
loose
couple
make
it
possible
to
grow
team
without
reduce
this
productivity
why
should
this
be
so
loose
couple
enable
isolation
component_14
to
be
quality_attribute_6
independently
of
one
another
give
you
much
more
freedom
over
when
and
what
you
quality_attribute_6
cross
functional
delivery
team
be
able
connector_13
their
work
do
without
have
to
manage
any
connector_2
on
other
team
test
be
easy
to
organise
a
component_14
can
be
validate
independently
of
each
other
quality_attribute_7
and
cost
of
connector_9
couple
also
affect
your
ability
to
make
connector_1
safely
the
more
couple
you
have
in
a
component_2
the
more
likely
it
be
that
connector_9
will
have
unexpected
effect
limit
any
connector_2
mean
there’s
le
complexity
to
deal
with
so
connector_1
be
easy
and
quality_attribute_8
to
make
this
be
another
side
effect
of
isolation
that
serve
to
lower
the
cost
of
connector_9
how
do
i
if
my
component_1
be
loosely
couple
although
you
can’t
eliminate
couple
you
can
ensure
that
it
do
not
prevent
you
from
enjoy
the
coding_keyword_1
benefit
associate
with
autonomous
component_3
some
couple
be
perfectly
fine
so
long
a
it
do
not
undermine
the
desire
outcome
there
be
several
litmus
test
that
determine
whether
this
be
the
requirement_5
i
e
can
you
quality_attribute_6
a
component_3
independently
regardless
of
any
other
component_3
can
you
test
and
verify
your
component_1
without
use
an
quality_attribute_9
environment
can
you
make
large
quality_attribute_2
connector_1
to
the
internals
of
a
component_3
without
reference
any
other
component_3
if
a
component_3
stop
will
it
prevent
any
other
component_1
from
run
if
your
component_1
fail
any
one
of
these
test
then
your
couple
be
become
a
problem

under
architecture
pattern_4
and
technology_9
relate
when
should
you
connector_14
your
own
connector_data_2
technology_5
pattern_2
anti
pattern_8
in
pattern_9
architecture

saga
and
workflow
manage
long
run
component_15
between
component_1
recent
how
should
architect
collaborate
with
development
team
connector_data_3
mesh
and
pattern_4
the
similarity
be
uncanny
pattern_10
vs
choreography
for
pattern_7
workflow
about
me
i
be
a
london
base
technical
architect
who
have
spend
more
than
twenty
five
year
lead
development
across
start
up
digital
agency
house
and
corporates
over
the
year
i
have
build
a
lot
of
stuff
include
web
sit
and
component_3
component_7
requirement_2
connector_data_3
component_11
and
technology_10
my
current
focus
be
on
provide
architectural
leadership
in
agile
environment
i
currently
work
a
chief
architect
for
the
global
requirement_6
intelligence
agency
mintel
opinion
be
my
own
and
not
the
pattern_11
of
my
employer
etc
you
can
follow
me
on
twitter
or
connector_15
me
out
on
linkedin
category
agile

component_6
design

architecture

technology_11

technology_12

connector_data_3
requirement_7

component_13

design
pattern_8

development
component_4

technology_13

domain
drive
design

technology_14

pattern_9
component_7

favourite
coding_keyword_2

requirement_2

pattern_2

pattern_4

rant

pattern_5

serverless

pattern_12

strategy

ui
development

web
component_1

this
publish
an
technology_15
fee
it
also
contain
a
connector_data_5
of
all
publish

and
an
archive
of
old
stuff
©

ben
morris
