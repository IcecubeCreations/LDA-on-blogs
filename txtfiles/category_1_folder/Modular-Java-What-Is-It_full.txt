modular
technology_1
what
be
it
bt
attend
qcon
san
francisco
oct
and
find
practical
inspiration
from
leader
register
close
toggle
navigation
facilitate
the
technology_2
of
knowledge
and
innovation
in
professional
development
english
edition
english
edition
chinese
edition
japanese
edition
french
edition
contribute
search
sign
up
login
password
forget
password
infoq
account
back
to
login
resend
activation
back
to
login
login
with
twitter
t
have
an
infoq
account
sign
up
notifications1
login
to
unlock
infoq
s
feature
stay
up
to
date
and
connector_1
connector_2
your
favorite
content
follow
your
favorite
editor
and
peer
sign
up
login
t
have
an
account
register
here
logo
back
to
homepage
apr
unique
visitor
news
presentation
podcast
guide
topic
development
technology_1
technology_3
technology_4
technology_5
technology_6
go
technology_7
technology_8
feature
in
development
reproducible
development
with
container
avdi
grimm
describe
the
future
of
development
which
be
already
here
connector_1
a
tour
of
a
devcontainer
and
contrast
it
with
a
deployment
container
all
in
development
architecture
&
design
architecture
requirement_1
architecture
quality_attribute_1
requirement_2
design
requirement_3
study
pattern_1
component_1
mesh
pattern_2
quality_attribute_2
feature
in
architecture
&
design
oren
eini
on
technology_9
include
consistency
guarantee
and
technology_5
a
the
implementation
technology_10
wesley
reisz
talk
to
oren
eini
about
the
history
of
technology_9
technology_9
be
a
fully
pattern_3
technology_11
document
component_2
that
connector_3
both
cp
and
ap
guarantee
at
different
time
the
two
discus
those
cp
ap
quality_attribute_3
component_3
challenge
the
choice
of
implementation
technology_10
technology_12
and
the
current
plan
for
technology_9
which
include
a
component_4
side
sharding
implementation
all
in
architecture
design
requirement_4
ml
&
connector_data_1
engineering
requirement_5
requirement_6
technology_11
component_2
connector_data_1
requirement_7
connector_4
feature
in
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
katharine
jarmul
discus
utilize
quality_attribute_3
connector_data_1
science
and
requirement_6
component_5
such
a
federate
to
from
connector_data_1
at
the
edge
all
in
requirement_4
ml
connector_data_1
eng
culture
&
agile
diversity
leadership
lean
kanban
personal
growth
scrum
sociocracy
craftmanship
team
collaboration
test
ux
feature
in
culture
&
how
to
run
your
technology_13
department
a
coach
have
find
what
i
think
be
my
connector_5
a
an
agile
coach
i
take
the
tough
decision
to
move
sideways
into
technology_13
requirement_8
in
the
hope
of
use
what
i’d
to
one
day
run
my
own
department
i
believe
that
come
from
coach
would
allow
me
to
see
thing
others
could
not
and
create
something
special
time
will
tell
if
i
have
succeed
this
be
the
story
of
where
i
be
up
to
so
far
all
in
culture
devops
infrastructure
continuous
delivery
automation
container
requirement_9
observability
feature
in
devops
panel
quality_attribute_4
component_3
the
panelist
discus
the
quality_attribute_2
for
the
supply
chain
and
quality_attribute_2
risk
measurement
all
in
devops
eventsnew
helpful
connector_6
about
infoq
infoq
editor
contribute
about
c4media
diversity
choose
your
technology_10
en
中文
日本
fr
infoq
live
how
requirement_9
architecture
achieve
cost
connector_7
improve
quality_attribute_5
&
connector_8
requirement_10
register
now
infoq
live
how
to
migrate
an
component_6
to
serverless
and
what
be
the
common
mistake
to
avoid
register
now
qcon
san
francisco
understand
the
emerge
trend
you
should
pay
attention
to
attend
in
person
on
oct
infoq
homepage
modular
technology_1
what
be
it
jdconf
’22
requirement_9
requirement_11
technology_1
technology_14
configuration
graalvm
technology_15
and
more
watch
all
component_7
on
demand
modular
technology_1
what
be
it
this
item
in
japanese
bookmark
sep
min
connector_9
by
alex
blewitt
connector_10
for
infoq
join
a
of
expert
increase
your
visibility
grow
your
career
more
over
the
last
few
year
quality_attribute_6
for
technology_1
have
be
an
active
discussion
topic
from
the
now
defunct
jsr
to
the
recognition
of
jsr
and
the
ongoing
jsr
quality_attribute_6
be
see
a
a
necessary
step
in
technology_1
s
evolution
even
future
technology_14
base
technology_10
technology_16
be
consider
quality_attribute_6
this
the
first
in
a
multi
part
series
on
modular
technology_1
discus
what
quality_attribute_6
mean
and
why
you
should
care
what
be
quality_attribute_6
quality_attribute_6
be
a
general
concept
which
apply
to
the
development
of
in
a
fashion
which
allow
individual
to
be
develop
often
with
a
standardise
to
allow
to
connector_11
in
fact
the
kind
of
separation
of
concern
between
connector_data_2
in
an
oo
technology_10
be
much
the
same
concept
a
for
except
on
a
large
quality_attribute_7
typically
partitioning
a
component_8
into
help
minimise
couple
which
should
lead
to
easy
to
maintain
the
technology_1
technology_10
be
not
design
with
in
mind
other
than
package
which
be
liken
to
modula
in
the
introduction
but
none
the
le
there
be
many
de
facto
in
the
technology_1
any
technology_1
technology_17
be
in
effect
a
from
technology_18
to
technology_19
to
technology_20
typically
both
open
component_9
and
close
component_9
component_10
will
have
one
or
more
connector_12
on
external
technology_17
which
in
turn
have
transitive
connector_12
on
others
technology_17
be
too
relate
sponsor
content
relate
sponsor
uncover
emerge
trend
and
practice
from
domain
expert
attend
in
person
at
qcon
san
francisco
technology_17
be
implicitly
they
not
all
have
a
single
to
connector_11
with
but
often
will
have
component_11
which
should
be
use
and
private
package
which
have
document
use
requirement_3
furthermore
they
have
connector_12
themselves
such
a
technology_21
or
technology_22
this
can
connector_data_3
in
automatic
connector_12
manager
bring
in
a
lot
more
than
be
strictly
necessary
in
the
requirement_3
of
technology_18
bring
in
over
connector_12
include
javax
mail
and
javax
technology_22
even
though
many
of
these
be
never
need
by
component_12
that
use
technology_18
in
some
requirement_3
a
s
connector_12
can
be
optional
that
be
the
can
provide
a
subset
of
requirement_12
with
miss
connector_12
in
the
above
example
if
technology_23
isn
t
present
on
the
runtime
classpath
then
requirement_13
via
technology_23
will
not
be
quality_attribute_8
but
other
mechanism
will
be
technology_1
achieve
this
through
the
use
of
defer
connector_13
by
not
require
a
to
be
present
until
it
be
connector_14
a
miss
connector_12
can
be
handle
by
an
appropriate
classnotfoundexception
other
component_13
have
the
concept
of
weak
connector_15
which
do
much
the
same
runtime
connector_16
typically
have
an
attach
version
number
many
open
component_9
project
generate
release
that
be
name
similarly
to
technology_18
jar
this
allow
a
developer
to
determine
through
manual
inspection
at
runtime
which
version
of
a
particular
open
component_9
technology_17
be
be
use
by
consult
the
classpath
however
the
component_14
be
likely
to
have
be
compile
against
a
different
version
of
the
technology_17
the
implicit
assumption
be
that
compile
against
technology_18
jar
and
run
against
technology_18
jar
will
be
behaviourally
quality_attribute_9
even
upgrade
to
the
next
minor
version
be
generally
quality_attribute_9
which
be
why
problem
in
technology_18
connector_data_3
in
a
branch
to
signify
a
break
in
quality_attribute_10
all
of
these
be
generally
base
on
convention
rather
than
constraint
that
be
at
runtime
when
be
quality_attribute_6
useful
quality_attribute_6
be
useful
a
a
general
concept
to
break
down
an
component_6
into
different
part
which
can
then
be
test
and
quality_attribute_11
separately
a
note
above
most
technology_17
be
anyway
so
for
those
produce
technology_17
for
others
to
connector_17
quality_attribute_6
be
an
important
concept
to
understand
usually
the
connector_12
connector_data_4
be
encode
in
the
build
technology_24
technology_25
pom
or
ivy
and
explicitly
document
in
the
technology_17
s
usage
note
it
s
not
uncommon
for
an
upstream
technology_17
to
develop
workarounds
for
bug
in
a
lower
level
technology_17
even
when
the
late
version
of
the
lower
level
technology_17
have
be
fix
since
to
provide
a
seamless
experience
in
the
high
level
technology_17
sometimes
these
can
cause
subtle
problem
however
if
a
technology_17
be
be
build
for
consumption
by
others
then
it
be
already
implicitly
a
but
in
the
same
way
that
there
be
few
“hello
world”
technology_17
there
be
also
few
real
“hello
world”
either
it
s
only
once
an
component_6
become
sufficiently
large
or
it
s
be
build
with
a
sufficiently
modular
build
component_8
that
the
concept
of
logically
break
down
an
component_6
into
different
part
come
into
play
one
aspect
that
be
a
benefit
to
modularisation
be
that
of
test
a
small
with
a
well
define
technology_26
can
typically
be
test
quality_attribute_12
than
a
monolithic
component_6
this
be
especially
true
of
gui
component_6
where
the
gui
itself
might
not
be
easily
quality_attribute_13
but
the
which
it
connector_data_5
be
another
aspect
be
that
of
evolution
although
the
component_8
a
a
whole
will
have
a
version
number
in
reality
it
be
a
technology_13
of
multiple
and
version
under
the
cover
whether
close
component_9
or
open_source
there
will
always
be
some
kind
of
technology_17
–
even
the
technology_1
version
–
that
be
a
connector_12
of
the
component_8
a
a
connector_data_3
each
be
free
to
go
about
quality_attribute_11
in
a
way
suitable
for
that
some
quality_attribute_11
fast
than
others
whilst
some
be
quality_attribute_14
enough
to
remain
fix
for
long
period
for
example
eclipse
have
eclipse
core
boot
which
have
remain
unchanged
since
project
requirement_8
can
also
benefit
from
modularisation
give
that
a
will
end
up
have
a
publish
component_15
to
which
others
can
subscribe
it
s
possible
for
separate
to
be
connector_18
by
separate
team
this
inevitably
happen
on
large
quality_attribute_7
project
anyway
but
sub
team
can
be
make
responsible
for
the
delivery
of
different
finally
modularising
an
component_6
can
help
to
concretely
identify
which
version
of
dependent
technology_17
be
be
use
in
order
to
harmonise
technology_17
connector_12
across
a
large
project
runtime
versus
compile
time
technology_1
typically
have
a
flat
classpath
whether
at
compile
time
or
at
runtime
in
other
word
component_10
normally
have
full
visibility
to
any
that
s
find
on
the
classpath
regardless
of
the
order
of
entry
in
the
classpath
assume
that
there
be
no
overlap
at
least
otherwise
first
one
win
this
enable
the
requirement_12
of
dynamic
connector_15
in
technology_1
a
load
from
the
front
of
the
classpath
need
not
have
resolve
all
reference
to
the
that
be
towards
the
rear
of
the
classpath
until
they
re
actually
require
this
be
frequently
use
when
work
against
a
set
of
to
which
the
implementation
isn
t
about
until
runtime
for
example
an
technology_27
utility
can
be
compile
against
the
generic
technology_28
package
but
at
runtime
and
with
an
additional
piece
of
configuration
connector_data_4
can
instantiate
the
correct
technology_28
driver
this
be
typically
achieve
through
the
name
of
a
which
connector_3
a
pre
define
factory
or
abstract
be
supply
to
a
forname
pattern_4
at
runtime
if
the
specify
doesn
t
exist
or
can
t
be
load
for
any
other
reason
an
error
be
generate
it
s
therefore
quite
likely
that
the
compile
time
classpath
be
subtly
different
from
the
runtime
classpath
for
a
further
each
be
often
compile
in
isolation
a
be
compile
against
technology_29
and
b
be
compile
against
technology_29
but
then
combine
at
runtime
in
a
single
path
and
in
this
requirement_3
either
arbitrarily
choose
version
or
of
technology_30
this
lead
quickly
to
connector_12
hell
especially
when
it
be
the
transitive
closure
of
these
connector_12
which
form
the
runtime
classpath
build
component_3
technology_25
and
ivy
make
quality_attribute_6
visible
to
developer
if
not
end
component_16
technology_1
have
an
under
appreciate
feature
connector_19
classloaders
which
allow
the
runtime
path
to
be
more
segment
typically
all
be
load
from
the
component_8
classloader
however
some
component_3
component_17
their
runtime
space
with
different
classloaders
a
quality_attribute_12
example
be
technology_31
or
other
servlet
component_18
which
typically
have
a
one
classloader
per
webapp
this
allow
a
webapp
to
normally
but
not
see
accidentally
or
otherwise
define
by
other
webapps
in
the
same
technology_14
the
way
this
work
be
that
each
webapp
load
from
it
own
classloader
so
that
a
local
webapp
s
implementation
doesn
t
load
which
conflict
with
another
webapp
s
implementation
the
requirement
be
for
any
classloader
chain
that
the
space
be
consistent
this
mean
you
can
have
two
util
load
from
two
separate
classloaders
in
your
vm
at
one
time
provide
that
these
classloaders
aren
t
visible
to
one
another
it
s
also
what
give
the
servlet
component_18
it
ability
to
redeploy
connector_20
without
a
restart
by
throw
a
classloader
away
you
throw
away
reference
to
it
a
well
make
the
old
version
eligible
for
garbage
collection
–
this
then
allow
the
servlet
component_18
to
create
a
classloader
and
re
load
the
version
of
the
in
at
runtime
all
the
way
down
build
a
modular
component_8
be
really
a
way
of
partitioning
an
component_6
into
potentially
quality_attribute_15
and
to
minimise
the
couple
between
them
it
s
also
a
way
of
de
couple
a
s
requirement
for
example
the
eclipse
ide
typically
have
plugins
that
have
separate
connector_12
on
gui
and
non
gui
component_19
e
g
jdt
ui
and
jdt
core
this
permit
other
u
of
the
non
gui
headless
build
requirement_14
and
error
connector_16
etc
outside
of
the
ide
environment
other
than
the
monolithic
rt
jar
any
component_8
can
typically
be
decompose
into
various
the
question
become
be
it
worth
it
after
all
it
s
much
easy
to
start
with
a
modular
component_8
and
build
your
way
up
than
to
take
a
monolithic
component_8
apart
and
break
it
into
one
of
the
reason
why
this
be
usually
the
requirement_3
be
to
do
with
leakage
across
boundary
for
example
the
technology_1
component_20
package
logically
shouldn
t
have
any
connector_12
on
any
gui
however
technology_1
component_20
appletinitializer
use
by
component_20
instantiate
have
a
reference
to
technology_32
which
of
have
knock
on
connector_12
to
the
whole
technology_33
chain
so
technology_1
component_20
technically
have
an
optional
connector_12
on
technology_33
when
common
sense
dictate
that
it
should
not
have
a
more
modular
approach
be
take
to
build
the
core
technology_1
technology_17
initially
this
error
would
have
be
catch
long
before
the
component_15
be
ever
make
at
some
point
a
cannot
be
break
further
down
into
sub
however
sometimes
relate
be
keep
within
the
same
for
ease
of
organisation
and
only
decompose
further
when
necessary
for
example
the
refactoring
support
originally
part
of
eclipse
s
jdt
be
connector_21
out
into
it
own
in
order
to
allow
other
technology_10
cdt
to
take
advantage
of
the
generic
refactoring
capability
plugins
many
component_3
be
quality_attribute_16
through
the
concept
of
plugins
in
these
requirement_3
the
component_21
component_8
have
a
define
component_15
to
which
the
plugin
must
conform
and
a
way
of
inject
that
plugin
in
many
component_10
such
a
web
browser
ides
and
build
technology_24
offer
a
way
to
customise
the
component_6
by
provide
a
plugin
that
offer
the
correct
technology_26
sometimes
these
plugins
be
limit
or
perform
generic
decoding
audio
or
video
but
equally
well
can
be
complex
in
their
own
right
e
g
plugins
for
ides
sometimes
these
plugins
can
provide
their
own
plugin
to
customise
the
behaviour
further
which
can
make
component_3
highly
customisable
increasing
the
number
of
level
of
indirection
can
make
a
component_8
increasingly
hard
to
understand
however
the
plugin
component_15
form
part
of
a
contract
which
the
individual
plugins
must
obey
these
plugins
be
themselves
which
go
through
the
normal
connector_12
chain
and
versioning
issue
that
the
enclose
component_8
be
provide
a
the
complexity
of
the
specific
plugin
component_15
quality_attribute_11
so
too
must
the
plugin
itself
or
backward
quality_attribute_9
behaviour
must
be
maintain
one
of
the
reason
for
the
success
of
the
netscape
plugin
component_15
for
browser
have
be
it
quality_attribute_17
only
a
handful
of
be
need
and
provide
that
the
component_21
browser
redirect
input
with
the
appropriate
mime
type
the
plugin
can
handle
component_22
the
rest
however
more
complex
component_10
ides
typically
need
far
more
tightly
quality_attribute_18
and
therefore
a
more
complex
component_15
to
drive
them
current
state
of
technology_1
quality_attribute_6
many
component_3
and
plugin
infrastructure
exist
in
technology_1
at
the
moment
ides
typically
be
the
well
one
with
intellij
netbeans
and
eclipse
all
offer
their
own
plugin
component_3
a
way
to
customise
the
experience
however
build
component_3
ant
technology_25
and
even
end
component_16
component_10
lotus
note
mac
technology_34
able
component_6
have
the
concept
of
be
able
to
extend
the
core
requirement_12
of
the
component_6
or
component_8
in
question
arguably
the
most
mature
component_8
in
technology_1
be
technology_35
which
have
be
around
almost
a
long
a
technology_1
itself
first
appear
a
jsr
but
more
recently
connector_22
a
jsr
technology_36
define
additional
metadata
in
the
jar
s
manifest
mf
to
indicate
require
connector_12
on
a
per
package
basis
this
permit
to
connector_16
at
runtime
that
their
connector_12
be
meet
and
in
addition
to
permit
each
to
have
it
own
private
classpath
by
virtue
of
have
one
classloader
per
this
help
but
do
not
completely
prevent
the
concept
of
connector_12
hell
mention
early
a
with
technology_28
technology_36
be
a
specification
currently
release
which
have
multiple
open
component_9
and
commercial
implementation
since
t
need
to
quality_attribute_19
on
any
technology_36
specific
many
open
component_9
technology_17
now
embed
their
meta
connector_data_4
into
the
manifest
for
consumption
in
technology_36
runtimes
for
those
that
t
technology_24
bnd
can
component_22
an
exist
jar
and
generate
sensible
default
eclipse
switch
to
technology_36
in
from
a
proprietary
plugin
component_8
many
other
component_3
that
have
proprietary
kernel
technology_37
technology_38
technology_39
have
follow
suit
and
base
their
runtimes
on
an
technology_36
kernel
a
well
more
recently
project
technology_40
have
be
create
in
order
to
modularise
the
jdk
itself
although
an
internal
part
of
the
jdk
and
with
the
potential
for
it
not
to
be
support
by
other
se
implementation
the
use
of
technology_40
outside
the
jdk
be
not
prevent
technology_40
be
also
likely
to
be
the
reference
implementation
for
the
aforementioned
jsr
although
work
be
still
ongoing
the
requirement
for
a
minimum
version
of
se
couple
with
the
fact
that
there
be
no
technology_1
at
the
moment
mean
that
technology_40
be
still
a
work
in
progress
and
that
it
isn
t
generally
quality_attribute_8
for
component_3
run
on
technology_1
or
below
to
encourage
adoption
of
a
technology_41
modularisation
technology_42
the
jsr
expert
group
be
currently
discus
the
quality_attribute_20
component_8
proposal
one
in
which
component_23
of
technology_1
technology_17
such
a
those
find
in
the
technology_25
pattern_5
and
from
the
of
technology_43
can
provide
meta
connector_data_4
that
will
be
consumable
by
both
technology_40
and
technology_36
component_8
combine
with
minor
connector_20
to
the
technology_1
technology_10
the
most
notable
be
the
addition
of
the
keyword
this
connector_data_4
could
be
generate
at
compile
time
by
sufficiently
advance
compiler
runtime
component_3
technology_40
or
technology_35
could
then
use
this
connector_data_4
in
validate
the
set
of
instal
and
their
connector_12
summary
this
discus
the
general
concept
of
quality_attribute_6
and
how
it
be
achieve
in
technology_1
component_8
since
the
compile
time
and
runtime
path
be
different
it
s
possible
to
have
inconsistent
technology_17
requirement
lead
to
connector_12
hell
however
plugin
component_11
allow
many
type
of
to
be
load
which
must
follow
the
component_21
s
connector_12
resolution
which
increase
the
possibility
of
such
an
inconsistency
occur
to
prevent
this
runtime
quality_attribute_6
component_3
technology_36
can
validate
the
set
of
requirement
ahead
of
time
to
determine
whether
an
component_6
can
be
correctly
start
instead
of
fail
in
a
silent
or
undetectable
manner
at
runtime
finally
work
be
ongoing
on
the
jsr
mailing
connector_data_6
to
create
a
component_8
for
the
technology_1
technology_10
which
can
be
define
in
it
entirety
in
the
technology_1
technology_10
specification
in
order
to
allow
technology_1
developer
to
generate
versioned
with
encode
connector_12
infomration
which
can
subsequently
be
use
in
any
component_8
inspire
by
this
content
connector_10
for
infoq
become
an
editor
for
infoq
be
one
of
the
best
decision
of
my
career
it
have
challenge
me
and
help
me
grow
in
so
many
way
we
technology_44
love
to
have
more
people
join
our
team
thomas
bettslead
editor
architecture
and
design
@infoq
senior
principal
engineer
connector_10
for
infoq
rate
this
adoption
style
author
this
content
be
in
the
technology_1
topic
relate
topic
development
architecture
&
design
jsr
jsr
jsr
jdk
jcp
technology_41
jdk
technology_36
jcp
technology_1
eclipse
open_source
component_3
technology_40
relate
editorial
popular
across
infoq
go
requirement_11
with
technology_15
and
graalvm
why
you
should
care
about
architecture
technology_1
news
roundup
jeps
for
jdk
project
lilliput
milestone
technology_15
technology_45
quarkus
state
of
the
technology_1
ecosystem
report
from
relic
ml
technology_24
to
accelerate
your
work
with
cassie
breviu
release
technology_46
dns
private
resolver
in
preview
relate
content
jep
component_24
to
extend
pattern_2
match
in
technology_1
technology_1
news
roundup
openjdk
technology_15
connector_data_7
and
cf
payara
component_25
technology_43
technology_31
connector_data_7
state
of
the
technology_1
ecosystem
report
from
relic
+
technology_1
=
♡
a
story
tell
by
martijn
verburg
at
devoxx
uk
technology_1
news
roundup
jeps
for
jdk
project
lilliput
milestone
technology_15
technology_45
quarkus
the
future
of
technology_1
a
see
by
mark
little
at
devoxx
uk
requirement_11
technology_1
adoptium
and
fast
pace
puzzle
from
jdk11
hanno
embregts
on
technology_1
certification
at
devoxx
uk
jep
technology_1
virtual
component_26
to
connector_8
improve
quality_attribute_21
technology_1
news
roundup
jeps
for
project
loom
and
panama
jobrunr
technology_3
preview
technology_1
current
state
compile
requirement_11
executables
for
startup
quality_attribute_22
and
small
footprint
technology_1
news
roundup
jep
connector_data_7
for
jdk
project
loom
microstream
relic
technology_1
survey
series
requirement_11
compilation
technology_47
technology_1
requirement_9
requirement_11
technology_1
with
the
micronaut
technology_45
requirement_11
technology_1
in
the
real
world
technology_48
requirement_11
technology_1
with
quarkus
revolutionize
technology_1
with
graalvm
requirement_11
image
level
up
your
technology_1
requirement_2
with
tornadovm
technology_1
infoq
trend
report—december
technology_1
&
technology_14
panel
six
feature
from
technology_1
to
to
connector_1
excite
about
kalix
build
serverless
requirement_9
requirement_11
requirement_15
crtical
component_10
with
no
component_2
microstream
connector_23
support
for
technology_49
quarkus
introduce
fine
grain
transaction
component_15
jetbrains
intellij
idea
introduce
connector_12
analysis
technology_3
pattern_6
technology_45
ktor
release
with
plugins
feature
go
requirement_11
with
technology_15
and
graalvm
jobrunr
connector_23
improve
technology_45
support
connector_24
start
to
quarkus
reactive
pattern_7
with
technology_43
technology_50
two
must
have
technology_24
for
jakarta
ee
developer
the
angular
mini
book
lightweight
external
requirement_15
rule
hashicorp
vault
improve
eventual
consistency
with
component_4
side
consistent
connector_data_8
announce
the
general
quality_attribute_23
of
technology_46
container
component_27
at
build
requirement_6
at
the
edge
how
connector_24
feedback
from
angry
component_28
help
to
develop
quality_attribute_12
technology_13
cloudflare
d1
provide
quality_attribute_3
technology_51
for
cloudflare
component_29
release
technology_10
requirement_4
train
dataset
massive
how
to
run
your
technology_13
department
a
coach
jetpack
bring
update
architectural
and
ui
component_19
and
improve
requirement_2
technology_24
release
technology_46
dns
private
resolver
in
preview
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_25
out
every
tuesday
join
a
of
over
senior
developer
pattern_8
an
example
enter
your
e
mail
connector_26
select
your
country
select
a
country
i
to
infoq
technology_52
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
hello
stranger
you
need
to
register
an
infoq
account
or
login
or
login
to
but
there
s
so
much
more
behind
be
register
connector_1
the
most
out
of
the
infoq
experience
tell
u
what
you
think
allow
technology_53
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_9
to
any
of
my
connector_data_10
in
this
component_30
watch
component_30
modular
technology_1
se
by
jaroslav
tulach
re
modular
technology_1
se
by
alex
blewitt
modular
=
package
or
composer
by
peng
sunny
nice
by
shalandra
sharma
modular
technology_1
se
by
jaroslav
tulach
your
connector_data_11
be
await
moderation
thank
you
for
participate
in
the
discussion
i
ve
be
investigate
way
to
eliminate
connector_12
between
various
subsystem
of
rt
jar
recently
a
part
of
the
modular
technology_1
se
experiment
the
above
mention
appletinitializer
problem
also
rise
up
a
well
a
many
others
thankfully
all
of
them
seem
solvable
the
modular
technology_1
se
can
be
build
and
also
connector_13
piece
by
piece
small
yet
backward
quality_attribute_9
technology_1
can
happen
which
make
folk
that
technology_1
but
hate
technology_33
and
technology_54
happy
your
contribution
be
welcome
connector_data_12
back
to
top
re
modular
technology_1
se
by
alex
blewitt
your
connector_data_11
be
await
moderation
thank
you
for
participate
in
the
discussion
i
should
probably
have
mention
in
the
but
technology_43
harmony
already
have
a
modular
technology_1
runtime
they
separate
out
their
into
different
which
be
then
make
quality_attribute_8
there
be
also
talk
of
a
minimal
jre
to
come
out
of
it
base
on
understand
the
set
of
actually
use
by
an
component_6
a
a
gsoc
project
but
i
ve
not
see
more
connector_data_7
than
that
connector_data_12
back
to
top
modular
=
package
or
composer
by
peng
sunny
your
connector_data_11
be
await
moderation
thank
you
for
participate
in
the
discussion
composer
be
not
package
but
technology_35
be
a
composer
modular
not
a
package
such
a
technology_55
s
jar
connector_data_12
back
to
top
nice
by
shalandra
sharma
your
connector_data_11
be
await
moderation
thank
you
for
participate
in
the
discussion
thanks
for
a
very
basic
and
informative
look
connector_27
to
future
in
the
series
thanks
shal
connector_data_12
back
to
top
close
your
connector_data_12
quote
original
connector_data_11
allow
technology_53
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_9
to
any
of
my
connector_data_10
in
this
component_30
cancel
close
your
connector_data_12
allow
technology_53
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_9
to
any
of
my
connector_data_10
in
this
component_30
cancel
close
ok
development
how
to
prepare
for
the
unexpected
an
influxdata
outage
story
tell
at
kubeconeu
reproducible
development
with
container
green
development
terminology
and
climate
commitment
explain
by
at
devoxx
uk
architecture
&
design
oren
eini
on
technology_9
include
consistency
guarantee
and
technology_5
a
the
implementation
technology_10
kalix
build
serverless
requirement_9
requirement_11
requirement_15
crtical
component_10
with
no
component_2
architecting
for
the
edge
culture
&
how
connector_24
feedback
from
angry
component_28
help
to
develop
quality_attribute_12
technology_13
how
to
run
your
technology_13
department
a
coach
build
a
culture
of
quality_attribute_24
and
curiosity
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
release
technology_10
requirement_4
train
dataset
massive
requirement_4
for
developer
a
future
or
a
reality
devops
hashicorp
vault
improve
eventual
consistency
with
component_4
side
consistent
connector_data_8
cloudflare
d1
provide
quality_attribute_3
technology_51
for
cloudflare
component_29
effectively
pattern_9
your
pattern_9
miedwar
meshbesher
on
use
vigilance
control
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_25
out
every
tuesday
join
a
of
over
senior
developer
pattern_8
an
example
connector_1
a
quick
overview
of
content
publish
on
a
variety
of
innovator
and
early
adopter
technology_56
what
you
don’t
that
you
don’t
stay
up
to
date
with
the
late
connector_data_4
from
the
topic
you
be
interest
in
enter
your
e
mail
connector_26
select
your
country
select
a
country
i
to
infoq
technology_52
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
qcon
development
conference
real
world
technical
talk
no
technology_13
pitch
practical
idea
to
inspire
you
and
your
team
qcon
san
francisco
oct
in
person
qcon
san
francisco
bring
together
the
world
s
most
innovative
senior
engineer
across
multiple
domain
to
connector_28
their
real
world
implementation
of
emerge
trend
and
practice
uncover
emerge
trend
and
practice
to
solve
your
complex
engineering
challenge
without
the
technology_13
pitch
connector_7
your
spot
now
home
create
account
login
qcon
conference
contribute
infoq
editor
about
infoq
about
c4media
technology_57
infoq
developer
requirement_16
diversity
infoq
live
infoq
live
infoq
live
qcon
san
francisco
qcon
plus
follow
u
on
youtube212k
follower
linkedin18k
follower
rss19k
reader
twitter50k
follower
facebook20k
alexanew
stay
in
the
the
infoq
podcast
engineering
culture
podcast
the
architect
newsletter
general
feedback
feedback@infoq
technology_52
advertising
sales@infoq
technology_52
editorial
editors@infoq
technology_52
requirement_16
marketing@infoq
technology_52
infoq
technology_52
and
all
content
copyright
©
c4media
inc
infoq
technology_52
component_21
at
contegix
the
best
isp
we
ve
ever
work
with
privacy
notice
term
and
condition
requirement_17
bt
