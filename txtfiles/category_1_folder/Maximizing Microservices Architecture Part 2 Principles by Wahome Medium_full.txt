maximize
pattern_1
architecture
part

principle
|
by
wahome
|
mediumget
unlimited
accessopen
in
apphomenotificationslistsstorieswritewahomefollowjul

2019·15
min
readmaximizing
pattern_1
architecture
part

principlesarchitecting
and
design
microservices“architecture
be
the
decision
that
you
wish
you
could
connector_1
right
early
in
a
project
”software
architecture
be
the
fundamental
organization
of
a
component_1
embody
in
it
component_2
their
relationship
to
each
other
and
the
environment
and
the
principle
and
guideline
govern
their
design
and
evolution
over
time
an
architectural
style
be
the
combination
of
distinctive
feature
in
which
architecture
be
perform
or
express
the
pattern_1
architecture
msa
style
describe
in
detail
in
part

of
this
series
be
a
distinctive
approach
to
architecture
that
connector_data_1
a
large
complex
component_3
a
a
suite
of
single

loosely
couple
independent
component_2
component_4
today
much
of
the
talk
about
pattern_1
architecture
be
base
upon
some
of
the
early
experience
and
encounter
with
the
style
in
the
early
2000s
make
the
now
famous
transition
from
the
obidos
monolithic
component_3
to
a
pattern_2
architecture
characterize
by
pattern_3
connector_data_2
and
small
“two
pizza”
team
“for
u
component_4
orientation
mean
pattern_3
the
connector_data_2
with
the
requirement_1
component_5
that
operate
on
the
connector_data_2
with
the
only
connector_2
through
a
publish
component_4

no
direct
component_6
connector_2
be
allow
from
outside
the
component_4
and
there’s
no
connector_data_2
connector_3
among
the
component_4
”—
werner
vogelsdespite
never
have
describe
their
transformation
with
the
term
“microservices”
a
lot
of
inspiration
have
be
draw
from
their
experience
acm
component_7

with
werner
vogels
remain
the
best
component_8
of
connector_data_3
on
how
they
go
about
it
slice
and
dicingmonoliths
to
pattern_1
by
slice
and
dicingmicroservices
be
derive
from
a
single
large
monolithic
component_3
by
slice
and
dice
it
into
many
loosely
couple
independent
and
autonomous
component_9
that
work
and
connector_4
with
each
other
through
standardize
component_10
to
solve
a
large
complex
requirement_1
problem
a
pattern_1
ecosystem
they
also
come
to
be
a
pluggable

on
component_11
to
work
along
exist
component_12
either
a
component_9
or
a
green
project
one
of
the
foremost
architectural
decision
whilst
carving
up
pattern_1
be
that
of
scoping
and
granularity
define
what
a
pattern_4
should
do
put
more
concisely
a
a
question
how
big
be
a
pattern_4
and
what
be
the
breadth
of
requirement_2
it
should
connector_5
to
put
this
into
perspective
we
revisit
one
of
the
big
design
drawback
of
monolithic
architecture
the
amount
of
in
them
there’s
so
much
connector_6
such
widely
differ
and
far
apart
requirement_2
that
any
modification
however
small
require
the
coordination
and
input
of
a
few
more
people
than
be
necessary
to
ensure
that
at
the
end
of
it
all
everyone’s
continue
operate
correctly
a
a
connector_data_4
developer
often
spend
more
time
on
requirement_3
and
regression
test
than
on
connector_7
requirement_1
capability
determine
the
right
granularity
of
pattern_1
be
a
requirement_4
of
art
meet
science
take
too
coarse
grain
an
approach
can
connector_data_4
into
“mini
monoliths”
while
take
too
fine
grain
an
approach
can
connector_data_4
into
“nano
services”
an
anti
pattern_5
on
their
initial
foray
into
pattern_1
most
people
wrestle
with
the
scoping
and
granularity
quagmire
in
itself
the
term
pattern_1
put
a
lot
of
emphasis
on
the
size
of
these
component_4
a
point
that
most
find
to
be
rather
unfortunate
“on
the
other
hand
try
to
do
a
big
design
upfront
divide
the
requirement_1
domain
for
a
large
number
of
pattern_1
be
not
practical
either
it
be
always
challenge
to
find
the
golden
number
of
pattern_1
to
start
with
but
it
quality_attribute_1
to
start
small
and
divide
late
”in
pursuit
of
the
right
level
of
granularity
for
pattern_1
it
be
imperative
for
organization
to
set
up
general
rule
of
thumb
and
guideline
that
inform
and
support
decision
make
principle
define
principles“principles
be
general
rule
and
guideline
intend
to
be
endure
and
seldom
amend
that
inform
and
support
the
way
in
which
an
organization
set
about
fulfil
it
mission
”architectural
principle
be
one
element
in
a
pattern_6
set
of
idea
that
collectively
define
and
guide
an
organization
from
requirement_5
through
to
action
and
connector_data_4
they
reflect
a
level
of
consensus
across
an
organization
and
embody
the
spirit
and
think
of
the
architecture
while
act
a
guideline
to
assist
with
decision
make
they
should
be
high
level
and
not
connector_8
in
stone
an
example
of
a
quality_attribute_1
principle
would
be
technology_1
agnostic
component_10
in
contrast
a
bad
principle
would
be
technology_2
web
component_9

the
early
example
embody
the
essence
of
a
quality_attribute_1
principle
it
be
high
level
agnostic
of
technical
detail
or
technology_1
and
can
be
apply
in
a
number
of
different
scenario
it
help
guide
individual
in
their
think
and
tell
you
what
to
look
for
in
an
technology_3
the
late
be
more
a
technology_4
than
it
be
a
principle
it
mandate
an
component_13
mechanism
a
technology_4
mandate
what
ought
to
be
do
while
a
principle
focus
on
the
‘why’
there
be
however
a
natural
relationship
between
principle
and
technology_4
ideally
technology_4
should
arise
from
principle
pattern_4
architecture
principlesloose
couple
and
high
quality_attribute_2
be
the
pièce
de
résistance
of
pattern_1
architecture
by
apply
a
much
loose
couple
and
quality_attribute_2
a
possible
pattern_1
overcome
most
of
the
shortcoming
of
monolithic
component_14
opening
up
a
world
of
possibility
principle
be
an
integral
part
in
the
efficacy
of
pattern_1
architecture
they
reinforce
it
strength
while
connector_9
it
shortcoming
below
be
some
of
the
key
architecture
and
design
principle
associate
with
pattern_1

single
responsibility
bound
component_15
single
responsibility
principle
image
from
learnstuff
ioeach
pattern_4
must
cover
and
be
responsible
for
a
specific
feature
or
requirement_2
or
an
aggregation
of
cohesive
requirement_2
single
bound
component_15
pattern_3
a
functional
domain
the
rule
of
thumb
in
apply
this
principle
be
“gather
together
those
thing
that
connector_10
for
the
same
reason
and
separate
those
thing
that
connector_10
for
different
reason
”
—
robert
technology_5
martin
uncle
bob
robert
technology_5
martin
in
coin
the
phrase
draw
the
principle’s
origin
from
two
classic
paper
out
of
the
70
a
fertile
time
for
principle
of
architecture
“structured
programming
and
design
be
all
the
rage
during
that
time
the
notion
of
couple
and
pattern_7
be
introduce
by
larry
constantine
and
amplify
by
tom
demarco
meilir
component_16
jones
and
many
others”
he
say
in
the
first
of
these
classic
paper
that
of
david
l
parnas
on
the
criterion
to
be
use
in
decompose
component_12
into
publish
in

parnas
compare
two
different
strategy
for
decompose
and
separate
component_5
in
a
quality_attribute_3
algorithm
he
conclude
“we
have
try
to
demonstrate
by
these
example
that
it
be
almost
always
incorrect
to
begin
the
decomposition
of
a
component_1
into
on
the
basis
of
a
flowchart
we
propose
instead
that
one
begin
with
a
connector_data_5
of
difficult
design
decision
or
design
decision
which
be
likely
to
connector_10
each
be
then
design
to
hide
such
a
decision
from
the
others
”edsger
dijkstra
true
to
his
usual
wit
and
bluntness
introduce
the
term
the
separation
of
concern
in
his

paper
on
the
role
of
scientific
think
the
second
of
the
classic
1970s
paper
that
uncle
bob
reference
it’s
a
widely
applicable
concept
in
architecture
and
design
pattern_5
today
that
have
be
hail
to
be
both
one
of
the
most
important
and
one
of
the
most
difficult
to
describe
because
it
be
an
abstraction
of
abstraction
the
single
responsibility
principle
srp
be
the
most
foundational
principle
of
quality_attribute_1
design
and
state
that
each
subsystem


or
even
should
have
one
and
only
one
reason
to
connector_10
which
align
with
parna’s
formulation
however
it
beg
the
question
what
define
a
reason
to
connector_10
enter
ddd

domain
drive
designdomain
drive
designwhile
attempt
to
answer
the
question
“what
define
a
reason
to
connector_10
”
you
might
have
wonder
whether
a
bug
fix
qualify
a
a
reason
to
connector_10
you
might
have
also
wonder
whether
refactors
be
reason
to
connector_10
too
well
these
question
can
be
answer
by
point
out
the
relationship
between
the
term
“reason
to
change”
and
“responsibility”
certainly
the
be
not
responsible
for
bug
fix
or
refactoring
those
thing
be
the
responsibility
of
the
programmer
not
of
the
component_17
but
if
that
be
the
requirement_4
what
be
the
component_17
responsible
for
or
perhaps
a
quality_attribute_1
question
be
who
be
the
component_17
responsible
to
quality_attribute_1
yet
who
must
the
design
of
the
component_17
respond
to
pattern_1
be
organize
and
build
around
pattern_3
requirement_1
capability
a
requirement_1
capability
represent
what
a
requirement_1
do
in
a
particular
domain
to
fulfill
it
objective
and
responsibility
incorporate
domain
drive
design
allow
the
architecture
to
isolate
component_1
ability
into
various
domain
design
around
real
world
domain
pattern_8
to
that
represent
the
real
world
problem
you
be
try
to
solve

pattern_9
black
component_18
black
component_18
pattern_9
principlea
component_4
should
only
be
connector_11
through
a
standardize
component_13
and
should
not
connector_12
it
internal
implementation
detail
composition
requirement_1
component_5
persistence
mechanism
e
t
technology_5
to
it
component_19
not
connector_13
implementation
detail
encourage
loose
couple
and
allow
great
quality_attribute_4
when
make
modification
to
the
component_4
consider
the
follow
team
a
build
a
component_4
that
require
it
component_20
to
it
component_21
component_6
primary
key
team
b
build
a
component_4
that
allow
generic
component_21
pattern_10
while

surrogate
key
for
connector_14
component_21
to
it
component_19
in
the
that
both
team
need
to
switch
to
a
different
persistence
mechanism
the
component_20
of
team
b’s
component_4
will
remain
unaffected
while
those
of
team
a’s
component_4
might
find
that
all
the
previously
use
key
have
become
invalid
other
common
example
that
break
the
hide
implementation
principle
include
component_4
require
or
connector_13
internal
parameter
component_4
that
connector_12
parameter
that
be
directly
tie
to
the
component_6
column
or
component_22
component_4
connector_3
component_6
accessservices
that
pervade
physical
deployment
awareness
on
their
component_19
e
g
expect
a
component_19
to
load
balance
across
multiple
instance
of
the
component_4

location
quality_attribute_5
component_4
discovery
location
quality_attribute_5
image
from
basedsservices
should
never
be
connector_14
directly
to
component_19
component_4
component_20
should
never
be
make
aware
or
dependent
on
the
exact
connector_9
of
the
component_4
they
should
instead
use
some
form
of
indirection
when
locate
or
invoke
component_4
the
implication
of
this
principle
be
a
component_4
connector_10
it
own
url
without
affect
the
component_19
component_4
can
be
quality_attribute_6
to
infrastructure
without
affect
their
component_19
for
quality_attribute_7
purpose
component_9
can
be
quality_attribute_6
multiple
time
without
require
any
reaction
from
their
component_19
consider
the
follow
team
a
connector_15
two
ip
connector_9
for
their
component_4
a
primary
and
a
failover
ip
component_20
be
expect
to
connector_10
connector_9
in
the
of
a
failure
scenario
the
component_20
be
couple
to
the
component_4
connector_9
team
b
connector_15
two
ip
connector_9
for
their
component_4
a
primary
and
a
failover
ip
component_20
be
expect
to
load
balance
across
the
connector_9
the
component_20
be
couple
to
the
component_4
connector_9
the
component_4
technology_6
be
unable
to
quality_attribute_8
horizontally
without
require
reaction
from
it
component_20
by
supply
additional
ip’s
to
them
team
technology_7
connector_15
their
service’s
vip
connector_9
for
their
ha
configuration
component_20
be
expect
to
always
connector_data_6
the
vip
which
could
point
to
either
the
primary
or
failover
connector_9
the
component_20
have
be
decouple
from
the
exact
component_4
connector_9
team
technology_8
connector_15
an
ip
connector_9
of
their
load
balancer
the
load
balancer
balance
across
a
number
of
quality_attribute_9
component_4
technology_9
component_20
be
expect
to
alway
connector_data_6
the
vip
which
in
turn
connector_16
the
connector_data_7
to
a
component_4
technology_9
the
component_20
have
be
decouple
from
the
exact
component_4
connector_9
team
e
connector_15
an
ip
for
a
component_4
registry
component_20
of
their
component_4
be
expect
to
first
pattern_10
the
component_4
connector_9
the
component_20
have
be
decouple
from
the
exact
component_4
connector_9
team
a
and
b
have
component_20
couple
to
their
services’
connector_9
in
the
example
above
while
team
technology_5
technology_8
and
e
have
connector_5
different
form
of
location
quality_attribute_5

decentralisationconway’s
lawmicroservices
embrace
loosely
couple
resource
to
achieve
autonomy
an
organization
should
strive
to
connector_17
power
out
of
the
center
organizationally
and
architecturally
each
component_4
handle
it
own
responsibility
should
be
favour
over
have
a
single
orchestrator
that
hold
all
requirement_1
component_5
in
one
place
within
a
pattern_1
environment
there
should
be
no
resource
centralization

independently
deployablemicroservices
should
be
independently
quality_attribute_10
a
component_11
of
the
application’s
ecosystem
this
principle
enable
a
connector_10
in
one
component_4
to
be
quality_attribute_6
without
require
any
other
component_9
to
be
quality_attribute_6
in
a
monolithic
component_3
any
connector_10
to
the
component_1
require
a
version
of
the
entire
component_3
build
and
quality_attribute_6
this
increase
the
complexity
of
quality_attribute_6
and
with
it
the
risk
of
a
fail
quality_attribute_6
moreover
quality_attribute_7
the
component_3
by

instance
imply
that
the
entire
component_3
have
to
be
replicate
with
every
instance
if
a
container
or
instance
become
unhealthy
the
entire
component_3
be
affect
in
contrast
the
complexity
and
risk
that
a
quality_attribute_6
will
fail
be
significantly
lower
in
an
independently
quality_attribute_10
pattern_4
environment
feature
can
be
quality_attribute_6
in
the
component_4
they
belong
to
without
affect
any
other
component_4
the
component_4
be
also
independently
quality_attribute_11
and
failure
of
the
component_4
only
affect
requirement_2
specific
to
it
leave
the
rest
of
the
component_3
unaffected

culture
of
automationautomated
deployment
image
from
red
gate
comslicing
up
a
monolithic
component_3
into
a
suite
of
component_2
component_9
in
a
highly
decompose
ecosystem
be
bind
to
connector_data_4
in
a
noticeable
increase
in
independent
quality_attribute_10
unit
embed
automation
into
the
culture
of
an
organization
and
invest
in
technology_10
to
support
it
yield
high

in
a
pattern_1
environment
by
deal
with
the
quality_attribute_12
overhead
an
increase
in
quality_attribute_10
unit
bring
along
it’s
also
quite
quality_attribute_13
in
establish
a
uniform
way
of
accomplish
cross
cut
concern
such
a
build
test
and
deployment
across
pattern_1
team

standardize
component_13
mechanism
with
a
publish
contracta
services’s
should
be
a
well
define
standardize
and
widely
adopt
mechanism
that
be
publish
and
quality_attribute_14
to
it
component_19
this
component_13
be
consistent
across
other
pattern_1
to
encourage
re
use
and
avoid
breakage
point
to
point
requirement_3
use
a
standardize
and
widely
adopt
mechanism
allow
the
component_4
to
be
more
easily
connector_11
across
different
component_12
and
technology_11
and
by
far
more
component_20
in
a
short
period
of
time
consider
the
follow
team
a
connector_15
their
component_4
use
the
late
web
hook
technology_12
support
by
their
technology_11
team
b
connector_15
their
component_4
use
a
proprietary
mechanism
support
by
their
component_3
component_23
team
technology_7
connector_15
their
component_4
use
pattern_11
web
component_4
component_19
of
the
of
team
a
find
limitation
in
connector_18
the
component_4
a
the
web
hook
technology_12
lack
support
for
multiple
technology_11
similarly
to
use
the
proprietary
mechanism
component_20
of
the
of
team
b
might
need
to
incur
license
cost

backwards
compatibilityinterfaces
should
always
remain
backwards
quality_attribute_15
break
connector_19
to
an
that
will
force
commensurate
reaction
from
a
service’s
component_20
should
not
be
permit
consider
the
follow
team
a
connector_15
a
component_4
via
a
quality_attribute_3

whenever
modification
be
need
they
simply
connector_10
the
and
connector_20
component_20
of
the
connector_10
team
b
connector_15
a
component_4
via
a
quality_attribute_3

whenever
modification
be
need
they
create
a
version
of
the
and
connector_20
component_20
that
they
need
to
plan
a
migration
to
the

possibly
with
deprecation
timeline
component_19
of
team
a’s
component_9
will
find
that
suddenly
the
no
long
and
be
force
to
make
unplanned
connector_10
component_20
of
team
b’s
component_9
will
be
connector_21
of
a
version
along
with
the
deprecation
timeline
for
the
early
version
they
can
plan
the
migration
to
the
component_4
whenever
they
have
capacity

version
dependencydependency
on
component_9
should
be
base
on
the
version
and
not
on
the
version
of
the
component_3
connector_13
the

component_12
should
be
dependent
on
the
version
of
the
they
be
connector_18
and
completely
unaware
of
the
version
of
the
component_3
that
connector_15
it
consider
the
follow
team
a
quality_attribute_16
generate
stub
whenever
they
build
and
release
a
version
of
the
component_3
component_20
be
expect
to
connector_4
with
the
late
stub
team
b
quality_attribute_16
generate
stub
for
each
connector_14

they
only
supply
stub
for
component_9
or
version
of
exist
component_4
component_19
of
team
a’s
component_9
have
their
development
and
deployment
cycle
highly
couple
to
those
of
team
a’s
component_4
whenever
team
a
release
a
build
they
be
require
to
update
their

even
if
there
be
no
connector_10
in
the
they
be
connector_11
conversely
component_20
of
team
b’s
component_9
be
independent
of
the
development
and
deployment
cycle
of
team
b
when
team
b
quality_attribute_6
version
of
their
component_3
component_20
of
exist
component_9
remain
unaffected
they
only
have
to
update
their
when
they
feel
most
comfortable
to
move
to
a
version
of
the
they
be
connector_11

highly
observablemonitoring
and
observabilitymaintaining
a
healthy
production
environment
where
a
fleet
of
pattern_1
form
an
application’s
ecosystem
require
that
the
component_2
component_9
be
highly
observable
the
environment
must
be
discoverable
it
should
provide
enough
connector_data_3
to
ascertain
the
state
of
the
component_1
“monitor
in
fact
pattern_12
everything
”we
connector_1
away
with
simplistic
and
manual
pattern_13
in
monolithic
component_12
but
this
do
not
quality_attribute_8
well
with
pattern_1
look
for
failure
in
monolithic
component_12
be
base
on
very
basic
approach
100%
cpu
usage
suggest
an
error
in
a
pattern_4
environment
high
cpu
usage
on
one
container
or
instance
do
not
necessarily
imply
an
error
inform
component_1
health
decision
be
base
on
aggregate
connector_data_2
a
component_4
should
be
easily
pattern_12
and
proactively
alert
in
the
of
a
detectable
risk
component_9
should
be
develop
with
observability
and
pattern_13
in
mind
consider
the
follow
team
a
make
use
of
a
component_4
heart
beat
and
connector_15
a
health
connector_22

component_20
of
the
component_4
will
be
immediately
make
aware
whenever
the
component_4
be
unavailable
if
a
heart
beat
be
miss
team
b
connector_15
a
smoke
screen
test
that
connector_23
all
it
connector_24
when
invoke
health
connector_23
be
make
easily
both
after
deployment
and
while
the
component_1
be
run
team
technology_7
connector_25
a
pattern_14
validation
component_24
prior
to
run
their
cob
overnight
pattern_14

they
do
so
to
detect
and
fix
any
anomaly
before
the
lengthy
pattern_14
kick
in

resiliency
and
failure
isolationmicroservices
architecture
be
not
a
silver
bullet
it
do
not
automatically
make
your
component_12
more
quality_attribute_17
considerable
effort
be
require
to
isolate
component_1
failure
within
the
component_9
they
occur
in
to
avoid
burden
component_20
of
a
component_4
with
handle
it
failure
failure
should
not
propagate
to
more
component_11
within
a
pattern_4
a
well
a
to
other
component_9
and
the
entire
component_1
should
stay
responsive
in
the
face
of
individual
component_4
failure
component_11
should
be
isolate
from
each
other
with
each
component_2
contain
it
own
failure
thereby
ensure
that
part
of
the
component_1
can
fail
and
recover
without
impair
the
component_1
a
a
whole
consider
the
follow
team
a
quality_attribute_6
their
component_4
onto
a
single
component_3
component_23
component_20
use
the
component_4
by
connector_26
a
hardcoded
url
that
connector_27
directly
to
this
component_3
component_23
team
b
quality_attribute_6
their
component_4
onto
multiple
component_3
component_23
component_20
use
the
component_4
by
connector_26
a
url
that
connector_27
to
a
load
balancer
that
in
turn
connector_27
to
one
of
the
quality_attribute_14
component_3
component_23
team
technology_7
quality_attribute_6
their
component_4
onto
a
requirement_6
infrastructure
component_4
that
allow
for
multi
region
failover
if
the
component_4
be
unavailable
in
one
region
a
connector_data_7
be
automatically
connector_27
to
an
alternative
region

appropriate
securitya
component_4
should
connector_5
the
appropriate
level
of
quality_attribute_18
base
on
the
domain
it
pattern_3
the
implication
of
this
principle
be
that
different
component_9
connector_5
different
quality_attribute_18
mechanism
a
the
level
of
quality_attribute_18
apply
be
dependent
on
the
requirement_2
the
component_4
connector_12
consider
the
follow
team
a
be
work
on
a
component_4
that
connector_28
requirement_7
connector_data_3
give
an
upcoming
connector_data_2
privacy
legislation
the
component_4
connector_14
should
connector_5
connector_data_2
pattern_15
in
order
to
protect
the
connector_data_3
team
b
be
work
on
a
gateway
component_4
that
facilitate
international
payment
give
the
domain
the
component_4
pattern_3
the
component_4
should
make
consideration
for
use
trust
third
party
supply
certificate
for
pattern_16
and
pattern_15
to
quality_attribute_19
the
component_4
and
it

team
technology_7
be
work
on
a
component_4
that

publicly
quality_attribute_14
currency
connector_data_3
such
a
a
currency’s
iso
and
it
quality_attribute_20
give
the
nature
of
the
connector_data_2
their
component_4
handle
quality_attribute_18
would
not
be
a
serious
consideration
for
team
technology_5
summaryprinciples
be
an
integral
part
in
realize
the
efficacy
of
pattern_1
architecture
they
reflect
a
level
of
consensus
across
an
organization
and
embody
the
spirit
and
think
of
the
architecture
while
act
a
guideline
to
assist
with
decision
make
they
ought
to
be
high
level
and
not
connector_8
in
stone
while
principle
connector_9
the
‘why’
technology_4
mandate
what
ought
to
be
do
there
be
however
a
natural
relationship
between
principle
and
technology_4
that
take
the
form
of
technology_4
arise
from
principle
technology_4
be
the
focus
of
part

of
this

thank
you
for
connector_29
and
i
sincerely
hope
you
enjoy
it
a
much
a
i
do
connector_30
it
you
can
catch
me
at
technology_13
kwahometwitter
@kwahome_references
technology_14
pub
opengroup

architecture
togaf8
doc
arch
chap29
htmlhttps
www
opengroup

technology_15
component_8
book
msawp
p2
htmhttp
www
in
gmbh
eu
connector_31

whoneedsarchitect
pdfhttps

cleancoder
technology_16
uncle
bob



singlereponsibilityprinciple
htmlhttps
martinfowler
technology_16

pattern_1
htmlhttp
www
infoq
technology_16
presentation
migration
requirement_8
nativehttps
component_7
acm

detail
cfm
id=1142065http
philcalcado
technology_16



how_we_ended_up_with_microservices
htmlhttps
developer
technology_17
technology_16

build
technology_18
at
technology_17
part

break
the
monolithhttps
smartbear
technology_16
solution
pattern_1
technology_14
www
youtube
technology_16
watch
v=hsoovfbpaoehttps
vimeo
technology_16


1more
from
wahomefollowfirst
solve
the
problem
then
connector_8
the

technology_14
technology_13
technology_16
kwahome
technology_14
www
linkedin
technology_16
in
kelvinwahome
love
podcast
or
audiobooks
on
the
go
with
our
component_25
try
knowablerecommended
from
mediummanoj
tiwaricore
requirement_5
of
quality_attribute_21
modelstef
nestorelasticsearch
quality_attribute_18
authenticatenivedithaorigin
of
devopskyran
erginfinding
the
second
flag
firstudit
jindalfrugal
approach
to
scalingtsaki
hate
your
challenge
nithsjuvinianthony
mersinoinleadership
and
agilitydownloadable
agile
principle
&
scrum
tip
sheetabouthelptermsprivacyget
the
appget
startedwahome66
followersfirst
solve
the
problem
then
connector_8
the

technology_14
technology_13
technology_16
kwahome
technology_14
www
linkedin
technology_16
in
kelvinwahome
followmore
from
mediumparis
nakita
kejserindevops
engineer
architect
and
developeringfrom
pattern_1
to
headless
architecture
—
connector_32
your
developer
s
frustrationdan
siwiecindan
on
codingmonorepos
for
pattern_1
part

structurenuno
britesingeek
culturescanning
pattern_1
for
dependenciesthomasintowards
devdiagrams
directly
in
markdown
with

line
of
codehelpstatuswritersblogcareersprivacytermsaboutknowable
