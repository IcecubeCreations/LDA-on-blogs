requirement_1
comparison
of
several
common
technology_1
technology_2
in
technology_3
programmer
help
where
programmer
connector_1
help
home
tag
requirement_1
comparison
of
several
common
technology_1
technology_2
in
technology_3
this
u
jmh
to
test
the
requirement_1
of
several
common
technology_1
requirement_2
technology_2
in
technology_3
every
time
i
see
on
the
internet
what
people
say
about
how
quality_attribute_1
a
technology_2
be
crush
other
technology_2
but
it
s
quality_attribute_1
to
see
a
hundred
thing
than
to
hear
them
only
those
who
have
test
them
by
themselves
be
the
most
trustworthy
technology_1
be
a
fairly
common
connector_data_1
transfer
technology_4
in
both
web
and
component_1
development
in
general
we
t
need
to
be
overly
concern
about
the
requirement_1
of
technology_1
requirement_2
construct
except
on
component_2
with
high
requirement_1
requirement
at
present
there
be
many
kind
of
open_source
technology_1
technology_2
for
technology_3
next
we
take
four
commonly
use
technology_1
technology_2
for
requirement_1
test
and
comparison
at
the
same
time
accord
to
the
test
connector_data_2
we
analyze
if
we
choose
the
most
suitable
technology_1
technology_2
accord
to
the
actual
component_3
scenario
the
four
technology_1
technology_2
be
technology_5
fastjson
technology_6
and
technology_7
lib
brief
introduction
choose
a
suitable
technology_1
technology_2
should
be
consider
from
many
aspect
requirement_2
to
technology_1
requirement_1
requirement_2
into
javabean
requirement_1
javabean
construct
technology_1
requirement_1
set
construction
technology_1
requirement_1
ease
of
use
first
i
briefly
introduce
the
identity
background
of
the
four
technology_2
technology_5
project
connector_2
technology_8
technology_9
technology_10
technology_5
technology_5
be
currently
the
most
fully
functional
technology_7
requirement_3
technology_5
be
originally
develop
by
to
meet
the
internal
need
of
but
it
have
be
use
by
many
requirement_4
or
component_4
since
it
first
release
in
technology_5
s
component_3
be
mainly
to
technology_7
and
fromjson
two
conversion
no
connector_3
no
need
for
exceptional
additional
jar
can
run
directly
on
jdk
before
use
this
connector_data_3
transformation
it
be
necessary
to
create
the
type
of
connector_data_3
and
it
member
before
successfully
convert
technology_1
into
correspond
connector_data_3
a
long
a
there
be
connector_1
and
set
in
the
technology_5
can
completely
realize
the
transformation
of
complex
type
of
technology_1
to
component_5
or
component_5
to
technology_7
which
be
the
magic
weapon
of
technology_1
requirement_2
fastjson
project
connector_2
technology_8
technology_9
technology_10
alibaba
fastjson
fastjson
be
a
high
requirement_1
technology_1
processor
connector_4
in
technology_3
technology_11
develop
by
alibaba
no
connector_3
no
extra
jar
exception
can
run
directly
on
jdk
fastjson
have
some
problem
with
complex
type
of
component_6
transformation
technology_7
which
lead
to
error
in
technology_7
transformation
and
need
to
make
reference
fastjson
u
original
algorithm
to
quality_attribute_2
up
requirement_2
to
it
maximum
exceed
all
technology_1
technology_2
technology_6
project
connector_2
technology_8
technology_9
technology_10
fasterxml
technology_6
technology_6
be
a
widely
use
technology_3
open_source
technology_12
for
serialize
and
deserializing
technology_7
the
technology_6
be
relatively
active
and
connector_data_4
fast
accord
to
statistic
from
technology_9
technology_6
be
one
of
the
most
popular
technology_1
requirement_3
technology_13
pattern_1
the
default
technology_7
requirement_3
be
technology_6
technology_6
have
many
advantage
technology_6
rely
on
few
jar
package
and
be
easy
to
use
technology_6
par
large
technology_7
fast
than
other
technology_3
technology_7
technology_12
such
a
technology_5
technology_6
runtime
occupy
le
memory
and
perform
quality_attribute_1
technology_6
have
a
quality_attribute_3
component_7
that
can
be
easily
extend
and
customize
the
late
version
be
technology_6
s
core
consist
of
three
part
the
technology_6
core
core
package
provide
an
component_7
base
on
connector_5
pattern_2
requirement_2
which
include
jsonpaser
and
jsongenerator
technology_6
s
internal
implementation
generate
and
par
technology_7
through
technology_7
generator
and
technology_7
requirement_3
of
the
high
requirement_1
connector_6
mode
technology_14
technology_6
annotation
annotation
package
provide
technology_15
annotation
the
technology_6
databind
connector_data_1
bind
package
provide
connector_data_3
bind
requirement_2
base
component_7
objectmapper
and
tree
component_8
requirement_2
base
component_7
jsonnode
connector_data_3
bind
requirement_2
base
component_7
and
tree
component_8
requirement_2
base
component_7
rely
on
connector_5
component_8
requirement_2
base
technology_14
why
be
technology_6
s
introduction
so
long
because
it
be
also
my
favorite
technology_7
lib
project
connector_2
technology_8
technology_7
lib
sourceforge
net
index
technology_16
technology_7
lib
be
also
the
most
widely
use
technology_1
requirement_2
technology_17
at
the
begin
the
disadvantage
of
technology_7
lib
be
that
it
really
quality_attribute_4
on
many
third
party
package
for
complex
type
of
conversion
technology_7
lib
also
have
shortcoming
for
technology_1
to
component_6
for
example
there
will
be
a
connector_data_5
or
connector_data_6
set
of
another
in
one
and
the
transformation
of
technology_7
lib
from
technology_1
to
component_5
will
be
problematic
technology_7
lib
can
not
meet
the
need
of
the
internet
in
term
of
and
requirement_1
connector_4
requirement_1
test
next
start
connector_7
requirement_1
test
for
these
four
technology_2
technology_18
connector_3
first
of
all
of
technology_18
connector_3
for
four
technology_2
to
be
fair
i
use
all
of
their
late
version
technology_7
libs
connector_3
net
sf
technology_7
lib
technology_7
lib
version
version
classifier
jdk15
classifier
connector_3
connector_3
technology_10
technology_5
technology_5
version
version
connector_3
connector_3
technology_10
alibaba
fastjson
version
version
connector_3
connector_3
technology_10
fasterxml
technology_6
core
technology_6
databind
version
version
connector_3
connector_3
technology_10
fasterxml
technology_6
core
technology_6
annotation
version
version
connector_3
technology_17
for
four
technology_2
fastjsonutil
technology_3
fastjsonutil
{
bean2json
connector_data_3
obj
{
technology_7
tojsonstring
obj
}
t
t
json2bean
jsonstr
t
objclass
{
technology_7
parseobject
jsonstr
objclass
}
}
gsonutil
technology_3
gsonutil
{
private
technology_5
technology_5
=
gsonbuilder
create
bean2json
connector_data_3
obj
{
technology_5
tojson
obj
}
t
t
json2bean
jsonstr
t
objclass
{
technology_5
fromjson
jsonstr
objclass
}
jsonformatter
uglyjsonstr
{
technology_5
technology_5
=
gsonbuilder
setprettyprinting
create
jsonparser
jp
=
jsonparser
jsonelement
je
=
jp
requirement_2
uglyjsonstr
technology_5
tojson
je
}
}
jacksonutil
technology_3
jacksonutil
{
private
objectmapper
mapper
=
objectmapper
bean2json
connector_data_3
obj
{
try
{
mapper
writevalueasstring
obj
}
catch
jsonprocessingexception
e
{
e
printstacktrace
}
}
t
t
json2bean
jsonstr
t
objclass
{
try
{
mapper
readvalue
jsonstr
objclass
}
catch
ioexception
e
{
e
printstacktrace
}
}
}
jsonlibutil
technology_3
jsonlibutil
{
bean2json
connector_data_3
obj
{
=
fromobject
obj
tostring
}
@suppresswarnings
unchecked
t
t
json2bean
jsonstr
t
objclass
{
t
tobean
fromobject
jsonstr
objclass
}
}
prepare
the
component_8
here
i
connector_4
a
quality_attribute_5
person
with
attribute
of
date
connector_data_5
connector_data_6
and
the
custom
fullname
to
simulate
the
real
scene
to
the
greatest
extent
person
{
private
name
private
fullname
fullname
private
age
private
date
birthday
private
connector_data_5
hobby
private
connector_data_6
clothe
private
connector_data_5
person
friend
getter
setter
ellipsis
@override
tostring
{
stringbuilder
str
=
stringbuilder
person
name=
+
name
+
fullname=
+
fullname
+
age=
+
age
+
birthday=
+
birthday
+
hobbies=
+
hobby
+
clothes=
+
clothe
+
n
if
friend
=
{
str
append
friend
n
for
person
f
friend
{
str
append
t
append
f
}
}
str
tostring
}
}
fullname
{
private
firstname
private
middlename
private
lastname
fullname
{
}
fullname
firstname
middlename
lastname
{
this
firstname
=
firstname
this
middlename
=
middlename
this
lastname
=
lastname
}
ellipsis
getter
and
setter
@override
tostring
{
firstname=
+
firstname
+
middlename=
+
middlename
+
lastname=
+
lastname
+
}
}
technology_1
serialization
requirement_1
benchmark
@benchmarkmode
mode
singleshottime
@outputtimeunit
timeunit
second
@state
scope
benchmark
jsonserializebenchmark
{
**
*
number
of
serialization
parameter
*
@param
{
}
private
count
private
person
p
args
throw
exception
{
option
opt
=
optionsbuilder
include
jsonserializebenchmark
getsimplename
fork
warmupiterations
build
collection
runresult
connector_data_7
=
runner
opt
run
resultexporter
exportresult
technology_7
serialization
requirement_1
connector_data_2
count
second
}
@benchmark
jsonlib
{
for
i
=
i
count
i++
{
jsonlibutil
bean2json
p
}
}
@benchmark
technology_5
{
for
i
=
i
count
i++
{
gsonutil
bean2json
p
}
}
@benchmark
fastjson
{
for
i
=
i
count
i++
{
fastjsonutil
bean2json
p
}
}
@benchmark
technology_6
{
for
i
=
i
count
i++
{
jacksonutil
bean2json
p
}
}
@setup
prepare
{
connector_data_5
person
friends=new
arraylist
person
friend
createaperson
xiao
ming
friend
createaperson
tony
friend
createaperson
chen
xiao
er
p=createaperson
xiao
shu
friend
}
@teardown
shutdown
{
}
private
person
createaperson
name
connector_data_5
person
friend
{
person
newperson=new
person
newperson
setname
name
newperson
setfullname
fullname
zjj_first
zjj_middle
zjj_last
newperson
setage
connector_data_5
hobbies=new
arraylist
hobby
basketball
hobby
swim
hobby
cod
newperson
sethobbies
hobby
connector_data_6
clothes=new
hashmap
clothe
put
coat
nike
clothe
put
trouser
adidas
clothe
put
shoe
anta
newperson
setclothes
clothe
newperson
setfriends
friend
newperson
}
}
to
illustrate
in
the
above
resultexporter
exportresult
technology_7
serialization
requirement_1
connector_data_2
count
second
this
be
my
own
of
fill
the
requirement_1
test
report
connector_data_1
into
the
echarts
diagram
and
then
export
the
png
image
the
connector_data_7
of
the
connector_8
be
a
follow
from
the
above
test
connector_data_2
we
can
see
that
when
serialization
time
be
relatively
small
technology_5
requirement_1
be
the
best
when
the
number
of
serialization
time
be
increasing
to
technology_5
be
weak
than
technology_6
and
fastjson
at
this
time
fastjson
requirement_1
be
real
cattle
in
addition
we
can
see
that
technology_6
have
be
outstanding
regardless
of
the
number
of
small
or
large
and
that
technology_7
lib
be
funny
technology_19
technology_1
deserialization
requirement_1
benchmark
@benchmarkmode
mode
singleshottime
@outputtimeunit
timeunit
second
@state
scope
benchmark
jsondeserializebenchmark
{
**
*
deserialization
number
parameter
*
@param
{
}
private
count
private
jsonstr
args
throw
exception
{
option
opt
=
optionsbuilder
include
jsondeserializebenchmark
getsimplename
fork
warmupiterations
build
collection
runresult
connector_data_7
=
runner
opt
run
resultexporter
exportresult
technology_7
deserialization
requirement_1
connector_data_2
count
second
}
@benchmark
jsonlib
{
for
i
=
i
count
i++
{
jsonlibutil
json2bean
jsonstr
person
}
}
@benchmark
technology_5
{
for
i
=
i
count
i++
{
gsonutil
json2bean
jsonstr
person
}
}
@benchmark
fastjson
{
for
i
=
i
count
i++
{
fastjsonutil
json2bean
jsonstr
person
}
}
@benchmark
technology_6
{
for
i
=
i
count
i++
{
jacksonutil
json2bean
jsonstr
person
}
}
@setup
prepare
{
jsonstr=
{
name
xiao
shu
fullname
{
firstname
zjj_first
middlename
zjj_middle
lastname
zjj_last
}
age
birthday
hobby
basketball
swim
cod
clothe
{
shoe
anta
trouser
adidas
coat
nike
}
friend
{
name
xiao
ming
fullname
{
firstname
xxx_first
middlename
xxx_middle
lastname
xxx_last
}
age
birthday
hobby
basketball
swim
cod
clothe
{
shoe
anta
trouser
adidas
coat
nike
}
friend
null}
{
name
tony
fullname
{
firstname
xxx_first
middlename
xxx_middle
lastname
xxx_last
}
age
birthday
hobby
basketball
swim
cod
clothe
{
shoe
anta
trouser
adidas
coat
nike
}
friend
null}
{
name
chen
xiao
er
fullname
{
firstname
xxx_first
middlename
xxx_middle
lastname
xxx_last
}
age
birthday
hobby
basketball
swim
cod
clothe
{
shoe
anta
trouser
adidas
coat
nike
}
friend
null}
}
}
@teardown
shutdown
{
}
}
the
connector_data_7
of
the
connector_8
be
a
follow
from
the
test
connector_data_7
above
we
can
see
that
technology_5
technology_6
and
fastjson
be
not
very
different
when
deserializing
and
their
requirement_1
be
excellent
and
that
technology_7
lib
be
still
go
to
be
funny
component_9
xncoding
technology_10
technology_3
jsons
technology_16
quality_attribute_1
essay
selection
interviewer
have
you
analyze
the
component_9
of
technology_13
mvc
technology_3
requirement_1
optimization
teach
you
how
to
run
efficiently
connector_data_8
base
multi
component_10
identity
pattern_3
architecture
design
what
exactly
do
the
bottom
of
select
count
*
do
analysis
of
springboot
startup
principle
tag
technology_3
technology_1
technology_9
on
sit
by
kt
pattern_4
tag
technology_3
component_11
technology_20
attribute
programming
technology_21
technology_13
technology_22
technology_23
linux
technology_1
le
requirement_5
technology_9
technology_24
technology_25
technology_26
encoding
requirement_6
technology_27
©2022
programmer
help
