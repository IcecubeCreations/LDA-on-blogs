best
practice
zu
pattern_1
design
logik
und
component_1
newsletter
whitepaper
webinare
stellenmarkt
newsletter
whitepaper
webinare
stellenmarkt
it
award
special
canonical
ubuntu
technology_1
definitionen
development
agile
quality_attribute_1
und
test
cod
component_2
web
ui
&
ux
devops
ci
&
cd
container
devsecops
versionskontrolle
teamführung
requirement_1
requirement_2
container
orchestrierung
everything
a
pattern_2
observability
&
pattern_3
paas
requirement_3
connector_1
requirement_3
compliance
projektmanagement
rollout
&
inventar
component_3
&
support
softwarequalität
solution
technology_2
component_1
betriebssysteme
datenbanken
technology_3
ides
und
technology_4
programmiersprachen
technologien
blockchain
iot
&
embed
ki
&
ml
low
&
no
open_source
news
ebooks
mediathek
anbieter
bilder
cio
briefing
forum
akademie
it
award
aktuelle
beiträge
au
it
award
it
award
da
sind
die
gewinner
der
it
award
die
it
award
–
auch
in
diesem
jahr
al
livestream
wer
sind
ihre
it
anbieter
und
hersteller
de
jahres
it
award
die
leser
haben
entschieden
–
die
gewinner
der
it
award
die
große
leserwahl
ist
au
wer
gewinnt
die
it
award
–
jeder
kann
bei
der
preisverleihung
dabei
sein
special
canonical
ubuntu
technology_1
definitionen
aktuelle
beiträge
au
special
definition
„steuerungsumkehr“
be
bedeutet
inversion
of
control
definition
„black
component_4
und
white
component_4
testing“
der
unterschied
zwischen
black
component_4
und
white
component_4
test
definition
„control
flow“
be
ist
eine
kontrollstruktur
development
agile
quality_attribute_1
und
test
cod
component_2
web
ui
&
ux
aktuelle
beiträge
au
development
da
technology_5
technology_3
technology_6
j
teil
arbeiten
mit
der
composition
technology_7
von
technology_8
trustinsoft
analyzer
mathematische
schwachstellen
analyse
bericht
zeigt
defizite
bezüglich
wissen
und
erfahrung
e
hakt
bei
der
cloudnativen
softwareentwicklung
devops
ci
&
cd
container
devsecops
versionskontrolle
teamführung
aktuelle
beiträge
au
devops
auslieferungsprozess
beherrschen
teil
continuous
delivery
mit
technology_9
action
update
veröffentlicht
canonical
technology_10
ist
verfügbar
maschinenidentitäten
verwalten
und
überwachen
grundsätze
für
besseres
devsecops
requirement_1
requirement_2
container
orchestrierung
everything
a
pattern_2
observability
&
pattern_3
paas
aktuelle
beiträge
au
requirement_1
requirement_2
versicherungskonzern
hdi
setzt
auf
requirement_1
requirement_2
automatisierte
quality_attribute_1
und
compliance
prozesse
unternehmen
brauchen
heute
vollständige
transparenz
auf
dem
weg
zur
full
technology_2
observability
die
starken
four
open
be
ist
open
infrastructure
requirement_3
connector_1
requirement_3
compliance
projektmanagement
rollout
&
inventar
component_3
&
support
softwarequalität
aktuelle
beiträge
au
requirement_3
versicherungskonzern
hdi
setzt
auf
requirement_1
requirement_2
automatisierte
quality_attribute_1
und
compliance
prozesse
gesetz
zur
updatepflicht
bringt
die
updatepflicht
neue
risiken
für
unternehmen
open_source
–
unterstützend
unvermeidlich
unübersichtlich
sind
open
component_5
lizenzen
wirklich
kompliziert
solution
technology_2
component_1
betriebssysteme
datenbanken
technology_3
ides
und
technology_4
programmiersprachen
aktuelle
beiträge
au
solution
technology_2
da
technology_5
technology_3
technology_6
j
teil
arbeiten
mit
der
composition
technology_7
von
technology_8
definition
„steuerungsumkehr“
be
bedeutet
inversion
of
control
qualitätssicherung
mit
pdb
und
anderen
technology_4
debug
von
technology_11
programmen
technologien
blockchain
iot
&
embed
ki
&
ml
low
&
no
open_source
aktuelle
beiträge
au
technologien
bericht
zeigt
defizite
bezüglich
wissen
und
erfahrung
e
hakt
bei
der
cloudnativen
softwareentwicklung
die
starken
four
open
be
ist
open
infrastructure
die
grenzen
de
iot
mit
der
blockchain
überwinden
die
blockchain
al
bindeglied
zwischen
iot
datenschutz
und
cybersicherheit
news
ebooks
mediathek
anbieter
bilder
cio
briefing
forum
akademie
mehr
login
solution
technology_2
component_1
best
practice
zu
pattern_1
design
logik
und
component_1
mikrodienste
entwerfen
und
strukturieren
best
practice
zu
pattern_1
design
logik
und
component_1
2018autor
redakteur
georg
lauer
*
stephan
augstenwie
sieht
gut
pattern_1
design
au
wenn
micro
klein
ist
–
wie
klein
sind
dann
die
component_3
wie
können
component_1
und
technology_3
dafür
aussehen
be
kann
eine
lose
kopplung
gefährden
und
wie
stellt
man
datenpersistenz
sicher
ein
blick
auf
die
entwicklung
au
einer
component_6
perspektive
anbieter
zum
thema
ca
deutschland
gmbh
pressebox
unn
|
unite
news
requirement_4
gmbh
outsystems
confluent
germany
gmbh
pattern_2
müssen
ein
großes
ganzes
ergeben
aber
sich
gleichzeitig
auch
flexibel
strukturieren
lassen
bild
gemeinfrei
aenigmatis
3d
pixabay
technology_12
nachdem
wir
un
in
den
vorigen
artikeln
zu
pattern_2
mit
deren
prinzipiellen
eigenschaften
den
institutionellen
voraussetzungen
und
organisatorischen
vorarbeiten
beschäftigt
haben
geht
e
jetzt
an
da
eigentliche
design
eins
vorneweg
die
optimale
größe
de
pattern_2
bemisst
sich
nicht
nach
kriterien
wie
zeilen
e
kommt
vielmehr
auf
den
requirement_5
kontext
an
also
auf
die
funktion
und
den
spezifischen
kontext
de
pattern_2
im
component_6
die
aufteilungslogik
hinter
microservicesbei
der
einführung
von
pattern_2
zerlegt
man
bestehende
komponenten
um
ihre
qualität
schneller
verbessern
zu
können
ohne
da
sie
an
zuverlässigkeit
verlieren
e
stellt
sich
grundsätzlich
die
frage
nach
welcher
logik
man
ein
größeres
component_6
herunterbrechen
sollte
e
kann
sinnvoll
sein
für
rechenintensive
dienste
andere
technologien
zu
nutzen
sei
e
technology_13
technology_14
oder
go
al
für
i
o
fokussierte
feature
etwa
technology_15
j
eine
geographische
verteilung
bietet
sich
an
wenn
qualifikationen
im
team
unterschiedlich
verteilt
sind
–
oder
man
auf
rechtliche
geschäftliche
oder
kulturelle
anforderungen
rücksicht
nehmen
mu
im
domain
drive
design
setzt
man
auf
kontext
diese
art
zu
modellieren
versucht
einem
component_6
grenzen
zu
geben
die
naturgemäß
in
der
praxis
nicht
einheitlich
sind
–
eine
ideale
vorlage
für
pattern_2
die
optimale
größegrundsätzlich
gilt
je
kleiner
desto
besser
kleinere
„batch
sizes“
sind
ohnehin
bereits
die
grundlage
von
methoden
wie
agile
development
lean
startup
und
continuous
delivery
je
kleiner
der
pattern_1
desto
einfacher
ist
die
schnelle
entwicklung
agil
desto
schneller
lässt
der
component_3
sich
weitergeben
lean
und
desto
häufiger
kann
er
live
geschaltet
werden
continuous
delivery
orientiert
man
sich
be
domain
drive
design
darf
ein
pattern_1
nicht
so
klein
werden
da
er
einen
gegebenen
kontext
zerhackt
ergänzt
man
diese
modellierung
um
andere
ansätze
wird
man
quality_attribute_2
component_7
designapi
design
ist
genauso
wichtig
wie
der
quellcode
selbst
pattern_1
komponenten
entfalten
erst
dann
ihren
nutzen
wenn
sie
mit
anderen
komponenten
im
component_6
kommunizieren
können
da
läuft
bei
allen
komponenten
über
programmierschnittstellen
also
apis
diese
component_1
sind
lose
gekoppelt
um
die
unabhängige
nutzung
der
komponenten
zu
sichern
die
erstellung
von
component_1
kann
sich
an
zwei
methoden
orientieren
a
nachrichten
orientiertapis
bieten
einerseits
einen
allgemeinen
einstiegspunkt
in
eine
komponente
z
b
ip
adresse
und
portnummer
ermöglichen
e
aber
andererseits
aufgabenspezifische
nachrichten
zu
übermitteln
die
ermöglicht
änderungen
be
inhalt
der
nachrichten
und
die
sichere
stetige
überarbeitung
von
komponenten
netflix
zum
beispiel
nutzt
dafür
formate
wie
avro
technology_16
und
technology_17
über
technology_18
ip
für
die
interne
kommunikation
und
technology_19
über
technology_20
für
die
kommunikation
zu
den
anwendern
also
zu
mobiltelefonen
browsern
etc
dieser
ansatz
–
ein
component_6
in
dem
etliche
component_8
botschaften
über
component_1
austauschen
–
ist
extrem
effizient
kleine
component_8
für
schnelle
ergebnisse
pattern_2
–
neue
geheimwaffe
oder
technology_21
remake
b
hypermedia
gestütztaber
e
geht
noch
besser
bei
implementierungen
die
hypermedia
nutzen
enthalten
die
zwischen
den
komponenten
übertragenen
nachrichten
daten
sowie
beschreibungen
möglicher
aktionen
z
b
metadaten
connector_2
und
formulare
hier
sind
nicht
nur
die
daten
sondern
auch
die
kontrollen
lose
gekoppelt
dieser
ansatz
ist
effizienter
er
hebt
die
connector_data_1
basierte
version
auf
eine
neue
ebene
indem
botschaften
zwischen
den
komponenten
mehr
al
nur
inhalte
enthalten
sie
geben
zum
beispiel
hinweise
be
man
mit
der
component_7
tun
könnte
sind
nicht
nur
die
daten
lose
gekoppelt
sondern
auch
die
aktionen
so
werden
die
component_1
leichter
auffindbar
verwendbar
und
passen
besser
zum
konzept
der
pattern_1
architektur
da
component_7
gateway
von
und
die
component_1
von
appstream
unterstützen
antworten
im
technology_22
der
hypertext
component_9
technology_23
hal
diese
component_1
arbeiten
ähnlich
wie
technology_24
für
browser
technology_20
botschaften
werden
im
technology_24
technology_22
an
eine
ip
adresse
und
eine
port
nummer
meist
oder
geschickt
enge
kopplung
vermeidenlose
kopplung
ist
ein
essenzielles
merkmal
von
pattern_2
doch
macht
man
geschäftsfunktionen
zu
design
elementen
für
apis
so
kommt
man
schnell
in
einen
kopplungskonflikt
risiko
eins
geteilte
daten
oft
ist
e
nicht
möglich
daten
nur
in
einem
pattern_1
zu
nutzen
–
daten
werden
für
viele
funktionen
gleichzeitig
benötigt
nun
gibt
e
einige
methoden
die
eine
enge
kopplung
vermeiden
helfen
so
könnte
man
beispielsweise
nicht
die
daten
die
einen
zustand
beschreiben
speichern
sondern
die
dazu
geführt
haben
wie
geldbewegungen
auf
einem
konto
die
zu
einem
kontostand
führen
ergänzend
trennt
man
die
einzelnen
abfragen
–
beispielsweise
datenauswertungen
für
report
–
von
den
connector_data_2
ein
ansatz
namens
command
query
responsibility
segregation
cqrs
ein
component_3
kann
dann
benachrichtigungen
über
veränderungen
also
quasi
abonnieren
mit
cqrs
kann
man
datenmodelle
komplett
trennen
–
ein
pattern_1
mu
da
modell
eines
anderen
nicht
einmal
kennen
allerdings
erhöht
die
vorgehen
die
komplexität
der
implementierung
und
sollte
nur
angewandt
werden
wenn
wirklich
nötig
jetzt
newsletter
abonnieren
täglich
die
wichtigsten
info
zu
softwareentwicklung
und
devops
geschäftliche
e
mail
bitte
geben
sie
eine
gültige
e
mailadresse
ein
newsletter
abonnieren
mit
klick
auf
„newsletter
abonnieren“
erkläre
ich
mich
mit
der
verarbeitung
und
nutzung
meiner
daten
gemäß
einwilligungserklärung
bitte
aufklappen
für
detail
einverstanden
und
akzeptiere
die
nutzungsbedingungen
weitere
informationen
finde
ich
in
unserer
datenschutzerklärung
aufklappen
für
detail
zu
ihrer
einwilligung
stand
vom
e
ist
für
un
eine
selbstverständlichkeit
da
wir
verantwortungsvoll
mit
ihren
personenbezogenen
daten
umgehen
sofern
wir
personenbezogene
daten
von
ihnen
erheben
verarbeiten
wir
diese
unter
beachtung
der
geltenden
datenschutzvorschriften
detaillierte
informationen
finden
sie
in
unserer
datenschutzerklärung
einwilligung
in
die
verwendung
von
daten
zu
werbezwecken
ich
bin
damit
einverstanden
da
die
vogel
it
medien
gmbh
max
josef
metzger
straße
augsburg
einschließlich
all
mit
ihr
im
sinne
der
§§
ff
aktg
verbundenen
unternehmen
im
weiteren
vogel
connector_3
group
meine
e
mail
adresse
für
die
zusendung
von
redaktionellen
newslettern
nutzt
auflistungen
der
jeweils
zugehörigen
unternehmen
können
hier
abgerufen
werden
der
newsletterinhalt
erstreckt
sich
dabei
auf
produkte
und
dienstleistungen
all
zuvor
genannten
unternehmen
darunter
beispielsweise
fachzeitschriften
und
fachbücher
veranstaltungen
und
messen
sowie
veranstaltungsbezogene
produkte
und
dienstleistungen
und
digital
mediaangebote
und
component_8
wie
weitere
redaktionelle
newsletter
gewinnspiele
lead
kampagnen
marktforschung
im
online
und
offline
bereich
fachspezifische
webportale
und
e
angebote
wenn
auch
meine
persönliche
telefonnummer
erhoben
wurde
darf
diese
für
die
unterbreitung
von
angeboten
der
vorgenannten
produkte
und
dienstleistungen
der
vorgenannten
unternehmen
und
marktforschung
genutzt
werden
fall
ich
im
internet
auf
portalen
der
vogel
connector_3
group
einschließlich
deren
mit
ihr
im
sinne
der
§§
ff
aktg
verbundenen
unternehmen
geschützte
inhalte
abrufe
mu
ich
mich
mit
weiteren
daten
für
den
zugang
zu
diesen
inhalten
registrieren
im
gegenzug
für
diesen
gebührenlosen
zugang
zu
redaktionellen
inhalten
dürfen
meine
daten
im
sinne
dieser
einwilligung
für
die
hier
genannten
zwecke
verwendet
werden
recht
auf
widerruf
mir
ist
bewusst
da
ich
diese
einwilligung
jederzeit
für
die
zukunft
widerrufen
kann
durch
meinen
widerruf
wird
die
rechtmäßigkeit
der
aufgrund
meiner
einwilligung
pattern_4
zum
widerruf
erfolgten
verarbeitung
nicht
berührt
um
meinen
widerruf
zu
erklären
kann
ich
al
eine
möglichkeit
da
unter
technology_20
support
vogel
de
abrufbare
kontaktformular
nutzen
sofern
ich
einzelne
von
mir
abonnierte
newsletter
nicht
mehr
erhalten
möchte
kann
ich
darüber
hinaus
auch
den
be
ende
eines
newsletter
eingebundenen
abmeldelink
anklicken
weitere
informationen
zu
meinem
widerrufsrecht
und
dessen
ausübung
sowie
zu
den
folgen
meines
widerrufs
finde
ich
in
der
datenschutzerklärung
abschnitt
redaktionelle
newsletter
be
sich
bei
der
pattern_1
einführung
bewährt
hat
pattern_2
–
ein
einstieg
in
die
praxis
darüber
hinaus
stellt
sich
die
frage
wie
man
die
„abonnement“
al
technology_20
component_7
oder
pattern_1
standardisieren
kann
dazu
mu
man
den
workflow
auf
einen
bestehenden
technology_25
wie
pubsubhubbub
ein
technology_25
der
eigentlich
für
technology_26
und
atom
fee
im
blogging
kontext
entwickelt
wurde
aber
gut
in
einem
hypermedia
technology_7
enable
workflow
performt
aufsetzen
und
weitere
technology_25
definieren
risiko
zwei
workflow
viele
prozesse
bestehen
au
mehreren
schritten
von
denen
jeder
essenziell
ist
hierfür
gibt
e
sogenannte
„sagas“
die
transaktionsähnliche
reversible
workflow
in
verteilten
lose
gekoppelten
umgebungen
ermöglichen
jeder
arbeitsschritt
wird
autonom
ausgeführt
und
fügt
der
weiterzuleitenden
botschaft
einen
„routing
slip“
hinzu
–
eine
connector_data_3
wie
die
transaktion
rückgängig
gemacht
werden
kann
geht
in
einem
schritt
etwas
schief
hilft
der
connector_4
slip
um
die
kompensierende
aktion
auszulösen
damit
erreichen
saga
eine
hohe
fehlertoleranz
und
passen
gut
in
eine
pattern_1
architektur
und
be
ist
mit
abhängigkeiten
traditionell
wurden
it
architekturen
mit
zentralisiertem
speicher
entwickelt
die
macht
die
organisation
einfacher
denn
so
können
sich
team
spezialisieren
also
etwa
aufteilen
in
datenbank
oder
systemadministratoren
die
diese
komplexen
systeme
warten
bei
einer
klaren
trennung
von
operativem
betrieb
und
development
haben
die
entwickler
mit
dieser
komplexität
nichts
zu
tun
die
neuen
ansätze
wie
devops
wollen
genau
die
nicht
mehr
pattern_2
hingegen
embedden
alle
ihre
abhängigkeiten
um
unabhängig
einsetzbar
zu
bleiben
danach
aber
müsste
jeder
pattern_1
seine
eigene
datenbank
seinen
key
requirement_6
component_10
seinen
suchindex
die
component_11
etc
embedden
–
und
da
ist
unhaltbar
in
der
praxis
mu
nicht
jeder
pattern_1
jede
einzelne
abhängigkeit
enthalten
nur
um
mobil
und
unabhängig
zu
sein
warum
e
genügt
sicherzustellen
da
der
anwendungsort
diese
„heavy
assets“
wie
datenbankcluster
bereitstellt
–
allerdings
so
da
sie
schnell
anwendbar
und
erkennbar
sind
pattern_2
hingegen
müssen
so
geschrieben
sein
da
sie
diese
asset
beim
einsatz
schnell
erkennen
und
nutzen
verschiebt
man
beispielsweise
einen
pattern_1
in
ein
anderes
rechenzentrum
sollte
man
dort
auch
einen
funktionierenden
technology_27
cluster
o
ä
erwarten
und
mu
nur
eine
möglichkeit
finden
ihn
auf
die
notwendigen
daten
zugreifen
zu
lassen
die
entscheidung
„einbetten
oder
voraussetzen“
sollte
sich
daran
orientieren
welche
option
die
mobilität
de
pattern_2
erhöht
keine
regeln
aber
best
practicesgeorg
lauer
bild
ca
technology_28
zwar
kommt
man
nur
in
den
genus
der
vorteile
von
pattern_2
wenn
diese
auch
gut
designt
sind
allgemeingültige
regeln
wie
technology_25
oder
component_1
aussehen
könnten
gibt
e
allerdings
nicht
immerhin
aber
gibt
e
bereits
einige
beispiele
wie
da
design
gut
funktionieren
kann
und
wege
die
fall
dabei
zu
vermeiden
sicherlich
werden
sich
weiterhin
erfolgsrezepte
herauskristallisieren
vieles
aber
ist
–
unabhängig
von
gutem
design
–
auch
abhängig
von
der
dahinterliegenden
architektur
darüber
reden
wir
in
unserem
nächsten
artikel
*
georg
lauer
ist
al
senior
principal
requirement_5
technology_28
architect
bei
ca
technology_28
tätig
please
enable
technology_5
to
pattern_5
weiterführende
inhalte
unternehmen
arbeiten
in
echtzeit
–
aber
nicht
ihre
anwendungen
die
macht
der
ereignisgesteuerten
pattern_2
da
versprechen
von
skalierbarkeit
requirement_7
und
sicherheit
wo
pattern_2
ihre
stärken
ausspielen
können
karrierechancen
folgen
sie
un
auf
manager
agb
hilfe
kundencenter
mediadaten
datenschutz
impressum
&
kontakt
copyright
©
vogel
connector_3
group
diese
webseite
ist
eine
marke
von
vogel
connector_3
group
eine
übersicht
von
allen
produkten
und
leistungen
finden
sie
unter
www
vogel
de
bavarian_web_solutions
pixabay
technology_12
dawn
armfield
unsplash
technology_12
nmedia
requirement_8
adobe
technology_12
greenbutterfly
requirement_8
adobe
technology_12
ca
technology_28
aenigmatis
3d
pixabay
technology_12
vogel
it
medien
vogel
it
medien
gmbh
geralt
wal_172619
startupstockphotos
trustinsoft
©
–
kras99
–
requirement_8
adobe
technology_12
j
kürpig
canonical
andsus
–
requirement_8
adobe
technology_12
leowolfert
requirement_8
adobe
technology_12
tayebmezahdia
gemeinfrei
stux
everythingpossible
requirement_8
adobe
technology_12
duncan
andison
adobe
requirement_8
technology_12
joos
jetbrains
siarhei
requirement_8
adobe
technology_12
