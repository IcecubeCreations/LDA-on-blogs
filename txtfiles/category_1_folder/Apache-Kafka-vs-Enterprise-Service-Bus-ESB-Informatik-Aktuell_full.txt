technology_1
technology_2
vs
requirement_1
component_1
bus
esb
|
informatik
aktuell
über
un
|
|
kontakt
|
impressum
entwicklungmethodenprogrammiersprachenbetriebdatenbankenserversicherheitspeichernetzwerkevirtualisierungverfügbarkeitkünstliche
intelligenzmanagement
und
rechtprojektmanagementdigitalisierungit
rechtit
selbständigenewstermineit
jobsit
bücher
künstliche
intelligenzdigitalisierungagilenachhaltigkeitdevopsmicroservicescloudiotit
securitydatenbankenjava
☰entwicklungbetriebmanagement
und
rechtnewsit
jobsit
büchernewsletter
autorkai
wähnerkai
wähner
ist
al
technology_3
evangelist
bei
confluent
tätig
seine
schwerpunkte
liegen
in
den
bereichen
requirement_2
requirement_3
machine…
weiterlesen
newsletterunser
newsletter
informiert
sie
regelmäßig
und
kostenlos
über
neuigkeiten
artikel
und
veranstaltungen
zu
aktuellen
it
themen
nachrichten28
2022osad
–
connector_data_1
for
paper
der
hybrid
veranstaltung
ist
eröffnetopen
component_2
automation
day
die
herstellerunabhängige
open_source
konferenz
findet
vom
pattern_1
vor
ort
und
virtuell
statt
weiterlesen21
2022it
tage
–
konferenz
connector_data_1
for
paper
cfp
jetzt
vortragsvorschläge
für
die
jahres
konferenz
de
fachmagazins
informatik
aktuell
einreichen
sub
konferenzen
entwicklung
…
weiterlesen09
2022von
technology_4
nach
technology_5
migrieren
einführung
mit
praxis
beispielenkotlin
hat
sich
al
moderne
technology_4
alternative
mit
vielen
vorzügen
etabliert
und
deshalb
überlegen
viele
entwickler
zu
technology_5
zu
wechseln
ist…
weiterlesen
»
entwicklung
»
programmiersprachen
kai
wähner
technology_1
technology_2
vs
requirement_1
component_1
bus
esb
–
doch
nur
eine
hassliebe
©
envfx
fotolia
technology_6
typischerweise
wurde
ein
requirement_1
component_1
bus
esb
oder
andere
integrationslösungen
wie
extract
transform
load
technology_7
verwendet
um
systeme
zu
entkoppeln
die
immense
anzahl
von
konnektoren
sowie
die
anforderung
da
anwendungen
die
daten
gleichzeitig
senden
und
empfangen
führen
jedoch
dazu
da
systeme
immer
miteinander
verflochten
waren
entwicklungsprojekte
haben
daher
viele
abhängigkeiten
von
anderen
systemen
und
nichts
kann
wirklich
entkoppelt
werden
dieser
artikel
zeigt
warum
so
viele
unternehmen
da
open
component_2
ökosystem
von
technology_1
technology_2
für
die
erfolgreiche
requirement_4
verschiedener
component_3
und
modern
anwendungen
nutzen
außerdem
betrachten
wir
die
unterschiede
aber
auch
die
möglichkeiten
bestehende
integrationslösungen
wie
esb
oder
technology_7
technology_8
zu
ergänzen
warum
sind
integrationen
notwendig
eine
unendliche
geschichteegal
in
welchem
unternehmen
sie
arbeiten
egal
wann
ihr
unternehmen
gegründet
wurde
sie
werden
die
anforderung
haben
ihre
anwendungen
miteinander
zu
integrieren
um
ihre
geschäftsprozesse
zu
implementieren
dazu
gehören
viele
verschiedene
faktoren
technologien
technology_9
wie
technology_10
rest
technology_11
technology_12
datenformate
wie
technology_13
technology_14
technology_1
technology_15
oder
technology_16
buffer
offene
technology_17
wie
technology_18
oder
technology_19
und
proprietäre
schnittstellen
wie
edifact
oder
technology_20
bapi
programmiersprachen
und
plattformen
wie
cobol
technology_4
net
go
oder
technology_21
anwendungsarchitekturen
wie
monolith
component_4
component_5
component_1
orientierte
architektur
technology_22
pattern_2
oder
serverless
undkommunikationsparadigmen
wie
pattern_3
component_6
nahezu
echtzeit
connector_data_2
connector_1
fire
and
forget
pub
sub
kontinuierliche
abfragen
und
rückspulen
abb
chaotische
unternehmensarchitektur
©
kai
wähner
abb
lösung
der
spaghetti
architektur
mit
zentraler
integrierter
component_7
in
der
mitte
©
kai
wähner
viele
unternehmensarchitekturen
sind
etwas
chaotisch
–
in
etwa
so
wie
in
abb
jedes
unternehmen
mu
diese
spaghetti
architekturen
lösen
je
nach
jahrzehnt
haben
sie
entweder
so
etwas
wie
ein
technology_7
technology_8
zum
aufbau
von
pattern_3
pipeline
oder
einen
esb
zum
entwurf
einer
pattern_4
gekauft
einige
produkte
haben
auch
ihren
namen
geändert
heute
werden
ihnen
dinge
wie
technology_23
connector_data_3
eine
integrationsplattform
pattern_5
gateway
oder
technology_24
requirement_5
angeboten
da
brand
und
der
produktname
spielen
keine
rolle
sie
sehen
immer
da
gleiche
bild
al
eine
lösung
um
von
ihrer
spaghetti
architektur
wegzukommen
und
in
der
mitte
eine
zentrale
integrierte
component_7
zu
installieren
–
in
etwa
so
wie
in
abb
da
hat
in
der
praxis
leider
selten
gut
funktioniert
die
meisten
technology_22
projekte
der
letzten
zwei
jahrzehnte
sind
gescheitert
anstatt
dafür
ein
technology_7
technology_8
oder
esb
zu
verwenden
setzen
unternehmen
nun
auf
eine
connector_2
plattform
um
die
problem
zu
lösen
ist
da
die
nächste
blase
auf
dem
markt
nur
ein
neuer
begriff
oder
hat
sich
wirklich
etwas
geändert
um
eine
erfolgreiche
requirement_4
in
einem
unternehmen
zu
ermöglichen
–
ob
sie
nun
component_3
component_8
standardanwendungen
wie
crm
und
erps
moderne
pattern_2
die
mit
jeder
programmierplattform
erstellt
wurden
oder
requirement_6
component_9
integrieren
warum
migrieren
unternehmen
jetzt
zu
technology_1
technology_2
um
diese
connector_2
plattform
aufzubauen
warum
sind
alle
so
zufrieden
da
technology_2
ein
beliebtes
thema
auf
konferenzen
technischen
vorträgen
und
in
blogbeiträgen
ist
und
wie
verhält
e
sich
im
vergleich
zu
esb
oder
technology_7
technology_8
die
nächsten
abschnitte
werden
all
diese
fragen
beantworten
und
die
gründe
und
unterschiede
zwischen
dem
open
component_2
ökosystem
von
technology_1
technology_2
und
anderen
bestehenden
integrationslösungen
erläutern
getriebene
verarbeitung
und
connector_3
al
schlüsselkonzept
in
der
unternehmensarchitektureine
connector_2
plattform
nutzt
–
also
ereignisse
–
al
kernprinzip
man
sieht
diese
im
steten
daten
flu
und
verarbeiten
der
daten
während
sie
in
bewegung
sind
viele
konzepte
wie
component_2
oder
design
pattern_6
wie
requirement_1
requirement_4
pattern_6
eips
basieren
auf
einer
getriebenen
architektur
merkmale
einer
connector_2
plattform
sind
beispielsweise
basierter
datenfluss
al
grundlage
für
nahezu
echtzeit
und
pattern_3
verarbeitung
in
der
vergangenheit
wurde
alles
auf
datenspeichern
connector_data_4
at
rest
aufgebaut
be
e
unmöglich
machte
quality_attribute_1
agile
dienste
zu
entwickeln
um
auf
daten
zu
reagieren
solange
sie
relevant
sind
skalierbares
zentrales
nervensystem
für
zwischen
beliebig
vielen
quellen
und
senken
zentral
meint
hier
nicht
ein
oder
zwei
große
boxen
in
der
mitte
sondern
eine
skalierbare
verteilte
infrastruktur
die
so
konzipiert
ist
da
sie
ohne
ausfallzeiten
auskommt
den
ausfall
von
knoten
und
netzwerken
bewältigt
und
upgrade
durchführen
kann
verschiedene
versionen
der
infrastruktur
wie
technology_2
und
anwendungen
requirement_7
component_1
können
agil
und
dynamisch
eingesetzt
und
verwaltet
werden
integrationsmöglichkeit
für
anwendungen
und
systeme
all
art
technologie
spielt
keine
rolle
denn
e
kann
alles
verbunden
werden
programmiersprache
component_10
wie
rest
offene
technology_9
proprietäre
technology_8
und
component_3
anwendungen
die
verarbeitungsgeschwindigkeit
spielt
keine
rolle
daten
einmal
konsumieren
oder
mehrmals
konsumieren
oder
auch
noch
einmal
vollständig
von
anfang
konsumieren
z
b
neue
anwendung
hinzufügen
verschiedene
maschinelle
lernmodelle
mit
den
gleichen
daten
trainieren
verteilte
speicherung
zur
entkopplung
von
anwendungen
versuchen
sie
nicht
ihre
eigene
connector_2
plattform
mit
ihrem
bevorzugten
traditionellen
connector_data_3
component_11
und
in
memory
pattern_7
connector_data_4
grid
zu
erstellen
e
steckt
viel
komplexität
dahinter
und
eine
connector_2
plattform
hat
diese
funktionalität
direkt
eingebaut
so
können
sie
z
b
den
zustand
eines
pattern_5
speichern
ohne
eine
separate
datenbank
zu
benötigen
zustandsloser
component_1
und
zustandsbehaftete
geschäftsprozesse
geschäftsprozesse
sind
typischerweise
zustandsbehaftete
prozesse
sie
müssen
oft
mit
und
zustandsänderungen
implementiert
werden
nicht
mit
remote
connector_data_5
und
connector_data_2
connector_1
style
design
pattern_6
wie
component_2
und
cqrs
helfen
dabei
die
in
einer
getriebenen
connector_2
architektur
umzusetzen
vorteile
einer
connector_2
plattform
in
der
unternehmensarchitektureine
connector_2
plattform
schafft
enorme
vorteile
für
ihre
unternehmensarchitektur
große
und
elastische
skalierbarkeit
hinsichtlich
knoten
volumen
und
durchsatz
alles
auf
handelsüblicher
hardware
in
beliebigen
requirement_6
umgebungen
oder
über
hybride
implementierungen
quality_attribute_1
architektur
zum
aufbau
kleiner
component_1
großer
dienste
manchmal
sogar
monolithen
getriebene
pattern_2
asynchron
angebundene
pattern_2
modellieren
komplexe
geschäftsabläufe
und
verschieben
daten
dorthin
wo
sie
benötigt
werden
offenheit
ohne
bindung
an
eine
spezielle
technologie
oder
ein
spezielles
datenformat
der
nächste
neue
technology_9
protokoll
programmiersprache
oder
technology_17
kommt
bestimmt
die
zentrale
connector_2
plattform
ist
offen
auch
wenn
einige
datenquellen
oder
ziele
ein
proprietäres
datenformat
oder
technologie
verwenden
unabhängige
und
entkoppelte
requirement_7
component_1
verwaltet
al
produkte
mit
eigenem
lebenszyklus
hinsichtlich
entwicklung
test
bereitstellung
und
überwachung
lose
kopplung
ermöglicht
eine
unabhängige
verarbeitungsgeschwindigkeit
zwischen
verschiedenen
herstellern
und
verbrauchern
on
offline
modi
und
de
backpressure
handle
mandantenfähigkeit
um
sicherzustellen
da
nur
der
richtige
benutzer
verschiedene
datenströme
in
einem
einzigen
cluster
erstellen
beschreiben
und
lesen
kann
automatisiertes
build
und
deployment
mit
konzepten
wie
container
devops
etc
wo
immer
nötig
ob
vor
ort
in
der
requirement_6
oder
in
einer
hybriden
umgebung
diese
eigenschaften
bilden
die
grundlage
für
eine
connector_2
plattform
den
beginn
ihrer
erfolgreichen
digitalen
transformation
mit
component_1
die
eine
begrenzte
anzahl
von
funktionen
implementieren
und
component_1
die
unabhängig
voneinander
entwickelt
bereitgestellt
und
skaliert
werden
erhalten
sie
kürzere
zeit
pattern_1
zum
ergebnis
und
mehr
flexibilität
die
ist
nur
mit
einer
connector_2
plattform
mit
den
oben
genannten
eigenschaften
möglich
anwendungsfälle
für
eine
connector_2
plattformhier
sind
einige
generische
szenarien
wie
sie
eine
connector_2
plattform
mit
den
oben
beschriebenen
eigenschaften
nutzen
können
getriebene
verarbeitung
großer
datensätze
z
b
requirement_8
iot
sensoren
social
fee
geschäftskritische
echtzeitanwendungen
z
b
zahlungen
betrugserkennung
kundenerfahrung
entkoppelte
requirement_4
zwischen
verschiedenen
component_3
anwendungen
und
modernen
anwendungen
pattern_2
architektur
oderanalytics
z
b
für
connector_data_4
science
requirement_9
component_12
und
component_13
verschiedener
anwendungen
sind
wirklich
entkoppelt
sie
skalieren
unabhängig
in
ihrer
geschwindigkeit
und
ihren
anforderungen
sie
können
im
laufe
der
zeit
neue
anwendungen
hinzufügen
sowohl
auf
der
produzenten
al
auch
auf
der
konsumentenseite
oft
mu
ein
ereignis
von
vielen
unabhängigen
anwendungen
konsumiert
werden
um
den
geschäftsprozess
abzuschließen
beispielsweise
benötigt
eine
hotelzimmerreservierung
eine
sofortige
erkennung
von
zahlungsbetrug
in
echtzeit
die
möglichkeit
die
buchung
über
alle
backend
systeme
in
nahezu
echtzeit
abzuwickeln
und
eine
chargenanalyse
über
nacht
um
kunden
after
sale
hotellogistik
und
andere
geschäftsprozesse
zu
verbessern
während
einige
prozesse
echtzeitverarbeitung
benötigen
müssen
sie
auch
in
der
lage
sein
pattern_3
prozesse
zu
unterstützen
sie
müssen
die
daten
sogar
häufiger
wiederverwenden
al
sie
be
anfang
denken
z
b
wenn
eine
anwendung
längere
zeit
nicht
verfügbar
ist
a
b
test
mit
verschiedenen
versionen
einer
anwendung
hinzufügen
einer
neuen
anwendung
die
die
daten
von
grund
auf
konsumieren
mu
oder
erstellen
verschiedener
analysemodelle
durch
maschinelles
lernen
auf
der
grundlage
derselben
datensätze
denken
sie
an
einige
weitere
anwendungsfälle
die
sie
mit
einer
echten
entkoppelten
und
skalierbaren
connector_2
plattform
erstellen
können
verkaufen
bevor
der
kunde
da
geschäft
verlässt
abbruch
einer
transaktion
vor
dem
betrug
austausch
eines
teils
einer
fertigungsmaschine
vor
dem
bruch
benachrichtigung
der
kunden
bei
verspätung
eines
fluges
oder
zuges
plus
zusendung
von
update
umbuchungen
oder
gutscheinen
oderwas
auch
immer
–
die
liste
geht
weiter
in
einem
schwung
von
pattern_3
zu
realtime
jetzt
verstehen
sie
den
mehrwert
einer
wirklich
entkoppelten
skalierbaren
connector_2
plattform
müssen
sie
diese
nun
al
zentrale
datenplattform
sofort
für
alle
ihre
anwendungen
einführen
vorsicht
kein
alteingesessenes
unternehmen
hat
jemals
einen
big
bang
also
die
sofortige
umstellung
all
systeme
erfolgreich
durchgeführt
component_3
anwendungen
gibt
e
überall
gehen
sie
schritt
für
schritt
vom
pre
connector_2
zur
connector_2
plattform
wenn
sie
au
dem
component_8
zeitalter
kommen
dann
werden
sie
vielleicht
sogar
pattern_3
und
non
connector_2
anwendungen
für
immer
behalten
oder
realistischerweise
zumindest
für
die
nächsten
jahre
da
ist
in
ordnung
sie
müssen
nur
die
au
diesen
systemen
in
da
getriebene
zentrale
nervensystem
bringen
abb
connector_2
reifegradmodell
©
kai
wähner
in
abb
sehen
sie
da
connector_2
reifegradmodell
mit
dem
wir
die
aktuelle
situation
und
planung
in
großunternehmen
ermitteln
wo
sind
sie
heute
pre
connector_2
pattern_3
oder
component_3
interesse
erste
proof
of
concept
oder
piloten
early
production
einige
eigenständige
projekte
in
der
produktion
integriertes
connector_3
connector_2
plattform
mit
verschiedenen
projekten
in
der
produktion
connector_2
plattform
connector_2
unternehmen
mit
meist
basierten
anwendungen
die
meisten
traditionellen
unternehmen
beginnen
ihre
reise
in
der
pre
connector_2
phase
da
ist
völlig
in
ordnung
der
nächste
abschnitt
erklärt
warum
fast
jede
erfolgreiche
umwandlung
in
eine
connector_2
plattform
da
technology_1
technology_2
ökosystem
al
eine
wichtige
architektonische
komponente
nutzt
einführung
de
technology_1
technology_2
ökosystems
al
connector_2
plattformoft
sind
die
leute
mit
technology_1
technology_2
vertraut
da
e
ein
sehr
erfolgreiches
open
component_2
projekt
war
da
bei
linkedin
für
requirement_8
requirement_3
mit
großen
datenmengen
erstellt
wurde
da
war
der
anfang
von
technology_2
und
nur
einer
von
vielen
anwendungsfällen
heute
technology_2
entwickelte
sich
von
einfachem
connector_data_4
ingestion
zu
einer
echtzeit
connector_2
plattform
für
alle
zuvor
diskutierten
anwendungsfälle
viele
projekte
konzentrieren
sich
auf
die
entwicklung
unternehmenskritischer
anwendungen
rund
um
technology_2
diese
müssen
rund
um
die
uhr
verfügbar
sein
wenn
technology_2
ausgefallen
ist
funktionieren
ihre
geschäftsprozesse
nicht
mehr
technology_2
ist
einzigartig
weil
e
connector_data_3
speicherung
und
verarbeitung
von
ereignissen
in
einer
plattform
vereint
die
geschieht
in
einer
verteilten
architektur
mit
einem
verteilten
connector_4
requirement_8
und
topic
die
in
mehrere
partitionen
aufgeteilt
sind
wie
in
abb
gezeigt
abb
verteilte
architektur
mit
einem
verteilten
connector_4
requirement_8
und
topic
die
in
mehrere
partitionen
aufgeteilt
sind
©
kai
wähner
mit
dieser
verteilten
architektur
unterscheidet
sich
technology_2
von
bestehenden
requirement_4
und
connector_data_3
lösungen
e
ist
nicht
nur
massiv
skalierbar
und
auf
hohen
durchsatz
ausgelegt
e
können
auch
unterschiedliche
component_13
daten
unabhängig
voneinander
und
in
unterschiedlichen
geschwindigkeiten
lesen
die
ist
der
grund
für
den
großen
erfolg
von
technology_1
technology_2
in
fast
jedem
größeren
unternehmen
auf
diesem
planeten
anwendungen
erzeugen
kontinuierlich
ereignisse
während
andere
anwendungen
diese
ereignisse
konsumieren
und
verarbeiten
können
wann
immer
sie
wollen
da
alle
ereignisse
gespeichert
werden
können
sich
anwendungen
in
diesen
connector_2
einklinken
und
nach
bedarf
konsumieren
–
in
echtzeit
nahezu
in
echtzeit
oder
im
pattern_3
modus
die
bedeutet
da
sie
systeme
wirklich
entkoppeln
und
eine
korrekte
agile
entwicklung
ermöglichen
können
darüber
hinaus
kann
ein
neues
component_11
welch
ein
altes
component_11
ablösen
soll
ein
topic
abonnieren
und
historische
daten
pattern_1
zum
jetzigen
zeitpunkt
konsumieren
bevor
bestehende
systeme
ordnungsgemäß
außer
betrieb
genommen
werden
technology_2
bietet
eine
connector_2
plattform
für
connector_data_3
speicherung
und
verarbeitung
mit
wichtigen
charakteristiken
wie
skalierbarkeit
fehlertoleranz
hohem
datendurchsatz
und
technologie
unabhängigkeit
die
ist
der
grund
für
den
großen
erfolg
von
technology_1
technology_2
in
fast
jedem
größeren
unternehmen
auf
diesem
planeten
sollen
wir
unsere
bestehenden
mq
und
esb
deployment
ersetzen
jüngere
unternehmen
wie
netflix
linkedin
und
zalando
bauten
ihre
gesamte
infrastruktur
auf
technology_2
auf
ältere
unternehmen
haben
nicht
so
viel
glück
weil
sie
über
eine
vielzahl
von
component_8
monolithen
und
component_3
technologien
verfügen
doch
wie
gesagt
ein
big
bang
ist
nicht
der
richtige
weg
um
erfolgreich
zu
sein
e
ist
so
al
würde
man
sein
haus
umgestalten
obwohl
e
theoretisch
sinnvoll
ist
e
von
grund
auf
neu
zu
bauen
ist
e
oft
praktischer
da
haus
zu
erweitern
bestimmte
räume
zu
verändern
oder
neu
zu
dekorieren
e
ist
schwierig
geschäftskritische
anwendungen
auszutauschen
und
zu
ersetzen
die
tief
in
andere
anwendungen
integriert
sind
die
stabil
laufen
und
von
einem
erfahrenen
team
bedient
werden
allerdings
kann
e
manchmal
kostengünstiger
sein
alte
architekturen
zu
ersetzen
so
wie
e
manchmal
sinn
macht
ein
haus
von
grund
auf
umzugestalten
die
war
der
fall
bei
der
sberbank
der
größten
bank
russlands
die
ihr
gesamtes
kernbankensystem
um
technology_2
al
zentrales
nervensystem
herum
aufgebaut
hat
technology_7
und
esb
verfügen
über
gute
technology_8
für
da
grafische
connector_data_6
und
die
komplexe
requirement_4
mit
technology_10
edifact
technology_20
bapi
cobol
etc
–
glauben
sie
mir
sie
wollen
den
dafür
nicht
selbst
schreiben
die
requirement_4
läuft
bereits
ist
bezahlt
und
integriert
daher
sind
bestehende
mq
und
esb
lösungen
die
bereits
in
ihre
bestehende
welt
integriert
sind
keine
konkurrenz
für
technology_1
technology_2
vielmehr
sind
sie
komplementär
nutzen
sie
sie
wie
in
der
vergangenheit
um
sich
in
die
alte
welt
zu
integrieren
sie
können
folgendes
verwenden
um
technology_2
damit
zu
verbinden
confluent
s
technology_25
connector
für
mq
und
andere
technology_11
pattern_8
technology_2
connector_5
cdc
connector
für
component_8
und
datenbanken
esb
oder
technology_7
technology_8
die
sich
in
bestehende
protokolle
technology_10
edifact
etc
und
anwendungen
technology_26
siebel
etc
integrieren
lassen
alle
diese
werkzeuge
haben
inzwischen
auch
technology_2
konnektoren
manche
traditionelle
pattern_9
pattern_8
haben
inzwischen
auch
einen
pattern_10
zu
technology_2
obwohl
deren
hersteller
vor
einiger
zeit
alle
gesagt
haben
da
man
keine
universelle
connector_data_3
plattform
aufbauen
kann
integrieren
sich
traditionelle
connector_data_3
pattern_8
jetzt
in
technology_2
und
andere
technology_9
wie
technology_12
um
nicht
in
vergessenheit
zu
geraten
technology_2
offizielle
low
level
component_4
apis
wie
technology_4
net
go
und
technology_21
implementieren
eine
direkte
requirement_4
wenn
keine
andere
bessere
oder
sinnvollere
integrationsoption
verfügbar
ist
al
letzte
anmerkung
–
nachdem
ich
die
verwendung
von
esb
und
technology_7
technology_8
in
der
technology_2
welt
erklärt
habe
–
zitiere
ich
thoughtworks
um
sie
daran
zu
erinnern
nicht
zu
versuchen
einen
neuen
esb
um
technology_2
herum
zu
bauen
some
organization
recreate
esb
antipatterns
with
technology_2
by
centralizing
the
technology_2
ecosystem
component_14
–
such
a
connector
and
connector_2
processor
–
instead
of
allow
these
component_14
to
live
with
technology_27
or
component_1
team
this
remind
u
of
seriously
problematic
esb
antipatterns
where
more
and
more
component_15
pattern_11
and
transformation
be
thrust
into
a
centrally
manage
esb
create
a
significant
connector_6
on
a
centralized
team
we’re
connector_7
this
out
to
dissuade
further
implementation
of
this
flaw
pattern_6
technology_1
technology_2
und
sein
ökosystem
ist
al
verteilte
architektur
mit
vielen
intelligenten
funktionen
konzipiert
die
einen
hohen
durchsatz
hohe
skalierbarkeit
fehlertoleranz
und
failover
ermöglichen
lassen
sie
die
produkt
oder
serviceteams
ihre
anwendungen
mit
technology_2
connector_2
ksql
und
jeder
anderen
technology_2
component_4
technology_24
erstellen
integrieren
sie
technology_2
mit
esb
und
technology_7
technology_8
wenn
sie
deren
funktionen
für
eine
spezifische
component_3
requirement_4
benötigen
ein
esb
oder
technology_7
prozess
kann
für
technology_1
technology_2
wie
jeder
andere
technology_2
component_12
oder
component_13
technology_24
eine
datenquelle
oder
ein
datenziel
sein
oftmals
ist
die
requirement_4
mit
altsystemen
die
ein
solches
technology_8
verwenden
ohnehin
schon
aufgebaut
und
läuft
derzeit
haben
alle
diese
technology_8
einen
technology_2
connektor
weil
der
markt
sie
so
antreibt
sie
müssen
also
nur
die
bestehende
requirement_4
mit
dem
technology_2
connector
kombinieren
und
schon
haben
sie
eine
quality_attribute_1
skalierbare
und
hochverfügbare
requirement_4
zwischen
bestehenden
und
zukünftigen
technologien
und
anwendungen
durch
technology_2
quellenthoughtworks
recreate
esb
antipatterns
with
technology_2
autorkai
wähnerkai
wähner
ist
al
technology_3
evangelist
bei
confluent
tätig
seine
schwerpunkte
liegen
in
den
bereichen
requirement_2
requirement_3
requirement_9
pattern_2
internet
of
thing
und
blockchain
weiterlesen
da
könnte
sie
auch
interessieren
ist
technology_5
da
erfolgreichere
technology_28
der
raspberry
pi
pico
technology_21
eine
schicke
oberfläche
für
intelligente
skripte
weshalb
infrastruktur
nicht
nur
konfiguration
ist
technology_1
cxfs
unterschätzte
stärke
rad
für
webbasierte
requirement_7
anwendungen
mit
technology_4
kommentare
neuen
kommentar
schreiben
name
e
mail
adresse
nicht
ausfüllen
kommentar
ich
verstehe
und
akzeptiere
die
datenschutzbestimmungen
newsletter►
aktuelle
artikel
►
aktuelle
nachrichten
►
aktuelle
konferenztermine
kategorienstartseitemanagemententwicklungbetrieb
serviceaktuelle
meldungenkonferenzkalenderit
jobssitemap
informationimpressumüber
unsmediadatenschutznutzungsbedingungenkontakt
folgen
sie
un
partner
©
alkmene
verlag
gmbh
