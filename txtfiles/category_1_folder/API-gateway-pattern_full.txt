component_1
gateway
pattern_1
pattern_2
architecture
support
by
kong
pattern_1

presentation
resource
adoptnew
refactoringnew
testingnew
other
technology_1
about
pattern_1
component_1
gateway
backends
for
frontends
component_2
let’s
imagine
you
be
build
an
online
component_3
that
us
the
pattern_2
architecture
pattern_1
and
that
you
be
connector_1
the
technology_2
detail
component_4
you
need
to
develop
multiple
version
of
the
technology_2
detail
component_5

technology_3
technology_4
base
ui
for
desktop
and
requirement_1
browser
technology_5
be
generate
by
a
component_6
side
web
component_7
requirement_2
technology_6
and
iphone
component_8
these
component_8
connector_2
with
the
component_6
via
pattern_3
component_9
in
addition
the
online
component_3
must
connector_3
technology_2
detail
via
a
pattern_3
component_1
for
use
by
3rd
party
component_7
a
technology_2
detail
ui
can
display
a
lot
of
connector_data_1
about
a
technology_2
for
example
the

technology_7
detail
component_4
for
pojos
in
action
display
basic
connector_data_1
about
the
book
such
a
title
author
requirement_3
etc
your
purchase
history
for
the
book
quality_attribute_1
buy
option
other
connector_data_2
that
be
frequently
buy
with
this
book
other
connector_data_2
buy
by
requirement_4
who
buy
this
book
requirement_4
review
seller
rank
…
since
the
online
component_3
us
the
pattern_2
architecture
pattern_1
the
technology_2
detail
connector_data_3
be
spread
over
multiple
component_10
for
example
technology_2
info
component_10
basic
connector_data_1
about
the
technology_2
such
a
title
author
requirement_3
component_10
technology_2
requirement_3
order
component_10
purchase
history
for
technology_2
inventory
component_10
technology_2
quality_attribute_1
review
component_10
requirement_4
review
…
consequently
the
that
display
the
technology_2
detail
need
to
fetch
connector_data_1
from
all
of
these
component_10
problem
how
do
the
component_8
of
a
pattern_4
base
component_7
connector_4
the
individual
component_10
force
the
granularity
of
component_9
provide
by
pattern_4
be
often
different
than
what
a
component_11
need
pattern_4
typically
provide
fine
grain
apis
which
mean
that
component_8
need
to
connector_2
with
multiple
component_10
for
example
a
describe
above
a
component_11
need
the
detail
for
a
technology_2
need
to
fetch
connector_data_3
from
numerous
component_10
different
component_8
need
different
connector_data_3
for
example
the
desktop
browser
version
of
a
technology_2
detail
component_4
desktop
be
typically
more
elaborate
then
the
requirement_1
version
requirement_5
requirement_6
be
different
for
different
type
of
component_11
for
example
a
requirement_1
requirement_5
be
typically
much
slow
and
have
much
high
quality_attribute_2
than
a
non
requirement_1
requirement_5
and
of

any
wan
be
much
slow
than
a
lan
this
mean
that
a
requirement_2
requirement_1
component_11
us
a
requirement_5
that
have
very
difference
requirement_6
characteristic
than
a
lan
use
by
a
component_6
side
web
component_7
the
component_6
side
web
component_7
can
make
multiple
connector_data_4
to
backend
component_12
without
impact
the
requirement_7
where
a
a
requirement_1
component_11
can
only
make
a
few
the
number
of
component_10
instance
and
their
location
host+port
connector_5
dynamically
partitioning
into
component_12
can
connector_6
over
time
and
should
be
hide
from
component_8
component_12
might
use
a
diverse
set
of
technology_8
some
of
which
might
not
be
web
friendly
solution
connector_7
an
component_1
gateway
that
be
the
single
entry
point
for
all
component_11
the
component_1
gateway
handle
connector_data_4
in
one
of
two
way
some
connector_data_4
be
simply
proxied
connector_8
to
the
appropriate
component_10
it
handle
other
connector_data_4
by
fan
out
to
multiple
component_10
rather
than
provide
a
one
size
fit
all
style
technology_9
the
component_1
gateway
can
connector_3
a
different
component_1
for
each
component_11
for
example
the
netflix
component_1
gateway
run
component_11
specific
adapter
that
provide
each
component_11
with
an
component_1
that’s
best
suit
to
it
requirement
the
component_1
gateway
might
also
connector_7
quality_attribute_3
e
g
verify
that
the
component_11
be
pattern_5
to
perform
the
connector_data_5
variation
backends
for
frontends
a
variation
of
this
pattern_1
be
the
backends
for
frontends
pattern_1
it
define
a
separate
component_1
gateway
for
each
kind
of
component_11
in
this
example
there
be
three
kind
of
component_11
web
component_7
requirement_1
component_7
and
external
3rd
party
component_7
there
be
three
different
component_1
gateway
each
one
be
provide
an
component_1
for
it
component_11
example
netflix
component_1
gateway
a
quality_attribute_4
technology_10
technology_11
component_1
gateway
from
the
money
transfer
example
component_7
connector_data_6
component_2
use
an
component_1
gateway
have
the
follow
benefit
insulate
the
component_8
from
how
the
component_7
be
component_13
into
pattern_4
insulate
the
component_8
from
the
problem
of
determine
the
location
of
component_10
instance
provide
the
optimal
component_1
for
each
component_11
reduce
the
number
of
connector_data_5
roundtrips
for
example
the
component_1
gateway
enable
component_8
to
connector_9
connector_data_3
from
multiple
component_12
with
a
single
round
trip
few
connector_data_4
also
mean
le
overhead
and
improve
the
requirement_7
an
component_1
gateway
be
essential
for
requirement_1
component_7
simplify
the
component_11
by
move
component_14
for
connector_10
multiple
component_12
from
the
component_11
to
component_1
gateway
pattern_6
from
a
“standard”
web
friendly
component_1
technology_8
to
whatever
technology_8
be
use
internally
the
component_1
gateway
pattern_1
have
some
drawback
increase
complexity
the
component_1
gateway
be
yet
another
move
part
that
must
be
develop
quality_attribute_5
and
manage
increase
response_time
due
to
the
additional
requirement_5
hop
through
the
component_1
gateway
however
for
most
component_15
the
cost
of
an
extra
quality_attribute_6
be
insignificant
issue
how
connector_7
the
component_1
gateway
an

drive
reactive
approach
be
best
if
it
must
quality_attribute_7
to
quality_attribute_7
to
handle
high
load
on
the
technology_12
technology_13
base
technology_14
such
a
technology_15
technology_11
pattern_7
etc
make
sense
nodejs
be
another
option
relate
pattern_1
the
pattern_2
architecture
pattern_1
create
the
need
for
this
pattern_1
the
component_1
gateway
must
use
either
the
component_11
side
discovery
pattern_1
or
component_6
side
discovery
pattern_1
to
connector_11
connector_data_4
to
quality_attribute_8
component_10
instance
the
component_1
gateway
pattern_8
the
component_5
and
pass
an
connector_4
connector_data_7
contain
connector_data_1
about
the
component_5
to
the
component_12
an
component_1
gateway
will
use
a
circuit
breaker
to
invoke
component_12
an
component_1
gateway
often
connector_12
the
component_1
composition
pattern_1

us
netflix
component_1
gateway
example
component_7
see
the
component_1
gateway
that
part
of
my
pattern_4
pattern’s
example
component_7
it’s
connector_7
use
technology_11
requirement_8
gateway
about
pattern_4
io
pattern_4
io
be
bring
to
you
by
chris
richardson
experience
architect
author
of
pojos
in
action
the
creator
of
the
original
technology_16
technology_7
and
the
author
of
pattern_4
pattern_1
chris
help
component_8
around
the
world
adopt
the
pattern_2
architecture
through
consult
engagement
and
train
and
workshop
workshop
in
australia
apac
timezone
in

i’ll
be
teaching
a
pattern_4
workshopover
zoom
in
an
apac
friendly
gmt+9
timezone
how
to
create
a
component_10
template
and
pattern_2
chassis
take
a
look
at
my
man
liveproject
that
teach
you
how
to
develop
a
component_10
template
and
pattern_2
chassis
virtual
bootcamp
quality_attribute_9
connector_data_3
pattern_1
in
a
pattern_2
architecture
my
virtual
bootcamp
quality_attribute_9
connector_data_3
pattern_1
in
a
pattern_2
architecture
be
now
open
for
enrollment
it
cover
the
key
quality_attribute_9
connector_data_3
requirement_9
pattern_1
include
saga
component_1
composition
and
cqrs
it
consist
of
video
lecture
lab
and
a
weekly
ask
me
anything
video
conference
repeat
in
multiple
timezones
the
regular
requirement_3
be
$395
person
but
use
coupon
yxeerwtj
to
sign
up
for
$195
valid
until
26th

there
be
deep
discount
for
buy
multiple
seat
more
signup
for
the
newsletterfor
requirement_10
you
can
trust
about
pattern_4
chris
offer
numerous
resource
for

the
pattern_2
architecture
train
chris
teach
comprehensive
workshop
train
and
bootcamps
for
executive
architect
and
developer
to
help
your
organization
use
pattern_4
effectively
avoid
the
pitfall
of
adopt
pattern_4
and
essential
topic
such
a
component_10
decomposition
and
design
and
how
to
refactor
a
monolith
to
pattern_4
connector_13
in
person
and
remotely
connector_14
the
book
pattern_4
pattern_1
connector_15
chris
richardson
s
book
example
pattern_4
component_15
want
to
see
an
example
connector_16
out
chris
richardson
s
example
component_7
see
build
pattern_4
ready
to
start
use
the
pattern_2
architecture
consult
component_12
engage
chris
to
create
a
pattern_4
adoption
roadmap
and
help
you
define
your
pattern_2
architecture
the
eventuate
component_16
use
the
eventuate
io
component_16
to
tackle
quality_attribute_9
connector_data_3
requirement_9
challenge
in
your
pattern_4
architecture
eventuate
be
chris
s
late
startup
it
make
it
easy
to
use
the
saga
pattern_1
to
manage
transaction
and
the
cqrs
pattern_1
to
connector_7
query
ass
your
architecture
ass
your
component_7
s
pattern_2
architecture
and
identify
what
need
to
be
improve
consult
component_12
engage
chris
to
conduct
an
architectural
assessment
self
assessment
alternatively
conduct
a
self
assessment
use
the
pattern_4
assessment
component_16
join
the
pattern_4
group
the
pattern_1
how
to
apply
the
pattern_1
component_7
architecture
pattern_1
monolithic
architecture
pattern_2
architecture
decomposition
decompose
by
requirement_11
capability
decompose
by
subdomain
self
contain
servicenew
component_10
per
teamnew
refactoring
to
microservicesnew
strangler
component_7
anti
corruption
pattern_9
connector_data_3
requirement_9
component_17
per
component_10
connector_17
component_17
saga
component_1
composition
cqrs
domain
component_18
pattern_10
pattern_11
pattern_10
outbox
transaction
requirement_12
tail
pattern_12
pattern_13
test
component_10
component_19
test
component_20
drive
contract
test
component_20
side
contract
test
deployment
pattern_1
multiple
component_10
instance
per
component_21
component_10
instance
per
component_21
component_10
instance
per
vm
component_10
instance
per
container
serverless
deployment
component_10
deployment
component_16
cross
cut
concern
pattern_2
chassis
component_10
template
externalize
configuration
connector_18
style
remote
invocation
pattern_11
domain
specific
technology_8
idempotent
component_20
external
component_1
component_1
gateway
backend
for
front
end
component_10
discovery
component_11
side
discovery
component_6
side
discovery
component_10
registry
self
registration
3rd
party
registration
quality_attribute_10
circuit
breaker
quality_attribute_3
connector_4
connector_data_7
observability
requirement_12
aggregation
component_7
metric
audit
requirement_12
quality_attribute_9
trace
exception
track
health
connector_16
component_1
requirement_12
deployment
and
connector_5
ui
pattern_1
component_6
side
component_4
fragment
composition
component_11
side
ui
composition
tweet
follow
@microsvcarch
copyright
©

chris
richardson
•
all
right
reserve
•
support
by
kong
please
enable
technology_4
to
pattern_14
the

powered
by
disqus
