top
ten
difference
between
technology_1
and
technology_2
–
the
dulin
report
skip
to
content
the
dulin
report
opinion
on
engineering
requirement_1
architecture
requirement_2
computing
and
occasional
rant
about
politics
and
component_1
technology_3
component_2
by
oleg
dulin
oleg
dulin
disclaimer
portfolio
top
ten
difference
between
technology_1
and
technology_2
oleg
dulinseptember
2015february
2019analysis
navigation
previousnext
taxi
component_3
at
laguardiaphoto
credit
scott
beale
laugh
squid
update
this
be
originally
publish
in
while
it
be
informative
in
it
own
right
a
lot
have
connector_1
in
technology_4
since
then
in
particular
technology_4
now
offer
manage
technology_5
please
connector_2
a
more
up
to
date
on
the
topic
which
technology_4
pattern_1
and
queing
component_4
to
use
persistence
and
quality_attribute_1
technology_1
quality_attribute_2
on
the
configuration
technology_1
can
maintain
a
connector_data_1
journal1
each
connector_data_1
be
first
connector_3
into
a
journal
before
be
ship
to
component_1
ultimately
the
number
of
connector_data_2
that
can
be
persist
be
constrain
by
the
quality_attribute_3
disk
capacity
technology_2
technology_2
connector_4
connector_data_2
in
a
quality_attribute_4
storage
across
all
quality_attribute_5
zone
in
a
give
region2
each
connector_data_1
size
can
be
up
to
256kb
and
technology_2
can
component_5
an
unlimited
number
of
connector_data_2
across
unlimited
number
of
queues3
pattern_2
technology_1
technology_1
offer
a
number
of
different
configuration
option
for
clustering4
pattern_3
cluster
and
requirement_3
of
pattern_3
this
architecture
be
most
appropriate
for
quality_attribute_4
requirement_3
of
pattern_3
component_6
on
each
pattern_3
can
reach
component_7
across
the
entire
cluster
this
be
most
appropriate
for
a
use
requirement_4
such
a
connector_5
requirement_5
connector_data_3
to
all
component_7
across
the
entire
requirement_3
technology_6
topic
this
be
not
exactly
a
redundant
configuration
–
failure
of
a
single
pattern_3
connector_data_4
in
connector_data_1
loss
on
that
pattern_3
pattern_4
in
this
configuration
two
or
more
technology_1
pattern_3
use
some
sort
of
a
shared5
storage
for
the
journal
prior
to
technology_1
one
have
to
rely
either
on
a
connector_6
component_8
such
a
san
or
on
an
technology_7
component_9
–
which
simply
shift
the
pattern_5
responsibility
to
a
different
technology_3
start
with
technology_1
there
be
an
option
to
use
replicate
leveldb
with
zookeeper6
technology_2
technology_2
connector_4
connector_data_2
in
redudant
storage
across
all
quality_attribute_5
zone
in
a
give
region
to
achieve
high
level
of
pattern_2
and
guarantee
that
no
connector_data_1
be
ever
lose
it
relax
some
of
the
property
of
a
component_3
system7
what
that
mean
be
that
on
rare
occasion
connector_data_2
arrive
out
of
order
and
same
connector_data_1
be
connector_7
more
than
once
graceful
failure
technology_1
in
a
master
slave8
configuration
all
component_10
failover
to
the
next
quality_attribute_3
slave
and
continue
component_11
connector_data_1
in
any
other
configuration
all
component_11
stop
until
the
component_12
be
able
to
reconnect
to
it
pattern_3
in
the
of
high
memory
temp
storage
or
jounal
space
usage
technology_1
can
pause
component_6
until
the
space
free
up
this
create
a
potential
for
a
deadlock
situation
where
some
component_7
also
act
a
pattern_6
and
become
unable
to
publish
or
connector_8
connector_data_1
there
be
a
risk
of
the
entire
component_8
lock
up
until
space
be
free
up
or
configuration
be
connector_1
technology_2
when
your
component_13
attempt
to
connector_9
connector_data_2
from
a
component_3
technology_2
pick
a
subset
of
all
component_14
and
connector_data_2
from
those
component_15
what
that
mean
be
that
if
for
some
reason
a
component_15
be
unavailable
a
connector_data_1
not
connector_10
connector_9
–
but
will
on
subsequent
connector_data_5
this
be
mitigate
to
a
certain
extent
by
use
of
long
polling9
connector_data_1
order
and
delivery
guarantee
technology_1
connector_data_2
be
connector_7
in
the
order
they
be
sent10
when
there
be
multiple
component_7
on
the
same
component_3
some
of
the
order
be
lose
–
however
that
be
the
requirement_4
with
any
component_3
that
have
multiple
component_7
and
it
be
exacerbate
by
cluster
configuration
technology_2
in
order
to
achieve
high
level
of
quality_attribute_6
and
pattern_2
technology_2
relax
some
of
the
guarantee
of
a
traditional
pattern_7
component_8
on
rare
occasion
connector_data_2
be
connector_7
out
of
order
and
more
than
once
but
they
will
connector_10
connector_7
and
no
connector_data_1
will
be
lose
component_16
sensitive
to
duplicate
or
out
of
order
component_11
need
to
connector_11
component_17
to
cover
these
scenarios11
pattern_8
and
utility
component_18
this
seem
off
topic
but
i
do
find
it
necessary
to
mention
it
be
often
useful
from
component_13
standpoint
to
perform
various
utility
against
component_3
an
component_13
measure
the
rate
of
dequeuing
calculate
number
of
pending
connector_data_1
and
self
optimize
technology_8
do
not
offer
component_18
to
connector_9
this
connector_data_6
technology_1
do
connector_12
some
of
this
via
technology_9
however12
similarly
technology_2
offer
metric
and
utility
component_18
a
part
of
the
technology_10
technology_11
compliance
technology_1
technology_1
conform
to
the
technology_8
component_18
specification
in
the
technology_12
universe
and
have
driver
for
other
component_19
and
component_18
specification
technology_2
technology_2
u
technology_13
pattern_9
technology_14
and
a
proprietary
technology_10
however
do
offer
a
technology_8
implementation
of
the
technology_2
sdk13
connector_13
connector_data_2
a
they
become
quality_attribute_3
technology_1
the
default
technology_1
technology_14
be
base
on
a
connector_data_7
connector_14
that
allow
connector_data_2
to
connector_10
connector_13
to
the
component_1
a
soon
a
they
be
publish
with
technology_8
one
can
connector_11
messagelistener14
and
connector_15
connector_data_2
a
they
arrive
technology_2
technology_2
do
not
natively
support
connector_13
one
have
to
pattern_10
to
connector_9
connector_data_1
this
be
a
minor
inconvenience
since
provide
both
long
pattern_11
and
a
technology_8
implementation
various
approach
exist
to
mimic
the
connector_13
behavior
include
one
that
i
describe
in
my
on
“guaranteeing
delivery
of
connector_data_2
with
sqs
”15
quality_attribute_6
and
requirement_6
technology_1
technology_1
can
handle
ten
of
thousand
of
connector_data_2
per
second
on
a
single
broker16
there
be
a
great
deal
of
tune
that
affect
technology_1
requirement_6
include
the
component_2
component_20
capacity
requirement_3
topology
etc
quality_attribute_6
be
achieve
either
vertically
by
upgrade
pattern_3
hardware
or
horizontally
by
expand
the
pattern_3
cluster
technology_2
technology_2
do
not
from
a
sendmessage
connector_data_5
unless
the
connector_data_1
have
be
successfully
component_5
and
a
a
connector_data_8
it
have
a
connector_data_5
connector_16
quality_attribute_7
of
around
20ms
at
first
glance
it
mean
that
it
cannot
handle
more
than
a
few
hundred
connector_data_2
per
second
however
when
deal
with
a
quality_attribute_4
component_3
technology_2
one
have
to
distinguish
between
quality_attribute_7
and
throughout17
technology_2
quality_attribute_8
horizontally
by
use
multiple
component_21
it
be
possible
to
increase
connector_data_1
quality_attribute_9
almost
indefinitely
setup
and
support
technology_1
technology_1
be
any
other
that
one
have
to
install
configure
pattern_12
and
maintain
configure
and
tune
technology_1
require
thorough
understand
of
hundred
of
different
settings18
technology_1
itself
be
connector_3
in
technology_12
so
understand
of
technology_12
topic
memory
requirement_7
and
garbage
collection
be
helpful
technology_2
a
long
a
you
be
operate
in
the
technology_4
environment
there
be
nothing
to
configure
install
or
maintain
technology_2
be
a
completely
manage
component_4
cost
technology_1
technology_1
need
component_22
to
run
on
and
storage
it
can
use
someone
have
to
support
and
maintain
it
the
cost
of
technology_1
be
a
of
resource
it
need
to
run
and
time
it
take
to
tune
configure
and
maintain
it
these
cost
be
still
present
during
period
of
low
utilization
since
it
doesn’t
quality_attribute_8
automatically
technology_2
technology_2
be
requirement_8
a
a
of
number
of
connector_data_9
and
connector_data_3
transfer
you
be
only
charge
for
what
you
connector_8
so
during
period
of
low
utilization
the
cost
be
lower
conclusion
the
discussion
in
this
boil
down
to
the
choice
between
a
fully
manage
requirement_2
component_4
and
an
quality_attribute_10
technology_15
technology_16
vs
cassandra19
a
manage
component_4
simplify
development
and
quality_attribute_11
at
the
expense
of
technology_11
compliance
and
customization
option
technology_1
persistence
↩
introduction
to
technology_2
↩
technology_2
technical
faq
↩
technology_1
cluster
↩
technology_1
replicate
connector_data_1
component_5
↩
technology_1
replicate
leveldb
↩
property
of
quality_attribute_4
component_23
↩
technology_1
master
slave
↩
technology_2
long
pattern_11
↩
technology_1
connector_data_1
order
↩
idempotent
receiver
pattern_13
↩
technology_1
technology_9
component_18
↩
technology_2
component_12
technology_17
for
technology_8
↩
messagelistener
↩
guarantee
delivery
of
connector_data_2
with
technology_4
technology_2
↩
technology_1
requirement_6
↩
quality_attribute_12
with
technology_2
↩
configure
technology_1
↩
why
i
be
tempt
to
replace
technology_18
with
technology_16
↩
connector_17
this
twitterfacebook
relate
technology_5
technology_19
requirement_2
sqs
navigation
previous
we
live
in
a
requirement_9
component_24
connector_data_10
hellnext
set
up
cross
region
pattern_5
of
technology_4
rds
for
technology_20
publish
by
oleg
dulin
i
be
a
engineer
and
technology_3
architect
in
york
city
technology_21
area
all
opinion
express
here
be
mine
and
do
not
represent
opinion
of
my
employer
and
requirement_10
nor
should
my
opinion
be
construe
a
opinion
about
my
employer
and
requirement_10
copyright
2019+
all
right
reserve
pattern_14
all
by
oleg
dulin
raymond
naseef
say
at
pm
thank
you
for
this
wonderful
with
detail
connector_data_6
great
for
make
technical
&
requirement_11
decision
regard
different
mq
on
technology_19
there
be
mistake
on
the
component_25
in
part
quality_attribute_6
and
requirement_6
under
sqs
mistake
the
connector_data_1
have
be
successfully
component_5
and
correction
the
…
component_5
and
mistake
to
distinguish
between
quality_attribute_7
and
throughout
correction
to
distinguish
between
quality_attribute_7
and
quality_attribute_9
regard
ray
tom
dawson
say
at
pm
note
that
technology_4
also
offer
a
manage
version
of
technology_5
appropriately
name
“amazon
mq”
worth
look
at
be
close
search
search
for
at
technology_22
technology_23
follow
follow
the
dulin
report
join
other
follower
sign
me
up
already
have
a
technology_22
technology_23
account
requirement_12
in
now
the
dulin
report
customize
follow
follow
sign
up
requirement_12
in
copy
shortlink
report
this
content
pattern_14
in
reader
manage
subscription
collapse
this
bar
loading
you
must
be
requirement_12
in
to
a
