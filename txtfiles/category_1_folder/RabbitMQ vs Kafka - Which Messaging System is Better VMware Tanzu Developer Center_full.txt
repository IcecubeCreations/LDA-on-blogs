technology_1
vs
technology_2
which
pattern_1
component_1
be
quality_attribute_1
|
vmware
tanzu
developer
center
learntanzu
tvcommunitysearch
by
categorymodern
applicationsmodern
component_2
basic
modernize
component_3
component_4
agile
transformation
and
practicesapplication
developmentbuilding
modern
component_4
quality_attribute_2
modern
component_4
manage
and
operate
applicationskubernetes
platformbuilding
technology_3
runtime
manage
and
operate
technology_3
quality_attribute_3
kubernetesby
typeguides
path
workshop
sample
video
tanzu
practice
databy
technology_4
net
javaall
show
tanzu
tuesday
enlightning
technology_5
in
the
wild
requirement_1
requirement_2
crew
technology_6
office
hour
technology_5
beyond
tgik
between
chair
and
keyboard
requirement_1
connector_1
by
vmware
tanzu
talk
technology_6
liveoverview
advocate
team
springone
tour
learnby
categorymodern
applicationsmodern
component_2
basicsmodernizing
component_3
applicationsagile
transformation
and
practicesapplication
developmentbuilding
modern
applicationsdeploying
modern
applicationsmanaging
and
operate
applicationskubernetes
platformbuilding
technology_3
runtimemanaging
and
operate
kubernetessecuring
kubernetesby
typeguideslearning
pathsworkshopssamplesvideosblogtanzu
practicesdataby
technology_4
netjavatanzu
tvall
showstanzu
tuesdaysenlightning
net
in
the
wildcloud
requirement_2
crewspring
office
hour
net
beyondtgikbetween
chair
and
keyboardcodecloud
connector_1
by
vmwaretanzu
talkspring
livecommunityoverviewadvocatesteamspringone
toursearchlive
be
connector_2
live
watch
now
blogunderstanding
the
difference
between
technology_1
vs
kafkaunderstanding
the
difference
between
technology_1
vs
kafkabrian
mcclain
2020three
year
ago
a
colleague
of
mine
connector_3
a
to
help
reader
understand
when
to
use
technology_1
and
when
to
use
technology_7
technology_2
which
many
find
to
be
very
useful
while
the
two
solution
take
very
different
approach
architecturally
and
can
solve
very
different
problem
many
find
themselves
compare
them
for
overlap
solution
in
an
increasingly
quality_attribute_4
environment
where
more
and
more
component_5
need
to
connector_4
with
each
other
technology_1
and
technology_2
have
both
come
to
be
popular
component_5
that
facilitate
that
connector_5
it
have
be
three
year
since
that
be
publish
however
which
in
technology_8
can
be
lifetime
we
think
this
would
be
a
great
opportunity
to
revisit
how
technology_1
and
technology_2
have
connector_6
connector_7
if
their
strength
have
shift
and
see
how
they
fit
into
today’s
use
requirement_3
what
be
technology_1
and
technology_7
technology_2
technology_1
be
often
summarize
a
an
“open_source
quality_attribute_4
connector_data_1
pattern_2
”
connector_3
in
technology_9
it
facilitate
the
quality_attribute_5
delivery
of
connector_data_2
in
complex
connector_8
scenario
initially
build
around
the
popular
technology_10
technology_11
it’s
also
highly
quality_attribute_6
with
exist
technology_8
while
it
capability
can
be
expand
through
plug
in
enable
on
the
component_6
technology_1
pattern_2
can
be
quality_attribute_4
and
configure
to
be
quality_attribute_7
in
requirement_3
of
requirement_4
or
component_6
failure
technology_7
technology_2
on
the
other
hand
be
describe
a
a
“distributed
connector_2
component_7
”
rather
than
focus
on
quality_attribute_8
connector_9
it
instead
facilitate
raw
quality_attribute_9
connector_3
in
technology_12
and
technology_13
technology_2
build
on
the
idea
of
a
“distributed
append
only
log”
where
connector_data_2
be
connector_3
to
the
end
of
a
requirement_5
that’s
persist
to
disk
and
component_8
can
choose
where
they
begin
connector_10
from
that
requirement_5
likewise
technology_2
cluster
can
be
quality_attribute_4
and
cluster
across
multiple
component_9
for
a
high
degree
of
quality_attribute_10
technology_1
vs
kafkawhile
they’re
not
the
same
component_10
many
often
narrow
down
their
pattern_1
option
to
these
two
but
be
leave
wonder
which
of
them
be
quality_attribute_1
i’ve
long
believe
that’s
not
the
correct
question
to
ask
instead
you
want
to
focus
on
what
each
component_10
at
analyze
their
difference
and
then
decide
which
of
the
two
best
fit
your
use
requirement_3
even
outside
of
the
feature
of
either
component_10
you
should
also
take
into
consideration
the
skill
need
to
operate
the
component_5
and
the
developer
around
them
requirement
and
use
caseswhen
the
initial
be
connector_3
there
be
a
pretty
clear
cut
difference
in
design
between
technology_1
and
technology_2
and
a
such
a
difference
in
use
requirement_3
rabbitmq’s
connector_data_1
pattern_2
design
in
use
requirement_3
that
have
specific
connector_8
need
and
per
connector_data_1
guarantee
whereas
kafka’s
append
only
requirement_5
allow
developer
connector_11
to
the
connector_1
history
and
more
direct
connector_1
component_11
while
the
venn
diagram
of
use
requirement_3
these
two
technology_8
could
fulfill
be
very
tight
there
be
scenario
in
which
one
be
a
demonstrably
quality_attribute_1
choice
than
the
other
work
be
currently
underway
that
will
alter
that
balance
however
while
technology_1
will
continue
to
offer
it
traditional
component_12
component_13
it
will
also
introduce
a
connector_data_3
connector_data_4
component_13
an
append
only
requirement_5
with
non
destructive
connector_12
semantics
this
connector_data_3
connector_data_4
will
work
much
kafka’s
persistent
requirement_5
and
will
be
an
excite
addition
for
technology_1
component_14
look
to
expand
their
connector_2
use
requirement_3
and
while
this
feature
will
be
quality_attribute_6
with
the
technology_10
technology_11
it
will
also
introduce
a
binary
base
connector_1
technology_11
developer
experiencethe
developer
experience
of
the
two
component_5
have
largely
remain
the
same
with
the
connector_data_5
of
component_8
and
technology_14
continue
to
grow
thanks
to
the
work
of
their
respective
both
rabbitmq’s
and
kafka’s
component_15
technology_14
connector_data_6
have
see
steady
growth
a
more
technology_4
and
technology_15
have
grow
in
popularity
find
a
well
support
and
complete
technology_14
for
either
component_10
have
become
easy
one
thing
to
note
be
the
growth
of
technology_2
connector_1
a
component_15
technology_14
implementation
that
make
it
easy
for
developer
to
component_11
connector_2
connector_data_3
it’s
use
for
the
common
use
requirement_3
of
connector_10
connector_data_3
from
technology_2
component_11
it
and
connector_13
it
to
another
technology_2
component_12
additionally
technology_16
be
well
worth
connector_14
out
for
developer
look
to
build
connector_2
component_4
while
take
advantage
of
their
familiarity
with
relational
component_16
a
similar
thing
can
be
accomplish
with
technology_1
with
the
help
of
some
other
piece
such
a
technology_6
requirement_1
connector_data_3
flow
furthermore
note
the
upcoming
connector_2
connector_15
come
for
technology_1
mention
in
the
previous
section
keep
in
mind
that
this
can
open
way
of
connector_16
with
technology_1
for
the
developer
quality_attribute_11
and
operationsas
note
in
the
initial
technology_1
ship
with
a
useful
administration
to
manage
component_14
and
component_12
while
technology_2
rely
on
tl
and
jaas
whether
you
choose
technology_1
or
technology_2
will
of
quality_attribute_12
on
your
specific
requirement
and
your
use
requirement_3
but
most
quality_attribute_11
scenario
can
have
a
proper
conclusion
with
either
technology_8
it’s
important
to
note
the
rise
of
technology_3
over
the
last
few
year
and
how
it
affect
the
of
component_10
substantial
work
have
be
do
to
allow
infrastructure
operator
to
run
both
technology_1
and
technology_2
on
technology_3
the
technology_1
operator
and
technology_2
helm
requirement_6
both
have
very
fine
control
over
how
these
component_5
be
configure
a
well
a
how
to
run
them
on
technology_3
specifically
this
make
it
extremely
easy
to
connector_17
up
and
run
with
both
of
them
configure
and
cluster
out
of
the
component_17
performanceperformance
a
be
also
note
in
the
initial
can
be
hard
to
quantify
with
so
many
variable
come
into
play
include
how
the
component_10
be
configure
how
your
connector_18
with
it
and
of
the
hardware
it’s
run
on
everything
from
requirement_4
to
memory
and
disk
quality_attribute_13
can
dramatically
impact
the
requirement_7
of
the
component_10
of
both
technology_1
and
technology_2
optimize
for
requirement_7
but
you
should
also
make
sure
your
use
requirement_3
leverage
them
to
maximize
quality_attribute_14
for
technology_1
there
be
some
great
how
to
resource
about
maximize
requirement_7
such
a
how
to
benchmark
and
size
your
cluster
these
guide
detail
best
practice
for
how
to
configure
your
cluster
and
how
your
should
connector_19
with
them
for
the
best
requirement_7
possible
much
of
this
advice
revolve
around
thing
manage
component_12
size
and
connector_20
and
be
careful
about
how
your
component_15
connector_21
connector_data_1
the
technology_1
cluster
guide
also
include
thing
to
keep
in
mind
when
build
a
cluster
likewise
confluent
have
a
great
run
technology_2
in
production
guide
that
cover
many
of
the
same
concern
for
when
you’re
build
the
hardware
that
will
run
your
technology_2
cluster
a
well
a
how
you
configure
the
cluster
itself
there
be
a
couple
of
thing
you’ll
need
to
keep
in
mind
since
technology_2
run
on
top
of
the
technology_17
but
it
do
a
great
of
point
those
out
if
you’re
interest
in
raw
number
both
the
technology_1
team
and
the
confluent
team
have
recently
put
out
their
respective
benchmark
both
include
a
lot
of
detail
on
how
the
cluster
be
configure
and
the
workload
that
be
place
on
them
so
make
sure
you
take
that
connector_data_7
into
consideration
when
connector_10
the
connector_data_8
use
requirement_3
and
should
significantly
factor
into
your
decision
a
well
make
the
calldeciding
whether
to
use
technology_1
or
technology_2
be
never
easy
and
with
both
technology_8
improve
every
day
the
margin
of
advantage
have
only
connector_17
small
the
decision
you
make
will
quality_attribute_12
on
your
individual
scenario
make
use
of
the
knowledge
contain
both
in
this
and
the
original
one
and
apply
it
to
the
familiarity
you
have
with
your
use
requirement_3
along
with
any
proof
of
concept
moreif
you
would
to
take
a
deep
dive
on
this
topic
connector_7
out
this
video
from
springone
to
see
when
one
might
be
a
quality_attribute_1
fit
over
the
other
if
you’re
to
pattern_1
component_5
in
general
a
great
place
to
start
be
with
this
video
on
pattern_3
architecture
if
you’re
a
technology_6
developer
make
sure
to
connector_7
out
our
guide
to
connector_17
start
with
technology_1
technology_2
and
technology_6
requirement_1
connector_1
and
if
you
would
to
more
about
the
vmware
tanzu
technology_1
offer
connector_7
out
this
component_18
frequently
ask
questionswhat
be
the
difference
between
technology_2
and
rabbitmqkafka
be
a
quality_attribute_4
connector_2
component_7
that
facilitate
raw
quality_attribute_9
focus
on
a
quality_attribute_4
append
only
requirement_5
that
can
be
cluster
across
multiple
component_9
for
a
high
degree
of
quality_attribute_10
this
differ
from
technology_1
an
open_source
quality_attribute_4
connector_data_1
pattern_2
that
efficiently
facilitate
the
delivery
of
connector_data_2
in
complex
connector_8
scenario
technology_1
capability
can
be
expand
through
the
use
of
plug
in
enable
on
the
component_6
they
can
also
be
quality_attribute_4
and
configure
to
be
quality_attribute_7
in
the
requirement_3
of
component_6
or
requirement_4
failure
when
should
you
use
technology_2
vs
technology_1
kafka’s
append
only
requirement_5
allow
developer
to
connector_11
connector_1
history
and
direct
connector_1
component_11
while
rabbitmq’s
connector_data_1
pattern_2
design
in
use
requirement_3
that
have
specific
connector_8
need
and
per
connector_data_1
guarantee
however
technology_1
be
develop
a
connector_data_3
connector_data_4
component_13
to
the
append
only
requirement_5
that
will
close
the
gap
in
connector_2
use
requirement_3
can
technology_2
and
technology_1
be
quality_attribute_2
on
technology_3
yes
both
technology_2
and
technology_1
can
be
quality_attribute_2
on
technology_3
should
you
use
technology_2
or
technology_1
for
pattern_4
while
technology_2
utilize
a
straightforward
high
requirement_7
connector_8
approach
ideal
for
requirement_8
use
requirement_3
technology_1
be
ideal
for
pattern_5
connector_data_9
and
allow
for
fast
component_6
response_time
both
option
be
suitable
quality_attribute_12
on
your
specific
use
requirement_3
be
technology_2
high
requirement_7
than
technology_1
both
technology_2
and
technology_1
optimize
for
requirement_7
which
can
be
very
hard
to
quantify
quality_attribute_12
on
your
specific
use
requirement_3
while
technology_2
have
a
very
high
quality_attribute_9
technology_1
at
low
quality_attribute_15
connector_data_1
delivery
of
component_10
configuration
connector_22
hardware
and
requirement_4
quality_attribute_13
will
dramatically
impact
the
requirement_7
of
either
component_10
what
be
the
different
use
requirement_3
for
technology_2
vs
technology_1
technology_2
be
ideal
for
requirement_8
use
requirement_3
that
require
the
best
quality_attribute_9
while
technology_1
be
ideal
for
low
quality_attribute_15
connector_data_1
delivery
guarantee
on
a
per
connector_data_1
basis
and
complex
connector_9
report
an
issue
vmware
tanzu©
vmware
inc
term
of
use
privacy
requirement_9
your
california
privacy
right
settingssign
up
for
the
developer
newslettersubscribedone
