technology_1
technology_2
hornetq
and
technology_3
in
comparisonhometrainingresourcesopen
sourcepress
releasescontactrest
demoshibbolethyahoo
webrankws
specificationsweb
component_1
supportopen
sourcecompression
filtersoap
compressioncompression
how
tosoa
vs
eai
&
esbsoap
toolkitsws
trustrest
screencastrestgate
videocsv
and
esbopenesb
vs
servicemixgroovy
and
jax
wsthrift
etch
rest
introductionxpath
splitterreading
wsdlsoftware
architectureiphone
stylesheetmessage
brokers+49


0info@predic8
comactivemq
technology_2
hornetq
and
technology_3
in
comparison
by
thomas
bayerdate




architecture
and
the
standardize
technology_4
technology_5
have
lead
to
a
flood
of
connector_data_1
pattern_1
all
pattern_1
take
claim
to
be
fast
quality_attribute_1
and
quality_attribute_2
but
what
really
distinguish
the
pattern_1
how
do
i
choose
the
right
pattern_1
should
we
continue
to
use
establish
pattern_1
such
a
the
technology_6
or
try
a
more
modern
one
this
attempt
to
answer
these
question
and
help
the
reader
in
select
a
suitable
pattern_1
the
pattern_1
describe
in
this
need
to
be
quality_attribute_3
under
an
open_source
licenseallow
connector_1
from
javaoffer
quality
of
component_2
feature
such
a
guarantee
delivery
and
persistence
in
the
next
section
the
pattern_1
will
be
present
with
their
specialty
then
we
handle
criterion
such
a
persistence
support
component_3
requirement_1
and
distribution
the
description
start
with
the
establish
technology_6
pattern_1
technology_7
activemqapache
technology_6
have
the
large
number
of
installation
of
all
open_source
connector_data_1
pattern_1
with
the
large
distribution
technology_6
connector_2
the
technology_8
connector_data_1
component_2
specification
and
offer
numerous
feature
such
a
support
for
the
requirement_2
requirement_3
pattern_2
for
technology_9
technology_10
and
for
transaction
for
persistence
of
connector_data_1
different
connector_3
be
use
the

base
component_4
kaha
offer
very
quality_attribute_4
requirement_1
because
it
run
at
technology_8
vm
of
the
pattern_1
and
require
very
few
resource
and
have
optimize
for
connector_data_1
have
become
popular
too
in
requirement_2
environment
but
the
use
of
a
relational
component_4
such
a

s
db

or
technology_11
component_4
use
a
technology_12
component_5
together
with
a
relational
component_4
be
associate
with
lose
quality_attribute_5
but
bring
advantage
for
the

the
component_4
for
persistence
of
connector_data_2
can
be
incorporate
into
the
operate
of
a
connector_data_3
center
and
the
exist
mechanism
can
be
use
for
the
backup
it
do
not
always
make
sense
to
create
a
backup
for
a
connector_data_1
component_5
a
highlight
at
technology_6
be
the
numerous
possibility
of
cluster
and
distribution
in
order
to
keep
the
go
in
requirement_4
of
failure
of
a
pattern_1
technology_6
can
be
be
operate
in
a
pattern_3
configuration
further
several
pattern_1
can
be
connector_4
to
a
requirement_5
of
pattern_1
in
a
requirement_5
of
pattern_1
component_6
and
topic
publish
subscribe
be
virtual
i
e
a
component_7
be
quality_attribute_3
on
all
technology_13
and
the
connector_5
take
place
automatically
figure

outline
a
virtual
pattern_1
which
could
be
realize
with
quality_attribute_6
technology_6
installation
figure1
virtual
pattern_1
with
globally
quality_attribute_6
nodesactivemq
be
use
a
bus
infrastructure
in
some
requirement_2
component_2
bus
technology_14
such
a
servicemix
and
technology_15
esb
there
be
many
other
project
that
use
technology_6
for
transport
connector_data_1
technology_7
geronimo
and
tomee
the
technology_8
requirement_2
edition
of
the
technology_16
web
container
be
use
technology_6
a
technology_17
implementation
the
fuse
mq
requirement_2
pattern_1
by
progress
be
base
on
technology_7
technology_6
pattern_1
bugfix
version
of
fuse
be
release
more
frequently
a
the
version
of
technology_7
technology_1
since
it
inception
in

the
technology_6
pattern_1
have
mature
and
become
widespread
childhood
disease
such
a
memory
leak
have
be
eliminate
long
ago
for
most
connector_data_4
technology_6
pattern_4
be
quality_attribute_2
high
requirement_1
and
easy
on
resource
technology_1
be
still
a
very
quality_attribute_4
choice
for
requirement_2
connector_data_1
but
technology_6
have
connector_6
some
competition
which
be
arrive
with

architecture
quality_attribute_4
requirement_1
and
with
the
support
of
standardize
technology_5
in
the
area
of
the
space
deer
technology_7
apolloapache
technology_6
apollo
connector_7
competition
from
it
own
requirement_6
apollo
be
a
recent
development
base
on
the
experience
of
the
technology_6
project
in
order
to
be
fast
more
quality_attribute_1
and
easy
to
maintain
than
technology_1
a
completely
architecture
be
introduce
that
architecture
be
base
on
technology_18
programming
technology_19
which
support
well
the
development
of
concurrent
component_8
the
component_9
of
the
apollo
pattern_1
differ
fundamentally
from
that
of
the
technology_1
all
connector_data_4
be
perform
asynchronously
and
pattern_5
which
contribute
to
increase
requirement_1
and
quality_attribute_7
this
mean
that
the
skill
of
multi
core
processor
be
quality_attribute_4
use
for
apollo
there
be
two
storage
for
persistent
connector_data_1
on
the
one
hand
on
the
technology_20
component_4
leveldb
by
and
on
the
other
hand
via
the
technology_8
edition
of
the
berkeley
db
through
the
technology_21
technology_22
connector
a
pattern_4
component_10
can
be
quality_attribute_8
directly
into
a
web
component_11
the
follow
connector_data_5
show
how
to
use
technology_23
and
the
apollo
stomp
j
technology_24
to
connector_1
a
pattern_1
from
a
web
component_11
when
connector_8
a
pattern_6
be
register
which
display
the
content
of
a
connector_9
connector_data_1
in
a
dialog
var
component_10
=
stomp
component_10
w
apollo
predic8
technology_25

component_10
connector_8
admin
pwd

frame
{
component_10
subscribe
topic


msg
{
alert
msg
body
}
}
connector_data_5

connector_1
to
the
apollo
pattern_1
with
stomp
and
technology_23
connector_10
connector_data_2
from
within
the
browser
can
be
do
with
follow
technology_23
one
liner
component_10
connector_11
topic

{}
inhalt
althoughâ
apollo
be
connector_12
in
technology_26
the
pattern_1
can
be
use
safely
in
a
technology_8
environment
the
fact
that
apollo
be
realize
with
technology_18
can
only
be
see
because
the
distribution
also
contain
some
technology_18
technology_24
among
many
technology_8
technology_24
for
the
administration
apollo
offer
a
quality_attribute_9
web
console
a
the
follow
screenshot
show
figure2
admin
console
of
the
apollo
brokerif
you
edit
the
extension
of
the
url
from
technology_27
to
technology_28
you
ll
connector_6
a
technology_29
representation
rather
than
a
web
component_11
figure3
apollo
console
a
technology_29
representationby
use
pattern_7
and
technology_29
you
can
also
achieve
connector_12
connector_1
to
the
apollo
web
component_12
â
for
example
to
create
a
component_7
figure

show
a
screenshot
with
a
visualization
of
the
apollo
pattern_7
technology_30
the
visualization
be
quality_attribute_8
in
apollo
and
realize
by
the
technology_31
technology_32
the
description
with
technology_31
be
a
specification
and
a
technology_10
for
the
description
of
pattern_7
apis
figure4
pattern_7
component_13
description
with
swaggerthere
be
no
component_10
technology_24
for
apollo
itself
thereforeâ
other
component_14
can
be
use
for
theâ
technology_5
support
by
apollo
technology_33
openwire
and
stomp
ffmqthe
full
technology_8
requirement_7
technology_34
connector_data_1
queuer
be
a
lightweight
technology_17
implementation
the
whole
component_15
be
small
than

kb
but
there
be
a
number
of
restriction
regard
technology_17
conformity
or
transaction
if
you
can
dispense
with
advance
technology_17
requirement_8
such
a
connector_data_1
group
connector_7
a
quality_attribute_9
fast
and
straightforward
connector_data_1
pattern_1
with
ffmq
hornetqfor
a
long
time
the
basis
of
hornetq
be

under
the
name
of
technology_35
pattern_4


until
it
be
a
further
develop
in
separate
project
under
the
name
of
hornetq
hornetq
can
be
usedâ
independently
of
the
technology_35
component_12
component_15
since
version

hornetq
be
the
preconfigured
connector_data_1
pattern_1
for
technology_17
of
the
technology_35
component_15
hornetq
be
configure
a
requirement_2
connector_data_1
pattern_1
it
have
lot
of
feature
and
lot
of
setting
and
be
a
complete
implementation
of
the
technology_8
connector_data_1
component_2
specification
the
component_16
manual
have
connector_6

component_11
and
therefore
it
be
the
most
extensive
of
the
connector_data_5
connector_data_1
pattern_1
the
very
detail
documentation
contain
the
concept
of
the
architecture
through
to
xa
transaction
and
cluster
hornetq
contain
no
stand
alone
console
for
administration
hornetq
can
be
manage
over
the
console
of
the
technology_35
component_12
component_15
for
example
you
can
create
component_6
or
connector_13
statistic
use
technology_36
and
mbeans
since
i
would
to
use
the
hornetq
in
the
standalone
version
a
special
bracket
be
on
my
wish
connector_data_5
hornetq
have
it
strength
when
use
a
requirement_2
pattern_1
and
a
technology_17
implementation
the
requirement_3
into
technology_35
will
certainly
also
help
to
it
spread
this
imply
a
certain
degree
of
complexity
so
there
be
more
suitable
pattern_1
if
you
need
easy
configuration
for
requirement_2
component_17
hornetq
definitely
have
a
sharp
sting
technology_37
messagingthe
development
of
technology_35
pattern_4
be
set
feature
will
be
connector_14
only
in
the
follow
up
project
hornetq
for
a
while
there
will
be
further
support
and
bug
fix
openjmsopenjms
be
the
open_source
technology_17
implementation
from
sun
microsystems
in
recent
year
i
could
not
see
much
activity
around
openjms
it
seem
that
this
project
be
not
especially
alive
technology_7
qpidâ¢besides
technology_6
and
apollo
there
be
another
technology_7
connector_data_1
pattern_1
technology_7
technology_2
the
aim
of
the
technology_2
project
be
the

percent
quality_attribute_10
with
the
advance
connector_data_1
pattern_8
technology_5
technology_38
technology_2
pattern_1
be
quality_attribute_3
for
technology_39
and
technology_8
this
describe
the
feature
of
the
technology_8
version
for
technology_8
clientsâ
there
be
a
technology_17
component_13
for
technology_2
for
technology_39
technology_40
and

s
technology_41
there
be
the
technology_2
pattern_4
technology_30
for
the
persistence
of
the
connector_data_2
the
relational
technology_7
technology_42
component_4
and
the
technology_11
berkeley
db
be
support
base
on
technology_7
technology_2
offer
the
requirement_2
pattern_4
technology_14
mrg
for
mrg
longtime
support
and
version
with
additional
bug
fix
be
quality_attribute_3
protonâ¢
a
subproject
of
technology_2
be
a
lightweight
implementation
of
the
technology_4
technology_5
use
proton
it
be
likewise
possible
to
develop
component_14
and
component_15
proton
be
quality_attribute_3
for
technology_43
and
technology_8
the
technology_43
implementation
also
include
bind
for
technology_44
technology_40
and
technology_45
rabbitmqthe
technology_3
pattern_1
be
create
by
the
functional
technology_19
technology_46
technology_46
be
especially
suit
for
quality_attribute_6
component_12
a
pattern_9
and
quality_attribute_11
be
well
support
do
not
be
deter
from
that
technology_3
be
connector_14
in
technology_46
it
installation
run
quickly
and
easily
at
window
and
mac
o
for
programming
in
technology_8
or
other
technology_19
component_10
technology_24
be
quality_attribute_3
use
a
plugin
allow
technology_3
to
understand
technology_5
such
a
stomp
the
core
of
technology_3
be
fully
geared
to
the
technology_4
technology_5
unfortunately
there
be
currently
no
support
for
technology_4
in
version


but
support
for
technology_4


be
already
in
the
plan
the
requirement_9
plugin
provide
an
appeal
web
console
that
allow
easy
administration
there
also
be
visualize
statistic
such
a
the
number
of
connector_data_2
per
second
and
the
consumption
of
resource
such
a
memory
connector_data_6
and
the
crucial
descriptor
figure5
technology_3
consolezeromqzeromq
be
no
classic
pattern_1
which
provide
connector_data_1
component_6
to
it
component_10
but
rather
a
technology_24
to
create
distributedâ
and
concurrent
component_12
the
technology_47
component_13
be
similar
to
the
low
level
connector_data_6
component_13
for
connector_15
over
requirement_5
in
contrast
to
a
connector_data_1
orient
technology_48
no
central
component_15
be
require
at
technology_49
the
sender
of
a
connector_data_1
be
responsible
for
the
for
connector_5
to
the
right
destinationâ
and
the
receiver
of
a
connector_data_1
be
responsible
for
component_7
technology_49
have
connector_6
the
follow
notation
mq
omq
and
zmq
technology_47
be
develop
by
imatix
who
be
involve
in
development
of
technology_50
meanwhile
imatix
have
withdraw
from
participation
and
focus
entirely
on
technology_49
the
approach
take
by
technology_47
be
quite
elegant
and
enable
topology
from

to
n
technology_13
or
pattern_1
between
sender
and
receiver
the
abandonment
of
a
central
pattern_1
enable
very
low
quality_attribute_12
and
high
bandwidth
thus
technology_47
be
ideal
for
large
volume
of
connector_data_2
eg
for
measurement
requirement_10
for
real
time
quote
in
financial
requirement_11
or
for
online
game
quality_attribute_13
and
reliabilitybasically
all
pattern_1
be
highly
quality_attribute_14
quality_attribute_1
and
quality_attribute_2
almost
every
project
praise
that
a
a
outstanding
property
therefore
the
description
of
the
pattern_1
do
notâ
separately
â
mention
these
property
unless
a
pattern_1
be
significantly
different
from
the
others
so
this
point
be
limit
a
a
selection
criterion
the
technology_6
pattern_1
have
limitation
in
term
of
quality_attribute_13
quality_attribute_15
and
quality_attribute_16
due
to
it
architecture
but
only
at
extremely
high
load
or
at
thousand
of
component_6
technology_6
should
show
it
limit
in
practice
technology_6
often
be
more
quality_attribute_17
than
it
modern
challenger
because
of
it
maturity
performanceimportant
in
evaluate
the
quality_attribute_5
of
a
pattern_1
be
it
of
component_12
only
search
for
a
fast
pattern_1
usually
be
too
simplistic
to
evaluate
the
requirement_1
of
a
pattern_1
correctly
you
should
ask
yourself
the
follow
question
do
i
need
a
pattern_1
for
financial
transaction
or
online
game
what
be
more
important
for
the
use
guarantee
pattern_10
component_2
or
quality_attribute_5
and
bandwidth
how
big
be
the
delay
in
delivery
of
connector_data_1
what
size
be
the
connector_data_2
to
be
connector_16
how
many
component_6
be
need
how
many
component_14
simultaneously
connector_1
the
pattern_1
property
such
a
persistence
or
transactionality
cost
requirement_1
and
cause
that
pattern_4
solution
without
qos
which
keep
the
news
to
the
memory
usually
be
fast
if
high
quality_attribute_18
be
require
persistence
and
guarantee
delivery
can
be
disable
in
most
requirement_4
the
requirement_1
be
despite
persistence
more
than
sufficient
for
many
component_12
even
the
somewhat
date
technology_6
can
component_18
thousand
of
connector_data_2
per
second
usually
this
be
sufficient
for
most
requirement_12
component_17
in
the
of
finance
insurance
and
retail
high
demand
on
requirement_1
be
need
in
real
time
component_18
of
measure
requirement_10
or
in
online
game
if
a
quality_attribute_18
of


or
more
connector_data_2
per
second
be
need
you
should
take
one
of
the

pattern_1
the
quality_attribute_18
of
apollo
technology_2
technology_3
and
the
other
pattern_1
lie
between
several
hundred
thousand
to
several
million
connector_data_2
per
second
for
example
at
specjms
benchmark
hornetq
have
connector_17
more
than

million
connector_data_2
per
second
test
on
a

chip
component_19
with

core
and

gb
memory
for
other
pattern_1
there
be
similar
connector_data_7
it
be
very
difficult
to
achieve
an
objective
comparison
even
with
standardize
benchmark
because
most
configuration
feature
or
technology_5
be
different
several
pattern_1
claim
to
be
the
fast
these
statement
usually
be
only
valid
for
a
short
time
and
only
for
a
specific
scenario
the
aforementioned
requirement_10
allow
the
conclusion
that
requirement_1
of
a
pattern_1
represent
a
project
risk
in
the
few
requirement_4
therefore
the
quality_attribute_5
be
hardly
a
selection
criterion
for
the
benefit
of
a
particular
pattern_1
practical
experience
usually
not
the
pattern_1
be
the
bottleneck
but
connector_data_1
component_20
that
be
slow
down
by
slow
backend
component_21
or
component_4
query
connector_data_1
persistenceso
that
connector_data_2
can
survive
the
failure
of
a
pattern_1
they
have
to
be
connector_18
permanently
on
disk
for
most
pattern_1
there
be
exchangeable
connector_data_1
component_5
if
connector_data_2
be
component_5
permanently
the
use
component_4
greatly
influence
the
quality_attribute_5
of
the
pattern_1
therefore
for
the
storage
of
connector_data_2
specialize
component_4
be
use
connector_data_2
have
to
be
component_5
search
by
the
name
of
a
component_7
and
be
delete
the
modification
of
connector_data_2
be
not
necessary
the
component_4
optimize
for
these
connector_data_8
which
mostly
connector_1
to
the
hard
drive
directly
achieve
a
much
quality_attribute_4
requirement_1
in
persist
connector_data_2
a
common
relational
component_4
the
order
of
magnitude
of
the
quality_attribute_5
difference
between
a
relational
component_4
and
a
special
connector_data_1
component_4
lie
approximately
at
ten
time
despite
of
quality_attribute_5
cost
by
relational
connector_data_3
connector_3
many
component_22
want
to
pattern_11
connector_data_2
in
their
prefer
component_4
the
technology_12
component_5
the
technology_6
pattern_1
allow
to
use
any
relational
component_4
for
which
there
be
a
technology_12
driver
of

the
technology_11
component_4
can
be
use
for
storage
at
technology_1
technology_17
supportan
important
criterion
when
choose
a
pattern_1
be
the
support
of
the
technology_8
connector_data_1
component_2
technology_38
many
exist
technology_8
component_17
be
use
the
technology_17
component_13
to
connector_19
with
a
connector_data_1
pattern_1
migration
to
a
pattern_1
then
can
occur
without
modification
to
the
component_12

in
technology_6
and
hornetq
technology_17
compliance
be
top
of
the
connector_data_5
of
feature
technology_7
technology_2
come
with
a
technology_17
component_10
technology_30
which
allow
component_14
to
connector_8
to
it
over
the
technology_4
pattern_1
through
this
component_13
you
can
connector_1
other
technology_17
pattern_1
such
a
the
technology_3
too
connector_data_1
protocolsfor
a
long
time
there
be
no
technology_38
for
a
pattern_4
technology_5
the
technology_8
technology_38
technology_17
only
describe
the

which
serve
component_17
to
connector_19
with
a
pattern_1
the
technology_5
between
the
technology_24
and
the
technology_17
component_15
be
quality_attribute_19
on
the
manufacturer
figure

show
how
the
same
component_12
can
be
operate
with
different
connector_data_1
pattern_1
use
technology_34
this
component_12
use
the
standardize
technology_17
component_13
through
which
it
connector_1
a
technology_17
implementation
of
a
particular
pattern_1
in
order
to
run
the
component_12
with
another
pattern_1
you
have
to
replace
the
technology_17
component_10
technology_24
figure6
technology_17
compatibilitybroker
do
not
understand
each
other
because
of
the
different
technology_5
technology_17
also
do
not
connector_20
the
quality_attribute_20
with
other
programming
technology_19
the
advance
connector_data_1
pattern_8
technology_5
be
a
technology_38
that
would
to
fill
this
gap
technology_4
enable
collaboration
of
pattern_1
and
component_14
from
different
manufacturer
and
component_3
technology_4
describe
a
binary
formatand
the
necessary
component_12
component_23
many
major
manufacturer
set
on
technology_50
butâ
there
be
some
criticism
for
the
way
of
standardization
cause
by
the
complexity
of
technology_50
the
approve
oasis
technology_38
version
technology_4


from

be
significantly
different
from
previous
version
so
that
one
could
speak
of
a
completely
separate
technology_5
the
previous
version







and



be
not
quality_attribute_21
with
each
other
whether
technology_4
really
lead
to
more
quality_attribute_20
quality_attribute_19
on
how
well
the
technology_4
version


be
connector_21
and
connector_14
support
of
technology_4


in
technology_1
apollo
and
technology_2
pattern_1
and
announcement
for
hornetq
and
technology_3
hope
that
technology_4
be
a
success
a
decisive
factor
be
the
break
with
the
previous
too
overload
version



technology_4


be
compare
with
the



version
a
little
easy
a
very
popular
technology_5
for
the
requirement_3
of
script
technology_19
be
text
base
stomp
it
s
quality_attribute_9
performant
and
there
be
a
variety
of
component_24
and
component_10
for
stomp
there
be
the
most
component_10
technology_24
for
example
technology_51
objective
technology_51
technology_44
go
technology_40
and
technology_45
stomp
be
that
quality_attribute_9
that
you
can
can
create
a
component_10
technology_24
for
the
unlikely
that
there
be
no
technology_24
with
little
effort
the
stomp
j
technology_24
for
javascriptâ
be
size
only

kbytes
to
use
web
component_11
with
technology_23
a
a
pattern_4
component_10
stomp
can
be
combine
with
the
websockets
technology_5
likewise
this
be
the
way
to
build
technology_52
web


component_12
the
follow
component_25
connector_data_9
the
support
technology_5
of
each
pattern_1
technology_6
apollo
hornetq
technology_2
technology_3
technology_47
technology_4




announce









technology_33
openwire
pattern_7
stomp
stomp
over
websockets
technology_53
over
gateway
component_25

support
for
pattern_4
technology_5
component_10
interfacesaccess
to
a
connector_data_1
pattern_1
be
not
only
reserve
for
technology_8
component_12
for
many
pattern_1
there
be
component_10
component_26
in
different
programming
technology_19
it
be
even
common
for
component_10
and
pattern_1
to
use
different
component_3
eg
when
a
technology_8
applicationâ
connector_1
an
technology_46
connector_12
technology_3
pattern_1
since
technology_4
have
standardize
the
technology_5
on
the
cable
level
it
be
even
possible
to
connector_8
the
technology_4
component_10
technology_24
of
a
pattern_1
of
another
pattern_1
for
this
to
work
the
technology_4
version
have
to
match
because
each
version
of
the
technology_5
be
not
quality_attribute_21
through
the
stomp
protocolâ
different
component_10
component_27
can
be
connector_4
to
a
pattern_1
stomp
be
favorited
to
connector_1
a
pattern_1
with
script
technology_19
such
a
technology_54
technology_44
and
technology_45
technology_6
apollo
hornetq
technology_2
technology_3
zeroq
technology_43
technology_39
technology_46
technology_55
technology_8
technology_17
technology_8
proprietary
technology_41
technology_56
technology_54
technology_44
technology_40
technology_57
disseminationthe
technology_6
pattern_1
have
connector_6
the
large
spreadâ
by
far
technology_3
recently
have
connector_22
much
attention
the
embed
trend
chartâ
below
show
how
frequently
you
search
for
the
pattern_1
behind
the
technology_4
technology_38
there
be
many
heavyweight
in
it
and
requirement_12
among
others
deutsche
bã¶rse
jpmorgan
chase

progress


ag
u
s
dept
of
homeland
securityâ
and
vmware
have
be
involve
on
the
standardization
since

technology_4
be
an
official
oasis
technology_38
this
all
lead
to
the
conclusion
that
technology_4
will
find
a
large
spread
summaryas
so
often
in
it
the
selection
of
a
pattern_1
be
no
royal
with
technology_1
there
be
a
prove
fast
and
widespread
pattern_1
whose
architecture
encounter
it
limit
the
technology_12
connector_data_1
component_5
be
a
unique
feature
of
technology_6
for
connector_data_3
center

alternatively
there
be
a
series
of
promise
and
cool
project
but
which
be
still
lack
somewhat
in
maturity
and
dissemination
in
the
project
be
a
lot
of
movement
so
i
assume
that
in

many
pattern_1
will
achieve
sufficient
quality_attribute_7
quality_attribute_10
and
documentation
hornetq
be
useful
when
requirement_2
pattern_4
with
technology_17
support
be
need
extensive
documentation
describe
even
advance
configuration
with
transaction
and
cluster
who
be
look
for
a
quality_attribute_9
pattern_1
for
web


component_12
connector_10
&
connector_9
connector_data_2
use
technology_23
or
who
us
us
script
technology_19
besides
technology_8
should
look
at
technology_7
apollo
if
technology_46
a
a
component_3
be
not
an
exclusion
criterion
technology_3
could
also
be
interest
currently
technology_3
be
still
miss
the
technology_4


quality_attribute_10
thomas
bayer
bayer@predic8
technology_25
watch
versionsthe
follow
connector_data_5
show
the
version
which
be
consider
for
this

technology_7
technology_6


0apache
apollo

5ffmq


1hornetq



beta
3jboss
pattern_4


0openjms


7qpid

18rabbitmq


1zeromq

2list
of
reference
technology_4
homepage
technology_58
www
technology_50

technology_13
technology_6
homepage
technology_58
technology_1
technology_7

stomp
technology_5
specification
technology_58
stomp
technology_59
technology_25
stomp
specification


technology_27
hornetq
homepage
technology_58
www
technology_37

hornetq
technology_3
support
technology_17
in
the
future
technology_58
technology_3

n5
nabble
technology_25
technology_3
support
technology_34
in
the
future
td24361
technology_27
connector_data_1
component_7
evaluation
note
technology_58
wiki
secondlife
technology_25
wiki
message_queue_evaluation_notes
enabling
the
technology_6
pattern_1
for
technology_4
technology_58
technology_1
technology_7

technology_50
technology_27
open
technology_17
homepage
technology_58
openjms
sourceforge
net
technology_7
technology_2
homepage
technology_58
technology_2
technology_7

technology_3
homepage
technology_58
www
technology_3
technology_25
technology_47
homepage
technology_58
www
technology_49

tagsopen
sourceâ
activemqâ
messagingâ
enterpriseâ
qpidâ
hornetqâ
rabbitmqâ
artikelâ
jmsâ
amqpâ
stompâ
websocketsâ
german
technology_1
technology_2
hornetq
and
technology_3
in
comparison
be
quality_attribute_3
in
german
too
copyright
technology_51


predic8
gmbh
koblenzer
str


bonn
germanyprivacy
requirement_13
