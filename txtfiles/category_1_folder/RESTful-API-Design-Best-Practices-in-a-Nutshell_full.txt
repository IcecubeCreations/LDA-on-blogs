pattern_1
component_1
design
best
practice
in
a
nutshell
train
consult
talk
newsletter
philipp
hauer
s
technology_1
ecosystem
technology_2
engineering
requirement_1
sociology
of
development
pattern_1
component_1
design
best
practice
in
a
nutshell
coding_keyword_1
on
mar


update
on
jun


update

use
two
url
per
resource
use
consistently
plural
noun
use
noun
instead
of
verb
for
resource
technology_3
use
technology_3
to
operate
on
your
resource
understand
the
semantics
of
the
technology_3
coding_keyword_1
on
the
resource
collection
url
to
create
a
resource
put
on
the
single
resource
url
for
update
a
resource
use
patch
for
partial
connector_data_1
of
a
resource
wrap
the
actual
connector_data_2
in
a
connector_data_2
use
the
query
coding_keyword_2
for
optional
and
complex
parameter
use
technology_3
status
cod
provide
useful
error
connector_data_3
provide
connector_1
for
navigate
through
your
component_1
hateoas
design
relationship
appropriately
connector_1
sideloading
embed
use
camelcase
for
attribute
name
use
verb
for
provide
pagination
offset
base
pagination
keyset
base
pagination
aka
continuation
connector_data_4
cursor
connector_2
out
technology_4
technology_5
ensure
quality_attribute_1
of
the
component_1
avoid
break
connector_3
keep
requirement_2
component_2
on
the
component_3
side
consider
component_1
versioning
versioning
via
url
versioning
via
connector_4
technology_3
coding_keyword_3
content
negotiation
personal
thought
about
versioning
further
connector_5
design
technology_3
and
pattern_1
component_4
can
be
tricky
a
there
be
no
official
and
enforce
technology_6
basically
there
be
many
way
of
connector_6
an
component_1
but
some
of
them
have
prove
in
practice
and
be
widley
adopt
this
coding_keyword_1
cover
best
practice
for
build
technology_3
and
pattern_1
apis
we’ll
talk
about
url
connector_data_5
technology_3

create
and
update
resource
design
relationship
connector_data_6
technology_7
pagination
versioning
and
many
more
update

i
completely
rework
this
coding_keyword_1
i
revisit
and
extend
exist
section
and

many
one
overview
over
technology_3
and
status
cod
patch
clearify
semantics
of
put
and
coding_keyword_1
connector_data_2

design
relationship
pattern_2
vs
pattern_3
style
apis
quality_attribute_1
versioning
approach
keyset
base
pagination
technology_4
technology_5
technology_4
technology_5
inspire
connector_data_6
technology_7
use
two
url
per
resource
one
url
for
the
collection
and
one
for
a
single
resource
#
url
that
represent
a
collection
of
resource
requirement_3
#
url
that
represent
a
single
resource
requirement_3

use
consistently
plural
noun
prefer
requirement_3
requirement_3

over
requirement_3
requirement_3

indeed
it’s
a
matter
of
taste
but
the
plural
form
be
more
common
moreover
it’s
more
intuitive
especially
when
use
connector_7
on
the
collection
url
connector_7
requirement_3
coding_keyword_4
multiple
requirement_3
but
most
important
avoid
mix
plural
and
singular
noun
which
be
confuse
and
error
prone
use
noun
instead
of
verb
for
resource
this
will
keep
you
component_1
quality_attribute_2
and
the
number
of
url
low
don’t
do
this
getallemployees
getallexternalemployees
createemployee
updateemployee
instead
express
the
require
action
with
the
quality_attribute_3
technology_3
on
a
small
set
of
url
see
next
section
technology_3
use
technology_3
to
operate
on
your
resource
connector_7
requirement_3
connector_7
requirement_3
state=external
coding_keyword_1
requirement_3
put
requirement_3

use
url
to
specify
the
resource
you
want
to
work
with
use
the
technology_3
to
specify
what
to
do
with
this
resource
with
the
five
technology_3
connector_7
coding_keyword_1
put
patch
and
delete
you
can
provide
crud
requirement_4
create
connector_5
update
delete
and
beyond
connector_5
use
connector_7
for
connector_8
resource
create
use
coding_keyword_1
or
put
for
create
resource
update
use
put
and
patch
for
update
exist
resource
delete
use
delete
for
delete
exist
resource
understand
the
semantics
of
the
technology_3
definition
of
idempotence
a
technology_3
be
idempotent
when
we
can
safely
connector_9
the
connector_data_7
over
and
over
again
and
all
connector_data_8
lead
to
the
same
state
connector_7
idempotent
connector_5
only
connector_7
never
connector_3
the
state
of
the
resource
on
the
component_3
side
it
must
not
have
side
effect
hence
the
connector_10
can
be
pattern_4
safely
example
connector_7
requirement_3
connector_data_9
all
requirement_3
connector_7
requirement_3

show
the
detail
of
the
requirement_3

put
idempotent
can
be
use
for
both
create
and
update
commonly
use
for
update
full
update
example
put
requirement_3

connector_data_1
requirement_3

uncommon
create
requirement_3

to
use
put
for
create
the
component_5
need
to
the
whole
url
include
the
coding_keyword_5
upfront
that’s
uncommon
a
the
component_3
usually
generate
the
coding_keyword_5
so
put
for
create
be
typically
use
when
there
be
only
one
element
and
the
url
be
unambiguous
example
put
requirement_3

avatar
create
or
connector_data_1
the
avatar
of
requirement_3

there
be
only
one
avatar
for
each
requirement_3
always
include
the
whole
connector_data_6
in
the
connector_data_7
it’s
all
or
nothing
put
be
not
mean
to
be
use
for
partial
connector_data_1
see
patch
coding_keyword_1
not
idempotent
use
for
create
example
coding_keyword_1
requirement_3
create
a
requirement_3
the
url
be
connector_11
back
to
the
component_5
in
the
location
coding_keyword_3
e
g
location
requirement_3

multiple
coding_keyword_1
connector_data_8
on
requirement_3
lead
to
many
different
requirement_3
that’s
why
coding_keyword_1
be
not
idempotent
patch
idempotent
use
for
partial
update
example
patch
requirement_3

connector_data_1
requirement_3

with
the
contain
in
the
connector_data_6
the
other
of
requirement_3

be
not
connector_12
delete
idempotent
use
for
deletion
example
delete
requirement_3

coding_keyword_1
on
the
resource
collection
url
to
create
a
resource
how
could
a
pattern_5
connector_13
for
create
a
resource
look

use
coding_keyword_1
for
create
a
resource
the
component_5
connector_14
a
coding_keyword_1
connector_data_7
to
the
resource
collection
url
requirement_3
the
technology_3
body
contain
the
attribute
of
the
resource
“paul”
the
pattern_1
web
component_6
generate
an
coding_keyword_5
for
the
requirement_3
create
the
requirement_3
in
it
internal
component_7
and
connector_14
a
connector_10
to
the
component_5
this
connector_10
contain
the
status

create
and
a
location
technology_3
coding_keyword_3
that
indicate
the
url
under
which
the
create
resource
be
quality_attribute_4
put
on
the
single
resource
url
for
update
a
resource
use
put
for
update
an
exist
resource
the
component_5
connector_14
a
put
connector_data_7
to
the
single
resource
url
requirement_3

the
technology_3
body
of
the
put
connector_data_7
contain
all
of
the
requirement_3
and
every
will
be
update
on
the
component_3
side
the
pattern_2
component_6
connector_data_1
the
name
and
status
of
the
requirement_3
with
the
coding_keyword_5

and
confirm
the
connector_3
with
the
technology_3
status

use
patch
for
partial
connector_data_1
of
a
resource
put
be
not
suppose
for
partial
update
put
should
only
be
use
for
complete
replacement
of
a
resource
connector_15
all
every
time
although
you
only
want
to
update
a
single

can
lead
to
accidentally
overwrite
in
requirement_5
of
parallel
update
moreover
the
implementation
of
validation
be
hard
a
you
have
to
support
both
use
requirement_5
create
some
must
not
be
coding_keyword_6
and
update
coding_keyword_6
requirement_6
to
mark
that
should
not
be
update
at
the
same
time
so
don’t
use
put
and
connector_16
only
the
that
should
be
update
miss
in
put
connector_data_7
should
be
treat
a
coding_keyword_6
requirement_6
and
empty
the
component_8
or
connector_17
validation
error
instead
use
patch
for
partial
update
connector_16
only
the
that
should
be
update
this
way
the
connector_data_7
connector_data_6
be
pretty
straight
connector_18
parallel
connector_data_1
of
different
don’t
override
unrelated

validation
become
easy
the
semantic
of
coding_keyword_6
requirement_6
be
unambiguous
for
both
put
and
patch
and
you
connector_19
bandwidth
for
instance
the
follow
patch
connector_data_7
connector_data_1
only
the
status
but
not
the
name
use
patch
and
connector_16
only
the
you
to
update
implementation
sidenote
besides
the
describe
“just
connector_16
what
you
to
update”
approach
which
be
also
recommend
by
technology_4
technology_5
there
be
technology_4
patch
it’s
a
connector_data_6
technology_7
for
patch
connector_data_8
and
describe
a
sequence
of
connector_3
that
should
be
perform
on
the
resource
however
it’s
tricky
to
connector_20
and
overkill
for
many
use
requirement_5
for
more
detail
connector_2
out
the
coding_keyword_1
“put
vs
patch
vs
technology_4
patch”
wrap
the
actual
connector_data_2
in
a
connector_data_2
connector_7
requirement_3
coding_keyword_4
a
connector_data_10
of
connector_data_11
in
the
connector_data_2

{
connector_data_2
{
coding_keyword_5

name
larry
}
{
coding_keyword_5

name
peter
}
}
connector_7
requirement_3

coding_keyword_4
a
single
connector_data_12
in
the
connector_data_2

{
connector_data_2
{
coding_keyword_5

name
larry
}
}
the
connector_data_6
of
put
coding_keyword_1
and
patch
connector_data_8
should
also
contain
the
connector_data_2
with
the
actual
connector_data_12
advantage
there
be
space
leave
to
metadata
e
g
for
pagination
connector_21
deprecation
warn
error
connector_data_13
consistency
quality_attribute_5
with
the
technology_4
technology_5
technology_6
use
the
query
coding_keyword_2
for
optional
and
complex
parameter
don’t
do
this
connector_7
requirement_3
connector_7
externalemployees
connector_7
internalemployees
connector_7
internalandsenioremployees
keep
your
url
quality_attribute_2
and
the
url
set
small
choose
one
base
url
for
your
resource
and
stick
to
it
move
complexity
or
optional
parameter
to
the
query
coding_keyword_2
connector_7
requirement_3
state=internal&title=senior
connector_7
requirement_3
id=1

the
technology_4
technology_5
way
of
pattern_6
be
connector_7
requirement_3
pattern_6
state
=internal&filter
title
=senior
connector_7
requirement_3
pattern_6
coding_keyword_5
=1

use
technology_3
status
cod
the
pattern_1
web
component_6
should
respond
to
a
client’s
connector_data_7
with
a
suitable
technology_3
status
connector_10

2xx
–
success
–
everything
work
fine
4xx
–
component_5
error
–
if
the
component_5
do
something
wrong
e
g
the
component_5
connector_14
an
invalid
connector_data_7
or
he
be
not
pattern_7
5xx
–
component_3
error
–
failure
on
the
component_3
side
error
while
try
to
component_9
the
connector_data_7
component_8
failure
dependend
component_10
be
not
quality_attribute_3
programming
error
or
state
that
should
not
occur
consider
the
quality_attribute_3
technology_3
status
cod
however
be
aware
that
use
all
of
them
could
be
confuse
for
the
component_11
of
your
technology_5
keep
the
set
of
use
technology_3
status
cod
small
it’s
common
to
use
the
follow
cod
2xx
success

ok

create
3xx
redirect

move
permanently

not
modify
4xx
component_5
error

bad
connector_data_7

unauthorized

forbid

not
find

go
5xx
component_3
error

internal
component_3
error
don’t
overuse

try
to
be
more
precise
if
the
resource
be
quality_attribute_3
but
the
component_12
be
not
allow
to
pattern_8
it
coding_keyword_4
a

forbid
if
the
resource
exist
once
but
now
have
be
delete
or
deactivate
use

go
provide
useful
error
connector_data_3
additionally
to
an
appropriate
status

you
should
provide
a
useful
and
verbose
description
of
the
error
in
the
body
of
your
technology_3
connector_10
here’s
an
example
connector_data_7
connector_7
requirement_3
state=super
connector_10

bad
connector_data_7
{
error
{
status

detail
invalid
state
valid
requirement_6
be
internal
or
external


connector_21
{
about
technology_3
www
domain
technology_8
rest
errorcode

}
}
}
the
propose
error
connector_data_6
connector_data_5
be
inspire
by
the
technology_4
technology_5
technology_6
provide
connector_1
for
navigate
through
your
component_1
hateoas
ideally
you
don’t
coding_keyword_7
your
component_13
construct
url
for
use
your
pattern_2
technology_5
let’s
consider
an
example
a
component_5
want
to
connector_22
the
salary
statement
of
an
requirement_3
therefore
he
have
to
that
he
can
connector_22
the
salary
statement
by
append
the
query
parameter
salarystatements
to
the
requirement_3
url
e
g
requirement_3

salarystatements
this
coding_keyword_2
concatenation
be
error
prone
fragile
and
hard
to
maintain
if
you
connector_12
the
way
to
connector_22
the
salary
statement
in
your
pattern_2
component_1
e
g
use
now
“salary
statements”
or
“payslips”
all
component_13
will
break
it’s
quality_attribute_6
to
provide
connector_1
in
your
connector_10
which
the
component_5
can
follow
for
instance
a
connector_10
to
connector_7
requirement_3
look
this
{
connector_data_2
{
coding_keyword_5

name
paul
connector_21
{
salary
technology_3
www
domain
technology_8
requirement_3

salarystatements
}
}
}
if
the
component_5
exclusively
rely
on
the
connector_1
to
connector_7
the
salary
statement
he
won’t
break
if
you
connector_12
your
technology_5
since
the
component_5
will
always
connector_7
a
valid
url
a
long
a
you
update
the
connector_21
in
requirement_5
of
url
connector_12
another
benefit
be
that
your
component_1
become
more
self
descriptive
and
the
component_13
don’t
have
to
look
up
the
documentation
that
often
design
relationship
appropriately
let’s
assume
that
each
requirement_3
have
a
manager
and
several
teammembers
there
be
basically
three
common
option
to
design
relationship
within
an
technology_5
connector_21
sideloading
and
embed
they
be
all
valid
and
the
right
choice
quality_attribute_7
on
the
use
requirement_5
basically
you
should
design
the
relationship
quality_attribute_7
on
the
client’s
connector_22
schema
and
the
tolerable
connector_data_7
amount
and
connector_data_6
size
connector_1
{
connector_data_2
{
coding_keyword_5

name
larry
relationship
{
manager
technology_3
www
domain
technology_8
requirement_3

manager
teammembers
technology_3
www
domain
technology_8
requirement_3

technology_3
www
domain
technology_8
requirement_3

or
teammembers
technology_3
www
domain
technology_8
requirement_3

teammembers
}
}
}
small
connector_data_6
size
it’s
quality_attribute_6
if
the
component_5
doesn’t
need
the
manager
and
the
teammanager
every
time
many
connector_data_7
it’s
bad
if
nearly
every
component_5
need
this
connector_data_2
many
additional
connector_data_8
be
require
in
the
bad
requirement_5
for
every
requirement_3
and
this
be
multiply
by
every
relationship
manager
teammembers
and
so
on
an
requirement_3
have
the
component_5
have
to
stitch
the
connector_data_2
together
in
order
to
connector_7
the
big
picture
sideloading
we
can
refer
to
the
relationship
with
a
foreign
key
and
put
the
refer
component_14
also
in
the
connector_data_6
but
under
the
dedicate
include
this
approach
also
connector_23
“compound
documents”
{
connector_data_2
{
coding_keyword_5

name
larry
relationship
{
manager

teammembers


}
}
include
{
manager
{
coding_keyword_5

name
kevin
}
teammembers
{
coding_keyword_5

name
albert
}
{
coding_keyword_5

name
tom
}
}
}
the
component_5
also
control
the
sideloaded
component_14
by
a
query
parameter
connector_7
requirement_3
include=manager
teammembers
we
connector_7
along
with
a
single
connector_data_7
quality_attribute_8
connector_data_6
size
no
duplication
e
g
you
only
connector_11
a
manager
once
even
if
he
be
reference
by
many
requirement_3
the
component_5
still
have
to
stitch
the
connector_data_2
together
in
order
to
resolve
the
relationship
which
can
be
very
cumbersome
embed
{
connector_data_2
{
coding_keyword_5

name
larry
manager
{
coding_keyword_5

name
kevin
}
teammembers
{
coding_keyword_5

name
albert
}
{
coding_keyword_5

name
tom
}
}
}
most
convenient
for
the
component_5
be
can
directly
follow
the
relationship
to
connector_7
the
actual
connector_data_2
relationship
be
load
in
vain
if
the
component_5
doesn’t
need
it
increase
connector_data_6
size
and
duplication
reference
component_14
be
embed
multiple
time
use
camelcase
for
attribute
name
use
camelcase
for
your
attribute
identifier
{
yearofbirth

}
don’t
use
underscore
year_of_birth
or
capitalize
yearofbirth
often
your
pattern_1
web
component_6
will
be
connector_24
by
a
component_5
connector_25
in
technology_9
typically
the
component_5
will
convert
the
technology_10
connector_10
to
a
technology_9
connector_data_12
by
connector_26
var
person
=
technology_4
requirement_7
connector_10
and
connector_data_14
it
attribute
therefore
it’s
a
quality_attribute_6
idea
to
stick
to
the
technology_9
convention
which
make
the
technology_9
more
readable
and
intuitive

t
person
year_of_birth
violate
technology_9
convention
person
yearofbirth
suggest
constructor
do
person
yearofbirth
use
verb
for
sometimes
a
connector_10
to
an
component_1
connector_data_14
doesn’t
involve
resource

calculate
pattern_9
or
convert
example
connector_5
connector_7
pattern_9
from=de_de&to=en_us&text=hallo
connector_7
calculate
para2=23&para2=432
connector_17
an
that
connector_3
the
component_3
side
state
coding_keyword_1
restartserver
no
body
coding_keyword_1
banuserfromchannel
{
component_12

pattern_10
serious
chat
pattern_10
}
in
this
requirement_5
no
resource
be
involve
instead
the
component_3
connector_27
an
and
coding_keyword_4
the
connector_data_15
to
the
component_5
hence
you
should
use
verb
instead
of
noun
in
your
url
to
distinguish
clearly
the
pattern_3
style
technology_5
from
the
pattern_2
resource
for
component_7
the
domain
create
those
pattern_3
style
component_4
instead
of
pattern_2
component_4
be
appropriate
for

usually
it’s
quality_attribute_2
and
more
intuitive
than
try
to
be
pattern_1
for

patch
component_3
with
{
restart
true}
a
a
rule
of
thumb
pattern_2
be
nice
for
connector_28
with
domain
component_15
and
pattern_3
be
suitable
for

for
more
detail
connector_2
out
“understanding
pattern_3
vs
pattern_2
for
technology_3
apis”
provide
pagination
it
be
almost
never
a
quality_attribute_6
idea
to
coding_keyword_4
all
resource
of
your
component_8
at
once
consequently
you
should
provide
a
pagination
mechanism
two
popular
approach
be
offset
base
pagination
keyset
base
pagination
aka
continuation
connector_data_4
aka
cursor
recommend
offset
base
pagination
a
really
quality_attribute_2
approach
be
to
use
the
parameter
offset
and
limit
which
be
well

from
component_8
requirement_3
offset=30&limit=15
#
coding_keyword_4
the
requirement_3

to

if
the
component_5
omit
the
parameter
you
should
use
default

offset=0
and
limit=100
never
coding_keyword_4
all
resource
if
the
retrieval
be
more
expensive
you
should
decrease
the
limit
requirement_3
#
coding_keyword_4
the
requirement_3

to

you
can
provide
connector_1
for
connector_29
the
next
or
previous
component_16
construct
url
with
the
appropriate
offset
and
limit
connector_7
requirement_3
offset=20&limit=10
{
pagination
{
offset

limit

total

}
connector_data_2
connector_21
{
next
technology_3
www
domain
technology_8
requirement_3
offset=30&limit=10
prev
technology_3
www
domain
technology_8
requirement_3
offset=10&limit=10
}
}
keyset
base
pagination
aka
continuation
connector_data_4
cursor
the
present
offset
base
pagination
be
easy
to
connector_20
but
come
with
severe
drawback
they
be
slow
sql’s
offset
clause
become
very
slow
for
large
number
and
unsafe
it’s
easy
to
miss
element
when
connector_3
be
happen
during
pagination
that’s
why
it’s
quality_attribute_6
to
use
an
index
column
let’s
assume
that
our
requirement_3
have
an
index
column
data_created
and
the
collection
resource
requirement_3
pagesize=100
coding_keyword_4
the
old

requirement_3
sort
by
this
column
now
the
component_5
only
have
to
take
the
datecreated
pattern_11
of
the
last
requirement_3
and
us
the
query
parameter
createdsince
to
continue
at
this
point
connector_7
requirement_3
pagesize=100
#
the
component_5
connector_30
the
old

requirement_3
sort
by
`data_created`
#
the
last
requirement_3
of
the
component_16
have
the
`datacreated`
with

=
sep





be
connector_7
requirement_3
pagesize=100&createdsince=1504224000000
#
the
component_5
connector_30
the
next

requirement_3
since

#
the
last
requirement_3
of
the
component_16
be
create
on

and
so
on
this
solve
already
many
of
the
disadvantage
of
offset
base
pagination
but
it’s
still
not
perfect
and
not
very
convenient
for
the
component_5
it’s
quality_attribute_6
to
create
a
so
connector_data_14
continuation
connector_data_4
by

additional
connector_data_16

the
coding_keyword_5
to
the
date
in
order
to
improve
the
quality_attribute_9
and
quality_attribute_10
moreover
you
should
provide
a
dedicate
in
the
connector_data_6
for
that
connector_data_4
so
the
component_5
doesn’t
have
to
figure
it
out
by
look
at
the
element
you
can
even
go
further
and
provide
a
next
connector_21
so
connector_7
requirement_3
pagesize=100
coding_keyword_4
{
pagination
{
continuationtoken
1504224000000_10
}
connector_data_2
last
element
{
coding_keyword_5

datecreated

}
connector_21
{
next
technology_3
www
domain
technology_8
requirement_3
pagesize=100&continue=1504224000000_10
}
}
the
next
connector_21
make
the
component_1
really
pattern_1
a
the
component_5
can
component_16
through
the
collection
simply
by
follow
these
connector_1
hateoas
no
need
to
construct
url
manually
moreover
you
can
simply
connector_12
the
url
connector_data_5
without
break
component_13
quality_attribute_1
for
more
detail
connector_2
out
the
dedicate
coding_keyword_1
about
web
component_1
pagination
web
component_1
pagination
with
the
‘timestamp_offset_checksum’
continuation
connector_data_4
the
propose
approach
be
not
recommend
any
more
but
the
coding_keyword_1
introduce
nicely
into
the
whole
topic
include
offset
base
pagination
web
component_1
pagination
with
the
‘timestamp_id’
continuation
connector_data_4
i
recommend
to
use
this
approach
it
also
contain
an
overview
of
exist
keyset
base
pagination
approach
connector_2
out
technology_4
technology_5
you
should
at
least
take
a
look
at
technology_4
technology_5
it’s
a
technology_6
technology_7
for
the
technology_10
connector_data_6
and
the
resource
of
an
technology_3
component_6
mime
type
component_17
vnd
api+json
i
personally
don’t
follow
all
recommendation
since
some
of
them
feel
a
little
bit
over
formalize
and
overkill
for
me
to
my
mind
the
achieve
quality_attribute_11
be
often
not
require
but
it
complicate
the
implementation
without
provide
a
benefit
but
it’s
a
matter
of
taste
and
follow
technology_6
be
basically
a
quality_attribute_6
idea
i
use
it
a
an
inspiration
and
pick
those
element
that
make
sense
for
me
feel
free
to
make
up
your
own
mind
about
technology_4
technology_5
ensure
quality_attribute_1
of
the
component_1
avoid
break
connector_3
ideally
pattern_2
component_4
a
every
technology_5
should
be
quality_attribute_12
basically
break
connector_3

connector_12
the
whole
connector_data_6
technology_7
or
the
url
technology_11
should
not
happen
but
how
can
we
still
quality_attribute_13
our
component_1
without
break
the
component_5
make
backward
quality_attribute_5
connector_12

be
no
problem
a
long
a
the
component_13
be
tolerant
duplication
and
deprecation
in
order
to
connector_12
an
exist
rename
or
connector_12
connector_data_5
you
can
the
one
next
to
the
old
and
deprecate
the
old
one
in
the
documentation
after
a
while
you
can
remove
the
old

utilize
hypermedia
and
hateoas
a
long
a
the
component_1
component_5
us
the
connector_1
in
the
connector_10
to
navigate
through
the
component_1
and
doesn’t
craft
the
url
manually
you
can
safely
connector_12
the
url
without
break
the
component_5
create
resource
with
name
if
requirement_2
requirement
lead
to
a
completely
domain
component_7
and
workflow
you
can
create
resource
that’s
often
quite
intuitive
a
the
domain
component_7
have
a
name
anyway
derive
from
the
requirement_2
name
example
a
rental
component_6
now
also
rent
bike
and
segway
so
the
old
concept
car
with
the
resource
car
doesn’t
cut
it
anymore
a
domain
component_7
vehicle
with
a
resource
vehicle
be
introduce
it’s
provide
along
with
the
old
car
resource
keep
requirement_2
component_2
on
the
component_3
side
don’t
coding_keyword_7
your
component_6
become
a
connector_data_17
connector_data_2
connector_22
pattern_12
which
provide
crud
requirement_4
by
directly
connector_31
your
component_8
component_7
low
level
technology_5
this
create
high
couple
the
requirement_2
component_2
be
shift
to
the
component_5
and
be
often
replicate
between
the
component_5
and
the
component_3

think
about
validation
we
have
to
keep
both
in
pattern_13
often
the
component_5
be
couple
to
the
server’s
component_8
component_7
we
should
avoid
create
connector_data_17
connector_data_2
connector_22
component_4
because
they
lead
to
high
couple
between
the
component_3
and
the
component_13
because
the
requirement_2
workflow
be
connector_29
quality_attribute_14
between
the
component_5
and
the
component_3
that
in
turn
make
it
likely
that
requirement_2
requirement
require
a
connector_12
in
both
the
component_5
and
the
component_3
and
to
break
the
technology_5
so
the
technology_5
component_18
be
not
that
quality_attribute_15
so
we
should
build
high
level
workflow
base
component_4
instead
of
low
level
apis
an
example
don’t
provide
a
quality_attribute_2
crud
component_6
for
the
order
component_14
in
the
component_8
don’t
require
the
component_13
to
that
to
cancel
an
order
the
component_5
have
to
put
an
order
to
the
generic
order

resource
with
a
certain
cancelation
connector_data_6
reflect
the
component_8
component_7
in
it
this
lead
to
high
couple
requirement_2
component_2
and
domain
knowledge
on
the
component_5
side
connector_32
component_8
component_7
instead
provide
a
dedicate
resource
order

cancelation
and
a
connector_21
to
it
in
the
connector_data_6
of
the
order
resource
the
component_5
can
navigate
to
the
cancelation
url
and
connector_16
a
quality_attribute_8
cancelation
connector_data_6
the
requirement_2
component_2
for
connector_data_18
this
connector_data_6
to
the
component_8
component_7
be
do
in
the
component_3
moreover
the
component_3
can
easily
connector_12
the
url
without
break
the
component_5
because
the
component_5
simply
follow
connector_21
besides
the
decision
component_2
if
an
order
can
be
cancel
or
not
be
now
in
the
component_3
if
a
cancelation
a
possible
the
component_3

the
connector_21
to
the
cancelation
resource
in
the
order
connector_data_6
so
the
component_5
only
have
to
connector_2
if
the
cancelation
connector_1
be
present
for
example
to
if
he
should
draw
the
cancelation

so
we
move
domain
knowledge
away
from
the
component_5
back
to
the
component_3
connector_3
to
the
cancelation
condition
can
be
easily
apply
by
only
touch
the
component_3
which
in
turn
make
the
component_18
quality_attribute_15
no
component_1
connector_12
be
require
if
you
to
connector_5
more
about
this
topic
i
recommend
the
talk
pattern_2
beyond
the
obvious
–
component_1
design
for
ever
quality_attribute_13
component_19
by
oliver
gierke
consider
component_1
versioning
nevertheless
you
might
end
up
in
situation
where
the
above
approach
don’t
work
and
you
really
have
to
provide
different
version
of
your
technology_5
versioning
allow
you
to
release
incompatible
and
break
connector_3
of
your
component_1
under
a
version
without
break
the
component_5
they
can
continue
connector_33
the
old
version
the
component_13
can
migrate
to
the
version
at
their
own
quality_attribute_16
this
topic
be
hotly
dispute
in
the

you
should
take
into
account
that
you
end
up
build
and
maintain
different
version
of
an
component_1
for
a
long
time
which
be
expensive
if
you
be
build
internal
component_4
you
most
likely
all
of
your
component_5
so
perform
break
connector_3
can
be
an
option
again
but
it
will
require
more
connector_34
and
a
coordinate
deployment
nevertheless
here
be
the
two
most
popular
approach
for
versioning
versioning
via
url
v1
versioning
via
the
connector_4
technology_3
coding_keyword_3
connector_4
component_17
vnd
myapi
v1+json
content
negotiation
versioning
via
url
put
the
version
number
of
your
component_1
in
the
url
of
every
resource
v1
requirement_3
pro
extremely
quality_attribute_2
for
component_1
developer
extremely
quality_attribute_2
for
component_1
component_5
url
can
be
copy
and
paste
con
not
restful
break
url
component_13
have
to
maintain
and
update
the
url
strictly
speak
this
approach
be
not
pattern_1
because
url
should
never
connector_12
this
prevent
easy
quality_attribute_1
put
the
version
in
the
url
will
break
the
component_1
some
day
and
your
component_13
have
to
fix
the
url
the
question
be
how
much
effort
would
it
take
the
component_13
to
update
the
url
if
the
answer
be
“only
a
little”
then
url
versioning
might
be
fine
due
to
it
quality_attribute_17
url
versioning
be
very
popular
and
widely
use
by
requirement_8

twitter

youtube
bing
dropbox
technology_12
and
disqus
versioning
via
connector_4
technology_3
coding_keyword_3
content
negotiation
the
more
pattern_1
way
for
versioning
be
to
utilize
content
negotiation
via
the
connector_4
technology_3
connector_data_7
coding_keyword_3
connector_7
requirement_3
connector_4
component_17
vnd
myapi
v2+json
in
this
requirement_5
the
component_5
connector_data_8
the
version

of
the
requirement_3
resource
so
we
treat
the
different
component_1
version
a
different
representation
of
the
requirement_3
resource
which
be
pretty
restful
you
can
make
the
v2
optional
and
default
to
the
late
version
when
the
component_5
only
connector_data_8
with
connector_4
component_17
vnd
myapi+json
but
be
fair
and
give
him
a
warn
that
his
component_20
break
in
the
future
if
he
doesn’t
pin
the
version
pro
url
keep
the
same
consider
a
restful
hateoas
friendly
con
slightly
more
difficult
to
use
component_13
have
to
pay
attention
to
the
coding_keyword_3
url
can’t
be
copy
and
paste
anymore
personal
thought
about
versioning
when
create
a
technology_5
try
it
without
url
versioning
especially
internal
component_4
might
never
need
a
real
version

for
the
exist
resource
at
all
you
might
connector_7
along
with
the
approach
describted
in
the
section
“avoid
break
changes”
if
you
finally
really
need
a
version
for
an
exist
resource
you
can
still
go
for
content
negotiation
and
utilize
the
connector_4
coding_keyword_3
but
in
general
it’s
quality_attribute_6
to
build
an
component_1
that
make
break
connector_3
le
likely
in
the
first
place
e
g
by
build
a
high
level
component_9
flow
component_1
and
keep
requirement_2
component_2
in
the
component_3
there
be
endless
discussion
about
the
right
way
to
version
an
component_1
and
what
be
pattern_1
and
what
not
people
be
connector_29
really
upset
i
prefer
to
be
pragmatic
for
me
it’s
totally
fine
if
you
don’t
care
about
the
pattern_2
theory
when
it
come
to
versioning
and
use
url
versioning
a
long
it
work
for
you
your
component_13
and
you
be
aware
of
the
upcoming
quality_attribute_18
cost
“protip”
speak
about
“web
api”
or
“http
api”
instead
of
“rest
api”
to
be
honest
about
the
conformity
with
pattern_2
and
to
calm
the
pattern_2
zealot
further
connector_5
i
highly
recommend
the
book
build
component_4
you
win
t
hate
by
phil
sturgeon
i
connector_25
a
coding_keyword_1
about
best
practice
for
test
pattern_1
component_10
in
technology_1
technology_4
technology_5
technology_6
a
connector_10
to
pattern_2
be
the
technology_13
rest
confusion
explain
by
phil
sturgeon
understand
pattern_3
vs
pattern_2
for
technology_3
component_4
by
phil
sturgeon
you
can
follow
me
on
twitter
subscribe
my
newsletter
or
connector_data_7
my
consult
or
train
relate
coding_keyword_1
web
component_1
pagination
with
the
timestamp_id
continuation
connector_data_4
web
component_1
pagination
with
the
timestamp_offset_checksum
continuation
connector_data_4
test
pattern_1
component_10
in
technology_1
best
practice
enrich
pattern_1
component_10
with
technology_14
this
entry
be
coding_keyword_1
in
web
development
and
tag
with
component_1
design
rest
best
practice

philipp
hauer
i
be
philipp
hauer
and
i
work
a
a
head
of
engineering
for
the
technology_15
group
spreadshirt
in
leipzig
germany
i
strive
for
build
happy
motivated
and
productive
team
and
i’m
enthusiastic
about
technology_2
clean

quality_attribute_14
component_18
test
and
the
sociology
of
development
i’m
tweet
under
@philipp_hauer
give
talk
and
offer
consult
and
workshop
coding_keyword_1
navigation
evaluate
technology_16
strength
and
weakness
connector_2
exception
be
evil
recent
coding_keyword_1
quality_attribute_6
requirement_9
review
for
developer
with
a
skill
matrix
level
up
in
the
requirement_1
skill
tree
component_21
and
slide
of
my
talk
how
to
mess
up
review
at
a
virtual
jug
saxony
meetup
establish
development
technology_6
with
tech
talk
and
a
team
guide
category
build
and
development
infrastructure

web
development

craftsmanship

leadership

publication
and
talk

component_8

architecture

technology_17
and
environment

top
tag
technology_18

technology_2

best
practice

pattern_2

build

clean

technology_19

technology_16

feedback

technology_20

test

pattern_14

copyright
©

by
philipp
hauer
|
icon
contribution
|
imprint
|
privacy
requirement_10
|
