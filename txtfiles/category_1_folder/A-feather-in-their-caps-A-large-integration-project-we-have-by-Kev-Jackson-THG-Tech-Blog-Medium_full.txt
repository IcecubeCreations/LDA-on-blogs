a
feather
in
their
cap
a
large
requirement_1
project
we
have‚Ä¶
|
by
kev
technology_1
|
thg
tech
|
mediumget
unlimited
accessopen
in
apphomenotificationslistsstorieswritepublished
inthg
tech
blogkev
jacksonfollowmay
2019¬∑8
min
reada
feather
in
their
capswe
have
undertake
a
large
requirement_1
project
in
the
requirement_2
requirement_3
component_1
wms
team
at
thg
that
have
require
a
significant
amount
of
research
into
connector_data_1
component_2
technology_2
this
describe
the
option
we
review
our
choice
and
how
the
choice
we
make
lead
to
contribute
to
an
open_source
project
once
upon
a
time
this
be
basically
a
choice
between
the
two
open_source
contender
technology_3
technology_4
or
technology_5
a
an
organisation
we
have
experience
use
technology_4
and
technology_5
for
different
workload
elsewhere
in
thg
both
of
these
technology_2
have
prove
to
be
quality_attribute_1
and
quality_attribute_2
within
a
single
datacenter
dc
our
project
need
to
be
component_3
in
multiple
dc
around
the
world
to
support
our
global
we
need
the
elasticity
to
allow
u
to
quality_attribute_3
both
large
and
small
configuration
quality_attribute_4
on
the
requirement
of
the
particular
requirement_2
environment
the
two
traditional
component_4
didn‚Äôt
seem
to
fit
the
bill
here
technology_5
couldn‚Äôt
guarantee
not
connector_1
duplicate
connector_data_2
which
would
be
an
anathema
to
our
component_5
that
rely
on
the
pattern_1
infrastructure
guarantee
at
most
once
delivery
activemq‚Äôs
requirement_4
of
pattern_2
cluster
can
create
situation
where
a
connector_data_1
be
not
connector_2
until
a
pattern_2
be
restart
and
to
avoid
this
behavioural
quirk
you
need
to
define
storage
that
span
at
least
two
dc
our
experience
of
use
glusterfs
in
this
configuration
hadn‚Äôt
convinced
u
that
this
have
the
quality_attribute_5
we
require
for
our
component_5
the
pattern_3
cluster
configuration
do
provide
pattern_4
connector_3
in
our
two
dc
but
doesn‚Äôt
allow
multiple
pattern_2
to
be
run
simultaneously
what‚Äôs
the
story
so
we
do
some
dig
into
the
current
state
of
pattern_1
component_1
‚Äî
the
landscape
of
which
have
expand
with
the
rise
of
requirement_5
infrastructure
and
quality_attribute_6
component_1
come
to
the
fore
the
current
set
of
connector_4
and
pattern_1
technology_2
connector_data_3
by
the
cncfa
period
of
quiet
reflectionfor
the
project
we
have
a
set
of
functional
and
non
functional
requirement
open_source
with
permissive
licensepersistent
component_2
&
quality_attribute_7
topic
supportjava
component_6
libraryat
most
once
connector_data_1
delivery
semanticslarge
connector_data_1
supportclustered
pattern_2
to
support
expansion
and
multi
dclow
operational
burden
and
complexityability
to
handle
hundred
of
thousand
of
connector_data_2
per
topic
with
quality_attribute_1
and
quality_attribute_8
latencya
sample
of
a
typical
set
of
connector_data_2
‚Äî
note
the
increase
around
black
friday
we
immediately
discount
commercial
option
a
‚Äúopen_source‚Äù
be
one
of
our
key
selection
criterion
technology_3
technology_6
despite
be
a
solid
pubsub
component_7
be
not
quality_attribute_9
with
our
other
non
functional
requirement
around
connector_data_1
quality_attribute_10
technology_3
technology_7
and
technology_8
rely
on
technology_9
infrastructure
which
come
with
considerable
operational
burden
for
the
team
none
of
the
golang
base
production
ready
technology_2
have
the
persistence
or
quality_attribute_10
characteristic
we
require
so
out
go
nats
and
nsq
and
i
couldn‚Äôt
convince
the
team
to
rewrite
the
entire
technology_10
to
use
technology_11
üòí
amongst
the
other
contender
technology_3
heron
be
still
incubate
and
be
focus
on
requirement_6
connector_5
technology_3
nifi
look
it
could
be
very
powerful
however
would
require
re
think
our
entire
architecture
to
convert
from
an
pattern_5
component_7
to
a
flow
base
modelapache
flink
focus
on
requirement_6
there
be
support
for
pattern_5
component_8
however
the
use
requirement_7
state
in
the
documentation
be
not
a
quality_attribute_11
fit
for
what
we
wantopenmessaging
be
a
specification
not
a
technology_12
we
could
build
uponapache
technology_13
be
a
component_9
technology_14
that
simplify
connector_6
pattern_6
component_9
or
connector_5
component_9
on
top
of
a
quality_attribute_6
component_9
backend
‚Äî
so
although
interest
in
itself
it
didn‚Äôt
solve
our
immediate
use
requirement_7
of
pattern_1
for
an
pattern_5
systemthis
leave
u
with
essentially
technology_3
technology_15
or
technology_3
rocketmq
‚Äî
both
of
these
claim
to
solve
our
non
functional
requirement
and
be
develop
at
large
corporation
before
be
open
component_10
we
quickly
test
technology_15
and
find
it
quality_attribute_12
enough
to
validate
some
example
scenario
in
a
day
of
effort
‚Äî
this
doesn‚Äôt
mean
that
rocketmq
wasn‚Äôt
suitable
that
we
decide
that
technology_15
would
be
a
quality_attribute_11
fit
for
our
use
requirement_7
next
stepsafter
settle
on
our
next
gen
pattern_1
component_11
technology_2
we
have
to
start
quality_attribute_13
our
pattern_7
with
the
technology_15
component_6
so
many
requirement_8
technology_16
development
team
the
wms
team
have
chosen
to
quality_attribute_13
with
connector_data_1
component_12
via
the
eip
technology_17
technology_3
technology_18
this
allow
u
to
have
an
abstraction
between
the
component_5
in
the
pattern_8
and
the
underlie
pattern_1
technology_2
‚Äî
a
very
useful
abstraction
pattern_9
when
you
need
to
move
pattern_1
providers‚Ä¶there
be
one
problem
‚Äî
technology_3
technology_18
didn‚Äôt
support
technology_3
technology_15
which
mean
we
have
two
choice
remove
the
technology_18
technology_17
from
our
codebase
and
quality_attribute_13
directly
with
technology_15
through
the
technology_16
component_6
technology_17
orwrite
the
technology_18
requirement_1
component_13
so
we
could
retain
our
technology_2
abstraction
pattern_9
remove
technology_18
from
the
project
would
involve
rewrite
the
common
requirement_1
technology_17
we
have
pattern_9
on
top
of
the
technology_18
semantics
along
with
re
connector_7
the
technology_18
connector_8
semantics
essentially
move
that
component_14
out
of
technology_18
and
into
our
technology_17
this
didn‚Äôt
seem
a
positive
use
of
our
time
compare
to
create
a
technology_18
technology_15
component_13
that
we
could
then
simply
include
a
a
connector_9
an
opportunity
to
contribute
backat
thg
all
technology_16
focus
development
organisation
we
be
heavy
component_15
of
open_source
particularly
technology_3
technology_16
technology_17
and
technology_12
and
it‚Äôs
rare
that
we
have
the
opportunity
within
a
project
to
contribute
back
to
the
open_source
a
an
organisation
rather
than
a
individual
developer
a
part
of
the
evaluation
of
the
pattern_1
component_11
i
have
make
a
minor
connector_10
to
as
how
open
the
technology_15
be
to
external
developer
a
expect
the
be
welcome
and
helpful
with
project
that
originate
at
a
single
large
requirement_9
there
be
a
danger
that
the
core
contributor
be
heterogenous
and
the
project
be
‚Äúopen
component_10
in
name
only‚Äù
the
asf
attempt
to
mitigate
this
danger
by
require
that
all
project
regardless
of
provenance
go
through
an
‚Äúincubation‚Äù
period
where
the
of
contributor
around
the
project
have
to
expand
and
be
quality_attribute_14
beyond
a
single
organisation
with
my
small
connector_10
marshal
through
review
and
with
quality_attribute_11
connector_11
with
the
technology_15
core
team
it
make
it
easy
to
recommend
the
component_11
to
the
wms
team
the
component_9
of
contributingeach
open_source
project
have
different
norm
or
of
work
with
and
contribute
to
the
the
linux
kernel
development
component_9
be
different
from
contribute
to
a
technology_19
base
project
such
a
technology_20
have
previously
be
heavily
involve
in
the
technology_3
open_source
ecosystem
i
reach
out
to
the
technology_3
technology_18
team
to
discus
how
the
team
member
assign
the
connector_data_4
of
connector_6
the
technology_18
component_13
would
work
with
the
technology_18
codebase
initial
with
the
extremely
helpful
technology_3
technology_18
team
on
gittergithub
‚Äî
easy
open
sourceopen
component_10
development
can
be
split
into
two
era
pre
git
and
git
before
linus
connector_12
git
many
open_source
project
use
either
cv
or
svn
for
component_10
control
with
the
linux
kernel
famously
use
bitkeeper
a
central
component_16
approach
such
a
svn
lead
to
restriction
on
who
could
‚Äòcommit‚Äô
to
the
component_16
and
help
to
define
the
component_9
of
review
etc
that
all
engineering
project
should
have
technology_3
project
have
a
‚Äòcommit
then
review‚Äô
component_9
where
a
connector_13
to
a
project
trunk
be
deem
to
be
quality_attribute_11
unless
another
committer
review
it
and
ask
for
a
connector_10
this
component_9
be
restrict
by
who
could
connector_13
to
be
able
to
connector_14
with
the
svn
pattern_10
with
both
connector_15
and
connector_12
privilege
a
developer
have
to
have
‚Äòcommitter‚Äô
status
have
connector_13
status
on
one
project
didn‚Äôt
automatically
mean
you
would
connector_16
that
same
status
on
another
project
this
component_17
although
quality_attribute_15
didn‚Äôt
lead
to
engage
huge
number
of
developer
who
want
to
connector_16
a
little
fix
into
the
codebase
for
their
specific
bug
instead
it
lead
to
have
a
small
number
of
committers
who
spend
much
more
time
shepherd
patch
from
developer
into
trunk
along
come
git
and
suddenly
centralised
component_10
control
be
no
long
the
de
facto
component_17
decentralisation
bring
huge
benefit
to
the
linux
kernel
team
allow
much
easy
patch
requirement_3
and
compare
component_10
tree
between
developer
technology_3
be
fairly
wed
to
use
svn
for
all
the
project
pattern_10
but
it
become
clear
that
git
be
a
superior
technology_2
and
the
technology_3
infra
team
investigate
how
to
adjust
both
component_9
and
tech
to
retain
the
committer
developer
division
the
real
explosion
in
open_source
development
come
when
a
team
with
quality_attribute_11
ux
skill
build
a
web
component_18
base
on
git
and
make
use
git
significantly
easy
for
group
of
developer
who
want
to
collaborate
on
a
project
without
have
to
first
spend
time
set
up
the
component_10
control
infrastructure
‚Äî
technology_19
recently
the
asf
have
move
to
technology_21
a
a
primary
component_3
for
all
asf
project
while
retain
backup
git
mirror
internally
this
be
a
big
endorsement
of
technology_21
for
open_source
connector_12
technology_18
pulsarin
some
way
the
easy
part
of
the
entire
component_9
‚Äî
connector_6
the
initial
to
achieve
your
goal
two
of
our
team
chuks
and
richard
start
work
on
what
be
to
become
the
technology_18
technology_15
component_13
we
already
use
technology_22
for
our
project
however
we
couldn‚Äôt
use
our
commercial
project
space
for
open_source
contribution
so
we
use
the
thg
opensource
technology_22
organisation
for
this
work
after
connector_17
the
core
requirement_10
complete
in
a
branch
take
from
technology_18
we
open
a
connector_18
connector_data_5
and
then
begin
the
normal
flow
of
review
connector_19
or
alter
to
meet
the
reviewer
requirement
etc
there
be
one
additional
complication
with
the
work
we
be
not
currently
use
the
most
recent
version
of
technology_18
so
our
requirement_1
be
base
on
the
version
we
be
use
and
we
could
easily
test
with
this
lead
to
some
back
and
forth
with
the
technology_18
developer
who
require
that
our
connector_20
be
quality_attribute_9
with
both
the
x
connector_5
and
master
x
this
didn‚Äôt
take
too
long
to
sort
out
and
through
the
whole
component_9
the
technology_18
developer
provide
excellent
feedback
on
style
possible
refactorings
and
miss
a
part
of
the
review
component_9
mergedfinally
we
connector_16
the
connector_data_1
we
have
be
work
towards
yay
technology_18
and
technology_18
will
feature
support
for
technology_3
technology_15
thanks
to
the
follow
chukwuedo
abuah
@
thgrichard
sherman
@
thgandrea
cosentinoclaus
ibsen√∂nder
sezgin‚Ä¶and
the
enormously
helpful
technology_3
technology_18
contributor
and
we‚Äôre
recruitingfind
out
about
the
excite
opportunity
at
thg
here
career
at
the
hut
group
thg
interest
in
work
at
thg
take
a
look
at
our
current
vacancy
and
opportunity
across
a
wide
range
of
role
and‚Ä¶www
thg
technology_23
more
from
thg
tech
blogthg
be
one
of
the
world‚Äôs
fast
grow
and
large
online
retailer
with
a
world
requirement_11
a
proprietary
technology_2
component_11
and
disruptive
requirement_11
component_17
our
ambition
be
to
be
the
global
digital
leader
connector_15
more
from
thg
tech
blogrecommended
from
mediumkalpesh
kundananibeginner‚Äôs
guide
to
flutter
introduction
and
setup
sanjaya
ruwanhow
to
build
smart
test
plan
and
design
for
regression
testingrob
deansmeasuring
difference
of
degree
use
cllocation‚Äôs
clheadinghackathons
zealandinhackathonsnzintroducing
hackathons
zealandelamaran
a
eabstract
factory
pattern_11
‚Äî
go
examplemoonedge2021
at
a
glance
and
a
promise
aheadashila
ghassanici
cdrob
deansuigesturerecognizer
and
uibuttons
reconcile
compatibilityabouthelptermsprivacyget
the
appget
startedkev
jackson51
followersprincipal
engineer
@
thg
we‚Äôre
recruit
‚Äî
thg
technology_23
careersfollowmore
from
mediumali
naqviinflomeshusing
pipy
a
load
balancervipin
kumarback
in
the
time
of
technology_16
ee
georg
blumenscheinindynatrace
engineeringcreating
a
junit
extension
for
trace
test
with
opentelemetrypaul
dallyjava
‚Äî
dr
strange
heap
or
how
i
to
stop
worry
and
love
the
metaspace
helpstatuswritersblogcareersprivacytermsaboutknowable
