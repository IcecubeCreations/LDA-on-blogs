build
a
technology_1
component_1
use
technology_2
|
okta
developer
search
forum
technology_3
requirement_1
okta
technology_4
admin
console
sign
up
guide
concept
reference
technology_5
&
sdks
sign
up


build
a
technology_1
component_1
use
technology_2
bruno
leite
technology_2
be
one
of
the
most
mature
and
persistent
development
technology_5
that
exist
recently
it
shift
to
a

month
release
schedule
enabling
it
to
connector_1
more
frequent
connector_data_1
to
the
technology_5
one
of
the
connector_2
introduce
in
technology_2

be
the
modular
component_2
the
technology_2
component_3
component_2
jpms

two
fundamental
capability
when
build
technology_2
component_4
quality_attribute_1
configuration
replace
the
brittle
error
prone

path
mechanism
with
a
mean
for
component_5
component_6
to
declare
explicit
connector_3
upon
one
another
strong
pattern_1
allow
a
component_7
to
declare
which
of
it
coding_keyword_1
type
be
quality_attribute_2
to
other
component_6
and
which
be
not
package
be
group
into
that
serve
a
build
block
in
the
construction
of
very
large
component_5
the
declaration
of
a
specify
which
other
package

and

be
require
to
compile
and
run

while
we
have
the
visibility
modifiers—public
private
protect
and
default—they
be
not
enough
to
provide
external
visibility
a
common
example
use
to
illustrate
the
problem
be
a
“util”

this
be
use
throughout
a
technology_6
from
various
package
within
a
jar
but
be
not
mean
to
be
use
outside
of
the
technology_6
jpms
can
help
with
this
type
of
situation
component_8
of
content
introduction
install
a
technology_2
9+
jdk
project
connector_data_2
how
to
connector_data_2
a
modular
project
with
technology_7
build
an
component_1
without
technology_2
create
the
persistence
create
the
web
component_1
quality_attribute_3
your
web
component_1
register
an
component_1
on
okta
configure
the
component_9
with
okta
connector_data_3
use
technology_2
modularize
the
persistence
technology_6
modularize
the
component_1
project
run
the
component_1

more
about
technology_2
modular
component_2
introduction
when
technology_2

be
create
the
jdk
go
under
a
major
refactoring
to
modularize
it
content
it
create
various
to
organize
the
content
some
example
include
technology_2
base
technology_2
technology_8
and
technology_2
technology_9
along
with
many
others
to
date
there
be
a
total
of

in
technology_2

jdk
technology_2
base
have
fundamental
connector_data_4
coding_keyword_2
coding_keyword_3
double
etc
while
technology_2
technology_8
have
relate
to
connector_4
the
technology_10
component_10
resultset
connector_5
and
others
additionally
technology_2
technology_9
have
relate
to
connector_data_5
manipulation
xmlstreamreader
xmlstreamwriter
and
similar
in
that
vein
the
modularization
enable
the
possibility
of
reduce
the
technology_2
runtime
to
include
the
technology_2
base
if
your
component_1
only
quality_attribute_4
on
this

by
use
the
jlink
technology_11
that
be
bundle
with
the
jdk
you
can
create
a
micro
runtime
with
only
the
jdk
you
need
this
coding_keyword_4
won’t
cover
how
to
use
jlink—as
it
be
not
the
focus—but
you
can
see
an
example
on
this
baeldung

for
the
rest
of
this

you
should
have
at
least
some
basic
understand
of
technology_1
technology_7
and
pattern_2
web
component_11
principle
a
well
a
technology_12
instal
on
your
component_12
install
a
technology_2
9+
jdk
first
you’ll
need
a
technology_2
9+
jdk
in
order
to
use

if
you
have
be
use
technology_2

you’ll
likely
have
to
download
a
separate
jdk
with
a
version
of

or
late
to
be
use
for
this

this
project
be
set
up
to
use
jdk

in
this

you
can
download
the
jdks
from
adoptopenjdk
make
sure
your
java_home
environment
variable
be
point
to
that
jdk
project
connector_data_2
in
this

we’ll
be
cover
how
to
develop
a
quality_attribute_5
component_1
with
two

the
component_1
that
contain
the
web
face

and
the
persistence
that
contain
the
connector_data_6
connector_6
pattern_3
we’ll
also
be
use
a
couple
of
connector_3
technology_1
boot
starter
connector_data_6
technology_13
and
okta
technology_1
boot
starter
to
illustrate
how
they
be
configure
when
build
a
modular
component_1
the
project
component_13
can
be
find
at
technology_14
how
to
connector_data_2
a
modular
project
with
technology_7
we’re
go
to
create
this
project
folder
connector_data_2
manually
to
quality_attribute_6
understand
it
each
will
live
inside
a
separate
directory
and
have
it
own
pom
technology_9

there
will
also
be
a
pom
technology_9
on
the
project
root
that
will
serve
a
the
parent
pom
for
the

create
the
follow
folder
connector_data_2
├──
component_1
│
├──
pom
technology_9
│
└──
src
│
└──
coding_keyword_5
│
├──
technology_2
│
└──
resource
├──
persistence
│
└──
src
│
└──
coding_keyword_5
│
└──
technology_2
└──
pom
technology_9
first
let’s
define
the
root
pom
technology_9
it
contain
the
common
parent
indication
to
technology_1
boot
start
parent
and
two
entry
in
the

section
these
entry
be
the
name
of
the
directory
for
the
we
be
develop
please
note
that
they
be
specific
to
technology_7
and
denote
sub
project
have
nothing
to
do
with
the
technology_2
that
we’ll
be
work
on
late
technology_9
version=


encoding=
utf

project
xmlns=
technology_15
technology_7
technology_16

pom



xmlns
xsi=
technology_15
www
w3


xmlschema
instance
xsi
schemalocation=
technology_15
technology_7
technology_16

pom



technology_15
technology_7
technology_16

technology_17
technology_7



technology_17
modelversion



modelversion
parent
coding_keyword_6

springframework
boot
coding_keyword_6
coding_keyword_7
technology_1
boot
starter
parent
coding_keyword_7
version



release
version
relativepath
pattern_4
parent
from
pattern_5
parent
coding_keyword_6
technology_4
okta
developer
coding_keyword_6
coding_keyword_7
technology_1
boot
with

coding_keyword_7
version



snapshot
version
packaging
pom
packaging
property
technology_2
version

technology_2
version
property


component_1


persistence


project
the
persistence
will
have
a
pom
technology_9
the
one
below
and
point
to
the
parent
pom
technology_9
that
we
define
early
this
will
have
a
connector_3
on
technology_1
connector_data_6
mongo
since
we’ll
be
connector_7
our
connector_data_6
to
a
mongo
db
technology_9
version=


encoding=
utf

project
xmlns=
technology_15
technology_7
technology_16

pom



xmlns
xsi=
technology_15
www
w3


xmlschema
instance
xsi
schemalocation=
technology_15
technology_7
technology_16

pom



technology_15
technology_7
technology_16

technology_17
technology_7



technology_17
modelversion



modelversion
parent
coding_keyword_6
technology_4
okta
developer
coding_keyword_6
coding_keyword_7
technology_1
boot
with

coding_keyword_7
version



snapshot
version
parent
coding_keyword_7
technology_1
boot
with

persistence
coding_keyword_7
connector_3
connector_3
coding_keyword_6

springframework
boot
coding_keyword_6
coding_keyword_7
technology_1
boot
starter
connector_data_6
technology_13
coding_keyword_7
connector_3
connector_3
project
finally
the
component_1
will
have
a
pom
technology_9
below
point
to
the
parent
pom
technology_9
above
it
will
also
have
a
connector_3
on
technology_1
boot
starter
web—
a
we’ll
be
create
pattern_2
on
it—and
a
connector_3
on
our
persistence

technology_9
version=


encoding=
utf

project
xmlns=
technology_15
technology_7
technology_16

pom



xmlns
xsi=
technology_15
www
w3


xmlschema
instance
xsi
schemalocation=
technology_15
technology_7
technology_16

pom



technology_15
technology_7
technology_16

technology_17
technology_7



technology_17
modelversion



modelversion
parent
coding_keyword_6
technology_4
okta
developer
coding_keyword_6
coding_keyword_7
technology_1
boot
with

coding_keyword_7
version



snapshot
version
parent
coding_keyword_7
technology_1
boot
with

component_9
coding_keyword_7
connector_3
connector_3
coding_keyword_6

springframework
boot
coding_keyword_6
coding_keyword_7
technology_1
boot
starter
web
coding_keyword_7
connector_3
connector_3
coding_keyword_6
technology_4
okta
developer
coding_keyword_6
coding_keyword_7
technology_1
boot
with

persistence
coding_keyword_7
version
${project
version}
version
connector_3
connector_3
build
plugins
plugin
coding_keyword_6

springframework
boot
coding_keyword_6
coding_keyword_7
technology_1
boot
technology_7
plugin
coding_keyword_7
plugin
plugins
build
project
to
compile
the
project
run
mvn
compile
from
the
project
root
note
don’t
confuse
technology_7
with
technology_2

technology_7
be
use
to
separate
a
project
into
multiple
sub
project
the
coding_keyword_5
project
will
have
a
pom
technology_9
reference
sub
project
in
the

section
each
sub
project
will
have
it
own
pom
technology_9
when
build
the
coding_keyword_5
project
it
will
automatically
build
the
sub
project
too
technology_2
be
another
name
for
jpms
technology_2
component_3
component_2
it
be

in
jdk

under
the
name
project
jigsaw
it
allow
component_14
packaged
a
jar
or
war
to
define
a

info
technology_2
this
special

info
contain
a
set
of
directive
which
define
it
connector_3
and
which
be
export
for
use
by
other
technology_6
build
an
component_1
without
technology_2
the
presence
of

info
technology_2
in
an
application’s
component_13
root
define
that
it
be
use
technology_2

you
will
first
build
the
component_1
without
jpms
and
enable
it
in
a
late
step
create
the
persistence
create
a
bird
in
the
persistence
in
persistence
src
coding_keyword_5
technology_2
technology_4
okta
developer
animal
bird
bird
technology_2
this
will
represent
the
component_15
that
we’ll
be
connector_7
to
db
package
technology_4
okta
developer
animal
bird
coding_keyword_8

springframework
connector_data_6
annotation
coding_keyword_9
coding_keyword_1
bird
{
@id
private
coding_keyword_2
coding_keyword_9
private
coding_keyword_2
specie
private
coding_keyword_2
size
coding_keyword_1
coding_keyword_2
getid
{
coding_keyword_10
coding_keyword_9
}
coding_keyword_1
coding_keyword_11
setid
coding_keyword_2
coding_keyword_9
{
this
coding_keyword_9
=
coding_keyword_9
}
coding_keyword_1
coding_keyword_2
getspecie
{
coding_keyword_10
specie
}
coding_keyword_1
coding_keyword_11
setspecie
coding_keyword_2
specie
{
this
specie
=
specie
}
coding_keyword_1
coding_keyword_2
getsize
{
coding_keyword_10
size
}
coding_keyword_1
coding_keyword_11
setsize
coding_keyword_2
size
{
this
size
=
size
}
}
now
we’re
go
to
create
a
pattern_5
to
connector_8
this
component_15
to
db
technology_1
connector_data_6
technology_13
do
this
for
u
automatically
create
the
crud
so
all
we
have
to
create
be
an
extend
mongorepository
create
this
in
persistence
src
coding_keyword_5
technology_2
technology_4
okta
developer
animal
bird
birdrepository
technology_2
package
technology_4
okta
developer
animal
bird
coding_keyword_8

springframework
connector_data_6
technology_13
pattern_5
mongorepository
coding_keyword_1
birdrepository
extend
mongorepository
bird
coding_keyword_2
{
}
finally
for
the
persistence

we’ll
be
create
a
component_16
to
connector_9
the
persistence
in
persistence
src
coding_keyword_5
technology_2
technology_4
okta
developer
animal
bird
birdpersistence
technology_2
package
technology_4
okta
developer
animal
bird
coding_keyword_8

springframework
component_17
factory
annotation
autowired
coding_keyword_8

springframework
stereotype
component_7
coding_keyword_8
javax
annotation
postconstruct
coding_keyword_8
technology_2
util
connector_data_7
@component
coding_keyword_1
birdpersistence
{
private
birdrepository
birdrepository
@autowired
coding_keyword_1
birdpersistence
birdrepository
birdrepository
{
this
birdrepository
=
birdrepository
}
@postconstruct
coding_keyword_11
postconstruct
{
bird
samplebird
=
bird
samplebird
setspecie
hummingbird
samplebird
setsize
small
connector_8
samplebird
}
coding_keyword_1
coding_keyword_11
connector_8
bird
bird
{
birdrepository
connector_8
bird
}
coding_keyword_1
connector_data_7
bird
connector_10
{
coding_keyword_10
birdrepository
findall
}
}
create
the
web
component_1
in
the
component_1

create
the
coding_keyword_5
component_1
component_1
src
coding_keyword_5
technology_2
technology_4
okta
developer
springbootmodulesapplication
technology_2
annotate
with
@springbootapplication
package
technology_4
okta
developer
coding_keyword_8

springframework
boot
springapplication
coding_keyword_8

springframework
boot
autoconfigure
springbootapplication
@springbootapplication
coding_keyword_1
springbootmodulesapplication
{
coding_keyword_1
coding_keyword_12
coding_keyword_11
coding_keyword_5
coding_keyword_2
args
{
springapplication
run
springbootmodulesapplication

args
}
}
a
pattern_6
to
connector_9
pattern_2
on
the
bird
this
will
be
component_18
on
component_1
src
coding_keyword_5
technology_2
technology_4
okta
developer
birdcontroller
technology_2
package
technology_4
okta
developer
coding_keyword_8
technology_4
okta
developer
animal
bird
bird
coding_keyword_8
technology_4
okta
developer
animal
bird
birdpersistence
coding_keyword_8

springframework
web
bind
annotation
getmapping
coding_keyword_8

springframework
web
bind
annotation
postmapping
coding_keyword_8

springframework
web
bind
annotation
requestbody
coding_keyword_8

springframework
web
bind
annotation
restcontroller
coding_keyword_8
technology_2
util
connector_data_7
@restcontroller
coding_keyword_1
birdcontroller
{
private
birdpersistence
birdpersistence
coding_keyword_1
birdcontroller
birdpersistence
birdpersistence
{
this
birdpersistence
=
birdpersistence
}
@getmapping
bird
coding_keyword_1
connector_data_7
bird
getbird
{
coding_keyword_10
birdpersistence
connector_10
}
@postmapping
bird
coding_keyword_1
coding_keyword_11
savebird
@requestbody
bird
bird
{
birdpersistence
connector_8
bird
}
}
at
this
point
the
component_1
be
functional
and
can
be
run
start
a
technology_13
instance
use
the
follow
technology_12
command
technology_12
run
p


mongo


xenial
then
go
to
the
project
root
and
run
mvn
install
&&
mvn
technology_1
boot
run
pl
component_1
if
everything
go
correctly
you’ll
be
able
to
navigate
to
technology_15
localhost

bird
and
see
a
technology_18
output
this
{
coding_keyword_9
5f03ff7277a08a55ae73c8b9
specie
hummingbird
size
small
}
quality_attribute_3
your
web
component_1
before
we
move
on
to
use
technology_2

it’s
time
to
tune
our
component_9
and
make
it
quality_attribute_3
by

a
single
connector_3
and
a
couple
configuration
property
the
follow
connector_3
to
your
component_1
pom
technology_9

connector_3
coding_keyword_6
technology_4
okta
technology_1
coding_keyword_6
coding_keyword_7
okta
technology_1
boot
starter
coding_keyword_7
version



version
connector_3
register
an
component_1
on
okta
to
begin
sign
up
for
a
forever
free
okta
developer
account
once
you’re
sign
into
okta
register
your
component_19
component_1
in
the
top
coding_keyword_13
click
on
component_14
select
component_1
click
web
and
then
next
enter
technology_1
with
technology_2
a
the
name
this
requirement_2
doesn’t
matter
so
feel
free
to
connector_11
it
connector_11
the
login
redirect
uri
to
technology_15
localhost

login
oauth2

okta
click
do
configure
the
component_9
with
okta
connector_data_3
create
a
component_1
src
coding_keyword_5
resource
component_1
property
with
the
follow
content
okta
oauth2
issuer=https
{youroktadomain}
oauth2
default
okta
oauth2
clientid={clientid}
okta
oauth2
clientsecret={clientsecret}
you
can
find
{clientid}
and
{clientsecret}
on
the
general
tab
of
the
okta
component_1
you
crate
you
can
find
{youroktadomain}
on
your
okta
requirement_3
if
you
restart
the
component_9
and
navigate
to
technology_15
localhost

bird
in
an
incognito
private
browser
window
you’ll
see
a
login
component_20
use
technology_2
now
it
be
time
to
modularize
the
component_9
this
be
achieve
by
place
a

info
technology_2
in
each
project’s
component_13
root
src
coding_keyword_5
technology_2
we’ll
be
do
this
for
both
our

component_1
and
persistence
there
be
two
way
to
modularize
a
technology_2
app—top
down
and
bottom
up
in
this
we’ll
be
show
the
bottom
up
approach
modularizing
the
technology_6
before
the
component_9
this
approach
be
preferable
a
we’ll
have
persistence
already
modularized
when
connector_12
the
component_1
and

info
technology_2
if
component_1
be
modularized
first
then
persistence
would
be
treat
a
an
automatic
and
you
would
have
to
use
the
jar
name
for
the
name
modularize
the
persistence
technology_6
create
a
declaration
persistence
src
coding_keyword_5
technology_2

info
technology_2
with
the
follow
content
technology_4
okta
developer

persistence
{
require
technology_2
annotation
require
technology_1
component_17
require
technology_1
component_21
require
technology_1
connector_data_6
common
require
technology_1
connector_data_6
technology_13
export
technology_4
okta
developer
animal
bird
}
each
require
keyword
signalize
that
this
will
be
quality_attribute_4
on
some
other

technology_1
version

be
not
modularized
yet
it
jar
don’t
have
the

info
technology_2
when
you
have
a
connector_3
on
the
modulepath
formerly
the
classpath
for
non
modular
component_1
this
they
will
be
quality_attribute_7
a
automatic

an
automatic
derive
it
name
use
a
two
step
component_22
if
the
jar
define
the
automatic

name
coding_keyword_14
in
it
`manifest
mf
then
that
property
define
the
module’s
name
alternately
the
jar
name
be
use
to
determine
the
name
the
second
approach
be
intrinsically
unstable
so
no
with
a
connector_3
on
such
an
automatic
should
be
publish
in
coding_keyword_1
technology_7
pattern_5
in
technology_1

the
automatic

name
metadata
be

to
all
technology_1
technology_6
if
when
technology_1
define

info
the
metadata
in
your
component_1
do
not
need
to
connector_11
the
export
keyword
export
all
in
that
package
when
another
us
a
require
clause
reference
that
package
it
will
have
connector_6
to
the
package

in
this
example
the
be
export
all
under
the
technology_4
okta
developer
animal
bird
package
modularize
the
component_1
project
create
a
declaration
component_1
src
coding_keyword_5
technology_2

info
technology_2
with
the
follow
content
technology_4
okta
developer

component_9
{
require
technology_4
okta
developer

persistence
require
technology_1
web
require
technology_1
boot
require
technology_1
boot
autoconfigure
}
this
one
be
similar
to
the
first
but
along
with
the
technology_1
connector_3
we
also
have
the
technology_4
okta
developer

persistence
connector_3
by

the
require
technology_4
okta
developer

persistence
this
will
have
connector_6
to
the
package
that
be
export
technology_4
okta
developer
animal
bird
run
the
component_1
go
to
the
project
root
and
run
mvn
install
&&
mvn
technology_1
boot
run
pl
component_1
if
everything
be
operate
correctly
you’ll
be
able
to
login
and
navigate
to
technology_15
localhost

bird
where
you’ll
see
technology_18
output

more
about
technology_2
modular
component_2
the
technology_2
modular
component_2
be
an
excellent
addition
to
the
technology_2
ecosystem
it
help
organize
and
isolate
that
be
otherwise
needlessly
connector_9
by
look
at
the
component_1

info
technology_2
you
can
see
a
blueprint
of
the
component_1
connector_3
this
topic
be
broad
and
if
you
want
to
more
this
talk
by
alex
buckley
be
an
excellent
start
if
you
have
an
exist
technology_1
component_1
that
you’d
to
have
use
the
modular
component_2
this
other
talk
by
jaap
coomans
will
help
you
out
you
can
more
about
quality_attribute_3
technology_1
component_14
in
these
coding_keyword_4
a
quick
guide
to
oauth


with
technology_1
quality_attribute_8
technology_19
connector_13
logout
option
with
technology_1
build
a
crud
component_9
with
angular

and
technology_1


if
you
have
any
question
about
this
coding_keyword_4
please
a
below
for
more
awesome
content
follow
@oktadev
on
twitter
u
on

or
subscribe
to
our
youtube
pattern_7
okta
developer
requirement_4
we
welcome
relevant
and
respectful

off
topic

be
remove
please
enable
technology_20
to
pattern_8
the

inline
visit
the
forum
to

need
support
you
can
reach
u
directly
at
developers@okta
technology_4
or
you
can
also
ask
u
on
the
forum
social
technology_14
twitter
youtube
forum
technology_21
&
legal
our
team
sale
term
&
condition
privacy
requirement_4
more
info
requirement_1
quality_attribute_9
with
okta
connector_11
requirement_5
3rd
party
note
auth0
component_3
okta
technology_4
technology_22
requirement_6
study
resource
help
center
knowledgebase
roadmaps
and
more
trust
component_2
status
quality_attribute_8
compliance
copyright
©

okta
