top

oop
design
principle
technology_1
programmer
can
in

|
by
javinpaul
|
javarevisited
|
mediumget
unlimited
accessopen
in
apphomenotificationslistsstorieswritepublished
injavarevisitedjavinpaulfollowdec

2019·14
min
readtop

oop
design
principle
technology_1
programmer
can
in
2022want
to
connector_1
quality_attribute_1
solid
that
can
withstand
the
test
of
time
in
production
these
design
principle
can
help
the
connector_data_1
orient
design
principle
be
the
core
of
oop
programming
still
i
have
see
most
of
the
technology_1
programmer
chase
design
pattern_1
singleton
pattern_1
decorator
pattern_1
or
observer
pattern_1
and
not
put
enough
attention
on

connector_data_1
orient
analysis
and
design
it’s
essential
to
the
basic
of
connector_data_1
orient
programming
abstraction
pattern_2
polymorphism
and
inheritance
but
at
the
same
time
it’s
equally
important
to
connector_data_1
orient
design
principle
they
will
help
you
to
create
a
clean
and
modular
design
which
would
be
easy
to
test
debug
and
maintain
in
the
future
i
have
regularly
see
technology_1
programmer
and
developer
of
various
experience
level
who
have
either
never
hear
about
these
oop
and
solid
design
principle
or
doesn’t
what
benefit
a
particular
design
principle
offer
and
how
to
apply
these
design
principle
in
cod
to
do
my
part
i
have
jot
down
all
important
connector_data_1
orient
design
principle
and
put
them
here
for
quick
reference
these
will
at
least
give
you
some
idea
about
what
they
be
and
what
benefit
they
offer
i
have
not
put
example
to
keep
the
short
but
you
can
find
a
lot
of
example
of
these
design
principle
on
the
internet
and
even
on
my
technology_1

use
the
search
bar
at
the
top
of
the
component_1
if
you
be
not
able
to
understand
a
design
principle
you
should
try
to
do
more
than
one
example
because
sometimes
we
connector_2
to
another
component_2
or
author
quality_attribute_1
still
you
must
follow
these
design
principle
and
how
to
use
it
in
your

another
thing
you
can
do
be
to
join
a
comprehensive
connector_data_1
orient
design
solid
principle
of
connector_data_1
orient
design
by
steve
smith
on
pluralsight
it
have
help
me
a
lot
in
my
understand
and
component_3
of
these
principle
btw
i
have
connector_3
some
relevant
and
useful

and
book
here
and
there
both
free
and
pay
and
i
will
earn
some
money
if
you
buy
something
which
be
not
free
they
be
also
some
of
the
resource
i
have
use
to
solid
design
principle
and
programming
in
general
and
helpful
for
discover
some
of
these
principle
in
depth

best
connector_data_1
orient
and
solid
desing
principle
for
programmersthough
the
best
way
of

any
design
principle
or
pattern_1
be
a
real
world
example
and
understand
the
consequence
of
violate
that
design
principle
the
subject
of
this
be
introduce
connector_data_1
orient
design
principle
for
technology_1
programmer
who
be
either
not
connector_4
to
it
or
in
the

phase
i
think
each
of
these
oop
and
solid
design
principle
need
an
to
explain
them
clearly
and
i
will
try
to
do
that
here
but
for
now
connector_5
yourself
ready
for
a
quick
bike
ride
on
design
principle
town

dry
don’t
repeat
yourself
our
first
connector_data_1
orient
design
principle
be
dry
a
the
name
suggest
dry
don’t
repeat
yourself
mean
don’t
connector_1
duplicate

instead
use
abstraction
to
abstract
everyday
thing
in
one
place
if
you
have
a
block
of
in
more
than
two
place
consider
make
it
a
separate

or
if
you
use
a
hard
cod
requirement_1
more
than
one
time
make
them
a
coding_keyword_1
final
constant
the
benefit
of
this
connector_data_1
orient
design
principle
be
in
quality_attribute_2
it’s
important
not
to
abuse
it
duplication
be
not
for

but
for
requirement_2
it
mean
if
you
have
use
technology_2
to
validate
orderid
and
ssn
it
doesn’t
mean
they
be
the
same
or
they
will
remain
the
same
in
the
future
by
use
technology_2
for
two
different
requirement_2
or
thing
you
tightly
couple
them
forever
and
when
your
orderid
connector_6
it
technology_3
your
ssn
validation
will
break
so
beware
of
such
couple
and
don’t
combine
anything
which
us
similar
but
be
not
relate
you
can
further
connector_7
out
the
basic
of
architecture
&
design
pattern_1
in
technology_1
on
udemy
to
more
about
connector_8
the
right
and
best
practice
to
follow
while
design
a
component_4

pattern_3
what
changesthere
be
only
one
thing
that
be
constant
in
the

and
that
be
“change
”
so
pattern_3
the
you
expect
or
suspect
to
be
connector_9
in
the
future
the
benefit
of
this
oop
design
principle
be
that
it’s
easy
to
test
and
maintain
proper
pattern_3

if
you
be
cod
in
technology_1
then
follow
the
principle
of
make
variable
and
private
by
default
and
increasing
connector_10
step
by
step
from
an
individual
to
protect
and
not
coding_keyword_1
several
of
the
design
pattern_1
in
technology_1
us
pattern_2
the
factory
design
pattern_1
be
one
example
of
pattern_2
which
pattern_3
connector_data_1
creation
and
provide
quality_attribute_3
to
introduce
a
technology_4
late
with
no
impact
on
exist

btw
if
you
be
interest
in

more
about
design
pattern_1
in
technology_1
and
connector_data_1
orient
programming
then
you
must
connector_7
this
design
pattern_1
technology_5
pluralsight
it’s
one
of
the
best
collection
of
design
pattern_1
and
advice
on
how
to
use
them
in
the
real
world

open
close
design
principleaccording
to
tho
this
oop
design
principle
“classes
or
should
be
open
for
extension

requirement_2
and
close
for
modification
”this
be
another
beautiful
solid
design
principle
coin
by
uncle
bob
on
his
classic
clean
codebook
which
prevent
someone
from
connector_9
already
try
and
test

the
key
benefit
of
this
design
principle
be
that
already
try
and
test
be
not
touch
which
mean
they
won’t
break
here
be
a
technology_1
example
that
violate
the
open
close
design
principle
of
programming
in
this
graphiceditor
be
tightly
couple
with
shape
if
you
need
a
shape
then
you
need
to
modify
already
try
and
test
component_4
inside
thedrawshape
shape
s

which
be
both
error
prone
and
not
desirable
ideally
if
you
be

requirement_2
only
then
your
should
be
test
and
that’s
the
goal
of
the
open
close
design
principle
by
the
way
the
open
close
principle
be
“o”
from
the
solid
acronym
if
you
want
to
more
about
this
principle
the
solid
principle
of
connector_data_1
orient
design
and
architecture
on
udemy
be
one
of
the
best
resource
to
consult

single
responsibility
principle
srp
single
responsibility
principle
be
another
solid
design
principle
and
represent
“s”
on
the
solid
acronym
a
per
srp
there
should
not
be
more
than
one
reason
for
a
to
connector_9
or
a
level
should
always
handle
single
requirement_2
the
key
benefit
of
this
principle
be
that
it
reduce
couple
between
the
individual
component_5
of
the
and

for
example
if
you
put
more
than
one
requirement_2
in
one
in
technology_1
it
introduce
couple
between
two
requirement_2
and
even
if
you
connector_9
one
feature
there
be
a
chance
you
break
couple
requirement_2
which
require
another
round
of
test
to
avoid
any
surprise
on
the
production
environment
you
can
further
see
from

to

design
pattern_1
—

that
matter
on
udemy
to
about
pattern_1
that
be
base
on
this
principle

connector_11
injection
or
inversion
principledon’t
ask
for
connector_11
it
will
be
provide
to
you
by
the
technology_6
this
have
be
very
well
connector_12
in
the
technology_7
technology_6
one
of
the
most
popular
technology_1
technology_6
for
connector_8
real
worth
component_3
the
beauty
of
this
design
principle
be
that
any
which
be
inject
by
di
technology_6
be
easy
to
test
with
the
mock
connector_data_1
and
easy
to
maintain
because
connector_data_1
creation
be
centralized
in
the
technology_6
and
component_6
be
not
litter
with
that
there
be
multiple
way
to
connector_12
connector_11
injection
use
bytecode
instrumentation
which
some
aop
aspect
orient
programming
technology_6
technology_8
do
or
by
use
pattern_4
use
in
technology_7
you
can
further
see
the
solid
principle
of
connector_data_1
orient
design
and
architecture
on
udemy
to
more
about
this
useful
principle
it
also
represent
“d”
on
the
solid
acronym
here
be
an
example
of
the
which
violate
the
connector_11
inversion
principle
or
dip
in
technology_1
you
can
see
that
appmanager
quality_attribute_4
upon
eventlogwriter
which
be
tightly
couple
with
the
appmanager
if
you
need
to
use
another
way
to
connector_13
your
component_6
by
connector_14
connector_15
connector_data_2
sm
or
e
mail
you
need
to
connector_9
the
appmanager

this
problem
can
be
solve
by
use
the
connector_11
inversion
principle
where
instead
of
appmanager
ask
for
eventlogwriter
it
will
be
inject
or
provide
to
appmanager
by
the
technology_6
you
can
further
see
use
solid
principle
to
connector_1
quality_attribute_1
—
a
crash
on
udemy
to
more
about
the
connector_11
inversion
principle
and
how
to
solve
such
problem
use
solid
principle
to
connector_1
quality_attribute_1
a
crash
courseit
s
easy
enough
to
connector_1
that
work
however
that
simply
work
isn
t
quality_attribute_1
enough
be
it
easy
to…www
udemy
com6
favor
composition
over
inheritancethere
be
two
general
way
to
quality_attribute_5
the
you
have
already
connector_1
inheritance
and
composition
both
have
their
own
advantage
and
disadvantage
but
in
general
you
should
always
favor
composition
over
inheritance
if
possible
some
of
you
argue
this
but
i
find
that
composition
be
the
lot
more
quality_attribute_6
than
inheritance
composition
allow
connector_9
the
behavior
of
a
at
run
time
by
set
property
during
run
time
and
by
use
to
compose
a

we
use
polymorphism
which
provide
quality_attribute_3
to
replace
with
quality_attribute_1
implementation
at
any
time
even
joshua
bloch’s
quality_attribute_7
technology_1
advise
favor
composition
over
inheritance
if
you
be
still
not
convinced
then
you
can
also
connector_16
here
to
more
about
why
your
composition
be
quality_attribute_1
than
inheritance
for
quality_attribute_5
and
requirement_2
and
if
you
keep
forget
this
rule
here
be
an
excellent
cartoon
to
put
in
your
desk
if
you
be
interest
in

more
about
connector_data_1
orient
programming
concept
composition
inheritance
association
aggregation
etc
you
can
also
take
a
look
at
the
connector_data_1
orient
programming
in
technology_1
on
coursera
it’s
free
to
explore
and

but
you
will
be
charge
if
you
also
want
to
participate
in
exercise
assignment
evaluation
and
need
certification
to
show
in
your
linkedin
profile
and
if
you
find
coursera

useful
which
they
be
because
they
be
create
by
repute
requirement_3



and
the
best
university
around
the
world
i
suggest
you
join
the
coursera
plus
a
subscription
plan
from
courserathis
single
subscription
give
you
unlimited
connector_10
to
their
most
popular

specialization
professional
certificate
and
guide
project
it
cost
around
$399
year
but
it
s
completely
worth
your
money
a
you
connector_5
unlimited
certificate

liskov
substitution
principle
lsp
accord
to
the
liskov
substitution
principle
subtypes
must
be
substitutable
for
supertype
i
mean
or
which
use
superclass
type
must
be
able
to
work
with
the
connector_data_1
of
subclass
without
any
issue”
lsp
be
closely
relate
to
the
single
responsibility
principle
and
segregation
principle
if
a
have
more
requirement_2
than
subclass
might
not
support
some
of
the
requirement_2
and
do
violate
lsp
in
order
to
follow
lsp
solid
design
principle
derive
or
subclass
must
enhance
requirement_2
but
not
reduce
them
lsp
represent
“l”
on
the
solid
acronym
here
be
a
example
that
violate
the
liskov
substitution
principle
in
technology_1
liskov
substitution
principle
in
javaif
you
have
a
area
rectangle
r
which
calculate
the
area
of
the
rectangle
then
that
will
break
when
you
pass
the
square
because
square
be
not
really
a
rectangle
if
you
be
interest
in
a
more
real
world
example
then
the
solid
principle
of
connector_data_1
orient
design
on
pluralsight
be
an
excellent
to
start
with
btw
you
would
need
a
pluralsight
membership
to
connector_5
connector_10
to
this

which
cost
around
$29
per
month
or
$299
annually
14%
discount
even
if
you
don’t
have
a
membership
you
can
still
connector_10
this
for
free
by
take
advantage
of
their

day
free
trial
without
any
commitment
which
be
a
great
way
to
not
connector_10
this
for
free
but
also
to
connector_7
the
quality
of

before
join
pluralsighttechnology
skill
for
individual
|
pluralsightbuild
in
demand
skill
in
devops
requirement_4
requirement_5
quality_attribute_8
infrastructure
and
more
with
pluralsight
the…pluralsight
pxf
io8
segregation
principle
isp
the
segregation
principle
state
that
a
component_6
should
not
connector_12
an
if
it
doesn’t
use
that
this
happen
mostly
when
one
contain
more
than
one
requirement_2
and
the
component_6
only
need
one
feature
and
no
other
there
be
no
doubt
that
design
be
a
tricky
because
once
you
release
your

you
can
not
connector_9
it
without
break
all
implementation
well
technology_1
8’s
default
or
defender
feature
do
provide
a
way
for
evolution
but
not
all
programming
technology_9
support
those
feature
another
benefit
of
this
design
principle
in
technology_1
be
the
have
the
disadvantage
of
connector_17
all
before
any
can
use
it
so
have
single
requirement_2
mean
le
to
connector_12
if
you
don’t
connector_5
the
benefit
of
the
in
cod
then
i
suggest
you
connector_16
my
coding_keyword_2
the
real
usage
of
an
in
technology_1
to
more

programming
for
not
implementationa
programmer
should
always
component_7
for
the
and
not
for
implementation
this
will
lead
to
quality_attribute_6

which
can
work
with
any
implementation
of
the

in
concrete
word
you
should
use
type
on
variable
coding_keyword_3
type
of
a

or
argument
type
of
technique
in
technology_1

use
superclass
type
to
component_8
connector_data_1
instead
use
subclass
i
meanlist
numbers=
getnumbers
instead
ofarraylist
number
=
getnumbers
this
have
also
be
advise
in
many
technology_1
book
include
in
quality_attribute_7
technology_1
and
head
first
design
pattern_1
book
here
be
an
example
of
cod
for
the
in
technology_1
if
you
be
interest
in
improve
the
quality
of
your
component_7
i
also
suggest
you
take
a
look
at
the
refactoring
to
design
pattern_1
on
udemy
which
will
help
you
to
improve
the
internal
design
with
refactoring
technique
and
design
pattern_1
in
c#10
delegation
principlesdon’t
do
all
stuff
by
yourself
delegate
it
to
the
respective

classical
example
of
delegation
design
principle
be
equal
and
hashcode
in
technology_1
in
order
to
compare
two
connector_data_3
for
equality
we
ask
the
itself
to
do
comparison
instead
of
component_6
do
that
connector_7
the
key
benefit
of
this
design
principle
be
no
duplication
of
and
pretty
easy
to
modify
behavior
delegation
be
another
example
of
this
principle
where
an
be
delegate
to
pattern_5
for
handle
summaryall
these
connector_data_1
orient
design
principle
help
you
connector_1
quality_attribute_6
and
quality_attribute_1
by
strive
for
high
pattern_6
and
low
couple
the
theory
be
the
first
step
but
what
be
most
important
be
to
develop
the
ability
to
find
out
when
to
apply
these
design
principle
once
you
connector_5
hold
of
that
the
next
step
be
to
design
pattern_1
in
technology_1
which
us
these
design
pattern_1
to
solve
common
problem
of
component_3
development
and
engineering
if
you
be
look
for
a
nice
to
start
with
i
suggest
you
join
the
from

to

design
pattern_1
—

that
matter
—
in
technology_1
on
udemy
it’s
very
comprehensive
and
you
can
connector_5
it
for
$11
on
their
several
technology_10
sale
anyway
here
be
a
nice
summary
of
all
these
oop
design
principle
find
out
whether
we
be
violate
any
design
principle
and
compromise
the
quality_attribute_3
of

but
again
a
nothing
be
perfect
in
this
world
don’t
always
try
to
solve
the
problem
with
design
pattern_1
and
design
principle
they
be
mostly
for
large
requirement_6
project
which
have
long
quality_attribute_2
cycle
the
bottom
line
be
professional
programmer
should
always
strive
for
a
highly
cohesive
and
loosely
couple
solution

or
design
look
open_source
from
technology_11
and
be
some
quality_attribute_1
way
of

technology_1
and
oop
design
principle
they
will
show
you
how
design
principle
should
be
use
in
cod
and
technology_1
component_7
technology_1
development
technology_12
follow
many
design
principle
factory
pattern_1
in
borderfactory

singleton
pattern_1
in
technology_1
lang
runtime

decorator
pattern_1
on
various
technology_1
io

if
you
be
interest
in

connector_data_1
orient
principle
and
pattern_1
then
you
can
look
at
my
another
personal
favorite
head
first
connector_data_1
orient
analysis
and
design
an
excellent
book
and
probably
the
best
material
quality_attribute_9
in
connector_data_1
orient
analysis
and
designnot
many
programmer
this
book
because
it
be
often
pattern_7
by
it
more
popular
cousin
head
first
design
pattern_1
by
eric
freeman
which
be
more
about
how
these
principle
come
together
to
create
a
pattern_1
you
can
use
directly
to
solve

problem
these
book
help
a
lot
to
connector_1
quality_attribute_1

take
full
advantage
of
various
connector_data_1
orient
and
solid
design
principle
btw
if
you
really
interest
more
in
technology_1
cod
practice
then
connector_16
quality_attribute_7
technology_1
3rd
edition
by
joshua
bloch
a
gem
by
the
guy
who
connector_1
technology_1
collection
technology_13
if
you
want
to
more
about
solid
design
principle
here
be
some
useful
resource
you
can
take
a
look
at
clean
by
robert
martinsolid
principle
of
connector_data_1
orient
designsolid
principle
of
connector_data_1
orient
design
and
architecturerefactoring
by
martin
fowlerand
if
you
this

you
these
technology_1
and
programming

a
well

thing
technology_1
programmer
should
in

book
every
programmer
must
read10
tip
to
improve
your
programming
skill10
technology_14
every
developer
should
know5

to
architecture
in
depth20
technology_5
and
apis
technology_1
programmer
should
knowtop

programming
technology_9
to
in

technology_6
and
technology_5
technology_1
and
web
developer
should
learnthanks
for
connector_18
this

if
you
find
these
connector_data_1
orient
design
principle
useful
then
please
connector_19
them
with
your
friend
and
colleague
if
you
have
any
question
or
feedback
then
please
drop
a
note
btw
if
you
buy
any
of
my
recommend
book
or

i’ll
be
also
be
pay
if
you
this

then
please
consider
follow
me
on
javinpaul
if
you’d
to
be
connector_20
for
every
coding_keyword_2
and
don’t
forget
to
follow
javarevisited
on
twitter
p
s
—
if
you
be
serious
about
your
cod
and
want
to
improve
your
cod
skill
there
be
no
quality_attribute_1
book
than
clean
by
robert
martin
and
refactoring
by
martin
p
fowler
go
and
connector_16
them
clean
—
a
must
connector_16
cod
book
for
programmerswant
to
the
art
of
convert
a
bad
to
quality_attribute_1

this
book
can
helpmedium
technology_15
more
from
javarevisiteda
humble
place
to
technology_1
and
programming
quality_attribute_1
connector_16
more
from
javarevisitedrecommended
from
mediumjim
medlockinchinguare
you
show
up
for
your
team
yegor
shytikovinstall
magenta

on
macos
local
development
environment
x86
and
arm
m2
platformscristóbal
carnero
liñánterraform
+
technology_16
tip
&
tricksgeekenopython
v
s
technology_17
—
what’s
quality_attribute_1
for
your
web
component_3
improvement
atharwa
adawadkarhow
switch
and
pattern_8
fit
into
big
picture
mark
tanuiwhat
happen
when
you
type
l
l
*c
in
the
shell
rich
uday
10rutger
mckennainanalytics
vidhyapreparing
for
programming
technical

and
applicationsabouthelptermsprivacyget
the
appget
startedjavinpaul20k
followersi
be
technology_1
programmer
technology_18
work
on
technology_1
j2ee
unix
fix
technology_19
i
connector_19
technology_1
tip
on
technology_20
javarevisited
blogspot
technology_15
and
technology_20
java67
comfollowmore
from
mediumswapnil
kantinjavarevisitedwhat
be
recursion
and
how
do
it
work
hafizul
islamstack
connector_data_4
connector_data_5
in
c++the
educative
teamindev

dailylearn
to
with
personalize

plansdavidmbuvivanhackhelpstatuswritersblogcareersprivacytermsaboutknowable
