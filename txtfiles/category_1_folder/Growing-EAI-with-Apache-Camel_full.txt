grow
eai
with
technology_1
technology_2
bt
live
webinar
and
q&a
connector_1
technology_3
on
technology_1
technology_4
for
real
time
component_1
live
webinar
26th

register
now
close
toggle
navigation
facilitate
the
technology_5
of
knowledge
and
innovation
in
professional
development
english
edition
english
edition
chinese
edition
japanese
edition
french
edition
contribute
search
sign
up
login
password
forget
password
infoq
account
back
to
login
resend
activation
back
to
login
login
with
twitter

t
have
an
infoq
account
sign
up
notifications1
login
to
unlock
infoq
s
feature
stay
up
to
date
and
connector_2
connector_3
your
favorite
content
follow
your
favorite
editor
and
peer
sign
up
login

t
have
an
account
register
here
logo
back
to
homepage



apr
unique
visitor
news

presentation
podcast
guide
topic
development
technology_6
technology_7
technology_8
technology_9
technology_10
go
technology_11
technology_12
feature
in
development
reproducible
development
with
container
avdi
grimm
describe
the
future
of
development
which
be
already
here
connector_2
a
tour
of
a
devcontainer
and
contrast
it
with
a
deployment
container
all
in
development
architecture
&
design
architecture
requirement_1
architecture
quality_attribute_1
requirement_2
design
requirement_3
study
pattern_1
component_2
mesh
pattern_2
quality_attribute_2
feature
in
architecture
&
design
oren
eini
on
technology_13
include
consistency
guarantee
and
technology_9
a
the
implementation
technology_14
wesley
reisz
talk
to
oren
eini
about
the
history
of
technology_13
technology_13
be
a
fully
pattern_3
technology_15
document
component_3
that
connector_4
both
cp
and
ap
guarantee
at
different
time
the
two
discus
those
cp
ap
quality_attribute_3
component_4
challenge
the
choice
of
implementation
technology_14
technology_16
and
the
current
plan
for
technology_13


which
include
a
component_5
side
sharding
implementation
all
in
architecture
design
requirement_4
ml
&
connector_data_1
engineering
requirement_5
requirement_6
technology_15
component_3
connector_data_1
requirement_7
connector_1
feature
in
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
katharine
jarmul
discus
utilize
quality_attribute_3
connector_data_1
science
and
requirement_6
component_6
such
a
federate

to
from
connector_data_1
at
the
edge
all
in
requirement_4
ml
connector_data_1
eng
culture
&
agile
diversity
leadership
lean
kanban
personal
growth
scrum
sociocracy
craftmanship
team
collaboration
test
ux
feature
in
culture
&
how
to
run
your
technology_17
department
a
coach
have
find
what
i
think
be
my
connector_5
a
an
agile
coach
i
take
the
tough
decision
to
move
sideways
into
technology_17
requirement_8
in
the
hope
of
use
what
i’d

to
one
day
run
my
own
department
i
believe
that
come
from
coach
would
allow
me
to
see
thing
others
could
not
and
create
something
special
time
will
tell
if
i
have
succeed
this
be
the
story
of
where
i
be
up
to
so
far
all
in
culture

devops
infrastructure
continuous
delivery
automation
container
requirement_9
observability
feature
in
devops
panel
quality_attribute_4
component_4
the
panelist
discus
the
quality_attribute_2
for
the
supply
chain
and
quality_attribute_2
risk
measurement
all
in
devops
eventsnew
helpful
connector_6
about
infoq
infoq
editor
contribute
about
c4media
diversity
choose
your
technology_14
en
中文
日本
fr
infoq
live
how
requirement_9
architecture
achieve
cost
connector_7
improve
quality_attribute_5
&
connector_8
requirement_10
register
now
infoq
live
how
to
migrate
an
component_7
to
serverless
and
what
be
the
common
mistake
to
avoid
register
now
qcon
san
francisco
understand
the
emerge
trend
you
should
pay
attention
to
attend
in
person
on
oct



infoq
homepage

grow
eai
with
technology_1
technology_2
web
component_5
and
reverse
pattern_4
pattern_5

live
webinar
jun
16th

connector_7
your
seat
grow
eai
with
technology_1
technology_2
lira
ce
contenu
en
français
coding_keyword_1
bookmark
mar



min
connector_9
by
frans
van
der
lek
connector_10
for
infoq
join
a
of
expert
increase
your
visibility
grow
your
career

more
requirement
in
it
project
be
prone
to
connector_11
and
that
include
requirement
on
quality_attribute_6
with
other
component_8
be
able
to
quickly
respond
to
such
connector_12
can
be
critical
to
project
success
so
the
and
development
component_1
must
enable
this
fortunately
requirement_1
component_7
requirement_11
eai
provide
u
with
all
the
knowledge
technology_18
and
best
practice
to
build
quality_attribute_7
quality_attribute_8
and
capable
requirement_11
solution
in
a
productive
fashion
however
most
requirement_11
solution
place
u
in
a
dilemma
while
they
be
full
of
feature
and
can
be
quite
productive
for
large
project
and
a
demand
environment
they
also
require
big
investment
up
front
when
it
come
to

the
component_8
quality_attribute_9
it
and
maintain
it
for
this
reason
when
face
with
quality_attribute_10
requirement_11
requirement
hoc
solution
seem
very
appeal
but
they
become
hard
to
maintain
and
counter
productive
should
requirement_11
need
grow
apply
eai
best
practice
would
cure
this
but
connector_13
them
yourself
require
effort
and
the
knowledge
to
do
it
correctly
what
seem
the
path
of
least
resistance
at
first
can
late
become
a
dead
end
relate
sponsor
content
relate
sponsor
vfunction
be
a
patent
requirement_4
powered
component_9
for
requirement_12
that
intelligently
and
automatically
transform
component_10
monolithic
component_11
into
pattern_1
connector_data_2
a
demo
how
then
can
we
be
productive
when
face
with
quality_attribute_10
a
well
a
complex
requirement_11
connector_data_3
while
avoid
big
investment
early
on
in
this
i
will
argue
that
technology_1
technology_2
offer
a
solution
i
will
aim
to
demonstrate
that
technology_2
can
meet
complex
requirement_11
challenge
enabling
you
to
leverage
eai
best
practice
while
be
easy
to
pick
up
and
easy
to
master
all
the
while
technology_2
coding_keyword_2
you
to
concentrate
on
what
provide
requirement_13
requirement_10
not
deal
with
the
complexity
impose
by
some
technology_19
i
will
show
this
by
look
at
practical
example
of
typical
requirement_11
challenge
and
see
how
technology_2
help
u
meet
these
challenge
these
example
be
present
in
the
component_12
of
an
requirement_11
solution
that
start
simply
but
grow
over
time
a
requirement_11
need
arise
each
time
i
will
investigate
how
technology_2
be
be
able
to
meet
these
demand
primarily
from
the
point
of
pattern_6
of
manage
complexity
and
stay
productive
i
have
chosen
technology_1
technology_2
because
in
my
opinion
it
offer
an
excellent
light
weight
alternative
to
full
esb
technology_17
such
a
component_2
mix
technology_20
esb
openesb
and
jbossesb
it
close
rival
be
probably
technology_21
requirement_11
which
be
a
quality_attribute_11
option
to
consider
particularly
if
your
project
be
already
use
springsource
technology_18
a
you
will
see
you
can
also
use
technology_2
and
technology_21
together
gunnar
hillert
offer
further
discussion
of
the
alternative
here
humble
beginning
requirement_11
often
start
quality_attribute_10
for
instance
fetch
some
from
an
technology_22
component_5
and
put
it
in
a
local

at
this
stage
the
do
it
yourself
solution
seem
very
appeal
but
let’s
look
a
bit
more
closely
the
do
it
yourself
solution
might
look
something
this
coding_keyword_3
ftpfetch
{
coding_keyword_3
coding_keyword_4
coding_keyword_5
coding_keyword_6
coding_keyword_7
args
{
ftpclient
technology_22
=
ftpclient
try
{
technology_22
connector_14
component_13
try
to
connector_14
if
technology_22
login
technology_2
technology_1
login
to
component_5
{
technology_22
disconnect
coding_keyword_8
}
coding_keyword_9
connector_data_4
=
technology_22
getreplycode
if
ftpreply
ispositivecompletion
connector_data_4
{
technology_22
logout
technology_22
disconnect
coding_keyword_8
}
technology_22
changeworkingdirectory
folder
connector_2
output
connector_15
for
destination
outputstream
output
=
fileoutputstream
connector_data_1
outbox

technology_23
technology_22
retrievefile

technology_23
output
transfer
the
output
close
technology_22
logout
technology_22
disconnect
}
catch
exception
ex
{
ex
printstacktrace
}
finally
{
if
technology_22
isconnected
{
try
{
technology_22
disconnect
}
catch
ioexception
ioexception
{
ioexception
printstacktrace
}
}
}
}}
this
solution
us
the
ftpclient
from
technology_1
common
a
it
be
a
component_14
and
nothing
more
we
need
to
set
up
an
technology_22
connector_16
and
do
error
handle
ourselves
but
what
if
the
on
the
technology_22
component_5
connector_12
late
i
suppose
we
should
schedule
this
to
run
periodically
now
let’s
look
at
technology_1
technology_2
technology_2
be
an
requirement_11
technology_19
design
to
solve
this
kind
of
problem
by
follow
eai
best
practice
technology_2
should
be
pattern_6
a
both
a
toolbox
of
ready
make
requirement_11
component_15
and
a
runtime
which
can
be
customize
for
specific
need
by
combine
them
with
technology_2
this
be
how
we
would
solve
the
problem
above
coding_keyword_3
camelrunner{
coding_keyword_3
coding_keyword_4
coding_keyword_5
coding_keyword_6
coding_keyword_7
args
throw
exception
{
coding_keyword_6
camelmain
=
coding_keyword_6
camelmain
enablehangupsupport
ctrl
technology_24
shutdown
camelmain
addroutebuilder

routebuilder
{
coding_keyword_3
coding_keyword_5
configure
{
from
technology_22
component_13
folder
username=camel&password=apache&filename=file
xml&delay=360000
to

connector_data_1
outbox
}
}
camelmain
run
technology_2
will
keep
run
indefinitely
}}
please
note
the
from
and
to

technology_2
connector_data_5
this
a
‘route’
the
path
that
be
traverse
by
the
connector_data_1
from
component_16
to
destination
moreover
connector_data_1
be
not
exchange
in
raw
form
but
rather
it
be
wrap
in
connector_data_6
container
for
the
actual
connector_data_1
this
be
similar
to
a
technology_25
envelope
which
have
section
for
a
body
attachment
and
coding_keyword_10
connector_data_6
component_17
and
destination
be
connector_17
‘endpoints’
and
it
be
through
them
that
technology_2
connector_18
and
connector_19
connector_data_1
be
specify
with
a
uri
technology_26
coding_keyword_7
a
see
in
the
argument
for
the
from
and
to

therefore
the
way
we
tell
technology_2
what
to
do
be
by
declaratively
create
connector_20
between

and
then
register
these
connector_20
with
technology_2
the
rest
be
boilerplate
which
connector_21
quality_attribute_12
a
more
connector_20
be

and
be
a
great
deal
quality_attribute_10
than
talk
to
an
technology_22
component_5
technology_2
will
take
care
of
the
awkward
technology_22
detail
and
will
even
pattern_7
the
component_5
periodically
in
requirement_3
the
connector_11
a
it
have
be
set
up
to
keep
run
indefinitely
the
compactness
and
clarity
of
the
come
from
the
technology_2
dsl
a
domain
specific
technology_14
where
the
‘domain’
be
eai
that
mean
that
unlike
with
other
solution
there
be
no
translation
to
be
make
from
the
eai
problem
domain
to
the
technology_2
component_7
domain
the
two
be
virtually
the
same
this
help
to
keep
the

curve
gentle
and
the
entry
point
low
in
comparison
once
you
understand
your
eai
problem
it’s
a
small
step
to
connector_22
it
with
technology_2
but
the
you
connector_10
be
not
the
only
thing
that’s
quality_attribute_10
all
that
be
need
to
connector_2
this
run
be
technology_2
core
jar
and
technology_2
technology_22
jar
and
their
connector_23
together
a
few
connector_data_7
this
coding_keyword_6
can
then
be
run
from
the
command
line
no
need
for
an
component_7
component_5
with

complexity
in
fact
since
technology_2
be
so
lightweight
it
can
be
embed
about
anywhere
choose
a
do
it
yourself
solution
on
the
sole
basis
that
technology_19
a
lot
of
complexity
be
not
valid
technology_2
be
quality_attribute_10
to
understand
quality_attribute_10
to
use
and
quality_attribute_10
to
run
grow
complexity
now
let’s
say
more
and
more
requirement_11
need
to
be
make
we
not
only
want
to
be
able
to
have
more
requirement_11
but
also
to
keep
it
quality_attribute_8
how
would
technology_2
cope
with
this
a
more
connector_16
need
to
be
make
we
more
connector_20
to
technology_2
these
connector_20
might
need
to
connector_14
via
other
such
a
technology_27
technology_28
technology_29
etc
fortunately
camel’s
connector_data_8
of
support
be
extensive
what’s
great
be
that
each
of
these
represent
quality_attribute_13
that
you
don’t
have
to
connector_10
of

sooner
or
late
you
will
need
something
which
be
not
on
the
connector_data_8
the
question
then
become
how
easily
can
i
plug
my
own
into
technology_2
in
this
requirement_3
we
can
use
what
technology_2
connector_data_5
‘components’
component_15
define
a
contract
which
when
connector_22
will
make
your
quality_attribute_14
a
another
to
be
connector_17
from
the
dsl
so
now
we
we
can
more
and
more
connector_20
connector_14
with
about
any
type
of
technology_30
whether
technology_2
provide
for
it
out
of
the
component_18
or
not
but
at
some
point
connector_20
start
to
connector_2
quite
numerous
and
you
find
you
be
repeat
yourself
we
would
to
quality_attribute_12
bit
of
connector_20
maybe
even
split
the
whole
solution
into
separate
coarse
grain
part
camel’s
strategy
for
quality_attribute_12
be
base
on
some
special
internal
which
only
technology_2
can
see
should
you
need
to
quality_attribute_12
part
of
an
exist
connector_24
it
be
possible
to
refactor
that
connector_24
into
two
connector_25
by
an
internal

please
see
below
original
originalfrom
“ftp
component_5
path”
to
“xslt
transform
xsl”
to
“http
server2
path”
refactored
connector_26
from
internal
d1from
“direct
d1”
to
“xslt
transform
xsl”
to
“http
server2
path”
connector_27
to
d1
from
“ftp
component_5
path”
to
“direct
d1”
also
connector_28
to
d1from
“file
path”
to
“xslt
other
transformation
xsl”
to
“direct
d1”
the
connector_14
be
the
one
of
type
‘direct’
of
this
type
be
only
addressable
from
within
the
same
technology_2
component_12
another
interest
type
be
vm
vm
be
addressable
from
another
technology_2
component_12
provide
both
component_12
run
on
the
same
technology_31
instance
a
technology_2
component_12
be
a
container
for
your
connector_20
each
time
you
run
technology_2
it
instantiate
a
component_12
and
look
for
connector_20
inside
it
so
when
we
run
technology_2
we
be
actually
run
a
component_12
instance
be
able
to
connector_29
connector_20
in
other
technology_2
component_12
instance
via
vm
be
quite
useful
it
open
the
possibility
to
break
your
entire
solution
into
interconnect
in
a
more
lightweight
fashion
than
for
instance
via
technology_28
the
picture
below
show
the
various
connector_20
now
spread
between
different
technology_2
instance
each
separately
run
on
the
same
technology_31
instance
and
connector_29
each
other
with
a
vm

click
on
the
image
to
enlarge
it
we
have
decompose
our
solution
into

now
we
can
develop
quality_attribute_9
and
run
any
other
which
also
connector_19
to
‘consumer
context’
independently
of
‘producer
context1’
or
‘producer
context2’
this
be
key
in
order
to
keep
even
the
large
solution
quality_attribute_15
at
this
point
it
might
make
sense
to
use
an
component_7
component_5
a
it
be
able
to
fully
exploit
quality_attribute_16
or
maybe
you
already
be
use
one
a
very
common
approach
then
be
packaging
technology_2
into
a
war
and
quality_attribute_9
to
technology_32
but
you
could
also
quality_attribute_9
it
to
a
full
blow
technology_6
ee
component_7
component_5
technology_33
technology_34
or
technology_35
other
option
include
an
technology_36
container
or
even
component_19
component_20
master
complexity
sheer
volume
be
not
the
only
way
in
which
component_11
can
grow
connector_20
can
also
grow
in
complexity
connector_data_9
undergo
various
amount
and
type
of
transformation
pattern_8
enrichment
connector_20
etc
in
any
number
of
combination
in
order
to
discus
how
technology_2
can
help
in
that
regard
coding_keyword_2
u
consider
how
we
can
deal
with
complex
problem
in
the
first
place
complex
problem
arise
in
any

but
the
general
strategy
for
solve
them
be
usually
the
same
divide
and
conquer
we
try
to
decompose
the
problem
into
subproblems
that
be
more
quality_attribute_10
to
solve
these
solution
be
then
combine
by
reverse
the
decomposition
to
yield
the
total
solution
through
observation
one
then
notice
that
certain
problem
keep
recur
through
experience
one
identify
the
most
optimal
solution
what
i
be
talk
about
be
pattern_2
the
eai
pattern_2
have
be
catalogue
by
gregor
hohpe
and
bobby
woolf
and
summarize
online
eai
pattern_2
can
be
very
quality_attribute_10
in
nature
often
represent
basic
some
transformation
or
pattern_8
most
importantly
they
can
be
combine
to
form
complex
solution
these
could
well
be
pattern_2
themselves
this
ability
stem
from
the
fact
that
all
eai
pattern_2
have
the
same
‘interface’
connector_data_9
can
connector_2
in
and
out
of
a
pattern_2
pattern_2
can
then
be
connector_25
together
by
take
the
output
of
one
pattern_2
and
use
it
a
the
input
of
another
that
imply
that
broadly
speak
eai
problem
be
in
fact
a
combination
of
pattern_2
which
mean
solve
an
eai
problem
even
a
complex
one
be
reduce
to
find
that
combination
that
meet
your
requirement
connector_13
individual
pattern_2
can
still
hold
plenty
of
complexity
of

but
that
have
be
isolate
and
be
quality_attribute_15
let’s
consider
an
actual
pattern_2
a
an
example
this
pattern_2
be
connector_17
‘composed
connector_data_6
processor’
and
be
in
fact
a
combination
of
more
basic
pattern_2
it
be
use
when
part
of
the
same
connector_data_6
need
to
be
component_1
by
different
component_21
this
pattern_2
be
not
directly
connector_22
by
technology_2
but
it
subpatterns
be
so
this
be
a
quality_attribute_11
example
of
how
pattern_2
can
be
combine
by
the
technology_2
dsl
below
be
the
pattern_2
diagram
‘splitter’
will
split
the
incoming
connector_data_6
into
part
while
‘router’
will
decide
which
component_8
to
connector_27
them
to
either
‘widget
inventory’
or
‘gadget
inventory’
these
component_4
can
be
think
of
a
do
some
requirement_13
relate
component_1
then
coding_keyword_8
the
component_1
connector_data_6
‘aggregator’
will
then
combine
the
connector_data_10
into
one
outgoing
connector_data_6
again
click
on
the
image
to
enlarge
it
here
be
the
technology_2
implementation
from
some
input
setheader
msgid
give
each
connector_data_6
a
unique
coding_keyword_11
base
on
pattern_9
quality_attribute_10
${date
now
s}
split
technology_37
item
split
the
connector_data_6
into
part
msgid
be
preserve
choice
coding_keyword_2
each
part
be
component_1
by
the
appropriate
component_22
when
technology_37
item
@type=
widget
to
component_22
widgetinventory
otherwise
to
component_22
gadgetinventory
end
aggregate

myaggregationstrategy
connector_30
the
part
and
reassemble
coding_keyword_10
msgid
msgid
tell
u
which
part
belong
together
completiontimeout
1000l
to
some
output
connector_27
the
connector_data_11
along
in
this
implementation
the
‘beans’
be
actually
pojos
register
under
the
component_22
name
for
example
via
technology_38
in
this
way
we
can
do
custom
component_23
in
the
connector_24
myaggregationstrategy
be
also
custom

it
specify
how
to
reassemble
the
component_1
connector_data_6
part
note
the
split
choice
and
aggregate

which
directly
correspond
to
the
‘splitter’
‘router’
and
‘aggregator’
pattern_2
the
technology_2
implementation
of
‘composed
connector_data_6
processor’
be
essentially
a
textual
representation
of
the
diagram
above
so
mostly
there
be
no
need
to
think
in
term
of
‘camel’
in
term
of
eai
the
connector_data_11
be
that
technology_2
actually
stay
relatively
out
of
the
way
and
more
emphasis
can
be
place
on
understand
the
problem
and
identify
the
appropriate
pattern_2
that
help
improve
the
overall
quality
of
the
solution
however
it’s
not
all
goodness
technology_2
do
have
it
own
‘way
of
do
things’
it
own
behind
the
scene
component_23
and
there
will
be
moment
when
the
unexpected
happen
and
you
will
be
leave
clueless
but
such
setback
should
be
pattern_6
in
light
of
the
time
actually
connector_7
by
use
technology_2
other
technology_19
have
a
steeper

curve
and
quirk
of
their
own
do
it
yourself
mean
you
don’t
connector_2
to
quality_attribute_12
all
the
great
feature
technology_2
have
to
offer
and
keep
reinvent
the
wheel
no
argument
about
manage
complexity
and
quality_attribute_17
would
be
complete
without
talk
about
unit
test
technology_2
can
be
run
embed
in
any
other

so
it
will
also
run
inside
a
unit
test
technology_2
also
solve
one
of
the
most
cumbersome
thing
about
requirement_11
test
have
to
set
up
an
technology_22
or
technology_27
component_5
in
order
to
be
able
to
run
test
basically
it
avoid
this
because
it
be
possible
to
alter
exist
connector_20
at
runtime
here
be
an
example
coding_keyword_3
basictest
extend
cameltestsupport
{
this
be
the
connector_24
we
want
to
test
setup
with
anonymous
for
educational
purpose
normally
this
would
be
a
separate

@override
protect
routebuilder
createroutebuilder
throw
exception
{
coding_keyword_8
routebuilder
{
@override
coding_keyword_3
coding_keyword_5
configure
throw
exception
{
from
technology_22
component_13
connector_data_1
inbox
routeid
coding_keyword_6
to

connector_data_1
outbox
}
}
}
@override
coding_keyword_3
boolean
isuseadvicewith
{
indicate
we
be
use
advice
with
which
allow
u
to
advise
the
connector_24
before
technology_2
be
start
coding_keyword_8
true
}
@test
coding_keyword_3
coding_keyword_5
testme
throw
exception
{
alter
the
original
connector_24
component_12
getroutedefinition
coding_keyword_6
advicewith
component_12
advicewithroutebuilder
{
@override
coding_keyword_3
coding_keyword_5
configure
throw
exception
{
replacefromwith
direct
input
interceptsendtoendpoint

connector_data_1
outbox
skipsendtooriginalendpoint
to
mock
do
}
}
component_12
start
connector_10
unit
test
follow
aaa
arrange
act
assert
coding_keyword_7
bodycontents
=
hello
world
mockendpoint
=
getmockendpoint
mock
do

expectedmessagecount


expectedbodiesreceived
bodycontents
template
sendbody
direct
input
bodycontents
assertmockendpointssatisfied
}}
advicewithroutebuilder
allow
for
programmatically
connector_11
an
exist
connector_24
in
it
configure
without
alter
the
original

in
this
requirement_3
we
have
replace
the
original
component_16
with
one
of
type
direct
and
make
sure
the
original
destination
connector_21
bypass
in
favor
of
the
mockendpoint
in
this
way
we
do
not
need
to
have
an
actual
technology_22
component_5
run
in
order
to
test
our
connector_24
even
though
it
be
component_24
to
connector_31
connector_data_9
from
technology_22
the
mockendpoint
then
provide
a
convenient
component_25
for
set
unit
test
up
in
a
declarative
way
similar
to
jmock
another
great
feature
be
the
template
we
use
in
order
to
easily
connector_27
connector_data_9
to
our
connector_24
under
test
rely
on
technology_2
one
important
characteristic
of
requirement_11
solution
be
that
a
they
be
the
intermediate
through
which
all
other
component_4
be
connector_14
by
their
very
nature
they
be
a
single
point
of
failure
a
more
and
more
component_4
connector_2
connector_32
or
the
connector_data_1
connector_21
more
important
component_8
failure
connector_data_1
loss
and
requirement_2
degradation
become
le
tolerable
even
a
the
volume
increase
even
though
this
be
about
technology_2
a
solution
that
connector_29
all
these
challenge
be
beyond
the
scope
of
technology_2
alone
however
technology_2
be
a
central
part
of
such
a
solution
because
it
contain
all
the
component_23
for
move
the
connector_data_1
around
so
it
be
important
to
that
it
can
fulfill
it
duty
even
in
these
demand
condition
let’s
consider
an
example
to
see
how
these
requirement
be
typically
meet
in
this
example
there
be
an
incoming
technology_39
component_26
where
connector_data_9
be
place
by
external
component_8
camel’s
will
be
to
take
the
connector_data_6
do
some
component_1
then
connector_8
them
to
an
outgoing
technology_39
component_26
technology_39
component_27
can
be
make
persistent
a
well
a
highly
quality_attribute_14
separately
so
we
will
focus
on
technology_2
and
assume
that
external
component_4
can
‘always’
put
connector_data_9
on
the
incoming
component_26
that
be
until
it
fill
up
which
will
happen
if
technology_2
cannot
pick
up
and
component_1
connector_data_9
fast
enough
our
aim
then
be
to
make
technology_2
resilient
to
component_8
failure
and
increase
it
requirement_2
and
we
do
this
by
quality_attribute_9
it
on
more
component_5
each
run
a
technology_2
instance
connector_32
to
the
same

see
also
the
picture
below
click
on
the
image
to
enlarge
it
this
be
in
fact
an
implementation
of
another
eai
pattern_2
connector_17
‘competing
consumers’
this
pattern_2
have
two
benefit
first
connector_data_9
be
take
from
the
component_26
from
multiple
instance
and
connector_2
component_1
in
parallel
which
improve
requirement_2
second
should
one
component_5
go
down
others
be
already
run
and
take
connector_data_6
so
connector_data_6
component_1
continue
automatically
and
without
any
intervention
which
improve
failure
quality_attribute_18
when
one
technology_2
instance
take
a
connector_data_6
it
be
no
long
quality_attribute_14
to
others
this
ensure
connector_data_9
be
component_1
once
and
the
workload
connector_21
quality_attribute_3
across
component_28
a
each
component_5
take
connector_data_6
fast
component_28
can
take
connector_data_9
at
a
fast
rate
and
automatically
take
on
more
of
the
burden
than
slow
component_5
in
this
way
we
can
achieve
the
necessary
coordination
and
workload
distribution
between
technology_2
instance
however
there
be
one
element
miss
should
one
component_5
go
down
while
component_1
a
connector_data_6
another
must
take
up
it
work
otherwise
the
connector_data_6
be
lose
similarly
if
all
technology_40
go
down
connector_data_9
that
be
in
the
middle
of
component_1
should
not
be
lose
for
that
to
happen
we
need
transaction
with
transaction
the
technology_39
component_26
will
wait
for
an
acknowledgement
from
the
instance
that
take
the
connector_data_6
before
really
discard
it
if
the
component_5
that
take
the
connector_data_6
fail
during
component_1
that
acknowledgement
will
never
come
and
eventually
a
rollback
will
kick
in
and
the
connector_data_6
will
reappear
on
the
component_26
and
become
quality_attribute_14
again
to
the
instance
that
be
leave
run
if
none
be
run
the
connector_data_6
stay
there
until
a
component_5
eventually
connector_21
back
online
for
technology_2
this
mean
that
the
connector_20
must
be
make
pattern_3
technology_2
do
not
by
itself
provide
for
transaction
but
instead
make
use
of
3rd
party
solution
that
keep
technology_2
quality_attribute_10
while
enabling
quality_attribute_12
of
prove
technology_18
and
make
it
possible
to
easily
switch
implementation
a
an
example
we
will
configure
a
technology_2
component_12
with
transaction
inside
a
technology_21
container
note
that
a
we
be
run
inside
technology_21
it’s
more
practical
to
use
the
technology_21
connector_data_12
version
of
the
technology_2
dsl
instead
of
the
technology_6
one
even
though
the
latter
be
great
for
start
out
of

connector_11
dsl
mid
project
mean
rework
so
it’s
important
to
migrate
wisely
and
at
an
appropriate
time
fortunately
the
technology_21
dsl
also
run
from
a
unit
test
so
unit
test
can
help
to
safely
make
the
transition
since
they
will
work
on
connector_20
regardless
of
which
dsl
type
be
use
component_22
namespace
declaration
omit
setup
connector_16
to
technology_28
component_5
jee
technology_38
pattern_10
id=
jmsconnectionfactory
technology_38
name=
connectionfactory
jee
environment
technology_6
name
factory
initial=org
jnp

namingcontextfactory
technology_6
name
factory
url
pkgs=org
technology_33
name
component_14
technology_6
name
technology_41
url=jnp
localhost

jee
environment
jee
technology_38
pattern_10
configuration
for
the
technology_28
component_14
include
transaction
behavior
component_22
id=
jmsconfig
class=

technology_1
technology_2
component_21
technology_28
jmsconfiguration
property
name=
connectionfactory
ref=
jmsconnectionfactory
property
name=
transactionmanager
ref=
jmstransactionmanager
property
name=
transact
value=
true
property
name=
acknowledgementmodename
value=
transact
property
name=
cachelevelname
value=
cache_none
property
name=
transactiontimeout
value=

component_22
register
technology_2
technology_28
component_21
component_22
component_22
id=
technology_33
class=

technology_1
technology_2
component_21
technology_28
jmscomponent
property
name=
configuration
ref=
jmsconfig
component_22
register
technology_21
transactionmanager
component_22
component_22
id=
jmstransactionmanager
class=

springframework
technology_28
connector_16
jmstransactionmanager
property
name=
connectionfactory
ref=
jmsconnectionfactory
component_22
camelcontext
xmlns=
technology_27
technology_2
technology_1

schema
technology_21
connector_24
from
uri=
technology_33
component_26
incoming
transact
requirement_14
logginglevel=
info
message=
component_1
start
complex
component_1
to
uri=
technology_33
component_26
outgoing
exchangepattern=inonly
connector_24
camelcontext
component_22
with
the
transact
tag
the
connector_24
be
mark
a
pattern_3
so
technology_2
will
enlist
resource
in
the
transaction
through
the
transaction
manager
for
that
connector_24
in
requirement_3
of
failure
during
component_1
the
transaction
manager
will
make
sure
the
transaction
be
roll
back
and
the
connector_data_6
reappear
in
the
incoming
component_26
however
not
every
connector_24
can
be
mark
pattern_3
because
some

technology_22
for
instance
do
not
support
transaction
fortunately
technology_2
have
error
handle
that
work
even
without
transaction
of
particular
interest
be
the
deadletterchannel
an
error
pattern_11
which
connector_4
the
dead
letter
pattern_12
pattern_2
this
pattern_2
state
that
connector_data_9
that
could
not
or
should
not
be
connector_8
to
their
intend
destination
must
be
move
to
a
separate
location
so
a
not
to
clutter
the
component_8
the
pattern_13
component_8
then
decide
what
to
do
with
such
connector_data_6
for
instance
suppose
that
delivery
to
an
such
a
an
technology_22
location
fail
if
configure
on
that
connector_24
the
deadletterchannel
will
first
attempt
to
redeliver
the
connector_data_6
a
few
time
if
the
failure
persist
then
the
connector_data_6
be
connector_17
‘poison’
mean
nothing
useful
can
be
do
with
it
and
it
should
be
take
out
of
the
component_8
by
default
technology_2
will
then
requirement_14
the
error
and
drop
the
connector_data_6
naturally
this
mechanism
can
be
customize
for
instance
you
could
specify
that
technology_2
should
perform
at
most

redelivery
attempt
and
component_29
the
connector_data_6
in
a
technology_39
component_26
if
they
be
exhaust
and
yes
the
deadletterchannel
can
be
combine
with
transaction
bring
the
best
of
both
conclusion
unmaintainable
requirement_11
usually
begin
with
quality_attribute_10
requirement_11
need
which
be
meet
in
an

hoc
fashion
such
approach
do
not
quality_attribute_19
to
more
rigorous
demand
and
make
them
do
so
be
a
considerable
investment
in
itself
early
on
investment
on
specialize
eai
technology_42
carry
a
great
risk
due
to
the
complexity
they
often
bring
and
have
a
high
probability
of
not
pay
off
in
this
i
have
investigate
a
third
option
use
technology_2
in
order
to
keep
thing
quality_attribute_10
in
the
begin
while
still
be
able
to
meet
high
demand
late
in
this
regard
i
believe
technology_2
have
show
itself
quite
capable
it
have
an
easy

curve
and
be
lightweight
in
use
and
in
deployment
so
early
on
investment
be
small
even
in
quality_attribute_10
requirement_3

technology_2
can
actually
be
a
fast
path
to
requirement_11
than
do
it
yourself
solution
technology_2
be
therefore
great
a
a
low
threshold
entry
to
eai
i
also
think
that
technology_2
be
a
quality_attribute_11
choice
for
the
great
demand
that
can
be
place
on
an
requirement_11
solution
in
regard
to
productivity
it
have
quality_attribute_20
and
quality_attribute_12
and
an
amaze
requirement_11
dsl
because
of
it
there
be
almost
no
complexity
overhead
in
use
technology_2
so
you
can
focus
on
the
actual
problem
when
you
reach
the
limit
of
what
can
be
do
with
out
of
the
component_18
technology_2
it
have
a
plugin
infrastructure
for
component_15
and
pojo
invocation
empower
you
to
take
matter
into
your
own
hand
unit
test
support
with
technology_2
be
invaluable
technology_2
also
prove
itself
a
part
of
a
high
quality_attribute_21
solution
on
the
whole
technology_2
be
a
great
option
for
requirement_11
of
virtually
any
size
and
complexity
you
can
start
out
small
and
quality_attribute_10
with
minimal
upfront
investment
confident
in
the
knowledge
that
should
requirement_11
need
connector_2
more
complex
technology_2
can
still
connector_8
in
the
meantime
you
can
stay
productive
while
reap
the
benefit
of
a
mature
and
complete
requirement_11
technology_19
about
the
author
frans
van
der
lek
be
a
engineer
with
experience
in
web
requirement_15
and
eai
solution
he
be
currently
employ
by
capgemini
in
the
netherlands
where
he
have
work
a
a
designer
developer
and
specifier
on
a
number
of
project
when
not
connector_33
or
think
about
he
enjoy
a
quality_attribute_11
book
a
fine
cup
of
coffee
and
spend
time
with
his
family
inspire
by
this
content
connector_10
for
infoq
become
an
editor
for
infoq
be
one
of
the
best
decision
of
my
career
it
have
challenge
me
and
help
me
grow
in
so
many
way
we
technology_43
love
to
have
more
people
join
our
team
thomas
bettslead
editor
architecture
and
design
@infoq
senior
principal
engineer
connector_10
for
infoq
rate
this
adoption
style
author

this
content
be
in
the
requirement_1
architecture
topic
relate
topic
development
architecture
&
design
technology_39
technology_6
ee
technology_6
eai
requirement_1
architecture
infrastructure
architecture
relate
editorial
popular
across
infoq
go
requirement_16
with
technology_21
and
graalvm
why
you
should
care
about
architecture
technology_6
news
roundup
jeps
for
jdk

project
lilliput
milestone
technology_21
technology_19
quarkus



state
of
the
technology_6
ecosystem
report
from
relic
ml
technology_44
to
accelerate
your
work
with
cassie
breviu
release
technology_45
dns
private
resolver
in
coding_keyword_3
preview
relate
content
jep

component_30
to
extend
pattern_2
match
in
technology_6
technology_6
news
roundup
openjdk
technology_21
connector_data_13
and
cf
payara
component_9
technology_1
technology_46
connector_data_13
kalix
build
serverless
requirement_9
requirement_16
requirement_13
crtical
component_11
with
no
component_3
state
of
the
technology_6
ecosystem
report
from
relic
+
technology_6
=
♡
a
story
tell
by
martijn
verburg
at
devoxx
uk
microstream


connector_34
support
for
technology_47
technology_6
news
roundup
jeps
for
jdk

project
lilliput
milestone
technology_21
technology_19
quarkus



the
future
of
technology_6
a
see
by
mark
little
at
devoxx
uk

requirement_16
technology_6
adoptium
and
fast
pace

puzzle
from
jdk11
hanno
embregts
on
technology_6
certification
at
devoxx
uk
jep

technology_6
virtual
component_31
to
connector_8
improve
quality_attribute_22
technology_6
news
roundup
jeps
for
project
loom
and
panama
jobrunr



technology_7



preview
quarkus



introduce
fine
grain
transaction
component_25
coding_keyword_4
technology_6
current
state
compile
requirement_16
executables
for
startup
quality_attribute_23
and
small
footprint
jetbrains
intellij
idea


introduce
connector_23
analysis
technology_6
news
roundup
jep
connector_data_13
for
jdk

project
loom
microstream


relic
technology_6
survey
technology_7
pattern_14
technology_19
ktor


release
with
plugins
feature
go
requirement_16
with
technology_21
and
graalvm
jobrunr



connector_34
improve
technology_19
support
series
requirement_16
compilation
technology_48
technology_6
requirement_9
requirement_16
technology_6
with
the
micronaut
technology_19
connector_35
start
to
quarkus
reactive
pattern_13
with
technology_1
technology_4
requirement_16
technology_6
in
the
real
world
technology_49
requirement_16
technology_6
with
quarkus
revolutionize
technology_6
with
graalvm
requirement_16
image
two
must
have
technology_44
for
jakarta
ee
developer
level
up
your
technology_6
requirement_2
with
tornadovm
the
angular
mini
book


technology_6
infoq
trend
report—december

technology_6
&
technology_31
panel
six
feature
from
technology_6

to

to
connector_2
excite
about
lightweight
external
requirement_13
rule
build
an
quality_attribute_24
digital
component_9
adam
hansrod
on
the
benefit
challenge
and
approach
hashicorp
vault
improve
eventual
consistency
with
component_5
side
consistent
connector_data_14
announce
the
general
quality_attribute_21
of
technology_45
container
component_32
at
build

requirement_6
at
the
edge
how
connector_35
feedback
from
angry
component_33
help
to
develop
quality_attribute_11
technology_17
cloudflare
d1
provide
quality_attribute_3
technology_50
for
cloudflare
component_34
release

technology_14
requirement_4
train
dataset
massive
how
to
run
your
technology_17
department
a
coach
jetpack
bring
update
architectural
and
ui
component_15
and
improve
requirement_2
technology_44
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_36
out
every
tuesday
join
a
of
over


senior
developer
pattern_6
an
example
enter
your
e
mail
connector_29
select
your
country
select
a
country
i
to
infoq
technology_51
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
hello
stranger
you
need
to
register
an
infoq
account
or
login
or
login
to
coding_keyword_12

but
there
s
so
much
more
behind
be
register
connector_2
the
most
out
of
the
infoq
experience
tell
u
what
you
think
allow
technology_52
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_15
to
any
of
my
connector_data_9
in
this
component_35

watch
component_35
excellent
by
pradeep
tiwari
re
excellent
by
nurali
virani
excellent
by
pradeep
tiwari
your
connector_data_6
be
await
moderation
thank
you
for
participate
in
the
discussion
this
be
really
an
excellent

connector_data_4
back
to
top
re
excellent
by
nurali
virani
your
connector_data_6
be
await
moderation
thank
you
for
participate
in
the
discussion
yes
frans
have
explain
a
simply
a
technology_2
be
step
by
step
increase
in
complexity
for
requirement_11
and
cover
many
different
scenario
where
technology_2
show
it
s
requirement_10
thanks
frans
connector_data_4
back
to
top
close
your
connector_data_4
quote
original
connector_data_6
allow
technology_52
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_15
to
any
of
my
connector_data_9
in
this
component_35
cancel
close
your
connector_data_4
allow
technology_52
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_15
to
any
of
my
connector_data_9
in
this
component_35
cancel
close
ok

development
how
to
prepare
for
the
unexpected
an
influxdata
outage
story
tell
at
kubeconeu

reproducible
development
with
container
green
development
terminology
and
climate
commitment
explain
by
at
devoxx
uk
architecture
&
design
oren
eini
on
technology_13
include
consistency
guarantee
and
technology_9
a
the
implementation
technology_14
kalix
build
serverless
requirement_9
requirement_16
requirement_13
crtical
component_11
with
no
component_3
architecting
for
the
edge
culture
&
how
connector_35
feedback
from
angry
component_33
help
to
develop
quality_attribute_11
technology_17
how
to
run
your
technology_17
department
a
coach
build
a
culture
of
quality_attribute_25
and
curiosity
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
release

technology_14
requirement_4
train
dataset
massive
requirement_4
for
developer
a
future
or
a
reality
devops
hashicorp
vault
improve
eventual
consistency
with
component_5
side
consistent
connector_data_14
cloudflare
d1
provide
quality_attribute_3
technology_50
for
cloudflare
component_34
effectively
pattern_15
your
pattern_15
miedwar
meshbesher
on
use
vigilance
control
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_36
out
every
tuesday
join
a
of
over


senior
developer
pattern_6
an
example
connector_2
a
quick
overview
of
content
publish
on
a
variety
of
innovator
and
early
adopter
technology_18
what
you
don’t
that
you
don’t
stay
up
to
date
with
the
late
connector_data_16
from
the
topic
you
be
interest
in
enter
your
e
mail
connector_29
select
your
country
select
a
country
i
to
infoq
technology_51
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
qcon
development
conference
real
world
technical
talk
no
technology_17
pitch
practical
idea
to
inspire
you
and
your
team
qcon
san
francisco
oct


in
person
qcon
san
francisco
bring
together
the
world
s
most
innovative
senior
engineer
across
multiple
domain
to
connector_37
their
real
world
implementation
of
emerge
trend
and
practice
uncover
emerge
trend
and
practice
to
solve
your
complex
engineering
challenge
without
the
technology_17
pitch
connector_7
your
spot
now
home
create
account
login
qcon
conference
contribute
infoq
editor
about
infoq
about
c4media

technology_53
infoq
developer
requirement_17
diversity
infoq
live


infoq
live


infoq
live


qcon
san
francisco



qcon
plus



follow
u
on
youtube212k
follower
linkedin18k
follower
rss19k
reader
twitter50k
follower
facebook20k

alexanew
stay
in
the
the
infoq
podcast
engineering
culture
podcast
the
architect
newsletter
general
feedback
feedback@infoq
technology_51
advertising
sales@infoq
technology_51
editorial
editors@infoq
technology_51
requirement_17
marketing@infoq
technology_51
infoq
technology_51
and
all
content
copyright
©


c4media
inc
infoq
technology_51
component_13
at
contegix
the
best
isp
we
ve
ever
work
with
privacy
notice
term
and
condition
requirement_18
bt
