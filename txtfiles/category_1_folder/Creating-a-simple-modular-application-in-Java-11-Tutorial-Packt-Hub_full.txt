create
a
quality_attribute_1
modular
component_1
in
technology_1


|
packt
hub
subscription
podcast
book
&
video


path
news

sign
in
welcome
requirement_1
into
your
account
your
username
your
password
forget
your
password
password
recovery
recover
your
password
your
search
packt
hub
subscription
podcast
book
&
video


path
news

web
development
front
end
web
development
full
technology_2
web
development
component_2
side
web
development
web
design
cm
&
e
commerce
connector_data_1
requirement_2
requirement_3
requirement_4
intelligence
connector_data_1
analysis
component_3
requirement_5
io
programming
technology_3
programming
augment
reality
virtual
reality
requirement_5
game
development
cross
component_4
requirement_5
development
programming
component_1
development
technology_4
design
pattern_1
high
requirement_6
pattern_2
requirement_7
&
requirement_8
devops
requirement_7
computing
requirement_8
component_5
virtualization
quality_attribute_2
penetration
test
cybersecurity
cryptography
forensics
malware
analysis
game
development
3d
game
development
2d
game
development
game
requirement_2
game
design
game
optimization
iot
&
hardware
home
automation
robotics
single
board
component_6
3d
printing
embed
component_7
sign
in
welcome
requirement_1
into
your
account
your
username
your
password
forget
your
password
connector_1
help
password
recovery
recover
your
password
your
a
password
will
be
e
mail
to
you
home

create
a
quality_attribute_1
modular
component_1
in
technology_1


create
a
quality_attribute_1
modular
component_1
in
technology_1


by
prasad
ramesh




be



min
readmodular
programming
enable
one
to
organize
into
independent
cohesive

which
can
be
combine
to
achieve
the
desire
requirement_9
this
be
an
excerpt
from
a
book
connector_2
by
nick
samoylov
and
mohamed
sanaulla
title
technology_1

cookbook
–
second
edition
in
this
book
you
will
how
to
connector_3
connector_data_2
orient
design
use
and
in
technology_1

the
complete
for
the
example
show
in
this
can
be
find
on
technology_5
you
should
be
wonder
what
this
quality_attribute_3
be
all
about
and
how
to
create
a
modular
component_1
in
technology_1
in
this

we
will
try
to
clear
up
the
confusion
around
create
modular
component_8
in
technology_1
by
walk
you
through
a
quality_attribute_1
example
our
goal
be
to
show
you
how
to
create
a
modular
component_1
hence
we
pick
a
quality_attribute_1
example
so
a
to
focus
on
our
goal
our
example
be
a
quality_attribute_1
advance
calculator
which
connector_4
whether
a
number
be
prime
calculate
the
sum
of
prime
number
connector_4
whether
a
number
be
even
and
calculate
the
sum
of
even
and
odd
number
connector_5
ready
we
will
divide
our
component_1
into
two

the
math
util

which
contain
the
component_9
for
perform
the
mathematical
calculation
the
calculator

which
launch
an
advance
calculator
how
to
do
it
let’s
connector_3
the
component_9
in
the
technology_6
packt
math
mathutil

start
with
the
isprime
coding_keyword_1
number
technology_7
coding_keyword_2
coding_keyword_3
boolean
isprime
coding_keyword_1
number
{
if
number
==

{
coding_keyword_4
false
}
coding_keyword_4
intstream
range

num
nonematch
i
num
%
i
==

}
connector_3
the
sumoffirstnprimes
coding_keyword_1
count
technology_7
coding_keyword_2
coding_keyword_3
coding_keyword_1
sumoffirstnprimes
coding_keyword_1
count
{
coding_keyword_4
intstream
iterate

i
i+1
pattern_3
j
isprime
j
limit
count
sum
}
let’s
connector_2
a
to
connector_6
whether
the
number
be
even
coding_keyword_2
coding_keyword_3
boolean
iseven
coding_keyword_1
number
{
coding_keyword_4
number
%

==

}
the
negation
of
iseven
tell
u
whether
the
number
be
odd
we
can
have
to
find
the
sum
of
the
first
n
even
number
and
the
first
n
odd
number
a
show
here
coding_keyword_2
coding_keyword_3
coding_keyword_1
sumoffirstnevens
coding_keyword_1
count
{
coding_keyword_4
intstream
iterate

i
i+1
pattern_3
j
iseven
j
limit
count
sum
}
coding_keyword_2
coding_keyword_3
coding_keyword_1
sumoffirstnodds
coding_keyword_1
count
{
coding_keyword_4
intstream
iterate

i
i+1
pattern_3
j
iseven
j
limit
count
sum
}
we
can
see
in
the
precede
component_9
that
the
follow
be
repeat
an
infinite
sequence
of
number
start
from

pattern_3
the
number
base
on
some
condition
limit
the
connector_7
of
number
to
a
give
count
find
the
sum
of
number
thus
obtain
base
on
our
observation
we
can
refactor
the
precede
component_9
and
extract
these
into
a

a
follow
coding_keyword_1
computefirstnsum
coding_keyword_1
count
intpredicate
pattern_3
{
coding_keyword_4
intstream
iterate

i
i+1
pattern_3
pattern_3
limit
count
sum
}
here
count
be
the
limit
of
number
we
need
to
find
the
sum
of
and
pattern_3
be
the
condition
for
pick
the
number
for
sum
let’s
rewrite
the
component_9
base
on
the
refactoring
we
do
coding_keyword_2
coding_keyword_3
coding_keyword_1
sumoffirstnprimes
coding_keyword_1
count
{
coding_keyword_4
computefirstnsum
count
i
isprime
i
}
coding_keyword_2
coding_keyword_3
coding_keyword_1
sumoffirstnevens
coding_keyword_1
count
{
coding_keyword_4
computefirstnsum
count
i
iseven
i
}
coding_keyword_2
coding_keyword_3
coding_keyword_1
sumoffirstnodds
coding_keyword_1
count
{
coding_keyword_4
computefirstnsum
count
i
iseven
i
so
far
we
have
see
a
few
component_9
around
mathematical
computation
these
component_9
be
part
of
our
technology_6
packt
math
mathutil

the
complete
for
this
can
be
find
at
chapter03
2_simple
modular
math
util
math
util
technology_6
packt
math
in
the
codebase
download
for
this
book
let’s
make
this
small
utility
part
of
a
name
math
util
the
follow
be
some
convention
we
use
to
create
a

place
all
the
relate
to
the
under
a
directory
name
math
util
and
treat
this
a
our
root
directory
in
the
root
folder
insert
a
name

info
technology_1
place
the
package
and
the
under
the
root
directory
what
do

info
technology_1
contain
the
follow
the
name
of
the
the
package
it
export
that
be
the
one
it
make
quality_attribute_4
for
other
to
use
the
it
quality_attribute_5
on
the
component_10
it
us
the
component_11
for
which
it
provide
implementation
our
math
util
doesn’t
quality_attribute_5
on
any
other
except
of

the
technology_1
base

however
it
make
it
component_12
quality_attribute_4
for
other
if
not
then
this
module’s
existence
be
questionable
let’s
go
ahead
and
put
this
statement
into

math
util{
export
technology_6
packt
math
}
we
be
tell
the
technology_1
compiler
and
runtime
that
our
math
util
be
export
the
in
the
technology_6
packt
math
package
to
any
that
quality_attribute_5
on
math
util
the
for
this
can
be
find
at
chapter03
2_simple
modular
math
util
math
util
now
let’s
create
another
calculator
that
us
the
math
util

this
have
a
calculator
whose
work
be
to
connector_8
the
user’s
choice
for
which
mathematical
to
connector_9
and
then
the
input
require
to
connector_9
the

the
component_13
can
choose
from
five
quality_attribute_4
mathematical

prime
number
connector_6
even
number
connector_6
sum
of
n
prim
sum
of
n
even
sum
of
n
odds
let’s
see
this
in

private
coding_keyword_3
coding_keyword_1
acceptchoice
scanner
reader
{
component_14
out
coding_keyword_5
************advanced
calculator************
component_14
out
coding_keyword_5

prime
number
connector_6
component_14
out
coding_keyword_5

even
number
connector_6
component_14
out
coding_keyword_5

sum
of
n
prim
component_14
out
coding_keyword_5

sum
of
n
even
component_14
out
coding_keyword_5

sum
of
n
odds
component_14
out
coding_keyword_5

exit
component_14
out
coding_keyword_5
enter
the
number
to
choose

coding_keyword_4
reader
nextint
}
then
for
each
of
the
choice
we
connector_8
the
require
input
and
invoke
the
correspond
mathutil
technology_7
a
follow
switch
choice
{
requirement_10

component_14
out
coding_keyword_5
enter
the
number
coding_keyword_1
number
=
reader
nextint
if
mathutil
isprime
number
{
component_14
out
coding_keyword_5
the
number
+
number
+
be
prime
}else{
component_14
out
coding_keyword_5
the
number
+
number
+
be
not
prime
}
break
requirement_10

component_14
out
coding_keyword_5
enter
the
number
coding_keyword_1
number
=
reader
nextint
if
mathutil
iseven
number
{
component_14
out
coding_keyword_5
the
number
+
number
+
be
even
}
break
requirement_10

component_14
out
coding_keyword_5
how
many
prim
coding_keyword_1
count
=
reader
nextint
component_14
out
coding_keyword_5
coding_keyword_6
technology_8
sum
of
%d
prim
be
%d
count
mathutil
sumoffirstnprimes
count
break
requirement_10

component_14
out
coding_keyword_5
how
many
even
coding_keyword_1
count
=
reader
nextint
component_14
out
coding_keyword_5
coding_keyword_6
technology_8
sum
of
%d
even
be
%d
count
mathutil
sumoffirstnevens
count
break
requirement_10

component_14
out
coding_keyword_5
how
many
odds
coding_keyword_1
count
=
reader
nextint
component_14
out
coding_keyword_5
coding_keyword_6
technology_8
sum
of
%d
odds
be
%d
count
mathutil
sumoffirstnodds
count
break
}
the
complete
for
the
calculator
can
be
find
at
chapter03
2_simple
modular
math
util
calculator
technology_6
packt
calculator
calculator
technology_1
let’s
create
the
definition
for
our
calculator
in
the
same
way
we
create
it
for
the
math
util

calculator{
require
math
util
}
in
the
precede
definition
we
mention
that
the
calculator
quality_attribute_5
on
the
math
util
by
use
the
require
keyword
the
for
this
can
be
find
at
chapter03
2_simple
modular
math
util
calculator
let’s
compile
the

javac
technology_9
mod

component_15
path
$
find
name
*
technology_1
the
precede
command
have
to
be
connector_9
from
chapter03
2_simple
modular
math
util
also
you
should
have
the
compile
from
across
both
the

math
util
and
calculator
in
the
mod
directory
a
single
command
and
everything
include
the
connector_10
between
the
be
take
care
of
by
the
compiler
we
didn’t
require
build
technology_10
such
a
ant
to
manage
the
compilation
of

the

component_15
path
command
be
the
command
line
option
for
javac
specify
the
location
of
our
component_15

let’s
connector_9
the
precede

technology_1

path
mod
m
calculator
technology_6
packt
calculator
calculator
the

path
command
similar
to
classpath
be
the
command
line
option
technology_1
specify
the
location
of
the
compile

after
run
the
precede
command
you
will
see
the
calculator
in
action
congratulation
with
this
we
have
a
quality_attribute_1
modular
component_1
up
and
run
we
have
provide
script
to
test
out
the
on
both
window
and
linux
component_4
please
use
run
bat
for
window
and
run
sh
for
linux
how
it
work
now
that
you
have
be
through
the
example
we
will
look
at
how
to
generalize
it
so
that
we
can
apply
the
same
pattern_1
in
all
our

we
follow
a
particular
convention
to
create
the

|application_root_directory
|
module1_root
|

info
technology_1
|
technology_6
|
packt
|
sample
|
myclass
technology_1
|
module2_root
|

info
technology_1
|
technology_6
|
packt
|
test
|
myanotherclass
technology_1
we
place
the

specific
within
it
folder
with
a
correspond

info
technology_1
at
the
root
of
the
folder
this
way
the
be
organize
well
let’s
look
into
what

info
technology_1
can
contain
from
the
technology_1
technology_4
specification
technology_11
cr
openjdk
technology_1
net
~mr
jigsaw
spec
lang
vm
technology_12
a
declaration
be
of
the
follow
form
{annotation}
open
modulename
{
{modulestatement}
}
here’s
the
syntax
explain
{annotation}
this
be
any
annotation
of
the
form
@annotation

open
this
keyword
be
optional
an
open
make
all
it
component_16
quality_attribute_6
at
runtime
via
pattern_4
however
at
compile
time
and
runtime
only
those
component_16
that
be
explicitly
export
be
quality_attribute_6

this
be
the
keyword
use
to
declare
a

modulename
this
be
the
name
of
the
that
be
a
valid
technology_1
identifier
with
a
permissible
dot
between
the
identifier
names—similar
to
math
util
{modulestatement}
this
be
a
collection
of
the
permissible
statement
within
a
definition
let’s
expand
this
next
a
statement
be
of
the
follow
form
modulestatement
require
{requiresmodifier}
modulename
export
packagename
to
modulename
{
modulename}
open
packagename
to
modulename
{
modulename}
us
typename
provide
typename
with
typename
{
typename}
the
statement
be
decode
here
require
this
be
use
to
declare
a
connector_10
on
a

{requiresmodifier}
can
be
transitive
coding_keyword_3
or
both
transitive
mean
that
any
that
quality_attribute_5
on
the
give
also
implicitly
quality_attribute_5
on
the
that
be
require
by
the
give
transitively
coding_keyword_3
mean
that
the
dependence
be
mandatory
at
compile
time
but
optional
at
runtime
some
example
be
require
math
util
require
transitive
math
util
and
require
coding_keyword_3
math
util
export
this
be
use
to
make
the
give
package
quality_attribute_6
to
the
dependent

optionally
we
can
force
the
package’s
quality_attribute_7
to
specific
by
specify
the
name
such
a
export
technology_6
package
math
to
claculator
open
this
be
use
to
open
a
specific
package
we
saw
early
that
we
can
open
a
by
specify
the
open
keyword
with
the
declaration
but
this
can
be
le
restrictive
so
to
make
it
more
restrictive
we
can
open
a
specific
package
for
reflective
connector_11
at
runtime
by
use
the
open
keyword—opens
technology_6
packt
math
us
this
be
use
to
declare
a
connector_10
on
a
component_11
that
be
quality_attribute_6
via
technology_1
util
serviceloader
the
component_11
can
be
in
the
current
or
in
any
that
the
current
quality_attribute_5
on
provide
this
be
use
to
declare
a
component_11
and
provide
it
with
at
least
one
implementation
the
component_11
can
be
declare
in
the
current
or
in
any
other
dependent

however
the
component_11
implementation
must
be
provide
in
the
same

otherwise
a
compile
time
error
will
occur
we
will
look
at
the
us
and
provide
clause
in
more
detail
in
the
use
component_10
to
create
loose
couple
between
the
component_17
and
technology_13
recipe
the
component_15
of
all
can
be
compile
at
once
use
the

component_15
path
command
line
option
this
way
all
the
will
be
compile
and
place
in
their
correspond
directory
under
the
directory
provide
by
the
technology_9
option
for
example
javac
technology_9
mod

component_15
path
$
find
name
*
technology_1
compile
the
in
the
current
directory
into
a
mod
directory
run
the
be
equally
quality_attribute_1
we
specify
the
path
where
all
our
be
compile
into
use
the
command
line
option

path
then
we
mention
the
name
along
with
the
fully
qualify
coding_keyword_7
name
use
the
command
line
option
m
for
example
technology_1

path
mod
m
calculator
technology_6
packt
calculator
calculator
in
this

we

to
create
a
quality_attribute_1
modular
technology_1
component_1
to
more
technology_1

recipe
connector_6
out
the
book
technology_1

cookbook
–
second
edition
connector_12
next
brian
goetz
on
technology_1
future
at
fosdem


thing
technology_1
programmer
need
to
watch
for
in

technology_14


release
with
prepl
improve
error
report
and
technology_1
quality_attribute_8
connector_13
twitter
linkedin
prasad
rameshdata
science
enthusiast
cycle
music
food
movie

fps
and
strategy
game
interviewsall2d
game
development
news3d
game
development
news3d
printing
newsandroid
programming
newsapplication
development
newsartificial
intelligence
newsaugmented
reality
virtual
reality
newsbig
connector_data_1
newsblockchain
technologybusiness
intelligence
newscloud
&
requirement_8
newscloud
computing
newscms
&
e
commerce
newscross
component_4
requirement_5
development
newscryptography
newscybersecurity
newsdata
analysis
newsdata
newsdatabases
newsdeep
learningdesign
pattern_1
newsdevops
newsembedded
component_7
newsfeaturedforensics
newsfront
end
web
development
newsfull
technology_2
web
development
newsgame
requirement_2
newsgame
design
newsgame
development
newsgame
optimization
newshigh
requirement_6
newshome
automation
newsinsightsinterviewsios
programming
newsiot
&
hardware
newslanguages
newsmalware
analysis
newsmicroservices
newsmobile
game
development
newsmobile
newsnetworking
newsnewspenetration
test
newspodcastsprogramming
newsrobotics
newssecurity
newsserver
side
web
development
newsservers
newssingle
board
component_6
newstutorialsvirtualization
newsweb
design
newsweb
development
newsmore

essential
linux
command
for
navigate
the
shell
effectively




be
explore
form
in
angular
–
type
benefit
and
difference




be
gain
practical
expertise
with
the
late
edition
of
architecture
with
technology_15





be
explore
the
strategy
behavioral
design
pattern_1
in
technology_16




be
give
material
angular
io
a
refresh
from
angular
–




pm
popular
on
packt
huballfeaturedall
time
popularmore
how
to
use
coding_keyword_8
connector_data_3
and
dictionary
in
unity
for
3d




pm
customize
elgg
theme




be
basic
of
jupyter
notebook
and
technology_17




be

way
to
connector_3
feature
selection
in
technology_17
for
requirement_11




be
technology_18
detecting
edge
line
and
shape




be
editor
pick
transformer
for
natural
technology_4
component_18
with
denis
rothman




be

essential
linux
command
for
navigate
the
shell
effectively




be
clean
cod
in
technology_17
with
mariano
anaya




be
popular
coding_keyword_9
how
to
use
coding_keyword_8
connector_data_3
and
dictionary
in
unity
for
3d




pm
customize
elgg
theme




be
basic
of
jupyter
notebook
and
technology_17




be
popular
categorytutorials6371news3891data
news2761web
development
news2259programming
news1770cloud
&
requirement_8
news1247insights1134artificial
intelligence
news1052cms
&
e
commerce
news842
about
ustechnology
news
analysis
and

from
packt
stay
up
to
date
with
what’s
important
in
engineering
today

u

protect
follow
u
author
become
a
contributor
to
the
hub
©
packt
publish
ltd
