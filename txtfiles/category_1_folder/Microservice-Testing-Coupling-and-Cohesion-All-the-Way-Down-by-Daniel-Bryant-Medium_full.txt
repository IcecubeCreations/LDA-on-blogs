pattern_1
test
couple
and
pattern_2
all
the
way
down
|
by
daniel
bryant
|
mediumget
unlimited
accessopen
in
apphomenotificationslistsstorieswritedaniel
bryantfollowmar

2018·9
min
readmicroservice
test
couple
and
pattern_2
all
the
way
down
the
last
couple
of
week
have
involve
my
train
co
conspirator
andrew
morgan
and
i
teaching
several
workshop
on
pattern_1
test
most
notably
at
o’reilly
sacon
ny
and
qcon
london
this
be
always
great
fun
—
we
enjoy
connector_1
our
knowledge
we
typically
a
bunch
and
we
also
connector_2
a
glimpse
into
many
of
the
attendee
approach
to
test
the
“best
practices”
in
test
pattern_1
project
be
still
very
much
an
quality_attribute_1
space
—
my
current
go
to
material
include
toby
clemson’s
excellent

work
alongside
cindy
sridharan’s
more
modern
take
on
“testing
pattern_3
the
sane
way”
and
my
own
attempt
too
—
but
i’m
start
to
see
some
current
challenge
and
potential
antipatterns
emerge
this
be
generally
a
quality_attribute_2
thing
a
the
formation
of
antipatterns
around
the
edge
of
the
practice
can
sometimes
indicate
the
overall
maturation
of
an
approach
here
be
my
still
crystallise
high
level
thought
on
the
subject
of
test
pattern_1
base
component_1
tl
drthink
about
couple
and
pattern_2
when
design
pattern_3
yeah
yeah
i

but
i
mean
seriously
think
about
this
and
even
do
some
upfront
design
watch
for
various
type
of
“monolith”
creep
into
the
design
and
of
the
component_2
—
there
be
more
than
one
monolith
avoid
over
reliance
on
“monolithic”
end
to
end
testinguse
contracts—
via
idls
grpc
and
avro
or
cdc
technology_1
pact
and
technology_2
requirement_1
contract
—
to
define
and
test
inter
component_3
integrationsisolate
intra
component_3
test
with
appropriate
use
of
mock
stub
and
virtualisation
simulationavoid
component_4
infra
over
couple
when
test
—
if
your
infrastructure
test
setup
look
too
complicate
for
a
local
test
then
it
probably
iscategorise
and
define
the
purpose
of
each
test
category
—
unit
requirement_2
compoent
e2e
etc
—
and
ensure
pattern_2
and
a
single
reason
to
connector_3
within
not
only
the
group
but
also
the
implementationarchitectural
couple
and
cohesioni’m
sure
you’ve
hear
it
all
before
—
maybe
in
college
maybe
from
a
book
or
perhaps
at
a
local
meetup
—
but
everyone
“knows”
that
in
the
general
requirement_3
you
should
strive
to
build
component_5
that
be
loosely
couple
and
highly
cohesive
i’m
not
go
to
talk
too
much
about
this
a
other
people
martin
fowler
robert
martin
and
simon
brown
and
many
others
have
be
talk
about
this
for
year
however
a
quick
reminder
of
the
core
concept
won’t
hurt
couple
the
degree
to
which
component_6
have
knowledge
of
other
component_7
think
well
define

inversion
of
control
etccohesion
the
degree
to
which
the
element
within
a
component_7
belong
together
think
single
responsibility
principle
and
single
reason
to
changei
talk
at
o’reilly
sacon
ny
about
how
these
property
play
into
every
stage
of
the
continuous
delivery
cycle
so
for
the
rest
of
this
i’m
go
to
take
a
a
give
that
we
all
agree
these
property
be
beneficial
for
create
a
quality_attribute_2
evolutionary
architecture
for
the
component_5
we
build
—
after
all
this
ability
to
rapidly
and
safely
quality_attribute_1
our
component_8
be
core
to
the
acceptance
of
the
pattern_1
architectural
style
a
the
current
“best
practice”
style
of
build
many
but
not
all
modern
component_2
where
i
think
it
connector_4
interest
be
this
“turtles
all
the
way
down”
mindset
of
loose
couple
and
high
pattern_2
can
be
apply
to
our
goal
practice
and
technology_1
—
particular
in
regard
to
test
test
couple
and
cohesionit’s
super
easy
to
create
a
quality_attribute_3
monolith
when
design
a
component_2
use
the
pattern_1
pattern_4
—
i

i’ve
do
it
once
—
but
it’s
also
easy
to
allow
the
monolith
to
sneak
in
elsewhere
my
friend
matthew
skelton
have
present
a
series
of
excellent
talk
on
the
type
of
“software
monoliths”
that
can
creep
into
a
project
component_1
monolithjoined
at
the
dbmonolithic
build
rebuild
everything
monolithic
release
couple
monolithic
think
standardisation
i’m
go
to
“stand
on
the
shoulder
of
giants”
and
suggest
that
a
sixth
type
of
monolith
be
the
“testing
monolith”
which
be
somewhat
similar
to
the
monolithic
build
and
release
type
matthew
define
to
be
honest
it’s
not
matthew’s
shoulder
i’m
stand
on
a
fellow
londoner
and
cd
guru
steve
smith
have
already
suggest
that
he
believe
“end
to
end
test
be
consider
harmful”
in
essence
what
steve
suggest
be
that
monolithically
spin
everything
up
in
order
to
verify
the
component_2
have
a
bunch
of
issue
not
least
to
say
the
“decomposition
fallacy”
and
the
“cheap
investment
fallacy”
i
believe
that
the
challenge
with
test
pattern_1
base
component_8
can
be
even
more
insidious
than
this
though
highly
couple
pattern_1
testingthe
ultimate
goal
of
many
all
pattern_1
base
component_8
be
the
independent
quality_attribute_4
of
each
component_3
when
do
correctly
this
enable
increase
pace
of
deployment
and
correspondently
an
increase
in
quality_attribute_5
of
the
evolution
of
the
component_2
however
many
of
u
have
to
start
somewhere
and
so
we
often
begin
with
gate
pattern_1
deployment
—
design
and
build
our
pattern_3
in
isolation
ideally
with
cross
functional
team
and
verify
all
of
our
component_9
together
in
a
stag
environment
before
release
to
production
this
isn’t
a
particularly
bad
pattern_4
but
it
doesn’t
provide
much
in
the
way
of
independent
pace
of
evolution
many
team
successfully
connector_5
this
pattern_4
and
then
try
to
move
towards
independent
deployment
the
only
snag
be
that
at
least
some
of
the
component_9
be
dependent
on
one
another
—
perhaps
through
an
pattern_5
component_10
connector_data_1
or
a
connector_data_2
connector_data_3
contract
if
team
forget
this
then
they
often
successfully
verify
everything
locally
during
test
but
the
component_9
and
the
component_1
can
fall
over
in
production
i
joke
about
this
and
the
role
i’ve
play
in
relation
to
this
a
a
“microservices
architect”
at
sacon
in
my
anecdotal
experience
developer
and
architect
have
limit
experience
in
technique
that
can
promote
the
loose
couple
and
isolation
of
test
across
domain
boundary
and
my
hypothesis
be
that
this
be
primarily
because
it
wasn’t
much
of
an
issue
with
a
monolith
—
or
if
it
be
it
be
relatively
easy
to
catch
and
fix
a
all
of
the
domain
be
bundle
into
one
artifact
for
test
and
quality_attribute_6
the
original
“legacy”
approach
to
quality_attribute_3
computing
such
a
technology_3
and
classical
technology_4
connector_2
around
this
challenge
by
embrace
definition
technology_5
idls
—
somewhat
ironically
connector_6
“omg”
idl
—
and
web
component_3
contract
—
wsdls
on
an
unrelated
topic
i’m
somewhat
of
a
history
geek
and
a
well
connector_7
say
within
this
be
that
“history
doesn’t
repeat
but
it
often
rhymes”
so
it
be
with
limit
innovation
on
my
part
when
i
say
that
the
exist
solution
of
idls
and
contract
be
exactly
the
approach
i
recommend
when
test
pattern_3
use
idls
grpc
for
inter
component_3
pattern_5
and
technology_6
for
connector_data_2
connector_data_3
definition
perhaps
for
technology_7
help
greatly
for
verification
of
across
component_3
boundary
for
more
loosely
couple
approach
to
connector_8
technology_8
and
technology_9
connector_data_2
connector_data_3
i
recommend
test
technology_10
such
a
component_11
drive
contract
technology_1
pact
and
technology_2
requirement_1
contract
one
final
warn
in
this
space
be
to
be
aware
of
couple
yourself
to
a
test
technology_11
or
infrastructure
configuration
most
of
our
a
developer
tester
and
architect
be
about
make
tradeoff
but
often
half
of
the
battle
be
spot
that
you
be
make
a
tradeoff
in
the
first
place
—
i
have
see
many
engineer
create
with
best
intention
hideously
complicate
and
highly
couple
bespeak
test
technology_11
this
start
from
the
technology_5
component_4
itself
—
in
my
technology_12
bias
world
i
have
see
people
seriously
abuse
the
awesome
technology_2
component_1
technology_11
by
pattern_6
on
more
and
more
bespeak
technology_11
element
and
scaffolding
in
the
name
of
easy
test
—
and
extend
into
the
infra
ops
world
—
for
example
require
the
local
installation
of
technology_13
technology_14
technology_15
technology_16
technology_17
the
internet
you
connector_2
the
point
to
be
able
to
initialise
the
test
i
have
see
many
engineer
create
with
best
intention
hideously
complicate
and
highly
couple
bespeak
test
technology_11
i’m
slightly
bias
in
this
space
have
previously
work
a
the
cto
at
spectolabs
but
i
often
reach
for
component_3
virtualisation
or
component_10
simulation
technology_1
to
minimise
test
couple
technology_1
hoverfly
mountebank
or
wiremock
allow
me
to
“virtualise”
dependent
component_9
via
run
automate
test
—
perhaps
drive
by
serenity
bdd
or
gatling
—
against
the
real
component_9
spin
up
in
a
production

environment
and
component_12
the
connector_9
i
can
then
replay
these
connector_9
in
a
variety
of
test
category
without
need
to
spin
up
the
complete
component_3
and
support
infrastructure
equally
valid
technology_1
in
this
space
include
mock
and
stub
but
watch
for
the
blur
or
poor
development
of
your
mental
component_13
of
the
connector_10
be
double
—
it’s
all
too
easy
to
encode
your
bias
and
misunderstanding
into
a
test
double
and
this
will
come
back
to
haunt
when
the
component_2
be
test
hit
the
reality
of
a
production
environment
low
pattern_2
pattern_1
testingcohesion
be
all
about
thing
belong
together
and
with
test
this
start
with
the
obvious
—
group
unit
test
together
group
requirement_2
test
together
etc
—
but
quickly
extend
to
much
more
when
you
think
about
the
“single
reason
to
change”
aspect
this
sound
obvious
but
if
you
be
refactoring
the
internals
of
a
single
pattern_1
then
this
probably
shouldn’t
impact
the
few
end
to
end
happy
path
requirement_4
face
test
that
you
and
your
team
have
create
if
you
be
swap
out
connector_data_4
connector_11
within
a
component_3
then
the
service’s
component_10
contract
test
probably
shouldn’t
need
to
be
connector_3
if
you
be
connector_3
scenario
connector_data_4
for
an
requirement_2
test
then
you
probably
shouldn’t
need
to
ensure
that
the
unit
test
still
work
correctly
you
connector_2
my
drift
but
i
frequently
bump
into
these
challenge
this
sound
obvious
but
if
you
be
refactoring
the
internals
of
a
single
pattern_1
then
this
probably
shouldn’t
impact
the
few
end
to
end
happy
path
requirement_4
face
test
that
you
and
your
team
have
create
my
current
hypothesis
in
this
space
be
that
if
engineer
spend
a
little
more
time
upfront
in
specify
clearly
what
need
to
be
test
and
what
the
goal
of
each
test
category
be
then
we
would
be
in
quality_attribute_2
shape
lisa
crispin
and
janet
gregory
have
do
excellent
work
in
this
space
with
their
book
“agile
testing”
and
“more
agile
testing”
too
often
i
believe
we
start
with
best
intention
with
test
pattern_3
but
quickly
migrate
to
the
approach
of
“all
the
test
test
all
the
things”
this
often
manifest
itself
either
a
the
“ice
cream
cone”
test
antipattern
or
the
heavy
top
and
bottom
test
“pyramid”
where
there
be
lot
of
unit
test
and
lot
of
end
to
end
test
but
not
much
in
the
way
of
requirement_2
or
component_7
test
we
could
connector_2
away
with
this
in
a
monolith
but
not
so
much
with
a
supposedly
loosely
couple
architecture
that
we
espouse
with
pattern_3
the
full
slide
deck
on
my
recent
sacon
talk
go
into
these
concept
in
a
bit
more
“continuous
delivery
pattern_4
for
contemporary
architecture”parting
thoughtsi’ll
close
this
by
state
that
these
observation
and
thought
be
largely
base
on
my
own
anecdotal
experience
but
i
be
fortunate
through
my
consult
conference
attend
and
teaching
activity
to
see
a
wide
ish
cross
section
of
the
requirement_5
a
the
pattern_1
architectural
pattern_4
be
quality_attribute_1
so
too
be
the
operational
and
test
pattern_4
and
it’s
up
to
all
of
u
to
connector_12
our

and
continually
chip
away
at
create
“best
practice”
late
in
the
year
i’m
plan
to
connector_13
a
series
of

on
the
challenge
and
quality_attribute_2
practice
of
pattern_1
test
but
i
have
quality_attribute_2
finish
my
book
first
“continuous
delivery
in
java”
i
hope
this
have
be
helpful
and
i
would
love
to
your
experience
and
challenge
of
test
pattern_3

1more
from
daniel
bryantfollowhead
of
devrel
@ambassadorlabs
news
podcast
@infoq
|
web




coder
component_4
engineer
technology_18
champion
technology_19
phd
|
requirement_1
k8s
apis
ipas
|
learner
teacherlove
podcast
or
audiobooks
on
the
go
with
our
component_14
try
knowablerecommended
from
mediumdevaraj
mahantesharamex
ship
calculatorabhinandan
shaanmy
2nd
project
at
masainick
youngaws
at
small
scalesasha
mathewsinlevel
up
coding3
and
a
half
way
to
component_15
configuration
for
pattern_3
in
netameed
jamouscpaas
and
dialogflow
requirement_6
in
actioncall
for
codeincall
for
digestanswer
the
connector_data_1
take
on
climate
connector_3
gain
protocolingain
protocolgiving
back
with
the
charity
technology_20
in
gainbrent
vatneinexpositioncoming
soon
beta
release
period
for
expo
sdkabouthelptermsprivacyget
the
appget
starteddaniel
bryant1
91k
followershead
of
devrel
@ambassadorlabs
news
podcast
@infoq
|
web




coder
component_4
engineer
technology_18
champion
technology_19
phd
|
requirement_1
k8s
apis
ipas
|
learner
teacherfollowmore
from
mediumhaitham
raikmain
concept
in
architecturegita
permatasari
sujatmikousing
test
drive
development
tdd
in
agile
developmentm
hosein
abbasidomain
drive
design
and
pattern_1
boundariesosher
technology_21
netananyineverything
full
stackdo
you
waterproof
your

helpstatuswritersblogcareersprivacytermsaboutknowable
