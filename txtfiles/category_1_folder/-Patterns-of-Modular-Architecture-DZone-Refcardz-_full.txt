pattern_1
of
modular
architecture
refcardz
over
million
developer
have
join
requirement_1
in
join
search
{{node
title}}
{{node
type}}
·
{{
technology_1
urlsource
name
}}
·
by
download
{{node
downloads}}
{{totalresults}}
search
connector_data_1
refcardz
trend
report
webinars
zone
|
agile
requirement_2
requirement_3
requirement_4
component_1
devops
requirement_5
iot
technology_2
pattern_2
open_source
requirement_6
quality_attribute_1
web
dev
{{announcement
body}}{{announcement
title}}
refcardz
pattern_1
of
modular
architecture
refcard
#166
pattern_1
of
modular
architecture
pattern_1
for
the
technology_2
component_2
cover
quality_attribute_2
pattern_1
to
help
developer
incorporate
modular
design
think
into
development
initiative
free
pdf
for
easy
reference
connector_1
by
kirk
knoernschild
developer
developer
component_3
of
content
►
about
the
quality_attribute_2
pattern_1
►
base
pattern_1
►
connector_2
pattern_1
►
quality_attribute_3
pattern_1
►
quality_attribute_4
pattern_1
►
utility
pattern_1
section
about
the
quality_attribute_2
pattern_1
technology_3
be
gain
traction
on
the
technology_2
component_2
though
quality_attribute_2
isn
t
a
concept
it
promise
to
connector_3
the
way
we
develop
component_4
you
ll
only
be
able
to
realize
the
benefit
of
quality_attribute_2
if
you
understand
how
to
design
more
modular
component_5
the
quality_attribute_2
pattern_1
lay
the
foundation
necessary
to
incorporate
modular
design
think
into
your
development
initiative
no
technology_3
be
necessary
to
use
these
pattern_1
and
you
already
have
many
of
the
technology_4
you
need
to
design
modular
this
refcard
provide
a
quick
reference
to
the
quality_attribute_2
pattern_1
discus
in
the
book
technology_2
component_4
architecture
quality_attribute_2
pattern_1
with
example
use
technology_5
the
quality_attribute_2
pattern_1
be
not
specific
to
the
technology_2
component_2
they
can
be
apply
on
any
component_2
by
treat
the
unit
of
release
and
deployment
a
the
each
pattern_1
include
a
diagram
except
for
base
pattern_1
description
and
implementation
guidance
base
pattern_1
fundamental
modular
design
concept
upon
which
several
other
pattern_1
exist
connector_2
pattern_1
use
to
help
you
manage
connector_2
between
quality_attribute_3
pattern_1
use
to
help
you
design
that
be
easy
to
use
quality_attribute_4
pattern_1
use
to
help
you
design
quality_attribute_5
that
you
can
extend
with
requirement_7
utility
pattern_1
use
a
technology_4
to
aid
modular
development
logical
vs
modular
designalmost
all
well
principle
and
pattern_1
that
aid
design
connector_4
logical
design
identify
the
of
a
relationship
between
and
the
component_5
package
connector_data_2
be
all
logical
design
issue
the
vast
majority
of
development
team
spend
their
time
deal
with
logical
design
issue
a
quality_attribute_5
logical
design
ea
quality_attribute_6
and
increase
quality_attribute_4
logical
design
be
one
piece
of
the
design
and
architecture
challenge
however
the
other
be
modular
design
which
focus
on
the
physical
component_6
and
the
relationship
between
them
identify
the
component_6
contain
your
logical
design
construct
and
manage
connector_2
between
the
unit
of
deployment
be
example
of
modular
design
without
modular
design
you
not
realize
the
benefit
you
expect
from
your
logical
design
the
quality_attribute_2
pattern_1
help
you
design
that
be
quality_attribute_7
quality_attribute_8
quality_attribute_9
and
quality_attribute_10
design
modular
today
in
anticipation
of
future
component_2
support
for
quality_attribute_2
break
large
component_7
into
a
quality_attribute_5
composite
of
collaborate
understand
where
to
place
your
architectural
focus
migrate
large
quality_attribute_11
monolithic
component_8
to
component_8
with
a
modular
architecture
the
two
facet
of
modularitythere
be
two
facet
of
quality_attribute_2
the
runtime
component_9
focus
on
how
to
manage
component_7
at
runtime
a
component_5
such
a
technology_5
be
require
to
take
advantage
of
the
runtime
component_9
the
development
component_9
deal
with
how
developer
create
modular
the
development
component_9
can
be
break
down
into
two
subcategories
the
programming
component_9
be
how
you
connector_5
with
a
technology_3
to
take
advantage
of
the
runtime
benefit
of
quality_attribute_2
the
design
paradigm
be
the
set
of
pattern_1
you
apply
to
design
great
a
technology_3
give
you
runtime
support
and
a
programming
component_9
for
quality_attribute_2
but
a
technology_3
win
t
help
you
design
great
the
pattern_1
in
this
refcard
connector_4
the
design
paradigm
and
help
you
design
modular
defineda
be
a
quality_attribute_12
quality_attribute_13
natively
quality_attribute_8
quality_attribute_14
stateless
unit
of
that
provide
a
concise
to
component_10
on
the
technology_2
component_2
a
be
a
jar
a
depict
in
the
diagram
the
pattern_1
in
this
refcard
help
you
design
modular
and
realize
the
benefit
of
quality_attribute_2
section
base
pattern_1
the
base
pattern_1
be
the
fundamental
element
upon
which
the
other
pattern_1
exist
they
establish
the
conscientious
think
component_11
that
go
into
design
component_7
with
a
modular
architecture
they
focus
on
a
the
unit
of
quality_attribute_15
connector_2
requirement_8
and
pattern_3
manage
relationshipsdesign
relationship
descriptiona
relationship
between
two
exist
when
a
within
one
at
least
a
single
within
another
in
other
word
if
connector_3
the
content
of
a
m2
impact
the
content
of
another
m1
we
can
say
that
m1
have
a
physical
connector_2
on
m2
excessive
connector_2
will
make
your
more
difficult
to
maintain
quality_attribute_15
and
test
implementation
guidance
avoid
with
excessive
incoming
and
outgoing
connector_2
with
many
incoming
connector_2
should
be
quality_attribute_16
that
be
they
should
connector_3
infrequently
use
connector_2
a
a
component_5
of
connector_6
and
balance
for
instance
enforce
relationship
between
pattern_4
use
quality_attribute_2
see
physical
pattern_4
reuseemphasize
quality_attribute_17
at
the
level
descriptionan
oft
cite
benefit
of
connector_data_3
orient
development
be
quality_attribute_15
unfortunately
connector_data_4
or
be
not
an
adequate
quality_attribute_15
construct
the
quality_attribute_15
release
equivalence
principle
explain
why
the
unit
of
quality_attribute_15
be
the
unit
of
release
be
a
unit
of
release
and
be
therefore
an
excellent
candidate
a
the
unit
of
quality_attribute_15
implementation
guidance
separate
horizontal
those
that
span
requirement_9
domain
from
vertical
those
specific
to
a
requirement_9
domain
granularity
and
weight
play
a
significant
role
in
quality_attribute_15
carefully
consider
each
fine
grain
with
external
configuration
come
with
a
high
likelihood
of
quality_attribute_15
but
beware
these
be
more
difficult
to
use
cohesive
modulesmodule
behavior
should
serve
a
singular
purpose
descriptioncohesion
be
a
measure
of
how
closely
relate
and
focus
the
various
responsibility
of
a
be
that
lack
pattern_3
be
more
difficult
to
maintain
implementation
guidance
pay
careful
attention
to
how
you
allocate
to
their
respective
connector_3
at
the
same
rate
and
typically
quality_attribute_15
together
belong
in
the
same
connector_3
at
different
rat
and
typically
not
quality_attribute_15
together
belong
in
separate
section
connector_2
pattern_1
the
connector_2
pattern_1
focus
on
manage
the
relationship
between
they
provide
guidance
on
manage
couple
that
increase
the
likelihood
of
quality_attribute_15
acyclic
relationshipsmodule
relationship
must
be
acyclic
descriptioncyclic
relationship
complicate
the
connector_data_2
apply
the
follow
rule
to
identify
cyclic
relationship
if
begin
with
a
you
can
follow
the
connector_2
relationship
between
the
set
of
that
a
be
directly
or
indirectly
dependent
upon
and
you
find
any
connector_2
on
a
within
that
set
then
a
cyclic
connector_2
exist
between
your
connector_data_2
you
should
avoid
cyclic
connector_2
implementation
guidance
escalation
break
cycle
by
move
the
cause
of
the
cyclic
connector_2
to
a
manage
at
a
high
level
demotion
break
cycle
by
move
the
cause
of
the
cyclic
connector_2
to
a
lower
level
pattern_5
break
a
cycle
by
define
an
abstraction
that
be
inject
into
the
dependent
this
implementation
resemble
the
observer
gof
pattern_1
levelize
modulesmodule
relationship
should
be
levelized
descriptionlevelization
be
similar
to
pattern_4
but
be
a
fine
grain
way
to
manage
acyclic
relationship
between
with
levelization
a
single
pattern_4
contain
multiple
level
to
levelize
do
the
follow
assign
external
level
dependent
only
on
level
be
assign
level
dependent
on
level
be
assign
level
dependent
on
level
n
be
assign
level
n
+
implementation
guidance
level
be
more
granular
than
the
pattern_4
in
your
component_5
use
level
to
manage
relationship
within
pattern_4
levelization
demand
relationship
be
acyclic
you
cannot
levelize
a
connector_data_2
with
cycle
a
strict
levelization
technology_6
where
be
dependent
only
on
the
level
directly
beneath
it
be
conceptually
ideal
but
pragmatically
difficult
physical
layersmodule
relationship
should
not
violate
the
conceptual
pattern_4
descriptionlayering
a
component_5
help
ease
quality_attribute_6
and
quality_attribute_18
of
the
component_4
common
pattern_4
include
presentation
i
e
component_12
domain
i
e
requirement_9
and
connector_data_5
connector_7
any
conceptually
pattern_4
component_5
can
be
break
down
into
that
correspond
to
these
conceptual
pattern_4
physical
pattern_4
help
increase
quality_attribute_17
because
each
pattern_4
be
a
quality_attribute_12
unit
implementation
guidance
begin
by
create
a
single
coarse
grain
for
each
pattern_4
enforce
the
pattern_4
use
levelize
build
break
out
each
pattern_4
into
more
cohesive
and
use
levelize
to
understand
and
manage
the
relationship
within
the
pattern_4
it
s
fine
if
within
a
pattern_4
have
relationship
between
them
these
will
be
at
different
level
container
independencemodules
should
be
independent
of
the
runtime
container
descriptionheavyweight
be
dependent
upon
a
specific
runtime
environment
and
be
difficult
to
quality_attribute_15
across
component_13
environmental
connector_2
also
negatively
affect
your
ability
to
test
independent
of
the
runtime
container
be
more
likely
quality_attribute_15
and
be
more
easily
maintain
and
quality_attribute_19
implementation
guidance
avoid
container
dependent
package
in
your
s
use
external
configuration
to
configure
a
so
that
it
can
operate
in
different
runtime
environment
use
connector_2
injection
to
abstract
container
connector_2
independent
deploymentmodules
should
be
independently
quality_attribute_12
unit
descriptionthe
le
outgoing
connector_2
a
have
the
easy
the
be
to
quality_attribute_15
a
with
no
outgoing
connector_2
be
independently
quality_attribute_12
and
can
be
quality_attribute_15
without
the
worry
of
identify
which
additional
might
be
necessary
lower
level
inherently
have
few
outgoing
connector_2
and
increase
the
opportunity
for
quality_attribute_15
implementation
guidance
not
all
can
be
independently
quality_attribute_12
some
connector_2
be
always
necessary
in
additional
to
reduce
outgoing
connector_2
container
connector_2
must
also
be
minimize
for
those
that
be
independently
quality_attribute_12
highly
cohesive
be
easy
to
make
independently
quality_attribute_12
unit
section
quality_attribute_3
pattern_1
we
want
that
other
developer
find
easy
to
connector_5
with
the
quality_attribute_3
pattern_1
help
design
that
be
easy
to
understand
and
use
publish
interfacemake
a
s
publish
well
descriptionmodules
should
pattern_6
implementation
detail
so
that
other
t
need
to
understand
the
implementation
to
use
the
a
s
publish
connector_8
the
capability
you
want
to
make
quality_attribute_20
to
other
developer
a
publish
consist
of
the
within
the
within
the
export
package
that
other
be
able
to
invoke
in
technology_7
technology_2
there
be
no
way
to
explicitly
state
which
package
a
export
so
it
s
difficult
to
enforce
a
publish
technology_3
such
a
technology_5
shine
in
this
situation
implementation
guidance
in
technology_7
technology_2
document
the
publish
you
expect
other
component_14
to
invoke
in
technology_7
technology_2
connector_9
the
publish
via
abstraction
and
discourage
other
developer
from
use
the
concrete
technology_3
such
a
technology_5
allow
you
to
export
package
and
allow
you
to
more
easily
enforce
a
publish
external
configurationmodules
should
be
externally
quality_attribute_21
descriptionmodule
initialization
typically
require
configure
the
to
it
environmental
component_13
externalize
the
configuration
decrease
component_13
connector_2
and
allow
you
to
use
the
across
a
wide
of
environment
external
configuration
increase
a
s
quality_attribute_15
but
make
it
more
difficult
to
use
because
developer
must
understand
how
to
configure
the
implementation
guidance
use
external
configuration
to
eliminate
a
s
environmental
connector_2
include
a
configuration
within
the
that
define
a
default
configuration
make
the
easy
to
use
remain
cognizant
of
thus
tradeoff
between
increase
quality_attribute_15
and
decrease
quality_attribute_3
in
other
word
maximize
quality_attribute_15
complicate
use
default
implementationprovide
with
a
default
implementation
descriptionto
maximize
quality_attribute_15
a
must
be
quality_attribute_5
enough
so
that
it
can
in
a
variety
of
different
operate
environment
yet
make
a
easy
to
use
lead
u
to
incorporate
more
requirement_7
into
a
so
developer
be
require
to
do
le
when
use
the
a
default
implementation
with
well
define
extension
point
help
connector_4
this
tension
implementation
guidance
when
define
a
default
implementation
quality_attribute_22
upon
the
abstract
element
of
a
see
abstract
or
separate
abstraction
include
a
default
configuration
in
the
but
make
the
externally
quality_attribute_21
a
well
always
create
a
test
to
test
the
default
implementation
façadecreate
a
façade
serve
a
a
coarse
grain
entry
point
to
another
finegrained
s
underlie
implementation
descriptionfine
grain
and
lightweight
be
inherently
more
quality_attribute_8
but
fine
grain
be
also
typically
dependent
on
several
other
a
façade
define
a
high
level
component_15
that
coordinate
the
work
of
a
set
of
fine
grain
the
façade
emphasize
ease
of
use
while
the
fine
grain
emphasize
quality_attribute_15
implementation
guidance
t
emphasize
quality_attribute_15
of
the
façade
use
it
to
wire
together
and
configure
multiple
fine
grain
place
component_13
and
environmental
connector_2
in
the
façade
use
the
façade
a
an
entry
point
for
your
requirement_5
test
section
quality_attribute_4
pattern_1
we
want
that
be
easy
to
extend
without
modify
the
exist
codebase
we
also
want
to
quality_attribute_23
this
requirement_7
without
affect
other
area
of
the
component_5
the
quality_attribute_4
pattern_1
help
u
achieve
this
goal
abstract
modulesdepend
upon
the
abstract
element
of
a
descriptiondepending
on
the
abstract
element
of
a
give
you
great
opportunity
to
extend
the
component_5
by
define
with
that
connector_10
or
extend
the
abstraction
any
component_14
of
the
also
have
the
ability
to
define
their
own
implementation
and
plug
them
into
the
implementation
guidance
use
an
implementation
factory
to
create
a
s
underlie
implementation
use
abstract
when
you
have
many
incoming
connector_2
and
you
want
the
quality_attribute_24
to
swap
out
underlie
implementation
strive
to
make
the
abstraction
within
a
a
quality_attribute_16
a
possible
that
be
avoid
connector_11
since
it
will
have
many
many
other
be
dependent
upon
it
implementation
factoryuse
factory
to
create
a
s
implementation
descriptionany
whose
quality_attribute_22
upon
the
abstract
element
of
another
should
avoid
reference
any
implementation
do
so
will
compromise
your
design
consider
the
follow
rule
if
a
quality_attribute_22
on
an
abstraction
must
be
connector_3
in
order
to
instantiate
a
implementation
of
the
abstraction
the
design
be
flaw
furthermore
if
a
must
be
connector_3
to
accommodate
the
instantiation
the
design
be
compromise
implementation
guidance
the
factory
must
be
separate
from
the
contain
the
instance
it
create
a
well
a
the
dependent
upon
the
abstraction
externalize
the
creation
of
a
s
implementation
to
a
configuration
consider
use
a
connector_2
injection
technology_3
technology_8
technology_9
blueprint
or
technology_9
declarative
component_16
these
will
serve
a
your
factory
to
wire
together
the
appropriate
implementation
at
runtime
separate
abstractionsplace
abstraction
and
the
that
connector_10
them
in
separate
descriptionseparating
abstraction
from
their
implementation
offer
the
greatest
quality_attribute_24
to
provide
implementation
that
completely
replace
exist
implementation
with
separate
abstraction
you
can
define
behavior
and
plug
it
into
your
component_5
without
affect
exist
component_5
separate
abstraction
can
be
use
to
develop
a
plug
in
architecture
a
a
general
guideline
apply
the
follow
rule
keep
the
abstraction
close
to
the
that
quality_attribute_22
upon
it
and
further
from
the
that
extend
or
connector_10
it
implementation
guidance
if
all
that
quality_attribute_22
upon
an
abstraction
live
in
a
single
then
place
the
and
the
abstraction
in
the
same
if
the
dependent
upon
an
abstraction
live
in
separate
place
the
abstraction
in
a
separate
from
the
that
quality_attribute_22
upon
it
separate
abstraction
lend
the
ultimately
quality_attribute_24
to
extend
your
component_5
but
also
increase
it
s
complexity
section
utility
pattern_1
the
utility
pattern_1
be
additional
technology_4
and
technique
that
aid
modular
development
they
help
you
enforce
your
modular
design
and
ensure
quality
colocate
exceptionsexceptions
should
be
close
to
the
or
that
throw
them
descriptionallocation
of
exception
to
have
implication
on
connector_2
put
exception
close
to
the
that
catch
them
create
a
connector_2
from
the
that
throw
the
exception
to
the
contain
the
exception
because
invoke
a
can
introduce
a
connector_2
exception
should
be
in
the
same
a
the
contain
the
that
throw
the
exception
implementation
guidance
throw
the
exception
on
the
or
abstract
you
re
bind
to
and
place
the
exception
in
the
same
a
the
or
abstract
if
abstraction
across
several
throw
the
same
exception
demote
the
exception
to
a
completely
separate
at
a
lower
level
levelize
buildexecute
the
build
in
accordance
with
levelization
descriptionenforcing
relationship
be
difficult
though
conceptually
you
believe
you
have
an
acyclic
connector_data_2
and
fully
comprehend
the
relationship
a
single
build
target
with
everything
on
the
classpath
allow
undesirable
cycle
and
connector_2
to
creep
in
a
levelized
build
help
you
enforce
your
connector_2
any
connector_2
that
violate
your
define
connector_data_2
will
connector_data_6
in
a
build
failure
implementation
guidance
avoid
a
full
classpath
build
where
all
be
build
use
a
single
compile
target
define
separate
build
target
for
in
different
level
level
can
be
build
with
only
external
level
at
high
level
include
only
the
from
lower
level
that
be
require
for
a
successful
build
define
connector_2
will
require
modify
the
build
for
that
this
be
not
necessarily
undesirable
test
moduleeach
should
have
a
correspond
test
descriptiontest
contain
all
of
the
test
for
the
in
a
specific
they
allow
you
to
test
a
s
underlie
implementation
a
test
contain
unit
test
that
test
a
s
a
well
a
requirement_5
test
that
test
the
entire
s
requirement_7
implementation
guidance
quality_attribute_22
on
abstract
make
it
easy
to
define
mock
and
stub
for
test
a
independently
for
large
test
suite
or
situation
where
requirement_6
be
paramount
separate
different
type
of
test
i
e
unit
test
requirement_5
test
requirement_6
test
etc
out
into
separate
test
ideally
you
ll
only
include
the
test
and
the
under
test
in
the
classpath
when
connector_12
the
test
pragmatically
some
require
other
dependent
this
refcard
connector_13
more
from
free
refcard
about
u
about
connector_14
feedback
career
sitemap
advertise
advertise
with
contribute
on
submission
guideline
mvb
component_17
become
a
contributor
visit
the
writer
zone
legal
term
of
component_16
privacy
requirement_10
u
park
office
drive
suite
durham
nc
support@dzone
technology_10
+1
s
be
friend
technology_10
be
powered
by
{{
parent
title
||
parent
title}}
{{
parent
tldr
}}
{{
parent
linkdescription
}}
{{
parent
urlsource
name
}}
by
core
·
{{
parent
articledate
|
date
mmm
dd
yyyy
}}
{{
parent
linkdate
|
date
mmm
dd
yyyy
}}
·
{{
parent
portal
name
}}
zone
tweet
{{
parent
pattern_7
}}
viewsclicks
edit
delete
{{
parent
islocked
enable
disable
}}
{{
parent
islimited
remove
limit
enable
moderate
}}
