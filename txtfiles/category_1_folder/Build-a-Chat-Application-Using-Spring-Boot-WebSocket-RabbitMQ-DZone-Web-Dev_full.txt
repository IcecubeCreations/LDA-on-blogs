build
a
chat
component_1
use
technology_1
+
technology_2
+
technology_3
web
dev
web
dev
zone
thanks
for
visit
today
edit
profile
manage
subscription
how
to
to
submission
guideline
sign
out
pattern_1
profile
an
manage
my
draft
over

million
developer
have
join

requirement_1
in
join
refcardz
trend
report
webinars
zone
|
agile
requirement_2
requirement_3
requirement_4
component_2
devops
requirement_5
iot
technology_4
pattern_2
open_source
requirement_6
quality_attribute_1
web
dev
web
dev
zone
build
a
chat
component_1
use
technology_1
+
technology_2
+
technology_3
build
a
chat
component_1
use
technology_1
+
technology_2
+
technology_3
how
to
create
a
web
base
chat
component_3
by
use
several
interest
technology_5
across
a
full
technology_6
component_1
by
vijay
maniyar
·
jan


·
web
dev
zone
·

connector_1
tweet

79k
pattern_1
join
the
and
connector_2
the
full
member
experience
join
for
free
in
a
previous

we
have
create
a
technology_1
+
technology_2
hello
world
example
in
this

we
will
be
create
a
real
time
multi
use
chat
component_1
in
a
previous

we
have
also
see
how
to
quality_attribute_2
technology_1
+
technology_3
component_4
to
pivotal
requirement_4
foundry
i
have
component_5
the
real
time
chat
component_1
that
we
be
create
to
pivotal
requirement_4
foundry
and
use
can
see
the
demo
at
javainuse
chat
component_1
javainuse
chat
component_1
demo
for
this

we
will
be
make
use
of
the
stomp
technology_7
stomp
be
a
quality_attribute_3
text
orient
pattern_3
technology_7
use
by
our
ui
component_6
browser
to
connector_3
to
requirement_7
connector_data_1
pattern_4
component_7
can
use
the
connector_4
or
subscribe
command
to
connector_4
or
subscribe
for
connector_data_2
along
with
a
destination
that
describe
what
the
connector_data_1
be
about
and
who
should
connector_5
it
it
define
a
technology_7
for
component_7
and
component_8
to
connector_6
with
pattern_3
semantics
it
do
not
define
any
implementation
detail
but
rather
connector_7
an
easy
to
connector_8
wire
technology_7
for
pattern_3
requirement_5
the
technology_7
be
broadly
similar
to
technology_8
and
work
over
technology_9
use
the
follow
command
connector_3
connector_4
subscribe
unsubscribe
begin
connector_9
abort
ack
nack
disconnect
when
use
technology_1
s
stomp
support
the
technology_1
technology_2
component_1
act
a
the
stomp
pattern_4
to
component_6
connector_data_2
be
connector_10
to
@controller
connector_data_1
handle
or
to
a
quality_attribute_3
in
memory
pattern_4
that
keep
track
of
subscription
and
pattern_5
connector_data_2
to
subscribe
component_9
you
can
also
configure
technology_1
to
work
with
a
dedicate
stomp
pattern_4
e
g
technology_3
technology_10
etc
for
the
actual
pattern_5
of
connector_data_1
in
that
requirement_8
technology_1
maintain
technology_9
connector_11
to
the
pattern_4
relay
connector_data_2
to
it
and
also
pass
connector_data_2
from
it
down
to
connector_12
technology_2
component_6

s
begin
create
the
technology_1
technology_2
component_1
the
project
will
be
pattern_6
a
follow
define
the
pom
technology_11
a
follow
the
technology_1
boot
starter
technology_2
and
technology_1
boot
starter
amqpdependency
technology_11
version=


encoding=
utf

project
xmlns=
technology_8
technology_12
technology_13

pom



xmlns
xsi=
technology_8
www
w3


xmlschema
instance
xsi
schemalocation=
technology_8
technology_12
technology_13

pom



technology_8
technology_12
technology_13

technology_14
technology_12



technology_14
modelversion



modelversion

technology_15
example


technology_1
boot
technology_2
chat

version



snapshot
version
packaging
jar
packaging
name
technology_1
boot
technology_2
chat
name
parent


springframework
boot


technology_1
boot
starter
parent

version



release
version
relativepath
pattern_7
parent
from
pattern_8
parent
property
project
build
sourceencoding
utf

project
build
sourceencoding
project
report
outputencoding
utf

project
report
outputencoding
technology_4
version


technology_4
version
property
connector_13
connector_13


springframework
boot


technology_1
boot
starter
technology_2

connector_13
connector_13


springframework
boot


technology_1
boot
starter
technology_16

connector_13
connector_13


springframework
boot


technology_1
boot
starter
pattern_9
technology_17

connector_13
connector_13
project
define
the
domain
websocketchatmessage
a
follow
package
technology_15
javainuse
domain
websocketchatmessage
{
private
type
private
content
private
sender
gettype
{
type
}
settype

type
{
this
type
=
type
}
getcontent
{
content
}
setcontent

content
{
this
content
=
content
}
getsender
{
sender
}
setsender

sender
{
this
sender
=
sender
}
}
define
the
technology_2
configuration

@configuration
tell
u
that
it
be
a
technology_1
configuration

@enablewebsocketmessagebroker
enable
technology_2
connector_data_1
handle
back
by
a
connector_data_1
pattern_4
here
we
be
use
stomp
a
a
connector_data_1
pattern_4
the
configuremessagebroker
enable
a
technology_3
connector_data_1
pattern_4
to
carry
the
connector_data_2
back
to
the
component_6
on
destination
prefix
with
topic
and
component_10
also
here
we
have
configure
that
all
connector_data_2
with
component_3
prefix
will
be
connector_10
to
@messagemapping
annotate
in
the
pattern_10

for
example
component_3
chat
sendmessage
be
the
that
the
websocketcontroller
sendmessage
be
connector_data_3
to
handle
package
technology_15
javainuse
config

springframework
component_11
factory
annotation
autowired

springframework
component_12

eventlistener

springframework
connector_data_1
simp
simpmessagesendingoperations

springframework
connector_data_1
simp
stomp
stompheaderaccessor

springframework
stereotype
component_13

springframework
web
connector_data_4
connector_data_1
sessionconnectedevent

springframework
web
connector_data_4
connector_data_1
sessiondisconnectevent
technology_15
javainuse
domain
websocketchatmessage
@component
websocketchateventlistener
{
@autowired
private
simpmessagesendingoperations
messagingtemplate
@eventlistener
handlewebsocketconnectlistener
sessionconnectedevent

{
component_14
out

connector_5
a
web
connector_data_4
connector_11
}
@eventlistener
handlewebsocketdisconnectlistener
sessiondisconnectevent

{
stompheaderaccessor
headeraccessor
=
stompheaderaccessor
wrap

getmessage
username
=

headeraccessor
getsessionattributes
connector_2
username
if
username
=

{
websocketchatmessage
chatmessage
=
websocketchatmessage
chatmessage
settype
leave
chatmessage
setsender
username
messagingtemplate
convertandsend
topic

chatmessage
}
}
}
define
the
pattern_10

previously
we
have
configure
the
technology_2
such
that
all
connector_data_2
come
from
the
component_6
with
prefix
component_3
will
be
connector_10
to
the
appropriate
connector_data_1
handle
annotate
with
@messagemapping
for
example
a
connector_data_1
with
destination
component_3
chat
newuser
will
be
connector_10
to
the
newuser

and
a
connector_data_1
with
destination
component_3
chat
sendmessage
will
be
connector_10
to
the
sendmessage

package
technology_15
javainuse
pattern_10

springframework
connector_data_1
pattern_11
annotation
messagemapping

springframework
connector_data_1
pattern_11
annotation
connector_data_5

springframework
connector_data_1
pattern_11
annotation
sendto

springframework
connector_data_1
simp
simpmessageheaderaccessor

springframework
stereotype
pattern_10
technology_15
javainuse
domain
websocketchatmessage
@controller
websocketchatcontroller
{
@messagemapping
chat
sendmessage
@sendto
topic
javainuse
websocketchatmessage
sendmessage
@payload
websocketchatmessage
websocketchatmessage
{
websocketchatmessage
}
@messagemapping
chat
newuser
@sendto
topic
javainuse
websocketchatmessage
newuser
@payload
websocketchatmessage
websocketchatmessage
simpmessageheaderaccessor
headeraccessor
{
headeraccessor
getsessionattributes
put
username
websocketchatmessage
getsender
websocketchatmessage
}
}
finally
define
the
technology_1
with
the
@springbootapplication
annotation
package
technology_15
javainuse

springframework
boot
springapplication

springframework
boot
autoconfigure
springbootapplication
@springbootapplication
springbootchatapplication
{


args
{
springapplication
run
springbootchatapplication

args
}
}
define
the
index
technology_18

here
we
have
define
the
ui
for
our
chat
component_1
also
it
make
use
of
the
sockjs
and
stomp
technology_19
the
technology_18
contain
the
component_9
for
display
the
chat
connector_data_1
it
include
the
sockjs
and
stomp
technology_20
technology_19
sockjs
be
a
browser
technology_20
technology_19
that
provide
a
technology_2

connector_data_6
sockjs
give
you
a
coherent
cross
browser
technology_20
component_15
which
create
a
low
quality_attribute_4
full
duplex
cross
domain
connector_14
pattern_12
between
the
browser
and
the
web
component_16
stomp
j
be
the
stomp
component_6
for
technology_20
doctype
technology_18
technology_18
head
meta
name=
viewport
content=
width=device
width
initial
scale=1

minimum
scale=1

title
javainuse
chat
component_1
|
javainuse
title
connector_15
rel=
stylesheet
href=
cs
style
cs
connector_15
href=
netdna
bootstrapcdn
technology_15
bootstrap



cs
bootstrap
min
cs
rel=
stylesheet
id=
bootstrap
cs
script
src=
netdna
bootstrapcdn
technology_15
bootstrap



j
bootstrap
min
j
script
head
body
div
id=
welcome
component_17
div
class=
welcome
component_17
container
h1
class=
title
welcome
to
join
the
chat
group
enter
your
name
h1
form
id=
welcomeform
name=
welcomeform
div
class=
form
group
input
type=
text
id=
name
placeholder=
name
class=
form
control
div
div
class=
form
group

type=
submit
onclass=
accent
username
submit

s
begin

div
form
div
div
div
id=
dialogue
component_17
class=
hide
div
class=
dialogue
container
div
class=
dialogue

technology_21
javainuse
chat
component_1
technology_21
div
ul
id=
messagelist
ul
form
id=
dialogueform
name=
dialogueform
nameform=
dialogueform
div
class=
form
group
div
class=
input
group
clearfix
input
type=
text
id=
chatmessage
placeholder=
enter
a
connector_data_1
autocomplete=
off
class=
form
control

type=
submit
class=
glyphicon
glyphicon
connector_16
alt
connector_4

div
div
form
div
div
script
src=
technology_8
cdnjs
cloudflare
technology_15
technology_22
libs
sockjs
component_6



sockjs
min
j
script
script
src=
technology_8
cdnjs
cloudflare
technology_15
technology_22
libs
stomp
j



stomp
min
j
script
script
src=
j
script
j
script
body
technology_18
define
the
technology_20

the
stompclient
subscribe
take
a
pattern_13
which
be
connector_17
whenever
a
connector_data_1
arrive
on
the
subscribe
topic
the
connector_3
make
use
of
the
sockjs
and
stomp
component_6
to
establish
a
connector_11
to
the
to
the
websocketapp
that
we
configure
in
technology_1
component_1
the
component_6
subscribe
to
the
topic
javainuse
destination
use
strict
document
queryselector
#welcomeform
addeventlistener
submit
connector_3
true
document
queryselector
#dialogueform
addeventlistener
submit
sendmessage
true
var
stompclient
=

var
name
=

connector_3

{
name
=
document
queryselector
#name
requirement_9
trim
if
name
{
document
queryselector
#welcome
component_17
classlist

hide
document
queryselector
#dialogue
component_17
classlist
remove
hide
var
connector_data_4
=
sockjs
websocketapp
stompclient
=
stomp
over
connector_data_4
stompclient
connector_3
{}
connectionsuccess
}

preventdefault
}
connectionsuccess
{
stompclient
subscribe
topic
javainuse
onmessagereceived
stompclient
connector_4
component_3
chat
newuser
{}
technology_23
stringify
{
sender
name
type
newuser
}
}
sendmessage

{
var
messagecontent
=
document
queryselector
#chatmessage
requirement_9
trim
if
messagecontent
&&
stompclient
{
var
chatmessage
=
{
sender
name
content
document
queryselector
#chatmessage
requirement_9
type
chat
}
stompclient
connector_4
component_3
chat
sendmessage
{}
technology_24
stringify
chatmessage
document
queryselector
#chatmessage
requirement_9
=
}

preventdefault
}
onmessagereceived
connector_data_5
{
var
connector_data_1
=
technology_23
requirement_10
connector_data_5
body
var
messageelement
=
document
createelement
li
if
connector_data_1
type
===
newuser
{
messageelement
classlist


connector_data_7
connector_data_1
content
=
connector_data_1
sender
+
have
join
the
chat
}
else
if
connector_data_1
type
===
leave
{
messageelement
classlist


connector_data_7
connector_data_1
content
=
connector_data_1
sender
+
have
leave
the
chat
}
else
{
messageelement
classlist

connector_data_1
connector_data_7
var
element
=
document
createelement
i
var
text
=
document
createtextnode
connector_data_1
sender

element
appendchild
text
messageelement
appendchild
element
var
usernameelement
=
document
createelement
span
var
usernametext
=
document
createtextnode
connector_data_1
sender
usernameelement
appendchild
usernametext
messageelement
appendchild
usernameelement
}
var
textelement
=
document
createelement
p
var
messagetext
=
document
createtextnode
connector_data_1
content
textelement
appendchild
messagetext
messageelement
appendchild
textelement
document
queryselector
#messagelist
appendchild
messageelement
document
queryselector
#messagelist
scrolltop
=
document
queryselector
#messagelist
scrollheight
}
define
the
cs
{
technology_25
component_18
size
border
component_18
moz
component_18
size
border
component_18
component_18
size
border
component_18
}
technology_18
body
{
height
100%
overflow
hide
}
body
{
margin

pad

font
weight

font
family
helvetica
neue
helvetica
arial
sans
serif
font
size
1rem
line
height


color
#333
background
color
#f4f4f4
height
100%
}
clearfix
after
{
display
block
content
clear
both
}
hide
{
display
none
}
input
{
pad
leave
10px
outline
none
}
h1
technology_21
h3
h4
h5
h6
{
margin
top
20px
margin
bottom
20px
}
h1
{
font
size

7em
}
a
{
color
#128ff2
}
{
component_18
pattern_14
none
border
1px
solid
quality_attribute_5
font
size
14px
outline
none
line
height
100%
white
space
nowrap
vertical
align
middle
pad

6rem
1rem
border
radius
2px
transition
all

2
ease
in
out
cursor
pointer
min
height
38px
}

default
{
background
color
#e8e8e8
color
#333
component_18
pattern_14

2px
2px

rgba





}

primary
{
background
color
#128ff2
component_18
pattern_14

2px
2px

rgba





color
#fff
}

accent
{
background
color
#ff4743
component_18
pattern_14

2px
2px

rgba





color
#fff
}
#welcome
component_17
{
text
align
center
}
welcome
component_17
container
{
background
color
grey
width
100%
max
width
500px
display
inline
block
margin
top
42px
vertical
align
middle
position
relative
pad
35px
55px
35px
min
height
250px
position
absolute
top
50%
leave

right

margin

auto
margin
top
160px
}
#dialogue
component_17
{
position
relative
height
100%
}
dialogue
container
{
background
color
green
margin
10px

max
width
700px
margin
leave
auto
margin
right
auto
component_18
pattern_14

1px
11px
rgba





margin
top
30px
height
calc
100%
60px
max
height
600px
position
relative
}
#dialogue
component_17
ul
{
connector_data_8
style
type
none
background
color
#fff
margin

overflow
auto
overflow
y
scroll
pad

20px
0px
20px
height
calc
100%
150px
}
#dialogue
component_17
#dialogueform
{
pad
20px
}
#dialogue
component_17
ul
li
{
line
height

5rem
pad
10px
20px
margin

border
bottom
1px
solid
#f4f4f4
}
#dialogue
component_17
ul
li
p
{
margin

}
#dialogue
component_17

connector_data_7
{
width
100%
text
align
center
clear
both
}
#dialogue
component_17

connector_data_7
p
{
color
#777
font
size
14px
word
wrap
break
word
}
#dialogue
component_17
connector_data_1
connector_data_7
{
pad
leave
68px
position
relative
}
#dialogue
component_17
connector_data_1
connector_data_7
i
{
position
absolute
width
42px
height
42px
overflow
hide
leave
10px
display
inline
block
vertical
align
middle
font
size
18px
line
height
42px
color
#fff
text
align
center
border
radius
50%
font
style
normal
text
transform
uppercase
}
#dialogue
component_17
connector_data_1
connector_data_7
span
{
color
#333
font
weight

}
#dialogue
component_17
connector_data_1
connector_data_7
p
{
color
#43464b
}
#dialogueform
input
group
input
{
border

pad
10px
background
whitesmoke
float
leave
width
calc
100%
85px
}
#dialogueform
input
group
{
float
leave
width
80px
height
38px
margin
leave
5px
}
dialogue

{
text
align
center
pad
15px
border
bottom
1px
solid
#ececec
}
dialogue

technology_21
{
margin

font
weight

}
@media
screen
and
max
width
730px
{
dialogue
container
{
margin
leave
10px
margin
right
10px
margin
top
10px
}
}
we
be
do
with
the
require
technology_4

now

s
start
technology_3
a
we
have
explain
in
detail
in
the
connector_18
start
with
technology_3
and
perform
the
step
to
start
the
technology_3
we
will
need
to
perform
one
additional
step
with
technology_3
install
the
stomp
plugin
for
technology_3
so
that
it
can
work
with
stomp
connector_data_2
next
start
the
technology_1
chat
component_1
by
run
it
a
a
technology_4
component_1
navigate
to
the
follow
url
technology_8
localhost

enter
the
username
we
be
then
show
the
chat
window
if
we
go
to
the
technology_3
console
we
can
see
it
have
create
a
component_10
technology_1
technology_26
technology_1
component_1
technology_2
build
game
component_19
opinion
express
by
contributor
be
their
own
popular
on
technology_4
why
core
to
core
quality_attribute_4
matter
autowiring
in
technology_1
how
to
generate
fake
test
connector_data_7

step
to
strengthen
component_15
quality_attribute_1

web
dev
partner
resource
x
about
u
about
connector_4
feedback
career
sitemap
advertise
advertise
with
contribute
on
submission
guideline
mvb
component_20
become
a
contributor
visit
the
writer
zone
legal
term
of
component_21
privacy
requirement_11
u

park
office
drive
suite

durham
nc

support@dzone
technology_15
+1




s
be
friend

technology_15
be
powered
by
