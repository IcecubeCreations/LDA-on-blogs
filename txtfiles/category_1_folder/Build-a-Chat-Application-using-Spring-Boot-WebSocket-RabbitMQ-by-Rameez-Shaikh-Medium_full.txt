build
a
chat
component_1
use
technology_1
+
technology_2
+
technology_3
|
by
rameez
shaikh
|
mediumget
unlimited
accessopen
in
apphomenotificationslistsstorieswriterameez
shaikhfollowfeb

2019·9
min
readbuild
a
chat
component_1
use
technology_1
+
technology_2
+
rabbitmqin
a
previous
coding_keyword_1
we
have
create
a
technology_1
+
technology_2
hello
world
example
in
this
coding_keyword_1
we
will
be
create
a
real
time
multi
use
chat
component_1
in
a
previous
coding_keyword_1
we
have
also
see
how
to
quality_attribute_1
technology_1
+
technology_3
component_2
to
pivotal
requirement_1
foundry
i
have
component_3
the
real
time
chat
component_1
that
we
be
create
to
pivotal
requirement_1
foundry
and
use
can
see
the
demo
at
javainuse
chat
component_1
javainuse
chat
component_1
demofor
this
we
will
be
make
use
of
stomp
technology_4
stomp
be
a
quality_attribute_2
text
orient
pattern_1
technology_4
use
by
our
ui
component_4
browser
to
connector_1
to
requirement_2
connector_data_1
pattern_2
component_4
can
use
the
connector_2
or
subscribe
command
to
connector_2
or
subscribe
for
connector_data_2
along
with
a
“destination”
coding_keyword_2
that
describe
what
the
connector_data_1
be
about
and
who
should
connector_3
it
it
define
a
technology_4
for
component_5
and
component_6
to
connector_4
with
pattern_1
semantics
it
do
not
define
any
implementation
detail
but
rather
connector_5
an
easy
to
connector_6
wire
technology_4
for
pattern_1
requirement_3
the
technology_4
be
broadly
similar
to
technology_5
and
work
over
technology_6
use
the
follow
command
connectsendsubscribeunsubscribebegincommitabortacknackdisconnectwhen
use
spring’s
stomp
support
the
technology_1
technology_2
component_1
act
a
the
stomp
pattern_2
to
component_4
connector_data_2
be
connector_7
to
@controller
connector_data_1
handle
or
to
a
quality_attribute_2
in
memory
pattern_2
that
keep
track
of
subscription
and
pattern_3
connector_data_2
to
subscribe
component_7
you
can
also
configure
technology_1
to
work
with
a
dedicate
stomp
pattern_2
e
g
technology_3
technology_7
etc
for
the
actual
pattern_3
of
connector_data_1
in
that
requirement_4
technology_1
maintain
technology_6
connector_8
to
the
pattern_2
relay
connector_data_2
to
it
and
also
pass
connector_data_2
from
it
down
to
connector_9
technology_2
component_4
videohttps
youtu
be
oroalf28m7elets
begin
create
the
technology_1
technology_2
component_1
the
project
will
be
a
follow
define
the
pom
technology_8
a
follow
the
technology_1
boot
starter
technology_2
and
technology_1
boot
starter
technology_9
connector_10
technology_8
version=


encoding=
utf

project
xmlns=
technology_5
technology_10
technology_11

pom



xmlns
xsi=
technology_5
www
w3


xmlschema
instance
xsi
schemalocation=
technology_5
technology_10
technology_11

pom



technology_5
technology_10
technology_11

technology_12
technology_10



technology_12
modelversion



modelversion
coding_keyword_3
technology_13
example
coding_keyword_3
coding_keyword_4
technology_1
boot
technology_2
chat
coding_keyword_4
version



snapshot
version
packaging
jar
packaging
name
technology_1
boot
technology_2
chat
name
parent
coding_keyword_3

springframework
boot
coding_keyword_3
coding_keyword_4
technology_1
boot
starter
parent
coding_keyword_4
version



release
version
relativepath
pattern_4
parent
from
pattern_5
parent
property
project
build
sourceencoding
utf

project
build
sourceencoding
project
report
outputencoding
utf

project
report
outputencoding
technology_14
version


technology_14
version
property
connector_10
connector_10
coding_keyword_3

springframework
boot
coding_keyword_3
coding_keyword_4
technology_1
boot
starter
technology_2
coding_keyword_4
connector_10
connector_10
coding_keyword_3

springframework
boot
coding_keyword_3
coding_keyword_4
technology_1
boot
starter
technology_9
coding_keyword_4
connector_10
connector_10
coding_keyword_3

springframework
boot
coding_keyword_3
coding_keyword_4
technology_1
boot
starter
pattern_6
technology_15
coding_keyword_4
connector_10
connector_10
project
define
the
domain
websocketchatmessage
a
follow
package
technology_13
javainuse
domain
coding_keyword_5
websocketchatmessage
{
private
coding_keyword_6
type
private
coding_keyword_6
content
private
coding_keyword_6
sender
coding_keyword_5
coding_keyword_6
gettype
{
coding_keyword_7
type
}
coding_keyword_5
coding_keyword_8
settype
coding_keyword_6
type
{
this
type
=
type
}
coding_keyword_5
coding_keyword_6
getcontent
{
coding_keyword_7
content
}
coding_keyword_5
coding_keyword_8
setcontent
coding_keyword_6
content
{
this
content
=
content
}
coding_keyword_5
coding_keyword_6
getsender
{
coding_keyword_7
sender
}
coding_keyword_5
coding_keyword_8
setsender
coding_keyword_6
sender
{
this
sender
=
sender
}}define
the
technology_2
configuration

@configuration
tell
that
it
be
a
technology_1
configuration

@enablewebsocketmessagebroker
enable
technology_2
connector_data_1
handle
back
by
a
connector_data_1
pattern_2
here
we
be
use
stomp
a
a
mesage
pattern_2
the
configuremessagebroker
enable
a
technology_3
connector_data_1
pattern_2
to
carry
the
connector_data_2
back
to
the
component_4
on
destination
prefix
with
“
topic”
and
“
queue”
also
here
we
have
configure
that
all
connector_data_2
with
“
app”
prefix
will
be
connector_7
to
@messagemapping
annotate
in
pattern_7

for
example
“
component_8
chat
sendmessage”
be
the
that
the
websocketcontroller
sendmessage
be
connector_data_3
to
handle
package
technology_13
javainuse
config
coding_keyword_9

springframework
component_9
annotation
configuration
coding_keyword_9

springframework
connector_data_1
simp
config
messagebrokerregistry
coding_keyword_9

springframework
web
connector_data_4
config
annotation
*
@configuration@enablewebsocketmessagebrokerpublic
websocketchatconfig
connector_11
websocketmessagebrokerconfigurer
{
@override
coding_keyword_5
coding_keyword_8
registerstompendpoints
stompendpointregistry
registry
{
registry
addendpoint
websocketapp
withsockjs
}
@override
coding_keyword_5
coding_keyword_8
configuremessagebroker
messagebrokerregistry
registry
{
registry
setapplicationdestinationprefixes
component_8
registry
enablestompbrokerrelay
topic
setrelayhost
localhost
setrelayport

setclientlogin
guest
setclientpasscode
guest
}}define
the
websocker
component_10

this
listen
to
such
a
a
component_7
join
the
chat
or
an
component_7
leave
the
chat
package
technology_13
javainuse
config
coding_keyword_9

springframework
component_11
factory
annotation
autowired
coding_keyword_9

springframework
component_9

eventlistener
coding_keyword_9

springframework
connector_data_1
simp
simpmessagesendingoperations
coding_keyword_9

springframework
connector_data_1
simp
stomp
stompheaderaccessor
coding_keyword_9

springframework
stereotype
component_12
coding_keyword_9

springframework
web
connector_data_4
connector_data_1
sessionconnectedevent
coding_keyword_9

springframework
web
connector_data_4
connector_data_1
sessiondisconnectevent
coding_keyword_9
technology_13
javainuse
domain
websocketchatmessage
@componentpublic
websocketchateventlistener
{
@autowired
private
simpmessagesendingoperations
messagingtemplate
@eventlistener
coding_keyword_5
coding_keyword_8
handlewebsocketconnectlistener
sessionconnectedevent

{
component_13
out
coding_keyword_10
connector_3
a
web
connector_data_4
connector_8
}
@eventlistener
coding_keyword_5
coding_keyword_8
handlewebsocketdisconnectlistener
sessiondisconnectevent

{
stompheaderaccessor
headeraccessor
=
stompheaderaccessor
wrap

getmessage
coding_keyword_6
username
=
coding_keyword_6
headeraccessor
getsessionattributes
connector_12
username
if
username
=
coding_keyword_11
{
websocketchatmessage
chatmessage
=
websocketchatmessage
chatmessage
settype
leave
chatmessage
setsender
username
messagingtemplate
convertandsend
topic
coding_keyword_5
chatmessage
}
}}define
the
pattern_7

previously
we
have
configure
the
technology_2
such
that
all
connector_data_2
come
from
the
component_4
with
prefix
“
app”
will
be
connector_7
to
the
appropriate
connector_data_1
handle
annotate
with
@messagemapping
for
example
a
connector_data_1
with
destination
component_8
chat
newuser
will
be
connector_7
to
the
newuser

and
a
connector_data_1
with
destination
component_8
chat
sendmessage
will
be
connector_7
to
the
sendmessage

package
technology_13
javainuse
pattern_7
coding_keyword_9

springframework
connector_data_1
pattern_8
annotation
messagemapping
coding_keyword_9

springframework
connector_data_1
pattern_8
annotation
connector_data_5
coding_keyword_9

springframework
connector_data_1
pattern_8
annotation
sendto
coding_keyword_9

springframework
connector_data_1
simp
simpmessageheaderaccessor
coding_keyword_9

springframework
stereotype
pattern_7
coding_keyword_9
technology_13
javainuse
domain
websocketchatmessage
@controllerpublic
websocketchatcontroller
{
@messagemapping
chat
sendmessage
@sendto
topic
javainuse
coding_keyword_5
websocketchatmessage
sendmessage
@payload
websocketchatmessage
websocketchatmessage
{
coding_keyword_7
websocketchatmessage
}
@messagemapping
chat
newuser
@sendto
topic
javainuse
coding_keyword_5
websocketchatmessage
newuser
@payload
websocketchatmessage
websocketchatmessage
simpmessageheaderaccessor
headeraccessor
{
headeraccessor
getsessionattributes
put
username
websocketchatmessage
getsender
coding_keyword_7
websocketchatmessage
}}finally
define
the
technology_1
with
@springbootapplication
annotationpackage
technology_13
javainuse
coding_keyword_9

springframework
boot
springapplication
coding_keyword_9

springframework
boot
autoconfigure
springbootapplication
@springbootapplicationpublic
springbootchatapplication
{
coding_keyword_5
coding_keyword_12
coding_keyword_8
coding_keyword_13
coding_keyword_6
args
{
springapplication
run
springbootchatapplication

args
}}define
the
index
technology_16
here
we
have
define
the
ui
for
our
chat
component_1
also
it
make
use
of
the
sockjs
and
stomp
technology_17
the
technology_16
contain
the
component_7
for
display
the
chat
connector_data_1
it
include
sockjs
and
stomp
technology_18
technology_17
sockjs
be
a
browser
technology_18
technology_17
that
provide
a
technology_2

connector_data_6
sockjs
give
you
a
coherent
cross
browser
technology_18
component_14
which
create
a
low
quality_attribute_3
full
duplex
cross
domain
connector_13
pattern_9
between
the
browser
and
the
web
component_15
stomp
technology_19
be
the
stomp
component_4
for
technology_18
doctype
technology_16
technology_16
head
meta
name=
viewport
content=
width=device
width
initial
scale=1

minimum
scale=1

title
javainuse
chat
component_1
|
javainuse
title
connector_14
rel=
stylesheet
href=
cs
style
cs
connector_14
href=
netdna
bootstrapcdn
technology_13
bootstrap



cs
bootstrap
min
cs
rel=
stylesheet
id=
bootstrap
cs
script
src=
netdna
bootstrapcdn
technology_13
bootstrap



j
bootstrap
min
j
script
head
body
div
id=
welcome
component_16
div
class=
welcome
component_16
container
h1
class=
title
welcome
to
join
the
chat
group
enter
your
name
h1
form
id=
welcomeform
name=
welcomeform
div
class=
form
group
input
type=
text
id=
name
placeholder=
name
class=
form
control
div
div
class=
form
group

type=
submit
onclass=
accent
username
submit
coding_keyword_14
begin

div
form
div
div
div
id=
dialogue
component_16
class=
hide
div
class=
dialogue
container
div
class=
dialogue
coding_keyword_2
technology_20
javainuse
chat
component_1
technology_20
div
ul
id=
messagelist
ul
form
id=
dialogueform
name=
dialogueform
nameform=
dialogueform
div
class=
form
group
div
class=
input
group
clearfix
input
type=
text
id=
chatmessage
placeholder=
enter
a
connector_data_1
autocomplete=
off
class=
form
control

type=
submit
class=
glyphicon
glyphicon
connector_15
alt
connector_2

div
div
form
div
div
script
src=
technology_5
cdnjs
cloudflare
technology_13
technology_21
libs
sockjs
component_4



sockjs
min
j
script
script
src=
technology_5
cdnjs
cloudflare
technology_13
technology_21
libs
stomp
j



stomp
min
j
script
script
src=
j
script
j
script
body
technology_16
define
the
technology_18

the
stompclient
subscribe
take
a
pattern_10
which
be
connector_16
whenever
a
connector_data_1
arrive
on
the
subscribe
topic
the
connector_1
make
use
of
the
sockjs
and
stomp
component_4
to
establish
connector_8
to
the
to
the
websocketapp
that
we
configure
in
technology_1
component_1
the
component_4
subscribe
to
topic
javainuse
destination
use
strict
document
queryselector
#welcomeform
addeventlistener
submit
connector_1
true
document
queryselector
#dialogueform
addeventlistener
submit
sendmessage
true
var
stompclient
=
coding_keyword_11
var
name
=
coding_keyword_11

connector_1

{
name
=
document
queryselector
#name
requirement_5
trim
if
name
{
document
queryselector
#welcome
component_16
classlist

hide
document
queryselector
#dialogue
component_16
classlist
remove
hide
var
connector_data_4
=
sockjs
websocketapp
stompclient
=
stomp
over
connector_data_4
stompclient
connector_1
{}
connectionsuccess
}

preventdefault
}function
connectionsuccess
{
stompclient
subscribe
topic
javainuse
onmessagereceived
stompclient
connector_2
component_8
chat
newuser
{}
technology_22
stringify
{
sender
name
type
newuser
}
}function
sendmessage

{
var
messagecontent
=
document
queryselector
#chatmessage
requirement_5
trim
if
messagecontent
&&
stompclient
{
var
chatmessage
=
{
sender
name
content
document
queryselector
#chatmessage
requirement_5
type
chat
}
stompclient
connector_2
component_8
chat
sendmessage
{}
technology_23
stringify
chatmessage
document
queryselector
#chatmessage
requirement_5
=
}

preventdefault
}function
onmessagereceived
connector_data_5
{
var
connector_data_1
=
technology_22
requirement_6
connector_data_5
body
var
messageelement
=
document
createelement
li
if
connector_data_1
type
===
newuser
{
messageelement
classlist


connector_data_7
connector_data_1
content
=
connector_data_1
sender
+
have
join
the
chat
}
else
if
connector_data_1
type
===
leave
{
messageelement
classlist


connector_data_7
connector_data_1
content
=
connector_data_1
sender
+
have
leave
the
chat
}
else
{
messageelement
classlist

connector_data_1
connector_data_7
var
element
=
document
createelement
i
var
text
=
document
createtextnode
connector_data_1
sender

element
appendchild
text
messageelement
appendchild
element
var
usernameelement
=
document
createelement
span
var
usernametext
=
document
createtextnode
connector_data_1
sender
usernameelement
appendchild
usernametext
messageelement
appendchild
usernameelement
}
var
textelement
=
document
createelement
p
var
messagetext
=
document
createtextnode
connector_data_1
content
textelement
appendchild
messagetext
messageelement
appendchild
textelement
document
queryselector
#messagelist
appendchild
messageelement
document
queryselector
#messagelist
scrolltop
=
document
queryselector
#messagelist
scrollheight
}define
the
cs
{
technology_24
component_17
size
border
component_17
moz
component_17
size
border
component_17
component_17
size
border
component_17
}html
body
{
height
100%
overflow
hide
}body
{
margin

pad

font
weight

font
family
helvetica
neue
helvetica
arial
sans
serif
font
size
1rem
line
height


color
#333
background
color
#f4f4f4
height
100%
}
clearfix
after
{
display
block
content
clear
both
}
hide
{
display
none
}input
{
pad
leave
10px
outline
none
}h1
technology_20
h3
h4
h5
h6
{
margin
top
20px
margin
bottom
20px
}h1
{
font
size

7em
}a
{
color
#128ff2
}button
{
component_17
pattern_11
none
border
1px
solid
quality_attribute_4
font
size
14px
outline
none
line
height
100%
white
space
nowrap
vertical
align
middle
pad

6rem
1rem
border
radius
2px
transition
all

2
ease
in
out
cursor
pointer
min
height
38px
}button
default
{
background
color
#e8e8e8
color
#333
component_17
pattern_11

2px
2px

rgba





}button
primary
{
background
color
#128ff2
component_17
pattern_11

2px
2px

rgba





color
#fff
}}button
accent
{
background
color
#ff4743
component_17
pattern_11

2px
2px

rgba





color
#fff
}#welcome
component_16
{
text
align
center
}
welcome
component_16
container
{
background
color
grey
width
100%
max
width
500px
display
inline
block
margin
top
42px
vertical
align
middle
position
relative
pad
35px
55px
35px
min
height
250px
position
absolute
top
50%
leave

right

margin

auto
margin
top
160px
}#dialogue
component_16
{
position
relative
height
100%
}
dialogue
container
{
background
color
green
margin
10px

max
width
700px
margin
leave
auto
margin
right
auto
component_17
pattern_11

1px
11px
rgba





margin
top
30px
height
calc
100%
60px
max
height
600px
position
relative
}#dialogue
component_16
ul
{
connector_data_8
style
type
none
background
color
#fff
margin

overflow
auto
overflow
y
scroll
pad

20px
0px
20px
height
calc
100%
150px
}#dialogue
component_16
#dialogueform
{
pad
20px
}#dialogue
component_16
ul
li
{
line
height

5rem
pad
10px
20px
margin

border
bottom
1px
solid
#f4f4f4
}#dialogue
component_16
ul
li
p
{
margin

}#dialogue
component_16

connector_data_7
{
width
100%
text
align
center
clear
both
}#dialogue
component_16

connector_data_7
p
{
color
#777
font
size
14px
word
wrap
break
word
}#dialogue
component_16
connector_data_1
connector_data_7
{
pad
leave
68px
position
relative
}#dialogue
component_16
connector_data_1
connector_data_7
i
{
position
absolute
width
42px
height
42px
overflow
hide
leave
10px
display
inline
block
vertical
align
middle
font
size
18px
line
height
42px
color
#fff
text
align
center
border
radius
50%
font
style
normal
text
transform
uppercase
}#dialogue
component_16
connector_data_1
connector_data_7
span
{
color
#333
font
weight

}#dialogue
component_16
connector_data_1
connector_data_7
p
{
color
#43464b
}#dialogueform
input
group
input
{
border

pad
10px
background
whitesmoke
float
leave
width
calc
100%
85px
}#dialogueform
input
group
{
float
leave
width
80px
height
38px
margin
leave
5px
}
dialogue
coding_keyword_2
{
text
align
center
pad
15px
border
bottom
1px
solid
#ececec
}
dialogue
coding_keyword_2
technology_20
{
margin

font
weight

}@media
screen
and
max
width
730px
{
dialogue
container
{
margin
leave
10px
margin
right
10px
margin
top
10px
}}we
be
do
with
the
require
technology_14

now
coding_keyword_14
start
technology_3
a
we
have
explain
in
detail
in
the
connector_17
start
with
technology_3
perform
the
step
to
start
the
technology_3
we
will
need
to
perform
one
additional
step
with
technology_3
—
install
stomp
plugin
for
technology_3
so
that
it
can
work
with
stomp
messagesnext
start
the
technology_1
chat
component_1
by
run
it
a
a
technology_14
component_1
hit
the
url
a
follow
technology_5
localhost
8080enter
the
usernamewe
be
then
show
the
chat
window
if
we
connector_12
the
rabbitmqconsole
we
can
see
it
have
create
a
component_18

2more
from
rameez
shaikhfollowhttps
www
javainuse
comlove
podcast
or
audiobooks
on
the
go
with
our
component_8
try
knowablerecommended
from
medium【公式】ブレヒロ
【official】bfh
devinbravefrontierheroes104th
title
matchjohn
kinsellahow
agile
connector_5
bullshit
and
the
culture
of
feudal
managementjose
scaramazzainundisclosedcollectorsthe
roadmapsveratumbuild
tengine
on
freebsdángel
barrera
sánchezmitigate
technology_25
hub
rate
limit
for
freeeduardo
baitelloinfaun
publicationusing
different
kubectl
version
with
multiple
technology_26
clusterschrister
enforsincodexwriting
a
minecraft
screenshot
viewer
in
pythonlitigation
attorneycontract
law
in
utahabouthelptermsprivacyget
the
appget
startedrameez
shaikh335
followershttps
www
javainuse
comfollowmore
from
mediumnakul
shukladevelop
pattern_12
apis
with
openapi
spec
and
use
custom
generator
via
templateshantsyinitnextbuilding
micronaut
component_2
with
micronaut
mongo
reativenisal
jayathilakarest
be
pattern_13
or
pattern_14
how
technology_2
work
lakshay
ghaispring
requirement_1
gateway
pattern_15
with
auth0helpstatuswritersblogcareersprivacytermsaboutknowable
