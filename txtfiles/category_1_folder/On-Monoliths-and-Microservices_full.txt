on
monolith
and
microservicesnavigationjobskein
gleicht
dem
anderen
schau
dich
in
unserer
jobbörse
um
und
finde
deinen
traumjob
jobsuchefinde
deinen
passenden
bei
ottojobtickererhalte
passende
jobvorschlägeprofilbereichleg
dir
ein
profil
an
und
profitiere
von
allen
vorteilenwir
sind
ottoerfahre
mehr
über
otto
al
arbeitgeber
be
un
ausmacht
und
wie
wir
ticken
visionwonach
wir
alle
strebenverantwortungwas
un
alle
vereintbenefitswovon
wir
alle
profitierenonboardingwomit
wir
alle
startenkulturwas
un
alle
ausmachtkarrierewegewie
wir
un
gemeinsam
weiterentwickelnnew
workwie
wir
arbeitena
people
requirement_1
be
wir
dir
bietendeine
möglichkeitendie
möglichkeiten
bei
otto
die
zukunft
zu
gestalt
sind
grenzenlos
entdecke
die
verschiedenen
einstiegsmöglichkeiten
die
wir
dir
bieten
einstiegsbereicheunsere
berufsfelderschüler*innennach
der
schulestudierendeim
studiumberufseinstiegnach
dem
ersten
abschlussberufserfahrenemit
mehreren
jahren
erfahrungtechnologiewir
lieben
technologien
und
setzen
methoden
technology_1
und
infrastruktur
ein
die
zu
un
passen
otto
tech
gibt
dir
einen
eindruck
zu
unseren
arbeitsweisen
technologien
und
menschen
von
otto
tech
hubverschaffe
dir
einen
überblick
über
alle
tech
thementech
bloglies
dich
in
unsere
themenopen
component_1
projekteentdecke
offene
technologienarbeitsweisenfinde
heraus
wie
wir
arbeitenteamlerne
unsere
team
kennenrund
ums
bewerbenin
unserem
bewerbungsprozess
steht
der
mensch
im
mittelpunkt
daher
möchten
wir
dich
mit
allen
informationen
rund
um
deine
bewerbung
bei
un
versorgen
bewerbungstippserfahre
hier
alles
rund
um
deine
bewerbung
bei
ottokontakterreiche
immer
die
richtigenhilfe
und
supportfinde
hier
jede
antwort
auf
all
deine
fragencampusverschaffe
dir
einen
überblickstandortefinde
otto
in
deiner
stadtservicesnutze
die
feature
auf
otto
jobsjobnews
&
eventsbei
otto
ist
immer
etwas
los
unsere
jobnews
&
verschaffen
dir
einen
überblick
darüber
be
bei
otto
passiert
und
welche
du
besuchen
kannst
jobnewsinformiere
dich
über
neuigkeitentech
bloglies
dich
in
unsere
technologieeventsnimm
an
spannenden
teilazubi
blogdie
ausbildung
hautnah
erleben

finde
be
du
suchst
informationenjobs
profilin
deinem
persönlichen
profilbereich
kannst
du
den
status
deiner
bewerbung
einsehen
unvollständige
bewerbungen
zwischenspeichern
und
aktuelle
news
und
einsehen
einloggenregistrieren30
2015on
monolith
and
microservicesarchitekturdevelopment
what
be
the
about
when
we
begin
the
development
of
our
online
shop
otto
de
we
choose
a
quality_attribute_1
vertical
style
architecture
at
an
early
stage
of
the
component_2
our
experience
with
our
previous
component_3
show
u
that
a
monolithic
architecture
do
not
satisfy
the
constantly
emerge
requirement
grow
volume
of
connector_data_1
increasing
load
and
the
need
to
quality_attribute_2
the
organization
all
of
these
force
u
to
rethink
our
approach
therefore
this
will
describe
the
solution
that
we
choose
and
explain
the
reason
behind
our
choice
monolithsin
the
begin
of
any
development
project
lie
the
formation
of
the
development
team
the
team
clarify
such
question
a
the
choice
of
the
programming
technology_2
and
the
suitable
technology_1
when
talk
about
component_4
component_5
the
subject
of
this

some
combination
of
technology_3
and
technology_4
technology_1
technology_5
on
technology_6
or
similar
technology_1
be
the
common
choice
for
the
team
the
development
start
and
a
a
connector_data_2
a
single
component_6
be
create
at
the
same
time
a
macro
architecture
become
implicitly
chosen
in
the
component_2
without
be
challenge
by
anyone
it
disadvantage
come
slowly
to
the
surface
during
further
development
it
give
rise
to
a
heavyweight
micro
architecturethe
quality_attribute_3
be
limit
to
load
balancingthe
quality_attribute_4
of
the
component_3
often
suffer
in
the
requirement_2
of
particularly
big
applicationszero
downtime
deployment
become
rather
complicate
especially
for
stateful
applicationsdevelopment
with
multiple
team
be
inefficient
and
require
a
lot
of
coordination

to
name
a
few
the
big
monolithof

no
development
start
a
a
“big
monolith”
in
the
begin
the
component_6
be
rather
technology_7
easily
extendable
and
understandable
–
the
architecture
be
able
to
connector_1
the
problem
that
the
team
have
have
up
to
this
point
over
the
of
the
next
month
more
and
more
be
connector_2
pattern_1
be
define
abstraction
be
find

component_7
and
technology_1
be
introduce
in
order
to
manage
the
ever
grow
complexity
even
in
the
requirement_2
of
a
middle
size
component_6
for
example
a
technology_3
component_6
with
more
that


loc
the
monolithic
architecture
slowly
become
rather
unpleasant
that
especially
apply
to
component_5
that
have
high
demand
for
quality_attribute_3
the
technology_7
fresh
development
project
turn
into
the
next
component_8
component_3
that
the
next
generation
of
developer
will
curse
about
divide
and
conquerthe
question
be
how
can
this
kind
of
development
be
avoid
and
how
can
we
preserve
the
quality_attribute_5
part
of
small
component_5
inside
the
big
component_3
in
short
how
can
we
achieve
a
quality_attribute_6
architecture
that
will
after
the
year
still
allow
for
quality_attribute_7
development
in
development
there
be
a
lot
of
concept
around
connector_data_3
the




component_9
technology_8
technology_1
and
etc
all
of
these
concept
connector_3
one
single
purpose
help
the
developer
to
quality_attribute_5
understand
their
own
component_6
the
component_10
have
no
need
for
–
we
do
so
a
all
of
u
developer
have
internalize
these
concept
a
question
come
to
mind
why
should
these
concept
stay
limit
to
one
component_6
what
prevent
u
from
dissect
an
component_6
into
a
component_3
of
several
loosely
couple
component_2
essentially
there
be
three
important
thing
to
keep
in
mind
conway’s
law
the
development
start
with
a
team
and
in
the
begin
the
component_6
be
very
understandable
at
first
you
have
a
“need”
for
one
component_6
initial
cost
spin
up
and
operate
a
component_6
only
appear
to
be
an
easy
connector_data_4
in
reality
you
need
to
set
up
and
organize
a
vcs
pattern_2
build

a
build
pipeline
a
deployment
component_2
hardware
and
vms
requirement_3
pattern_3
technology_9
and
etc
all
of
these
concern
be
often
accompany
by
certain
organizational
hurdle
complexity
in

big
quality_attribute_1
component_11
be
clearly
more
complex
to
operate
than
a
small
load
balancer
cluster
if
we
thing
slide
we
will
generally
not
end
up
with
a
component_3
consist
of
small
technology_7
component_6
but
with
a
big
clunky
monolith
and
the
big
problem
reveal
themselves
when
it
be
already
too
late
normally
it
be
initially
rather
clear
if
a
particular
component_6
have
to
be
scaleable
and
if
a
rather
large
base
be
underway
it
be
then
the
requirement_2
that
when
you
come
around
the
above
mention
obstacle
you
either
have
to
solve
them
or
live
forever
with
the
consequence
at
otto
for
example
it
do
pay
off
to
establish
four
cross
functional
team
very
early
in
the
component_2
and
therefore
to
prevent
the
development
from
belong
to
one
team
a
a
consequence
four
component_5
originate
instead
of
one
a
we
already
have
to
operate
a
big
component_3
in
the
past
the
complexity
of
seem
a
solvable
topic
for
u
in
the
end
there
be
little
difference
in
operate

instance
of
a
monolith
or
a
similar
number
of
small
component_3
initial
cost
of
spin
up
the
component_12
can
eventually
be
overcome
through
standardization
and
automation
since
we
be
not
refer
to
requirement_4
component_13
you
indeed
have
to
do
some
groundwork
at
least
once
in
order
to
set
up
this
automation
but
then
you
can
benefit
from
all
this
work
for
a
long
time
in
the
future
–
a
cost
that
pay
off
scalabilityso
how
can
we
design
a
component_3
make
out
of
small
technology_7
component_5
instead
of
a
monolith
first
let’s
remind
ourselves
in
which
dimension
component_5
can
be
quality_attribute_2
vertical
decompositionthe
vertical
decomposition
be
such
a
natural
approach
that
it
can
be
easily
overlook
instead
of
packaging
all
of
the
feature
into
one
single
component_6
we
disassemble
the
component_6
into
several
component_5
that
be
a
independent
a
possible
of
each
other
from
the
very
start
vertical
decompositionthe
component_3
can
be
cut
accord
to
requirement_5
sub
domain
for
example
for
otto
de
we
have
divide
the
online
shop
into

different
vertical
backoffice
technology_10
order
and
so
on
each
one
of
these
“verticals”
belong
to
one
single
team
and
it
have
it
own
frontend
a
well
a
backend
and
connector_data_1
storage
connector_4
between
the
vertical
be
not
allow
in
the
rare
occasion
where
we
still
want
to
connector_3
some

we
do
so
by
create
an
open_source
project
vertical
be
therefore
self
contain
component_11
sc
a
they
be
refer
to
by
stefan
tilkov
in
his
presentation
about
quality_attribute_6
architecture“
quality_attribute_1
computinga
vertical
can
still
be
a
relatively
big
component_6
so
one
might
want
to
divide
it
even
further
preferably
by
split
it
into
more
vertical
or
by
disassemble
it
into
more
component_14
through
quality_attribute_1
computing
where
the
component_14
run
in
their
own
component_15
and
connector_5
with
each
other
via
for
example
rest
quality_attribute_1
computingin
do
so
the
component_6
be
not
only
split
vertically
but
also
in
a
horizontal
way
in
such
an
architecture
connector_data_5
be
connector_6
by
component_13
and
the
component_2
be
then
quality_attribute_1
over
multiple
component_3
the
sub
connector_data_2
be
then
summarize
into
one
connector_7
and
connector_8
back
to
the
requestor
the
individual
component_7
do
not
connector_3
a
common
component_16
schema
because
that
would
mean
tight
couple
between
the
component_6
connector_9
of
the
connector_data_1
schema
would
then
lead
to
a
situation
where
a
component_13
can
no
long
be
quality_attribute_8
independently
from
the
other
component_13
shardinga
third
alternative
for
the
quality_attribute_9
of
a
component_3
can
be
appropriate
when
very
big
amount
of
connector_data_1
be
be
component_2
or
when
a
decentralized
component_6
be
be
operate
for
example
when
a
component_13
need
to
be
offer
worldwide
shardinghowever
a
we
be
not
utilize
the
concept
of
sharding
at
this
moment
i
be
not
go
to
go
into
any
further
detail
at
this
point
load
balancingas
soon
a
the
single
component_4
cannot
component_2
the
load
anymore
load
balance
come
into
play
an
component_6
be
then
clone
n
time
and
the
load
be
divide
via
a
load
balancer
load
balancingdifferent
instance
of
load
balance
component_5
often
time
connector_3
the
same
component_16
this
can
therefore
lead
to
a
bottleneck
which
can
be
avoid
by
have
a
quality_attribute_5
quality_attribute_3
strategy
in
place
this
be
one
of
the
reason
why
technology_11
db
have
establish
themselves
in
the
world
in
the
recent
year
since
they
can
often
deal
with
quality_attribute_3
in
quality_attribute_5
way
than
relational
db
maximum
scalabilityall
of
the
mention
solution
can
be
combine
with
each
other
in
order
to
reach
almost
any
level
of
quality_attribute_3
within
the
component_3
sharding
vertical
decomposition
quality_attribute_1
computing
and
load
balancingof

this
can
only
be
mean
to
an
end
when
you
do
not
have
the
correspond
requirement
the
end
connector_data_2
can
become
a
little
bit
too
complex
thankfully
one
can
take
small
step
in
order
to
bring
themselves
towards
their
target
architecture
instead
of
start
with
an
enormous
plan
from
the
very
start
a
an
example
at
otto
de
we
start
with
four
vertical
plus
load
balance
over
the
last
three
year
more
vertical
come
into
be
meanwhile
some
grow
to
be
too
big
and
bulky
so
currently
we
be
in
the
component_2
of
introduce
pattern_4
and
extend
the
architecture
of
individual
vertical
in
order
to
establish
quality_attribute_1
computing
microservicesthe
term
pattern_5
have
grow
very
popular
recently
especially
when
talk
about
the
component_3
that
be
be
slice
into
fine
more
granular
domain
the
term
pattern_5
have
grow
very
popular
recently
pattern_4
be
an
architectural
style
where
a
component_3
be
be
slice
along
requirement_5
domain
into
fine
grain
independent
part
in
this
component_17
a
pattern_5
can
be
a
small
vertical
a
well
a
a
component_13
in
a
quality_attribute_1
computing
architecture
the
difference
to
traditional
approach
lie
in
the
size
of
the
component_6
a
pattern_5
be
suppose
to
connector_10
a
few
feature
from
a
particular
domain
and
should
be
completely
understandable
by
a
single
developer
a
micro
component_13
be
typically
small
enough
such
that
multiple
pattern_4
could
be
run
on
a
single
component_4
we
have
have
quality_attribute_5
experience
with
“fat
jars”
which
can
be
easily
connector_11
via
technology_3
–jar

and
if
need
can
start
an
embed
technology_12
or
a
similar
component_4
in
order
to
simplify
the
deployment
and
the
of
the
different
pattern_4
on
a
single
component_4
each
component_4
run
in
it
own
technology_13
container
rest
and
pattern_4
be
a
quality_attribute_5
combination
and
they
be
suitable
for
build
large
component_3
a
pattern_5
could
be
responsible
for
a
pattern_6
resource
the
problem
of
component_13
discovery
can
be
solve
at
least
partially
via
hypermedia

type
be
helpful
in
situation
that
involve
versioning
of
the

and
the
independence
of
component_13
deployment
altogether
pattern_4
have
a
number
of
quality_attribute_5
property
some
of
which
be
the
development
in
a
pattern_5
architecture
be
fun
every
few
week
or
month
you
connector_12
to
work
on
a
development
project
instead
of
work
on
an
oversized
old
archaic
systemdue
to
their
small
size
pattern_4
require
le
boiler
plate
and
no
heavyweight
frameworksthey
can
be
quality_attribute_8
completely
independently
from
one
another
the
establishment
of
continuous
delivery
or
continuous
deployment
become
much
easierthe
architecture
be
able
to
support
the
development
component_2
in
several
independent
teamsit
be
possible
to
choose
the
most
appropriate
technology_2
for
each
component_13
respectively
one
can
try
out
a
technology_2
or
a
technology_1
without
introduce
major
risk
into
the
project
however
it
be
equally
important
not
to
connector_12
carry
away
by
this
newly
emerge
freedomsince
they
be
so
small
they
can
be
replace
with
reasonable
cost
by
a
development
projectthe
quality_attribute_3
of
the
component_3
be
considerably
quality_attribute_5
than
in
a
monolithic
architecture
since
every
component_13
can
be
quality_attribute_2
independently
from
the
othersmicroservices
comply
with
the
principle
of
agile
development
a
feature
that
do
not
fully
satisfy
the
requirement_6
cannot
only
be
create
in
a
fast
way
but
it
can
be
also
destroy
a
quickly
macro
und
micro
architecturethe
term
architecture
traditionally
imply
the
architecture
of
a
single
component_18
in
vertical
or
pattern_5
style
architecture
the
definition
“architecture
be
the
decision
that
you
wish
you
could
connector_12
right
early
in
a
project”
be
hardly
relevant
anymore
what
part
be
hard
to
connector_9
in
pattern_5
style
architecture
the
answer
be
not
the
inner
component_14
of
an
component_6
anymore
the
difficult
thing
to
connector_9
be
some
of
the
decision
that
have
be
make
about
the
pattern_4
for
example
the
way
they
be
quality_attribute_10
into
the
component_3
or
the
connector_13
technology_14
between
the
involve
component_5
and
etc
thus
we
at
otto
de
be
draw
a
difference
between
a
micro
architecture
of
an
component_6
and
the
macro
architecture
of
the
component_3
the
micro
architecture
be
all
about
the
internals
of
a
vertical
or
a
pattern_5
and
be
leave
completely
in
the
hand
of
it
respective
team
however
it
be
worth
it
to
draw
some
guideline
for
the
macro
architecture
which
can
be
define
by
the
connector_14
between
the
component_13
at
otto
de
they
be
the
follow
vertical
decomposition
the
component_3
be
cut
into
multiple
vertical
that
belong
entirely
to
a
specific
team
connector_13
between
the
vertical
have
to
be
do
in
the
background
not
during
the
connector_15
of
particular
component_19
connector_data_6
restful
architecture
the
connector_13
and
requirement_7
between
the
different
component_7
take
place
exclusively
via
rest
connector_3
nothing
architecture
there
be
no
connector_4
mutable
state
through
which
the
component_7
exchange
connector_data_7
or
connector_3
connector_data_1
there
be
no
technology_15
component_20
no
central
connector_data_1
storage
a
well
a
no
connector_4

however
multiple
instance
of
a
component_13
connector_3
a
component_16
connector_data_1
governance
for
each
connector_data_1
point
there
be
a
single
component_3
in
charge
a
single
“truth”
other
component_11
have
connector_16
only
connector_17
to
the
connector_data_1
technology_16
via
a
pattern_6
technology_17
and
copy
the
require
connector_data_1
to
their
own
storageour
architecture
have
begin
go
through
a
similar
development
cycle
a
lot
of
other
architecture
out
there
at
the
moment
we
be
standardize
the
manner
in
which
the
pattern_4
will
be
use
at
otto
integrationso
far
i
have
elaborate
a
lot
on
the
extent
to
which
a
component_3
can
be
divide
however
the
component_19
be
ultimately
at
the
heart
of
all
our
development
and
we
want
our
to
be
consistent
feel
all
of
a
piece
therefore
the
question
become
in
which
way
can
we
quality_attribute_10
a
quality_attribute_1
component_3
so
that
the
requirement_6
do
not
realize
the
quality_attribute_1
nature
of
our
architecture
hyperlinksthe
easy
kind
of
web
frontend
requirement_7
of
component_7
be
the
use
of
hyperlink
mono01services
be
responsible
for
different
component_21
and
the
navigation
take
place
via
the
connector_18
between
these
component_21
ajaxthe
use
of
technology_18
be
also
strikingly
obvious
for
the
purpose
of
reload
part
of
the
via
technology_19
and
quality_attribute_10
them
on
a
particular
component_21
bildajax
be
a
suitable
technology_20
for
le
important
or
not
visible
area
of
the

which
allow
u
to
assemble
component_21
from
the
different
component_13
the
connector_19
between
the
involve
component_7
be
quite
small
they
mostly
need
to
keep
an
agreement
between
each
other
on
the
use
url
and

type
asset
serverof

the
different
component_21
of
the
component_3
have
to
display
all
the
image
in
a
consistent
way
in
addition
the
quality_attribute_1
component_7
need
to
agree
on
their
respective
technology_19
technology_8
and
their
version

“assets”
cs
technology_19
and
image
be
therefore
connector_20
via
a
central
asset
component_4
in
our
component_3
the
deployment
and
the
version
requirement_8
of
these
connector_4
resource
in
a
vertically
slice
component_3
be
a
whole
different
topic
which
could
become
it
own
separate

without
go
into
too
much
detail
the
fact
that
the
deployment
of
component_7
need
to
be
independent
while
their
asset
need
to
be
connector_4
create
certain
challenge
of
it
own
edge
side
includesone
of
le

to
quality_attribute_10
component_14
of
the
that
come
from
different
component_7
be
connector_21
component_4
or
edge
side
include
ssi
or
esi
it
do
not
matter
if
we
be
deal
with
technology_21
squid
technology_22
or
technology_23
–
the
major
web
component_4
or
reverse
pattern_7
support
these
include
the
technique
be
easy
a
component_13
insert
an
include
statement
with
a
url
in
the
connector_7
and
the
url
be
then
resolve
by
the
web
component_4
or
reverse
pattern_7
the
pattern_7
follow
the
url
connector_22
a
connector_7
and
insert
the
body
of
the
connector_7
into
the
component_21
instead
of
the
include
in
our
shop
for
example
every
component_21
include
the
navigation
from
the
search
&
navigation
san
component_13
in
the
follow
way
technology_24
esi
include
src=“
san
“
technology_24
the
reverse
pattern_7
in
our
requirement_2
technology_21
par
the
component_21
and
resolve
the
url
of
the
include
statement
on
that
component_21
san
then
supply
the
technology_24
fragment
the
technology_21
pattern_7
replace
the
include
within
the
technology_24
fragment
and
connector_23
the
component_21
to
the
component_19
technology_24
technology_24
in
this
manner
the
component_21
be
assemble
from
the
fragment
of
different
component_7
in
a
way
that
be
completely
invisible
to
the
userdata
replicationthe
above
mention
technique
prepare
u
for
the
frontend
requirement_7
in
order
for
component_7
to
successfully
fulfill
their
requirement
some
further
problem
need
to
be
solve
component_7
need
common
connector_data_1
while
they
must
not
connector_3
a
component_16
between
each
other
in
our
e
commerce
shop
for
example
several
component_7
need
to
component_2
technology_10
connector_data_1
in
a
particular
way
a
solution
be
the
pattern_8
of
connector_data_1
all
component_13
that
for
example
need
technology_10
connector_data_1
regularly
ask
the
responsible
verticalproductfor
the
necessary
connector_data_1
such
that
any
connector_24
in
connector_data_1
can
be
quickly
detected
we
be
also
not
use
any
connector_data_8
component_22
that
“push”
connector_data_1
to
their
component_23
instead
component_7
“poll”
an
atom
fee
whenever
they
need
connector_data_1
connector_data_9
and
be
able
to
component_2
them
in
the
end
we
need
to
be
able
to
deal
with
temporary
inconsistency
–
something
that
can
in
any
requirement_2
only
be
avoid
at
the
cost
of
the
quality_attribute_11
of
the
component_7
in
a
quality_attribute_1
component_3
ours
no
remote
component_13
callstheoretically
we
could
avoid
the
pattern_8
of
connector_data_1
in
some
requirement_2
so
that
our
component_7
can
synchronously
mean
be
inside
the
duration
limit
of
a
single
connector_data_6
connector_17
other
component_7
when
need
a
shop
basket
could
also
live
without
the
redundant
connector_25
of
the
technology_10
connector_data_1
and
instead
it
could
directly
ask
the
technology_10
vertical
for
connector_data_1
when
the
shop
basket
be
present
on
the
component_21
we
avoid
this
for
the
follow
reason
the
quality_attribute_12
suffer
when
you
be
dependent
on
a
different
component_3
for
major
featuresa
slow
component_13
can
affect
the
quality_attribute_11
of
the
entire
shop
via
a
snowball
effectthe
quality_attribute_3
of
the
component_3
be
limitedindependent
deployment
of
component_7
be
difficultwe
have
have
great
experience
so
far
with
the
separation
of
vertical
it
definitely
help
at
least
during
the
early
stage
to
to
stick
to
a
strict
separation
use
vertical
decomposition
component_7
can
be
develop
test
and
ship
independently
of
one
another
lesson
learnedafter
three
year
of
work
on
a
component_3
design
in
the
way
outline
above
we
have
have
all
in
all
a
very
quality_attribute_5
experience
the
big
compliment
for
a
concept
be
of

when
someone
else
find
it
interest
or
decide
to
copy
it
look
back
if
i
be
to
do
something
differently
it
would
be
to
break
up
the
monolith
into
even
small
piece
early
in
the
component_2
the
near
future
of
otto
de
definitely
belong
to
pattern_4
in
a
vertical
style
architecture
many
thanks
to
anastasia
for
pattern_9
this
textinformatik
aktuell
de
for
give
permission
to
publish
the
english
translation
of
the
original

gefällt
mir44kommentareg2
8995997ddd66f90460b037839b8a0bdc01




uhrthe
fact
that
you
disallow
connector_26
unless
the
be
open_source
seem
a
crazy
anti
pattern_10
you
could
build
micro
component_7
in
a
connector_4
repo
use
proper
test
and
connector_12
most
of
the
benefit
here
without
re
invent
the
wheel
multiple
time
twitter
and
go
in
this
direction
esi
be
an
interest
approach
but
include
a
snippet
of
technology_24
from
another
team
be
scary
especially
if
it
quality_attribute_13
on
the
common
technology_19
that
isn
t
quality_attribute_10
together
during
the
build
gervais
b02




uhrfor
the
ui
separation
that
be
also
connector_21
losa
i
connector_16
that
first
in
a
presentation
from
the
architect
of
gilt
i
m
try
to
achieve
the
same
ui
quality_attribute_14
than
you
be
with
edge
side
include
but
with
webcomponents
who
allow
technology_24

i
your
quote
about
domain
drive
in
your
last
connector_data_10
in
fact
i
m
use
the
term
of
domain
component_13
to
explain
how
we
should
split
our
component_13
my
concern
be
about
the
component_24
quality_attribute_15
technology_25
governance
do
you
have
some
tip
for
that
how
can
you
ensure
that
all
component_7
be
not
break
another
and
how
do
you
manage
a
break
connector_9
into
a
component_13
tomer
ben
david01




uhrwhen
you
split
to
vertical
of
vertical
do
you
allow
connector_26
between
those
internal
component_9
connector_27
&
connector_28
from

week

|
martin
s
weekly
curations08




uhr
…
on
monolith
and
pattern_4
…
guido
steinacker01




uhrwe
really
try
to
avoid
this
beside
of
our
open_source
technology_8
there
be
only
very
few
exception
and
typically
we
could
and
should
open
component_1
these
exception
too
if
you
be
able
to
vertically
decompose
your
component_3
every
vertical
be
a
bound
component_17
=
domain
drive
design
von
monolithen
und
pattern_4
|
dev
otto
de01




uhr
…
english
translation
be
now
quality_attribute_16
here
technology_15
dev
otto
de



on
monolith
and
pattern_4
…
on
monolith
and
pattern_4
|
fight
softw





uhr
…
when
we
begin
the
development
of
our
online
shop
otto
de
we
choose
a
quality_attribute_1
vertical
style
architecture
at
an
early
stage
of
the
component_2
our
experience
with
our
previous
component_3
show
u
…
marcel
van
den
brink02




uhrtotally
agree
with
you
here
we
also
start
out
with
connector_26
between
different
pattern_4
but
decide
to
lose
that
it
be
kind
of
hold
u
back
to
make
connector_24
to
the
pattern_4
if
not
all
of
your
be
within
your
pattern_5
you
end
up
with
a
small
quality_attribute_1
monolith
and
people
be
hesitant
to
connector_9
in
for
instance
such
a
connector_4
piece
of

you
never
what
you
might
break
frastel13




uhrthanks
for
this
great

it
provide
a
very
quality_attribute_5
overview
about
why
big
requirement_1
should
move
to
pattern_4
these
day
at
chefkoch
de
we
be
currently
in
the
migration
phase
towards
pattern_4
too
and
face
different
problem
maybe
we
could
have
a
little
discussion
about
those
problem
a
part
of
them
be
already
mention
in
your


with
a
pattern_5
architecture
the
technology_10
team
have
the
possibility
to
develop
and
quality_attribute_8
a
isolate
a
possible
team
have
their
own
development
component_2
their
own
build
and
quality_attribute_8
pipeline
they
manage
their
own
component_16
connector_data_1
pattern_11
etc
but
what
about
other
bottleneck
in
the
infrastructure
we
recognize
two
bottleneck
still
exist
in
our
infrastructure
the
pattern_12
which
have
to
all
component_7
even
with
skydns
or
other
component_13
discovery
requirement_9
and
the
reverse
pattern_7


we
currently
have
one
quality_attribute_2
but
monolithic
reverse
pattern_7
which
be
responsible
for
the
technology_15
pattern_11
of
all
pattern_4
and
the
still
exist
component_8
monolith
we
currently
try
to
split
the
reverse
pattern_7
requirement_9
and
move
technology_15
pattern_11
towards
the
specific
component_13
how
do
you
combine
your
component_7
with
reverse
pattern_7


the
pattern_12
have
to
every
component_13
a
every
incoming
connector_data_6
have
to
be
connector_29
to
the
accord
component_13
component_7
have
to
register
there
this
be
no
big
deal
but
it
feel
a
little
bit
strange
and
scary
in
a
pattern_5
architecture
every
isolate
team
have
to
manage
und
modify
this
central
component_9
in
the
infrastructure
how
do
you
handle
those
registration
of
pattern_4
to
your
pattern_12

you
already
explain
that
the
vertical
combine
ui
and
requirement_5
component_25
but
the
pattern_4
contain
only
requirement_5
component_25
and
provide
a
pattern_6
for
it
how
do
technology_10
team
connector_10
the
ui
in
your
requirement_2
then
be
there
a
central
ui
pattern_1
which
connector_30
with
the
different
component_13
or
do
every
technology_10
team
also
have
it
own
isolate
ui
component_13
currently
all
our
pattern_4
provide
a
ui
besides
the
pattern_6
and
we
have
a
contract
about
the
allow
and
provide
technology_19
requirement_9
and
so
on
however
we
struggle
with
this
way
place
the
ui
outside
or
inside
of
pattern_4
be
imho
an
open
question
some
developer
prefer
move
the
ui
inside
the
pattern_5
and
others
refuse
this
behavior
i
would
really
love
to
see
an
additional
about
how
you
handle
the
ui
if
this
couldn
t
be
answer
in
short
in
the
area
dax
fohl
@daxfohl





uhri
be
plan
to
go
with
this
kind
of
design
for
one
component_23
but
i
be
lean
toward
use
a
connector_data_8
component_26
to
connector_31
relevant
connector_data_1
i
e
if
someone
connector_data_5
to
launch
a
long
run
from
the
web
front
end
it
would
connector_32
the
relevant
connector_data_1
into
an
technology_26
component_26
that
would
be
pattern_13
by
the
component_7
that
run
say

could
you
expand
on
why
you
avoid
the
connector_data_8
component_26
in
favor
of
pattern_14
frank13




uhr
connector_31
connector_data_1
imho
bind
component_7
more
than
pattern_15
connector_data_1
i
have
a
question
about
this
point
a
i

t
connector_12
it
the
pattern_15
mechanism
need
to
pattern_14
from
somewhere
this
mechanism
have
to
be
couple
with
this
knowledge
where
be
the
locate
and
component_7
be
bind
so
i

t
connector_12
this
point
here
talk
about
connector_31
connector_33
connector_data_1
could
be
connector_10
in
different
way
when
one
publish
the
complete
document
of
some
update
connector_data_1
e
g
a
technology_10
in
the
connector_data_8
you
have
no
couple
at
all
the
component_27
component_13
connector_22
the
document
and
work
with
it
it
do
not
need
to
where
the
connector_data_8
be
publish
from
originally
bind
of
component_7
be
avoid
here
for
test
a
connector_34
pattern_5
you

t
have
to
connector_10
a
mq
in
the
first
step
the
component_1
of
the
incoming
document
could
be
completely
mock
so
infrastructure
overhead
could
be
minimize
this
doesn
t
apply
to
requirement_7
step
at
this
test
level
you
have
to
face
this
overhead
that
s
true
guido
steinacker01




uhrin
the
begin
i
be
think
the
same
way
and
in
fact
we
start
with
some
common
technology_8
connector_4
between
vertical
after
some
month
we
realize
that
it
s
not
worth
the
trouble
to
pattern_16
the
development
of
common
between
team
if
you
cut
you
vertical
and
pattern_4
by
requirement_5
domain
you
quickly
realize
that
the
same
thing
technology_10
for
example
differ
between
the
component_13
connector_26
would
have
the
effect
that
thing
be
leak
from
one
component_13
to
another
one
advantage
of
reinvent
the
wheel
be
that
after
some
time
you
connector_12
quality_attribute_5
wheel
more
important
the
team
be
more
independent
and
below
the
line
more
quality_attribute_7
the
stuff
that
be
really
worth
connector_26
can
be
open
component_1
lead
to
high
quality
today
i
be
completely
convinced
that
this
approach
be
quality_attribute_5
than
try
to
apply
dry
across
independent
component_13
at
least
in
our
situation
have
a
vertically
decompose
component_3
somewhere
you
have
to
quality_attribute_10
compare
to
other
solution
edge
side
requirement_7
be
easy
from
the
perspective
of
connector_9
component_24
technology_27
technology_24
introduce
failure
unit
to
improve
fault
tolerance
and
so
on
but
yes
technology_19
and
technology_28
be
difficult
to
handle
that
s
why
we
introduce
an
asset
component_4
and
of

requirement_7
test
gervais
b02




uhrfor
the
ui
separation
that
be
also
connector_21
“losa”
i
connector_16
that
first
in
a
presentation
from
the
architect
of
gilt
i’m
try
to
achieve
the
same
ui
quality_attribute_14
than
you
be
with
edge
side
include
but
with
webcomponents
who
allow
technology_24

i
your
quote
about
domain
drive
in
your
last
connector_data_10
in
fact
i’m
use
the
term
of
”
domain
service”
to
explain
how
we
should
split
our
component_13
my
concern
be
about
the
component_24
quality_attribute_15
technology_25
governance
do
you
have
some
tip
for
that
how
can
you
ensure
that
all
component_7
be
not
break
another
and
how
do
you
manage
a
break
connector_9
into
a
component_13
joel
stewart04




uhrdo
you
perform
any
pattern_17
on
connector_data_1
component_1
in
your
pattern_4
do
you
only
use
pattern_6
to
populate
your
pattern_17
component_16
would
you
ever
consider
use
a
common
requirement_3
component_3
for
pattern_3
your
component_13
oldrich
kepka05




uhrwe
end
up
with
very
similar
architecture
in
hp
propel
we
also
u
pattern_15
and
no
pattern_18
connector_data_11
to
our
apis
our
use
of
pattern_15
have
several
advantage

quality_attribute_17
deployment
you

t
need
component_26
technology_29

your
component_24
connector_data_12
be
not
quality_attribute_13
on
whether
the
technology_29
be
run

high
component_13
independence
compare
to
component_22
or
direct
component_13
connector_data_12
the
independence
of
very
powerful
property
of
pattern_15
which
would
need
more
elaboration
but
in
short
a
component_13
doesn
t
need
to
who
be
pattern_15
connector_data_1
and
how
many
of
these
component_28
be
out
there
guido
steinacker06




uhrof
we
also
have
pattern_17
component_3
one
of
the
vertical
track
be
gather
and
component_2
the
track

connector_data_1
be
connector_20
into
different
connector_data_1
connector_35
one
of
it
be
a
pattern_17
where
technology_30
and
lot
of
other
technology_9
be
use
to
extract
all
kind
of
connector_data_7
this
component_3
be
separate
from
the
shop
component_29
and
i
do
not
too
much
about
it
s
architecture
because
of
requirement_3
we
be
use
splunk
+
the
elk
elasticsearch+logstash+kibana
technology_31
to
gather
requirement_3
from
all
the
different
component_6
but
this
be
not
special
for
pattern_4
aggregate
requirement_3
be
a
common
problem
in
all
kind
of
quality_attribute_1
component_3
guido
steinacker06




uhrapi
quality_attribute_15
be
relatively
easy
to
achieve
in
pattern_19
component_3
representation
be
define
use

type
a
component_23
be
connector_36
one
or
possibly
muliple

type
component_12
must
make
sure
that
component_7
can
still
serve
deprecate

type
until
all
the
component_28
be
migrate
to
the
one
in
order
to
make
component_30
more
quality_attribute_18
we
expect
that
every
component_13
be
able
to
handle
extension
to
a
representation
at
any
point
in
the
document
mostly
connector_data_13
or
technology_32
cdc
test
component_27
drive
contract
test
be
use
to
ensure
contract
between
component_7
early
in
the
build
pipeline
if
team
a
be
use
a
component_7
of
team
b
they
connector_2
a
test
that
be
connector_37
for
team
a
s
expectation
about
the
behavior
of
the
component_13
the
test
be

to
team
b
s
deployment
pipeline
every
time
team
b
be
break
this
contract
the
test
will
fail
and
the
connector_9
will
not
go
live
until
either
the
test
or
the
break
connector_9
be
fix
guido
steinacker06




uhri
agree
guido
steinacker06




uhrsee
oldrich
kepka
s

in
addition
i
would
mention
the
quality_attribute_12
of
component_13
without
extra
infrastructure
component_14
a
mq
component_4
it
be
generally
easy
to
test
a
component_13
solvable
problem
but
still
it
s
easy
in
our
requirement_2
technology_26
would
also
possibly
be
not
quality_attribute_19
enough
but
this
quality_attribute_13
on
your
non
functional
requirement
i
would
never
say
that
connector_data_14
component_22
be
not
a
possible
solution
for
quality_attribute_1
connector_data_1
but

component_28
decide
about
the
time
when
they
be
able
to
component_2
more
connector_data_1
be
more
quality_attribute_20
in
term
of
failure
tolerance
different
requirement
regard
consistency
and
so
on
connector_33
connector_data_1
imho
bind
component_7
more
than
pattern_15
connector_data_1
pierre
f13




uhrabout
esi
inclusion
connector_38
out
this
open_source
project
esigate
orgdon’t
start
with
a
monolith
|
manjunathk15




uhr
…
be
otto
de
about
which
i
dida
talk
together
with
their
tech
lead
and
which
you
can
connector_16
about
in
this
nice
connector_2
up
by
one
of
their
lead
architect
but
there
be
quite
a
few
others
a
well
and
i
remain
convinced
it’s
a
quality_attribute_5
idea
to
start
…
guido
steinacker15




uhrthere
be
a
great
from
uwe
friedrichsen
about
the
reason
why
and
when
re
use
be
inefficient
if
you
wonder
how
educate
developer
could
knowingly
ignore
dry
priciples
in
the
component_17
of
pattern_4
no
connector_4

connector_16
technology_15

codecentric
de
en


the
break
promise
of
re
use
christian
stamm15




uhradditionally
to
what
guido
say
i
technology_33
to
recommend
this
excellent
if
a
little
long
on
re
use
technology_15

codecentric
de
en


the
break
promise
of
re
use
strive
for
replaceability
not
re
use
it
will
lead
you
the
right
way
everything
you
find
on
technology_15
technology_34
technology_35
otto
de
have
a
re
use
factor
of
at
least
two
often
much
high
christian
folie
@folienmaster





uhrthanks
for
the

it
really
confirm
an
experience
i
have
in
a
similar
project
i
connector_12
one
question
regard
the
developer
experience
in
your
architecture
how
do
you
ensure
that
it
a
nice
easy
and
quality_attribute_5
way
for
the
developer
to
work
&
quality_attribute_10
with
other
slice
component_13
this
be
at
least
an
area
in
which
a
true
monolith
could
you
connector_12
the
whole
component_6
in
your
ide
even
if
might
slow
it
down
and
you
hit
run
and
everything
work
i
m
not
pro
monolith
and
i
m
against
big
project
solution
in
ide
but
at
least
that
seem
somehow
reasonable
do
you
use
e
g
nightly
build
deployment
for
not
actively
develop
component_13
do
you
try
to
run
everything
on
one
the
local
component_31
do
you
try
to
connector_2
each
component_13
completely
on
it
own
if
so
how
do
you
test
requirement_7
e
g
with
esi
only
on
deployment
how
do
you
include
the
asset
on
a
dev
component_31
use
the
one
from
the
last
nightly
build
deployment
what
if
i
need
to
connector_9
something
there
these
be
some
point
which
bother
me
be
i

t
have
a
nice
solution
or
i
m
not
sure
it
a
quality_attribute_5
approach
can
you
connector_3
some
experience
guido
steinacker05




uhrhi
christian
developer
do
not
need
to
run
fully
quality_attribute_10
component_13
every
component_13
be
loosely
couple
and
it
be
possible
to
run
it
locally
in
your
ide
some
component_7
do
not
serve
technology_24
component_21
but
only
fragment
for
example
some
technology_10
recommendation
that
be
quality_attribute_10
with
component_21
from
other
vertical
in
this
requirement_2
we
be
use
optional
connector_data_6
parameter
that
tell
the
vertical
to
render
not
only
a
fragment
but
a
component_21
with
cs
j
plus
the
fragment
so
developer
be
able
to
actually
use
the
fragment
we
be
continuously
quality_attribute_10
all
connector_24
in
ci
stage
so
every
developer
be
able
to
connector_38
the
requirement_7
with
other
component_11
a
few
minute
after
a
git
connector_31
of

we
also
have
automatic
regression
test
that
connector_38
whether
or
not
fragment
on
a
component_21
be
work
a
expect
all
test
can
be
connector_11
not
only
in
the
different
stage
but
also
locally
on
the
developer
s
component_31
before
connector_24
be
connector_31
all
test
be
connector_11
this
require
test
to
run
really
quick
in
our
requirement_2
the
big
component_6
have
some

test
which
be
run
in
le
than

minute
requirement_10
of
test
be
critical
because
if
they
be
too
slow
developer
would
possibly
connector_31
without
run
the
test
and
other
developer
would
become
problem
we
do
not
have
nightly
build
but
continuous
build
use
a
build
deployment
pipeline
for
every
single
component_13
every
connector_31
connector_9
be
connector_39
the
pipeline
the
be
compile
test
packaged
quality_attribute_8
requirement_7
test
be
connector_11
then
the
package
be
quality_attribute_8
to
the
next
stage
and
so
on
component_7
that
be
not
actively
develop
be
rare
at
least
in
my
team
there
be
no
component_13
that
be
not
connector_9
at
least
every
few
day
if
you
have
such
kind
of
component_13
i
could
imagine
that
it
be
a
quality_attribute_5
practice
to
quality_attribute_8
them
every
few
day
so
you
can
make
sure
that
the
deployment
itself
be
still
work
asset
be
serve
use
a
separate
asset
component_4
while
a
connector_31
include
connector_24
to
asset
connector_40
a
deployment
of
the
asset
to
the
asset
component_4
most
of
the
time
we
be
toggle
connector_24
anyway
because
we
want
to
separate
deployment
from
requirement_6
face
connector_9
however
the
handle
of
asset
be
possibly
the
most
difficult
part
in
our
architecture
because
these
be
the
part
where
all
vertical
have
to
quality_attribute_10
in
order
to
automatically
connector_38
for
break
connector_24
in
the
front
we
be
use
not
only
technology_36
+
technology_37
test
but
also
technology_9
lineup
technology_15
technology_34
technology_35
otto
de
lineup
michael28




uhrthank
you
guido
and
team
for
this
great

knowledge
connector_26
and
insight
really
appreciate
it
i
be
wonder
whether
during
the
early
design
phase
or
at
late
stage
you
be
consider

component_1
cqrs
pattern_10
for
some
component_3
the
macro
architecture
if
so
why
do
you
choose
not
to
go
the
cqrs
connector_41
then
eine
moderne
ui
architektur
|
apptiva
ag29




uhr
…
otto
development

über
monolithen
und
pattern_4
…
fritzduchardt29




uhron
a
side
note
and
unrelated
to
the
architectural
discussion
the
one
liner
summary
of
conway
s
law
seem
to
misrepresent
the
core
idea
behind
the
law
conway’s
law
the
development
start
with
a
team
and
in
the
begin
the
component_6
be
very
understandable
at
first
you
have
a
“need”
for
one
component_6
i
would
rephrase
this
and
try
to
put
it
more
in
line
with
the
correspond
wikipedia
component_21
technology_15
en
wikipedia

wiki
conway%27s_law
here
be
my
attempt
on
it
conway
s
law
team
connector_data_3
within
large
organization
be
only
quality_attribute_21
if
it
mirror
real
people
connector_13
behavior
thus
lead
to
small
interdisciplinary
team
with
short
internal
connector_13
connector_29
fritzduchardt29




uhron
a
more
architectural
note
one
question
regard
connector_26
and
this
might
be
technology_3
centric
when
pass
dtos
between
pattern_4
in
technology_38
or
connector_data_13
technology_27
the
connector_data_15
be
commonly
automatically
generate
from
component_32
those
component_33
also
have
to
be
present
on
component_27
side
for
deserialization
with
your
connector_3
only
open
component_1

methodology
how
would
you
make
those
dtos
be
quality_attribute_16
for
all
interest
party
guido
steinacker31




uhrhi
frastel
sorry
for
the
delay
i
have
some
day
off
for
part

we
have
a
component_29
engineering
team
that
be
provide
self
component_13
for
the
development
team
beside
other
thing

for
example


of
the
component_29
one
of
these
self
component_7
be
the
possibility
to
create
quality_attribute_8
pattern_4
include
the
load
balance
and
connector_42
stuff
this
be
accomplish
use
technology_21
pattern_7
component_12
and
a
brand
and
technology_39
mesos
cluster
requirement_8
this
way
no
dev
team
have
to
configure
central
infrastructure
component_9
instead
of
this
they
be
use
component_7
provide
by
the
component_29
engineering
team
i
can
not
tell
about
the
detail
of
the
pattern_7
etc
because
it
s
not
my
requirement_5
at
least
we
do
not
have
real
bottleneck
in
this
area
technology_21
be
really
fast
and
use
three
or
more
technology_21
component_12
in
parallel
this
area
be
not
a
real
problem
right
now
if
you
have
more
question
please
come
back
to
me
i
should
be
able
to
find
someone
with
more
knowledge
in
this
area
because
of


why
do
you
think
that
your
reverse
pattern_7
be
a
monolith
if
you
only
use
it
a
a
reverse
pattern_7
+router+load
balancer
without
misuse
it
for
other
stuff
it
s
simply
handle
technology_15
connector_data_6
that
s
imho
perfectly
fine
move
pattern_11
down
might
be
ok
maybe
quality_attribute_5
but
i
would
prefer
cascade
reverse
pattern_7
instead
of
component_4
side
pattern_11
the
extra
hop
should
not
be
a
big
deal
currently
we
only
have
one
pattern_1
of
component_21
assembly
pattern_7
but
i
could
imagine
that
your
approach
be
quality_attribute_5
easy
to
manage
please
tell
me
about
your
find
part

we
do
not
have
a
central
ui
for
every
component_21
there
be
one
vertical
responsible
for
the
content
this
vertical
be
include
part
of
other
vertical
use
esi
or
technology_18
into
the
component_21
technology_19
+
technology_28
+
image
be
come
from
an
so
connector_21
asset
component_4
if
you
want
to
serve
ui
from
the
vertical
pattern_4
you
have
to
solve
the
problem
that
there
be
common
part
j
cs
in
the
ui
asset
component_12
be
difficult
but
it
s
far
easy
than
have
a
ui
team
that
have
to
collaborate
on
a
daily
basis
with
multiple
backend
team
such
connector_data_16
will
hardly
quality_attribute_2
from
an
organizational
perspective
and
it
will
be
hard
to
quality_attribute_8
component_7
independently
if
you
have
connector_4
ui
component_13
i
would
imagine
that
those
developer
who
be
resistent
to
be
full
technology_31
developer
will
favor
separation
of
ui
and
backend
component_13
while
developer
that
feel
comfortable
in
both
world
would
prefer
pattern_4
with
ui
aka
vertical
yet
another
variation
of
conway
s
law
but
think
about
the
consequence
of
separate
ui
from
component_13
every
development
of
a
requirement_6
face
feature
would
require
two
team
to
collaborate
this
be
a
nightmare
have
multiple
technology_10
team
each
be
responsible
from
ui
down
to
the
db
all
of
these
team
be
able
to
work
and
quality_attribute_8
independently
from
each
other
90%
of
the
time
in
order
to
convince
the
resistent
developer
maybe
you
should
try
out
pair
programming
it
s
great
guido
steinacker31




uhrinteresting
question
yes
i
be
think
about
similar
architecture
quite
early
for
example
i
have
an
eye
on
technology_15
prevayler

follow
similar
approach
yes
it
could
have
be
helpful
in
some
area
no
question
but
in
the
begin

early
than
the
cqrs
of
martin
fowler
btw
there
be
lot
s
of
other
question

for
example
do
we
at
all
about
how
to
solve
our
problem
in
quality_attribute_5
way
than
all
these
requirement_1
offer
off
the
shelf

a
little
late
we
decide
to
vertically
decompose
the
component_3
and
to
distinguish
macro
from
micro
architecture
use
cqrs+event
component_1
would
have
be
a
decision
in
the
micro
architecture
of
a
vertical
in
our
understand
nothing
where
we
should
talk
about
this
be
up
to
the
team
we
definitely
do
not
want
to
have
ivory
tower

architect
tell
other
developer
how
to
develop
their

whether
or
not
cqrs+es
would
have
be
quality_attribute_5
or
not
quality_attribute_13
on
the
exact
requirement
of
the
different
vertical
today
roundabout
twelve
completely
different
vertical
consist
of
maybe

component_6
i
m
very
sure
that
we
will
see
cqrs+es
µservices
soon
because
it
s
a
really
interest
approach
in
the
begin
we
have
other
problem
but
right
now
we
have
an
architecture
where
it
s
easy
to
try
out
paradigm
and
technology_2
and
component_16
and
without
any
risk
guido
steinacker31




uhrit
s
not
only
not
quality_attribute_21
accord
to
conway
it
s
hardly
possible
on
the
other
side
there
be
something
invert
conway
s
law
if
you
choose
an
architecture
this
will
certainly
connector_9
the
communicational
connector_data_16
of
your
organization
that
s
what
we
have
observe
when
we
establish
our
vertical
style
architecture
guido
steinacker31




uhrsharing
dtos
and
similar
kind
of
be
exactly
what
we
do
not
want
to
have
it
s
simply
not
worth
connector_3
btw
i
do
not
to
generate
technology_38
or
connector_data_13
from
component_33
because
it
s
too
easy
to
break
contract
to
other
component_7
by
do
refactorings
use
your
favorite
ide
the

type
be
the
contract
between
component_7
and
generate
or
requirement_11
a
technology_38
or
connector_data_13
document
be
too
easy
it
s
not
worth
the
trouble
of
connector_3
this
be
mostly
because
our
vertical
be
implementation
of
a
bound
component_17
a
shop
cart
for
example
need
technology_10
but
it
do
not
need
all
the
detail
of
a
technology_10
but
only
an
extract
same
be
true
for
almost
all
the
different
bound
component_17
of
an
commerce
component_3
grygoriy
gonchar17




uhrthank
you
so
much
for
connector_26
your
experience
that
be
an
awesome
connector_16
can
you
connector_3
more
detail
about
solution
to
“poll”
an
atom
fee
do
you
have
requirement_2
when

component_27
be
not
able
to
serve
all
the
connector_data_1
to
pattern_14
so
that
you
need
to
quality_attribute_2
pattern_14
component_27
how
do
you
quality_attribute_1
load
to
this
component_34
so
that
component_34
do
not
pattern_14
and
component_2
the
same
connector_data_1
guido
steinacker20




uhrin
requirement_2
of
atom
feed
it
be
possible
to
use
technology_15
pattern_11
use
a
reverse
pattern_7
for
different
component_21
of
the
fee
this
way
you
should
be
able
to
serve
feed
to
any
number
of
component_27
if
you
prefer
technology_40
lot
of
component_28
should
also
not
be
a
problem
technology_40
basically
be
a
ring
buffer
where
component_28
about
the
current
connector_16
position
in
the
ring
buffer
possibly
by
use
technology_41
to
component_35
this
position
at
least
in
our
situation
quality_attribute_3
in
these
two
scenario
be
not
a
problem
why
pattern_4
|
神刀安全网24




uhr
…
interest
in
the
‘how’
instead
of
the
‘why’
please
have
a
look
into
an
early
on
monolith
and
pattern_4
…
why
pattern_4
|
dev
otto
de20




uhr
…
when
we
start
‘lhotse’
the
project
to
replace
the
old
monolithic
e
commerce
component_29
of
otto
de
a
few
year
ago
we
choose
self
contain
component_11
sc
to
connector_10
the
shop
instead
of
develop
a
single
big
monolithic
component_6
we
choose
to
vertically
decompose
the
component_3
by
requirement_5
domain
’search’
’navigation’
‘order’
…
into
several
mostly
loosely
couple
component_6
each
component_6
have
it’s
own
ui
component_16
redundant
connector_data_1
and
so
on
if
you
be
more
interest
in
the
‘how’
instead
of
the
‘why’
please
have
a
look
into
an
early
on
monolith
and
pattern_4
…
pattern_4
&
einradfahren
ecommerce
fee
de21




uhr
…
da
it
team
von
otto
ist
in
diesem
bereich
schon
champion
league
und
hat
mit
dem
“on
monolith
and
microservices”
einen
pflichtartikel
in
diesem
bereich
produziert
über
die
thema
hat
guido
von
otto
…
why
pattern_4
–
teknoids
news24




uhr
…
when
we
start
‘lhotse’
the
project
to
replace
the
old
monolithic
e
commerce
component_29
of
otto
de
a
few
year
ago
we
choose
self
contain
component_11
sc
to
connector_10
the
shop
instead
of
develop
a
single
big
monolithic
component_6
we
choose
to
vertically
decompose
the
component_3
by
requirement_5
domain
’search’
’navigation’
‘order’
…
into
several
mostly
loosely
couple
component_6
each
component_6
have
it’s
own
ui
component_16
redundant
connector_data_1
and
so
on
if
you
be
more
interest
in
the
‘how’
instead
of
the
‘why’
please
have
a
look
into
an
early
on
monolith
and
pattern_4
…
pattern_4
&
einradfahren
|
kassenzone21




uhr
…
weiterhelfen
da
it
team
von
otto
ist
in
diesem
bereich
schon
champion
league
und
hat
mit
dem
“on
monolith
and
microservices”
einen
pflichtartikel
in
diesem
bereich
produziert
über
die
thema
hat
guido
von
otto
auch
…
alexander
holbreich
@aholbreich





uhr
connector_3
dtos
and
similar
kind
of
be
exactly
what
we
do
not
want
to
have
agree
with
that
very
hard
topic
to
discus
with
many
technology_3
developer
i
m
very
happy
to
be
not
the
only
one
#qconf2016
–
softwarequalität
–
immer
thema
für
un
quality
specialist
–
auch
konzernweit
|
dev
otto
de30




uhr
…
testmanagementwerkzeuge
setze
ich
ein
und
wozu
“
„was
macht
der
trend
der
pattern_4
mit
un
“
und
„wie
gelingt
ein
connector_9
hin
zu
agilen
…
warum
braucht
man
eine
pattern_10
technology_8
design
component_11

–
teil






uhr
…
ersetzt
da
mammutprojekt
wurde
im
oktober

erfolgreich
gelaunched
und
bedeutete
neben
einer
modernen
architektur
auch
den
abschied
von
unzähligen
„historisch
gewachsenen“
…
categorical
micro
component_13
–
blue
lotus08




uhr
…
technology_15
dev
otto
de



on
monolith
and
pattern_4
…
dein
kommentarantwort
auf
direkt
auf
da
thema
antwortendein
name*e
mail
wird
nicht
veröffentlicht
*webseitekommentar*7636
+
4bitte
gib
den
wert
in
da
feld
ein
ich
habe
die
datenschutzhinweise
gelesen
und
stimmt
ihnen
zukommentar
sendenwritten
byguido
steinackersoftware
architectabout
the
authorsimilar
articlesole27


the
open_source
private
requirement_4
in
the
otto
groupthe
term
‘cloud’
have
be
much
more
than
a
buzzword
for
a
long
time
now
the
requirement_4
or
rather
the
requirement_4
have
become
an
essential
part
of
our
daily
requirement_5
but
what
if
–
even
though
the
wheat
have
long
since
be
separate
from
the
chaff
in
term
of
it
expertise
–
i
still

t
much
about
the
requirement_4
developmentoperationscloudread
moremarcel22


life
in
the
mobwhile
many
of
u
be
big
fan
of
‘mob’
mafia
classic
‘the
sopranos’
and
‘the
godfather’
in
fact
this
show
how
mob
‘collective’
programming
can
help
shape
a
team
and
how
great
connector_data_17
can
be
achieve
quickly
through
this
collaborative
work
approach
developmentworking
methodsread
moredein
profil
deine
vorteilejobticker
&
jobnewsgespeicherte
jobslaufende
bewerbungenbewerberstatusprofil
anlegendein
profil
deine
vorteilekarriereleveltätigkeitsfeldwähle
bitte
au
für
welche
du
benachrichtigt
werden
möchtest
e
mail
adresse
nicht
gültigabonnierenabonniere
hier
unseren
jobticker
um
wöchentlich
per
e
mail
über
neue
informiert
zu
werden
a
people
requirement_1
drive
by
technology_20
otto
group
karriereotto
unternehmenotto
newsroomotto
dejob@otto
dewerner
otto
straße


hamburg©
otto
gmbh
&
co
kg

hamburgimpressumdatenschutzcookie
einstellungen
we
want
to
improve
out
content
with
your
feedback
how
interest
be
this
blogpost
bitte
nicht
ausfüllen*
in
which
topic
be
you
interest
in
submit
we
have
connector_43
your
feedback
close
jobo
chatbotcookies
erlauben
otto
und
drei
partner
brauchen
deine
zustimmung
klick
auf
ok
bei
vereinzelnen
datennutzungen
deine
einwilligung
um
informationen
auf
einem
gerät
zu
speichern
und
oder
abzurufen
ip
adresse
nutzer

browser
informationen
die
datennutzung
erfolgt
für
personalisierte
anzeigen
und
inhalte
anzeigen
und
inhaltsmessungen
sowie
um
erkenntnisse
über
zielgruppen
und
produktentwicklungen
zu
gewinnen
mehr
info
zur
einwilligung
gibt’s
jederzeit
hier
mit
klick
auf
den
connector_27

ablehnen
kannst
du
deine
einwilligung
jederzeit
ablehnen
datennutzungen
otto
arbeitet
mit
partnern
zusammen
die
von
deinem
endgerät
abgerufene
daten
trackingdaten
auch
zu
eigenen
zwecken
z
b
profilbildungen
zu
zwecken
dritter
verarbeiten
vor
diesem
hintergrund
erfordert
nicht
nur
die
erhebung
der
trackingdaten
sondern
auch
deren
weiterverarbeitung
durch
diese
anbieter
einer
einwilligung
die
trackingdaten
werden
erst
dann
erhoben
wenn
du
auf
den
in
dem
banner
auf
otto
de
wiedergebenden
„ok”
klickst
bei
den
partnern
handelt
e
sich
um
die
folgenden
unternehmen

inc
ireland
limit
elbwalker
gmbh
weitere
informationen
zu
den
datenverarbeitungen
durch
diese
partner
findest
du
in
der
datenschutzerklärung
auf
otto
de

die
informationen
sind
außerdem
über
einen
connector_27
in
dem
banner
abrufbar
okcookies
ablehnenmehr
informationen
