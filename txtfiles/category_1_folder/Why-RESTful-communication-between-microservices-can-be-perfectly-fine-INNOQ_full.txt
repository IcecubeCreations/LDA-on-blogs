why
pattern_1
connector_1
between
pattern_2
can
be
perfectly
fine
â€“
innoq
ðŸ”¥
connector_data_1
mesh
workshop
be
warum
wie
wann
mehr
erfahren
ðŸ’™ðŸ’›
newsletter
kontakt
de
|
en
menÃ¼
leistungen
ausgeklappt
eingeklappt
strategie
und
technologieberatung
digitale
produktentwicklung
softwarearchitektur
und
entwicklung
digitale
plattformen
und
infrastrukturen
wissenstransfer
coach
und
train
success
story
kultur
ausgeklappt
eingeklappt
wie
wir
zusammenarbeiten
be
un
wichtig
ist
arbeiten
bei
innoq
magazin
ausgeklappt
eingeklappt
&
artikel
podcast
vortrÃ¤ge
technology_1
lunch
primer
newsletter
medienkunst
termine
schulungen
ausgeklappt
eingeklappt
warum
online
schulungen
isaqb
cpsa
f
foundation
level
quality_attribute_1
architekturen
domain
drive
design
web
quality_attribute_2
requirement_1
technology_2
modernisierung
requirement_2
requirement_3
infrastruktur
web
architekturen
advance
technology_3
owner
blockchain
remote
mob
programming
hauptmenÃ¼

coding_keyword_1
why
pattern_1
connector_1
between
pattern_2
can
be
perfectly
fine

mÃ¤rz

recent
debate
about
pattern_3
versus
connector_data_2
pass
in
pattern_4
connector_1
have
lead
to
some
confusion
what
be
mean
with
pattern_5
connector_1
in
this
component_1
and
why
be
pattern_3
a
perfectly
valid
choice

minuten
lesedauer
daniel
westheide
recently
lightbend
cto
and
co
founder
jonas
bonÃ©r
whom
i
highly
respect
be
talk
a
bit
about
how
pattern_6
technology_4
be
a
bad
choice
even
an
anti
pattern_7
for
connector_1
between
pattern_2
an
dieser
stelle
mÃ¶chten
wir
dir
gerne
einen
tweet
anzeigen
um
ihn
zu
sehen
musst
du
dem
lade
von
fremdinhalten
von
twitter
technology_5
zustimmen
inhalt
anzeigen
datenschutzhinweise
accord
to
bonÃ©r
pattern_6
pattern_3
be
acceptable
for
coding_keyword_2
apis
but
internal
connector_1
between
pattern_2
should
be
base
on
pattern_5
connector_data_2
pass
an
dieser
stelle
mÃ¶chten
wir
dir
gerne
einen
tweet
anzeigen
um
ihn
zu
sehen
musst
du
dem
lade
von
fremdinhalten
von
twitter
technology_5
zustimmen
inhalt
anzeigen
datenschutzhinweise
in
a
recent
on
lightbendâ€™s
lagom
technology_6
this
think
be
summarize
even
more
briefly
than
in
the
aforementioned
tweet
bonÃ©r
cite
the
example
of
pattern_3
in
pattern_2
in
particular
a
an
example
of
this
snafu
â€¦
statement
such
a
these
be
problematic
because
they
be
confound
the
technology_7
use
for
connector_1
with
the
mode
of
requirement_4
between
component_2
in
this
coding_keyword_1
i
want
to
clarify
how
the
term
use
should
be
understand
and
show
that
technology_4
and
pattern_3
for
internal
component_2
connector_1
can
be
perfectly
fine
a
choose
to
do
so
have
nothing
to
do
with
whether
your
component_3
quality_attribute_3
synchronously
or
asynchronously
â€“
and
the
latter
question
be
what
you
should
really
be
concern
with
letâ€™s
begin
with
the
different
level
at
which
we
can
talk
about
pattern_8
versus
pattern_9
pattern_9
io
this
simply
mean
that
when
you
connector_2
over
the
requirement_5
e
g
with
another
component_2
your
current
component_4
be
not
block
until
the
remote
component_2
have
respond
but
be
free
to
do
other
thing
in
between
usually
it
mean
it
will
serve
other
connector_data_3
to
your
component_2
until
the
component_2
you
have
connector_3
have
come
back
to
you
with
a
connector_data_4
the
mechanism
for
work
with
pattern_10
io
be
pattern_11
future
or
connector_4
pattern_9
io
can
help
you
to
be
able
to
serve
more
connector_data_3
by
keep
your
cpu
busy
but
a
you
will
see
this
be
not
the
kind
of
asynchronicity
you
should
be
worry
about
when
it
come
to
connector_1
between
your
micro
component_2
pattern_5
technology_7
technology_4
be
a
pattern_6
technology_7
the
component_5
issue
a
connector_data_5
and
wait
for
a
connector_5
if
you
be
use
pattern_10
aka
pattern_9
io
the
current
component_4
of
the
component_5
do
not
really
have
to
wait
but
can
do
other
thing
see
above
still
it
can
only
continue
do
whatever
it
want
to
do
until
it
have
connector_6
the
serverâ€™s
connector_5
in
contrast
to
technology_4
connector_data_2
pass
e
g
over
technology_8
or
between
technology_9
actor
be
pattern_5
a
a
sender
you
usually
donâ€™t
wait
for
a
connector_5
this
can
be
connector_7
with
pattern_10
io
a
it
happen
to
be
do
in
technology_9
or
with
pattern_12
io
a
it
be
do
in
technology_10
it
be
also
perfectly
possible
to
use
a
connector_data_5
connector_data_4
pattern_7
use
pattern_5
connector_data_2
pass
technology_7
again
though
this
be
not
the
kind
of
asynchronicity
we
should
be
concern
with
when
think
about
connector_1
between
component_2
pattern_5
component_2
requirement_4
in
an
ideal
world
no
connector_1
whatsoever
between
your
pattern_2
should
be
necessary
and
if
it
have
to
happen
it
should
be
pattern_5
what
do
this
mean
it
be
really
quite
quality_attribute_4
do
not
connector_2
with
other
component_3
during
your
own
serviceâ€™s
connector_data_5
connector_5
cycle
ultimately
the
goal
be
for
your
component_2
to
be
quality_attribute_5
to
the
end
component_6
even
if
other
component_3
that
be
part
of
the
whole
component_7
be
offline
or
unhealthy
if
you
have
to
connector_data_6
other
component_3
in
order
to
be
able
to
serve
a
connector_5
to
a
connector_data_5
from
a
coding_keyword_2
component_5
this
be
really
an
architectural
problem
donâ€™t
blame
the
technology_7
it
doesnâ€™t
matter
whether
you
be
use
technology_4
or
pattern_5
connector_data_2
pass
with
a
connector_data_5
connector_data_4
pattern_7
the
overall
response_time
for
the
coding_keyword_2
component_5
will
be
bad
and
your
component_2
will
not
be
a
resilient
a
it
could
be
because
it
be
couple
in
time
to
the
component_2
it
quality_attribute_6
on
if
your
component_2
need
to
connector_8
some
action
in
another
component_2
do
that
outside
of
the
connector_data_5
connector_5
cycle
you
can
use
connector_data_2
pass
or
technology_4
for
this
it
doesnâ€™t
really
matter
if
you
really
want
to
i
wonâ€™t
even
prevent
you
from
use
pattern_12
io
for
this
stuff
actor
be
pretty
nice
for
handle
the
connector_1
with
other
component_3
outside
of
your
own
connector_data_5
connector_5
cycle
but
any
other
mechanism
use
some
kind
of
buffer
or
component_8
should
work
a
well
if
your
component_2
rely
on
connector_data_1
that
be
locate
in
another
component_2
replicate
that
connector_data_1
into
your
own
serviceâ€™s
connector_data_1
component_9
use
eventual
consistency
this
also
have
the
advantage
that
you
can
pattern_13
that
connector_data_1
into
the
technology_11
of
your
own
bound
component_1
you
can
either
update
your
version
of
the
connector_data_1
by
connector_9
domain
via
connector_data_2
pass
or
by
pattern_14
a
pattern_1
connector_data_7
resource
which
can
for
instance
be
connector_7
use
atom
it
be
easy
to
dismiss
the
pattern_1
approach
to
component_2
requirement_4
but
it
can
have
some
advantage
that
shouldnâ€™t
be
easily
carelessly
ignore
you
can
make
use
of
the
technology_12
infrastructure
of
the
web
e
g
technology_4
pattern_15
instead
of
have
to
reinvent
the
wheel
also
your
team
remain
free
in
their
choice
of
technology_1
for
the
component_3
each
of
them
be
responsible
for
this
be
possible
with
connector_data_2
pass
for
requirement_4
a
well
if
you
choose
an
open
standardize
technology_7
but
not
if
you
say
use
technology_9
or
technology_13
connector_data_2
pass
for
connector_1
between
your
component_2
self
contain
component_10
unfortunately
it
be
not
always
possible
to
avoid
pattern_6
requirement_4
completely
at
least
the
connector_1
with
the
component_11
will
usually
have
to
be
pattern_6
in
the
sense
that
it
happen
within
the
connector_data_5
connector_5
cycle
you
should
strive
to
apply
such
necessary
pattern_6
connector_1
only
in
narrowly
define
boundary
such
a
boundary
can
for
example
be
what
we
connector_data_6
a
self
contain
component_7
sc
â€“
an
autonomous
isolate
unit
that
include
it
own
connector_data_1
component_12
and
ui
a
component_7
of
self
contain
component_10
be
depict
below
a
component_7
of
decouple
component_10
whenever
feasible
â€žintegrationâ€œ
between
two
self
contain
component_10
should
happen
in
the
ui
use
quality_attribute_7
old
hypertext
connector_10
and
or
transclusion
where
this
be
not
possible
requirement_4
with
other
component_3
should
happen
asynchronously
use
the
technique
for
pattern_5
requirement_4
describe
above
summary
i
hope
this
coding_keyword_1
help
to
shed
some
light
on
what
you
should
really
care
about
when
design
your
component_2
decouple
in
time
which
can
be
achieve
or
violate
with
both
pattern_3
and
connector_data_2
pass
if
you
want
to
more
about
the
kind
of
decouple
self
contain
component_10
i
mention
above
please
have
a
look
at
the
sc
architecture
and
feel
free
to
participate
in
the
discussion
also
i
would
be
happy
to
discus
my
take
on
the
pattern_5
connector_1
debate
on
twitter
tag
architecture
web
sc
rest
restful
pattern_2
daniel
westheide
senior
consultant
daniel
westheide
ist
senior
consultant
bei
innoq
und
entwickelt
seit

component_13
applikationen
auf
der
technology_14
er
intessiert
sich
besonders
fÃ¼r
funktionale
progammierung
und
verteilte
systeme
und
ist
autor
de
e
book
â€žthe
neophyteâ€™s
guide
to
scalaâ€œ
kommentare
teilen
auf
twitter
mail
mehr
zum
thema
kommende
vortrÃ¤ge
kontakt
nutzen
sie
unser
kontaktformular
oder
schreiben
sie
un
eine
e
mail
an

protect
wenn
sie
mÃ¶gen
kÃ¶nnen
sie
un
auch
verschlÃ¼sselte
e
mail
mit
dem
programm
ihrer
wahl
senden
nutzen
sie
dazu
wahlweise
unsere
s
mime
zertifikate
cer
p7b
pem
oder
unseren
Ã¶ffentlichen
pgp
schlÃ¼ssel
name
e
mail
nachricht
senden
connector_10
&
artikel
vortrÃ¤ge
podcast
technology_1
lunch
primer
bÃ¼cher
requirement_6
socreatory
â€“
the
creatorsâ€™
academy
kontakt
datenschutz
impressum
leistungen
strategie
und
technologieberatung
digitale
produktentwicklung
softwarearchitektur
und
entwicklung
digitale
plattformen
und
infrastrukturen
wissenstransfer
coach
und
train
standorte
innoq
deutschland
gmbh
krischerstr


monheim
be
rhein
tel
+49



anfahrt
ohlauer
str


berlin
anfahrt
ludwigstr

e

offenbach
anfahrt
kreuzstr


mÃ¼nchen
anfahrt
technology_15
o
wework
hermannstrasse


hamburg
anfahrt
technology_15
o
design
office
mediapark
erftstr



kÃ¶ln
anfahrt
technology_15
o
design
office
kÃ¶nigstorgraben


nÃ¼rnberg
anfahrt
innoq
schweiz
gmbh
schutzengelstr


baar
tel
+41




anfahrt
hardturmstrasse


zÃ¼rich
anfahrt
unsere
newsletter
nie
mehr
spannende
artikel
veranstaltungstipps
und
podcast
zu
architektur
entwicklung
und
technologietrends
verpassen
der
innoq
newsletter
spannende
artikel
veranstaltungstipps
und
podcast
zu
architektur
entwicklung
und
technologietrends
erscheint
ca

mal
pro
monat
hiermit
willige
ich
in
die
erhebung
und
verarbeitung
der
vorstehenden
daten
fÃ¼r
da
empfangen
de
monatlichen
newsletter
per
e
mail
ein
diese
einwilligung
kann
ich
per
an

protect
direkt
per
connector_11
in
der
newsletter

oder
an
die
im
impressum
genannten
kontaktdaten
jederzeit
widerrufen
die
datenschutzhinweise
habe
ich
zur
kenntnis
genommen
und
bestÃ¤tige
die
mit
absenden
de
formulars
da
digitale
rauchzeichen
success
story
au
digitalisierung
und
modernisierung
von
innoq
schweiz
erscheint
max

mal
pro
jahr
hiermit
willige
ich
in
die
erhebung
und
verarbeitung
der
vorstehenden
daten
fÃ¼r
den
empfang
de
newsletter
der
innoq
schweiz
gmbh
per
e
mail
ein
diese
einwilligung
kann
ich
per
an

protect
direkt
per
connector_11
in
der
newsletter

oder
an
die
im
impressum
genannten
kontaktdaten
jederzeit
widerrufen
die
datenschutzhinweise
habe
ich
zur
kenntnis
genommen
und
bestÃ¤tige
die
mit
absenden
de
formulars
vorname
optional
nachname
optional
anmelden
finden
kÃ¶nnen
sie
un
auch
auf
twitter
youtube
linkedin
xing
fee
