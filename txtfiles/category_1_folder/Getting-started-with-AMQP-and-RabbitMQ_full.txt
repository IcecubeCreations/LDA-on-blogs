connector_1
start
with
technology_1
and
technology_2
bt
attend
qcon
san
francisco
oct


and
find
practical
inspiration
from
leader
register
close
toggle
navigation
facilitate
the
technology_3
of
knowledge
and
innovation
in
professional
development
english
edition
english
edition
chinese
edition
japanese
edition
french
edition
contribute
search
sign
up
login
password
forget
password
infoq
account
back
to
login
resend
activation
back
to
login
login
with
twitter

t
have
an
infoq
account
sign
up
notifications1
login
to
unlock
infoq
s
feature
stay
up
to
date
and
connector_2
connector_3
your
favorite
content
follow
your
favorite
editor
and
peer
sign
up
login

t
have
an
account
register
here
logo
back
to
homepage



apr
unique
visitor
news

presentation
podcast
guide
topic
development
technology_4
technology_5
technology_6
technology_7
technology_8
go
technology_9
technology_10
feature
in
development
reproducible
development
with
container
avdi
grimm
describe
the
future
of
development
which
be
already
here
connector_2
a
tour
of
a
devcontainer
and
contrast
it
with
a
deployment
container
all
in
development
architecture
&
design
architecture
requirement_1
architecture
quality_attribute_1
requirement_2
design
requirement_3
study
pattern_1
component_1
mesh
pattern_2
quality_attribute_2
feature
in
architecture
&
design
oren
eini
on
technology_11
include
consistency
guarantee
and
technology_7
a
the
implementation
technology_12
wesley
reisz
talk
to
oren
eini
about
the
history
of
technology_11
technology_11
be
a
fully
pattern_3
technology_13
document
component_2
that
connector_4
both
cp
and
ap
guarantee
at
different
time
the
two
discus
those
cp
ap
quality_attribute_3
component_3
challenge
the
choice
of
implementation
technology_12
technology_14
and
the
current
plan
for
technology_11


which
include
a
component_4
side
sharding
implementation
all
in
architecture
design
requirement_4
ml
&
connector_data_1
engineering
requirement_5
requirement_6
technology_13
component_2
connector_data_1
requirement_7
connector_5
feature
in
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
katharine
jarmul
discus
utilize
quality_attribute_3
connector_data_1
science
and
requirement_6
component_5
such
a
federate

to
from
connector_data_1
at
the
edge
all
in
requirement_4
ml
connector_data_1
eng
culture
&
agile
diversity
leadership
lean
kanban
personal
growth
scrum
sociocracy
craftmanship
team
collaboration
test
ux
feature
in
culture
&
how
to
run
your
technology_15
department
a
coach
have
find
what
i
think
be
my
connector_6
a
an
agile
coach
i
take
the
tough
decision
to
move
sideways
into
technology_15
requirement_8
in
the
hope
of
use
what
i’d

to
one
day
run
my
own
department
i
believe
that
come
from
coach
would
allow
me
to
see
thing
others
could
not
and
create
something
special
time
will
tell
if
i
have
succeed
this
be
the
story
of
where
i
be
up
to
so
far
all
in
culture

devops
infrastructure
continuous
delivery
automation
container
requirement_9
observability
feature
in
devops
panel
quality_attribute_4
component_3
the
panelist
discus
the
quality_attribute_2
for
the
supply
chain
and
quality_attribute_2
risk
measurement
all
in
devops
eventsnew
helpful
connector_7
about
infoq
infoq
editor
contribute
about
c4media
diversity
choose
your
technology_12
en
中文
日本
fr
infoq
live
how
requirement_9
architecture
achieve
cost
connector_8
improve
quality_attribute_5
&
connector_9
requirement_10
register
now
infoq
live
how
to
migrate
an
component_6
to
serverless
and
what
be
the
common
mistake
to
avoid
register
now
qcon
san
francisco
understand
the
emerge
trend
you
should
pay
attention
to
attend
in
person
on
oct



infoq
homepage

connector_1
start
with
technology_1
and
technology_2
qcon
san
francisco
oct


uncover
emerge
trend
and
practice
from
domain
expert
connector_1
start
with
technology_1
and
technology_2
bookmark
sep



min
connector_10
by
joern
barthel
connector_11
for
infoq
join
a
of
expert
increase
your
visibility
grow
your
career

more
connector_1
start
the
advance
connector_data_2
pattern_4
technology_16
amqp1
be
an
component_6
pattern_5
technology_16
specification
for
pattern_6
connector_data_2
be
build
a
a
wire
level
technology_16
instead
of
an
component_7

e
g
jms2
technology_1
component_8
should
be
capable
of
connector_12
and
connector_13
connector_data_2
regardless
of
their
respective
vendor
a
of
now
there
be
already
quite
a
number
of
server3and
client4implementations
on
multiple
component_9
quality_attribute_6
while
the
original
use
requirement_3
for
the
technology_1
be
to
provide
an
quality_attribute_7
pattern_7
technology_16
for
the
financial
requirement_11
the
current
technology_17
aim
to
provide
an
universal
construction
technology_18
for
generic
connector_data_2
component_10
architecture
in
that
sense
concept
of
connector_data_2
orient
technology_19
mom
component_3
such
a
pattern_8
component_11
be
not
connector_14
directly
a
first
citizen
instead
component_12
be
give
the
mean
to
establish
such
concept
by
wire
relatively
quality_attribute_8
amq
component_13
together
these
component_13
be
also
part
of
the
specification
and
form
a
pattern_5
on
top
of
the
wire
level
technology_16
the
technology_1
component_5
this
component_5
unify
pattern_7
pattern_2
such
a
the
before
mention
publish
subscribe
component_10
transaction
and
connector_5
while

extra
capability
such
a
easily
quality_attribute_9
content
base
connector_15
pattern_8
in
this
component_14
mean
the
decouple
of
component_15
and
component_16
component_15
do
not
need
to
base
on
what
criterion
component_17
will
connector_16
connector_data_2
component_11
be
the
connector_data_3
hold
connector_data_4
in
a
first
in
first
out
fashion
connector_17
pattern_9
the
decision
which
connector_data_2
will
eventually
turn
up
in
the
connector_data_4
component_11
present
in
an
pattern_6
pattern_7
component_18
relate
sponsor
content
relate
sponsor
the
component_19
to
power
synchronize
digital
experience
in
realtime
guarantee
to
connector_9
at
quality_attribute_10
connector_2
start
for
free
in
this
introduction
i
will
try
to
illustrate
the
concept
introduce
by
this
component_5
use
an
technology_1
component_20
implementation5written
by
aman
gupta
in
ruby6
it
us
a
pattern_10
architecture
base
on
eventmachine7
and
therefore
look
and
work
a
bit
unfamiliar
however
the
design
of
the
component_7
show
the
correspondence
between
the
amq
component_5
component_13
in
a
very
straightforward
fashion
and
should
be
of
requirement_10
even
for
programmer
not
familiar
with
the
technology_20
technology_12
it
should
be
note
that
there
be
at
least
three
more
technology_20
component_8
quality_attribute_6



one
of
those
component_20
carrot
have
be
explicitly
connector_11
to
connector_2
back
to
non

drive
pattern_11
technology_20
while
preserve
much
of
the
clean
style
in
which
the
pattern_10
technology_20
component_7
be
connector_11
the
technology_1
component_4
use
in
this
be
the
technology_2
component_4
connector_11
in
erlang11
it
be
an
implementation
of
the
release


of
the
technology_1
specification12
target



in
the
near
future
one
last
thing
before
connector_1
start
pattern_6
pattern_7
be
a
very
common
and
widespread
technology_21
range
from
the
various
instant
messenger
technology_16
such
a
skype
or
technology_22
jabber
to
the
quality_attribute_11
old

these
component_21
all
connector_18
a
couple
of
trait
they
carry
connector_data_4
with
some
more
or
le
arbitrary
content
e
g
an
contain
text
and
a
powerpoint
presentation
about
office
joke
and
some
connector_17
connector_data_5
e
g
an
connector_19
which
be
somewhat
more
formalize
they
be
pattern_6
which
mean
they
have
to
decouple
component_22
and
component_16
and
thus
have
to
component_10
connector_data_4
e
g
someone
connector_20
you
a
chat
connector_data_2
but
you
be
oﬄine
or
your
mailbox
connector_21
an

the
component_22
and
the
component_16
be
distinct
role
with
different
knowledge
i
do
not
need
to
your
technology_23
username
and
password
in
order
to
connector_22
you
an

in
fact
i
don’t
even
need
to
if
you
connector_19
be
an
alias
or
a
“real
connector_19
alone
that
you
use
technology_23
to
connector_23
your
mail
this
distinction
also
mean
that
a
component_22
do
not
control
which
content
be
actually
connector_10
be
subscribe
to
–
exactly
my
component_6
choose
to
drop
most
of
the
unsolicited
medical
advert
that
be
connector_22
hourly
to
my
mailbox
the
fact
the
technology_1
be
an
abstract
technology_16
in
the
sense
that
it
do
not
connector_19
one
specific
use
requirement_3
do
not
make
thing
much
more
complicate
on
the
contrary
the
internet
make
the
metaphor
and
pattern_2
of
pattern_7
ubiquitous
people
generally
be
use
to
them
and
pattern_6
pattern_7
solve
many
problem
in
a
straightforward
and
quality_attribute_12
fashion
a
soon
a
the
initial

roadblock
have
be
overcome
component_5
pattern_6
pattern_7
architecture
in
amq
will
not
any
unnecessary
complexity
to
it
in
order
to
connector_2
start
with
the
example
you
probably
need
to
install
some

if
you
already
have
technology_20
run
on
your
component_18
this
should
take
le
than

minute
the
technology_2
also
carry
a
lot
of
information13
to
connector_2
you
start
a
soon
a
possible
you
will
need
the
technology_24
otp
package
see
technology_25
technology_24

download
technology_26
for
download
and
technology_25
www
technology_24

doc
installation_guide
part_frame
technology_26
for
installation
instruction
the
technology_2
pattern_12
see
technology_25
www
technology_2
technology_27
download
technology_26
for
download
and
technology_25
www
technology_2
technology_27
install
technology_26
for
installation
instruction
a
technology_20
vm
if
there
be
no
technology_20
pattern_13
instal
on
your
component_19
of
choice
you
will
probably
want
to
download
the
technology_20
mri
vm
see
technology_25
www
technology_28
lang

en
download
for
download
option
and
installation
instruction
two
technology_20
gem
packaged
technology_29
the
gem
utility
should
be
quality_attribute_3
along
with
your
technology_20
installation
update
the
gem
utility
itself
if
you
do
a
fresh
install
be
not
sure
if
it’s
current
or
not
type
gem
update
component_18
on
bsd
unix
component_3
you
might
need
to
perform
this
and
the
follow

a
superuser
tell
gem
to
search
for
package
on
the
technology_30

gem
component_23
a
technology_25
gem
technology_31
technology_27
install
the
technology_1
gem
gem
install
tmm1
technology_32
this
should
also
install
the

component_24
gem
now
all
you
need
to
do
be
to
start
the
technology_2
server14
the
amq
component_5
there
be
several
component_13
describe
in
the
amq
specification
one
way
to
distinguish
between
them
be
whether
they
be
configure
by
the
component_4
administrator
or
if
they
be
declare
on
the
ﬂy
by
component_20
the
configure
component_13
be
the
connector_data_2
pattern_12
component_4
itself
which
listen
to
amq
connector_data_4
e
g
on
a
technology_33
ip
connector_data_6
the
virtual
component_25
which
component_26
a
connector_data_2
pattern_12
connector_data_1
into
distinct
set
very
much
alike
the
virtual
component_25
concept
in
webservers
such
a
the
technology_34
technology_25
daemon
the
component_27
which
connector_24
to
a
virtual
component_25
use
credential

require
rubygems

require
mq


event_loop
=
component_28

do

em
run
do

em
add_timer

do

em
stop

end

end

end


#
connector_25
to
the
technology_2
demonstration
pattern_12
component_4
technology_25
www
technology_2
technology_27
example
html#demoserver


technology_32
start
component_25
=
dev
technology_2
technology_27
port
=

component_27
=
guest
password
=
guest
vhost
=
localhost


event_loop
join
it
be
noteworthy
that
any
connector_23
control
beyond
the
grant
of
connector_23
for
a
specific
component_27
to
a
specific
virtual
component_25
have
be
deprecate
in
the
specification
and
be
subsequently
no
long
support
by
technology_2
consequently
a
vendor
specific
solution15
which
connector_19
this
gap
be
expect
to
arrive
in
the
next
major
version
of
the
component_4
the
requirement_12
however16
be
already
quality_attribute_6
via
the
mercurial
component_29
pattern_14
default
branch17
and
be
actively
be
use
by
several
technology_2
component_27
in
order
to
operate
on
the
pattern_12
a
component_20
open
one
or
more
connector_26
to
it
these
connector_26
be
always
bind
to
combination
of
component_27
and
virtual
component_25
the
default
assume
by
the
component_20
implementation
be
the
credential
guest
guest
and
the
virtual
component_25
both
be
part
of
any
default
installation
of
the
technology_2
pattern_12
on
a
connector_26
the
component_20
declare
a
pattern_15
a
pattern_15
serve
a
a
logical
connector_26
inside
of
the
requirement_13
connector_26
to
the
connector_data_2
pattern_12
such
a
multiplexing
mechanism
be
require
due
to
the
stateful
nature
of
some
in
the
technology_16
subsequently
concurrent
connector_23
to
a
pattern_12
over
a
single
connector_26
should
be
component_5
use
a
pool
of
pattern_15
with
serialize
connector_23
or
e
g
component_28
local
pattern_15
in
requirement_3
of
a
component_28
component_5
of
pattern_16
the
technology_20
component_7
use
in
the
example
hide
the
pattern_15
requirement_8
detail
from
the
component_27
operate
on
a
pattern_15
the
component_20
be
now
ready
to
declare
amq
component_30
a
declaration
serve
a
an
assertion
that
the
specify
component_30
exist
on
the
pattern_12
–
if
it
do
not
it
be
create
on
the
ﬂy
these
component_31
be
the
exchange
which
be
the
component_32
to
which
connector_data_4
be
connector_22
the
component_10
which
be
the
component_32
which
connector_21
connector_data_2
the
bind
which
connector_25
exchange
and
component_11
and
pattern_9
connector_17
connector_data_5
all
these
component_30
have
different
property
but
only
the
exchange
and
the
component_10
be
name

the
name
of
an
exchange
grant
a
component_20
the
power
to
publish
connector_data_4
to
it

the
name
of
a
component_10
the
capability
to
connector_16
connector_data_4
from
it
since
there
be
no
technology_17
way
to
connector_16
the
name
of
all
component_31
use
the
amq
technology_16
this
imply
that
connector_23
to
component_11
and
exchange
can
be
facilitate
or
restrict
by
use
well

or
secret
name
see18
for
an
interest
association
of
this
principle
with
connector_23
control
bind
have
no
name
and
be
dependant
on
the
lifecycle
of
the
exchange
and
component_10
they
tie
together
if
one
of
those
two
connector_27
delete
the
bind
be
also

this
imply
that

the
exchange
and
component_10
name
be
require
to
setup
connector_data_2
connector_15
a
connector_data_2
be
an
opaque
piece
of
connector_data_1
with
property
among
these
property
be
metadata
such
a
the
type
of
the
content
encoding
or
e
g
a
identify
the
produce
component_6
flag
regard
delivery
and
or
storage
guarantee
for
the
connector_data_2
a
special
connector_28
connector_17
key


connector_13
and
connector_12
connector_data_2
exchange
type
connector_12
a
connector_data_2
be
a
straightforward
component_33
the
component_20
declare
the
exchange
it
want
to
connector_22
the
connector_data_2
to
and
publish
the
connector_data_2
to
it
the
easy
way
to
connector_16
a
connector_data_2
be
to
setup
a
subscription
in
order
to
do
that
the
component_20
declare
a
component_10
and
a
bind
between
the
previously
declare
exchange
and
that
component_10
on
that
bind
a
subscription
can
be
set
up

require
rubygems

require
mq


event_loop
=
component_28

do

em
run
do

em
add_timer

do

em
stop

end

end

end


subscribe_to_queue


exchange
=
mq
fanout
my
fanout
exchange

component_10
=
mq
component_10
my
fanout
component_10


component_10
bind
exchange
subscribe
do
|header
body|

yield

body

end


end


send_to_exchange
connector_data_2


exchange
=
mq
fanout
my
fanout
exchange

exchange
publish
connector_data_2


end


subscribe_to_queue
do
|header
body|

p
i
connector_29
a
connector_data_2
#{body}

end


send_to_exchange
hello

send_to_exchange
world


event_loop
join
three
thing
determine
if
a
connector_data_2
be
actually
connector_9
to
a
component_10
the
type
of
the
exchange
in
this
example
the
type
be
fanout
the
property
of
the
connector_data_2
in
this
example
the
connector_data_2
have
no
property
it
contain
a
connector_data_7
first
hello
then
world
the
single
optional
property
of
the
give
bind
it’s
key
in
our
example
the
bind
have
no
key
the
type
of
the
exchange
determine
it’s
interpretation
of
the
bind
a
our
example
already
hint
the
fanout
exchange
do
not
interpret
anything
at
all
it
connector_30
connector_data_4
to
all
the
component_11
bind
to
it
without
bind
the
exchange
would
simply
never
connector_9
the
connector_data_2
to
a
component_10
but
drop
them
with
a
subscription
on
a
component_10
in
place
the
pattern_17
connector_31
the
connector_data_2
remove
it
from
the
component_10
the
follow
exchange
type
be
mention
in
the
specification
i
will
describe
them
in
order
of
increasing
complexity
the
direct
exchange
connector_30
connector_data_4
when
the
connector_15
key
property
of
the
connector_data_2
be
identical
to
the
key
property
of
the
bind

require
rubygems

require
mq


event_loop
=
component_28

do

em
run
do

em
add_timer

do

em
stop

end

end

end


subscribe_to_queue
key


exchange
=
mq
direct
my
direct
exchange

component_10
=
mq
component_10
my
direct
component_10


component_10
bind
exchange
key
=
key
subscribe
do
|header
body|

yield

body

end


end


send_to_exchange
connector_data_2
key


exchange
=
mq
direct
my
direct
exchange

exchange
publish
connector_data_2
routing_key
=
key


end


subscribe_to_queue
hello_world
do
|header
body|

p
i
connector_29
a
connector_data_2
#{body}

end


send_to_exchange
hello
hello_world

send_to_exchange
cruel
ignore

send_to_exchange
world
hello_world


event_loop
join
the
topic
exchange
also
take
the
connector_15
key
property
of
the
connector_data_2
into
account
by
perform
a
pattern_2
match
on
it
it
do
this
by
split
the
character
connector_data_1
of
the
connector_17
key
and
bind
key
intowords
these
word
be

seperated
by
dot
it
also
recognize
two
wildcard
character
in
the
bind
key
#
match
zero
or
more
word
and
*
match
one
word
example
the
bind
key
*
requirement_14
#
match
the
connector_17
key
usd
requirement_14
and
eur
requirement_14
db
but
not
requirement_14
nasdaq

require
rubygems

require
mq


event_loop
=
component_28

do

em
run
do

em
add_timer

do

em
stop

end

end

end


subscribe_to_queue
key


exchange
=
mq
topic
my
topic
exchange

component_10
=
mq
component_10
my
topic
component_10


component_10
bind
exchange
key
=
key
subscribe
do
|header
body|

yield

body

end


end


send_to_exchange
connector_data_2
key


exchange
=
mq
topic
my
topic
exchange

exchange
publish
connector_data_2
routing_key
=
key


end


subscribe_to_queue
hello
*
connector_data_2
#
do
|header
body|

p
”i
connector_29
a
connector_data_2
#{body}”

end


send_to_exchange
hello
hello
world
connector_data_2
example
in
technology_28

send_to_exchange
cruel
cruel
world
connector_data_2

send_to_exchange
world
hello
world
connector_data_2


event_loop
join
there
be
other
exchange
mention
in
the
specification
such
a
theheaders
exchange
which
match
base
on
component_6
specific
property
of
a
connector_data_2
which
be
mark
a
require
or
optional
in
the
bind
key
failover
and
component_18
exchange
type
however
none
of
those
type
be
connector_14
in
the
current
release
of
technology_2
in
contrast
to
component_10
exchange
have
be
show
to
have
a
type
associate
with
them
that
dictate
their
connector_17
behaviour
usually
in
collaboration
with
bind
since
exchange
be
name
component_13
the
attempt
to
declare
a
previously
exist
exchange
with
a
different
type
connector_data_8
in
an
error
component_8
must
delete
such
an
exchange
before
declare
it
again
with
the
connector_32
type
exchange
also
do
have
property
these
be
quality_attribute_13
if
set
to
true
the
exchange
will
survive
a
pattern_12
restart
auto
deletion
if
set
to
true
the
exchange
will
connector_2
delete
after
all
component_11
bind
to
it
have
be
delete
passivity
this
will
not
declare
the
exchange
but
will
cause
an
exception
if
no
such
exchange
be
present


default
exchange
and
bind
each
technology_1
pattern_12
declare
one
instance
of
each
support
exchange
type
on
it’s
own
for
every
virtual
component_25
these
exchange
be
name
after
the
their
type
with
a
prefix
of
amq
e
g
amq
fanout
the
empty
exchange
name
be
an
alias
for
amq
direct
for
this
default
direct
exchange
and
only
for
that
the
pattern_12
also
declare
a
bind
for
every
component_10
in
the
component_18
with
the
bind
key
be
identical
to
the
component_10
name
this
behaviour
imply
that
any
component_10
on
the
component_18
can
be
connector_11
into
by
publish
a
connector_data_2
to
the
default
direct
exchange
with
it’s
connector_15
key
property
be
equal
to
the
name
of
the
component_10


component_10
property
and
multiple
bind
this
default
bind
behaviour
imply
that
multiple
bind
can
exist
–
from
one
or
many
component_11
to
one
or
many
exchange
this
enable
the
connector_17
of
connector_data_4
connector_22
to
different
exchange
with
different
connector_17
key
or
other
connector_data_2
property
into
a
single
component_10

require
rubygems

require
mq


event_loop
=
component_28

do

em
run
do

em
add_timer

do

em
stop

end

end

end


subscribe_to_queue
*keys


exchange
=
mq
direct
my
direct
exchange

component_10
=
mq
component_10
my
direct
component_10
with
multiple
bind


bind
=
key
connector_data_9
do
|key|

component_10
bind
exchange
key
=
key

end


bind
last
subscribe
do
|header
body|

yield

body

end


end


send_to_exchange
connector_data_2
key


exchange
=
mq
direct
my
direct
exchange

exchange
publish
connector_data_2
routing_key
=
key


end


subscribe_to_queue
foo
bar
wee
do
|header
body|

p
i
connector_29
a
connector_data_2
#{body}

end


send_to_exchange
hello
foo

send_to_exchange
you
gee

send_to_exchange
cruel
bar

send_to_exchange
world
wee


event_loop
join
apart
from
be
name
component_11
also
do
carry
property
these
be
basically
the
same
property
exchange
carry
quality_attribute_13
if
set
to
true
the
component_10
will
survive
a
pattern_12
restart
auto
deletion
if
set
to
true
the
component_10
will
connector_2
delete
after
all
component_17
have
cease
use
it
passivity
this
will
not
declare
the
component_10
but
will
cause
an
exception
if
no
such
component_10
be
present
exclusivity
if
set
to
true
this
component_10
can
only
be
use
by
the
declare
component_16
these
property
can
be
use
to
create
e
g
transient
and
private
component_11
which
be
exclusive
and
auto
delete
such
component_11
will
automatically
connector_2
remove
by
the
pattern_12
if
the
connector_26
of
the
declare
component_20
break
up
–
they
serve
a
short
live
connector_26
to
the
pattern_12
and
be
useful
e
g
for
connector_33
pattern_18
or
pattern_11
connector_34
over
the
amq
an
exemplary
pattern_18
in
technology_1
look
this
the
pattern_18
component_20
declare
a
connector_data_10
component_10
with
a
unique
name
e
g
an
uuid19
and
the
property
auto
delete
and
exclusive
then
it
connector_20
some
connector_data_11
to
some
exchange
and
include
the
name
of
the
previously
declare
connector_data_10
component_10
in
the
connector_data_10
to
property
of
the
connector_data_2
the
pattern_18
component_4
would
answer
to
these
connector_data_12
by
connector_12
connector_data_2
to
the
default
exchange
use
the
requirement_10
in
the
connector_data_10
to
a
connector_17
key
rely
on
the
above
mention
default
bind
between
the
default
exchange
and
all
component_10
note
that
this
be
a
convention
quality_attribute_14
on
the
contract
with
the
pattern_18
component_4
it
could
interpret
any
property
or
even
the
body
of
the
connector_data_2
to
determine
where
to
connector_data_10
component_11
could
also
be
e
g
persistent
and
connector_35
or
quality_attribute_15
non
autodeleted
and
not
exclusive
multiple
component_17
on
such
a
component_10
would
not
connector_16
individual
copy
of
the
connector_data_4
connector_22
to
it
instead
they
would
connector_18
the
connector_data_4
on
the
component_10
remove
them
atomically
while
connector_36


connector_data_2
delivery
guarantee
component_17
implicitly
or
explicitly
acknowledge
the
consumption
of
a
connector_data_2
when
choose
to
implicitly
acknowledge
a
connector_data_2
be
consider
connector_36
a
soon
a
it
be
connector_9
to
the
component_16
otherwise
the
component_20
have
explicitly
to
connector_22
an
acknowledgement
only
if
this
be
connector_22
the
connector_data_2
be
consider
connector_29
and
will
connector_2
remove
from
the
component_10
if
not
the
pattern_12
will
attempt
to
redeliver
the
connector_data_2
a
soon
a
the
channel20
on
which
the
connector_data_2
be
connector_22
before
have
be
close

require
rubygems

require
mq


event_loop
=
component_28

do

em
run
do

em
add_timer

do

em
stop

end

end

end


subscribe_to_queue


exchange
=
mq
fanout
my
fanout
exchange
with
acks

component_10
=
mq
component_10
my
fanout
component_10
with
acks


component_10
bind
exchange
subscribe
ack
=
true
do
|header
body|

yield

body


ack
unless
body
==
cruel

end


end


send_to_exchange
connector_data_2


exchange
=
mq
fanout
my
fanout
exchange
with
acks

exchange
publish
connector_data_2


end


subscribe_to_queue
do
|header
body|

p
i
connector_29
a
connector_data_2
#{body}

end


send_to_exchange
hello

send_to_exchange
cruel

send_to_exchange
world


event_loop
join


__end__


first
run


i
connector_29
a
connector_data_2
hello

i
connector_29
a
connector_data_2
cruel

i
connector_29
a
connector_data_2
world


second
run


i
connector_29
a
connector_data_2
cruel

i
connector_29
a
connector_data_2
hello

i
connector_29
a
connector_data_2
cruel

i
connector_29
a
connector_data_2
world


and
so
forth
a
connector_data_2
component_22
can
choose
to
connector_2
connector_3
if
the
connector_data_2
connector_22
to
an
exchange
will
not
connector_2
connector_15
to
a
component_10
connector_10
no
bind
exist
and
or
if
there
be
no
component_16
on
the
component_10
to
deal
with
the
connector_data_2
right
away
these
delivery
guarantee
can
be
enforce
by
set
the
connector_data_2
property
mandatory
and
or
immediate
to
true
currently
the
technology_20
technology_1
component_7
use
for
connector_37
the
example
in
this
do
not
support
these
ﬂags
entirely
there
be
however
at
least
two
patch
that
demonstrate
how
such
a
support
could
look
on
github21

additionally
a
component_22
can
set
the
persistent
property
of
a
connector_data_2
to
true
the
pattern_12
will
perform
a
best
effort
to
component_34
these
connector_data_2
in
a
non
volatile
storage
which
should
survive
a
pattern_12
crash
naturally
it
do
not
make
much
sense
to
connector_38
persistent
connector_data_4
to
non
quality_attribute_15
component_10


congestion
control
consumption
of
connector_data_4
be
always
a
subscription
in
the
show
example
what
about
congestion
control
the
specification
offer
a
qos
feature23
which
limit
the
amount
of
connector_data_2
connector_22
to
a
component_16
on
a
specific
pattern_15
unfortunaly
this
feature
be
not
yet
quality_attribute_6
in
a
release
version
of
technology_2
it
be
plan
of


but
be
in
principal
support
by
the
technology_1
technology_35
a
an
alternative
a
component_20
could
opt
to
connector_39
connector_data_4
from
the
component_10
instead
of
connector_1
it
via
a
subscription
when
use
this
approach
congestion
control
can
be
connector_14
manually

require
rubygems

require
mq


event_loop
=
component_28

do

em
run
do

em
add_timer

do

em
stop

end

end

end


subscribe_to_queue


exchange
=
mq
fanout
my
fanout
exchange

component_10
=
mq
component_10
my
fanout
component_10


component_10
bind
exchange
pop
do
|header
body|

yield

body

end


em
add_periodic_timer


do

component_10
pop

end


end


send_to_exchange
connector_data_2


exchange
=
mq
fanout
my
fanout
exchange

exchange
publish
connector_data_2


end


connector_29
=



subscribe_to_queue
do
|header
body|

p
i
connector_29
a
connector_data_2
#{body}

end


send_to_exchange
hello

send_to_exchange
world


event_loop
join
an
example
component_5
imagine
you
want
to
create
a
trivial
chat
component_6
it
should
feature
chat
–
two
component_12
should
be
able
to
connector_22
each
other
connector_data_2
a
friendship
component_18
–
component_12
should
be
able
to
control
who
can
connector_22
them
connector_data_2
we
assume
two
type
of
component_17
on
the
pattern_12
friendship
component_35
and
chat
component_20


become
friend
to
become
friend
with
a
component_27
bob
component_27
alice
connector_20
a
connector_data_2
to
the
fanout
exchange
iends
we
assume
that
this
exchange
be
somehow
connector_23
restricted24
ordinary
component_12
cannot
bind
component_11
to
it
in
the
connector_data_2
she
express
her
wish
to
befriend
bob
a
bunch
of
chat
component_35
be
present
on
the
pattern_12
connector_40
connector_data_4
from
a
single
quality_attribute_15
component_10
bind
to
the
friend
exchange
the
component_10
have
an
unguessable
name
e
g
friend
298f2dbc6865

8a73
8ff6175d396d
which
prevent
chat
component_20
from
connector_40
such
connector_data_4
–
remember
without
the
knowledge
of
the
name
of
a
component_10
no
subscription
can
be
set
up
when
one
of
the
chat
component_35
connector_21
the
connector_data_2
of
alice
only
one
of
the
component_36
will
actually
connector_2
the
connector_data_2
since
they
all
connector_36
from
the
same
component_10
and
decide
that
the
connector_data_11
be
valid
it
connector_41
the
connector_data_2
perhaps
connector_32
or
augment
to
the
default
exchange
be
direct
and
quality_attribute_15
it
us
another
unguessable
connector_17
key

only
to
the
component_20
bob
to
do
that
when
sign
in
for
the
first
time
bob
or
one
of
the
component_35
for
that
matter
have
declare
that
component_10
have
the
same
name
a
the
unguessable
connector_17
key
remember
that
default
bind
exist
for
every
component_10
on
a
virtual
component_25
to
the
default
exchange
the
component_27
bob
now
connector_27
ask
by
his
chat
component_20
if
he
want
to
be
friend
with
alice
alice
include
a
special
property
connector_28
connector_data_10
to
in
her
connector_data_11
connector_data_2
–
this
property
contain
the
unguessable
name
of
a
quality_attribute_15
and
exclusive
friendship
component_10
that
alice
have
declare
for
her
future
connector_34
with
bob
if
bob
want
to
be
friend
with
alice
he
connector_20
the
default
exchange
a
chat
connector_data_2
use
the
name
of
the
friendship
component_10
a
connector_17
key
he
also
declare
an
exclusive
and
quality_attribute_15
friendship
component_10
and
put
it’s
name
into
the
connector_data_10
to
property
example
the
friendship
between
alice
and
bob
be
represent
by
the
component_10
b5725c4a
6621463e
aaf1
8222aa3ad601
this
be
the
requirement_10
of
the
connector_15
key
property
of
bob
connector_data_4
to
alice
the
name
of
the
component_10
bob
connector_data_4
for
alice
be
turn
up
in
and
it
be
the
requirement_10
of
the
connector_data_10
to
property
of
alices
connector_data_4
to
bob
since
these
friendship
component_11
be
quality_attribute_15
connector_data_4
connector_42
while
the
chat
component_12
be
oﬄine
be
not
connector_1
lose
when
requirement_15
in
component_12
would
connector_36
all
the
connector_data_2
wait
for
them
in
their
friend
component_11
while
subscribe
to
connector_data_4
on
it
should
bob
ever
decide
that
he
do
not
alice
anymore
he
can
simply
delete
the
friendship
component_10
he
declare
for
alice
alice
will
notice
this
when
she
connector_20
connector_data_4
use
the
mandatory
ﬂag
this
will
cause
the
exchange
to
her
connector_data_4
a
not
routable
thing
leave
unmentioned
there
be
many
area
leave
untouchted
by
this
introduction
miss
be
e
g
transaction
semantics
detail
about
the
re
connector_15
of
connector_data_2
the
match
specification
of
the
exchange
and
detail
about
the
difference
between
the
technology_1
specification
–
especially
the
component_5
connector_43
that
be
lie
ahead
in
the
version


for
the
sake
of
brevity
a
presence
component_5
for
the
chat
example
be
also
omit
the
requirement_8
perspective
have
be
leave
out
of
the
picture
a
it
be
not
yet
clear
which
direction
technology_1
in
general
and
technology_2
in
particular
will
take
currently
there
be
one
topic
exchange
quality_attribute_6
in
the
reserve
amq
namespace
which
connector_27
all
the
requirement_15
connector_data_2
of
the
pattern_12
however
the
central
technology_36
to
show
the
currently
declare
component_31
and
connector_44
component_12
be
connector_14
in
the
administrative
rabbitmqctl
commandline
instead
of
an
amq
component_32

require
rubygems

require
mq


path_to_rabbitmqctl
=
usr
local
sbin
rabbitmqctl


event_loop
=
component_28

{
em
run
}


subscribe_to_logger


random_name
=


map{
a
z
to_a
rand

}
join


exchange
=
mq
topic
amq
technology_2
requirement_15

component_10
=
mq
component_10
random_name
autodelete
=
true
exclusive
=
true

bind
=
component_10
bind
exchange
key
=
#


bind
subscribe
do
|header
body|

body
split
\n
each
do
|message|

yield

connector_data_2

end

end


end


exchange_info
vhost
=

info
exchange
vhost
%w
name
type
quality_attribute_15
auto_delete
argument

end


queue_info
vhost
=

info
component_10
vhost
%w
name
quality_attribute_15
auto_delete
argument
technology_37
messages_ready
messages_unacknowledged
messages_uncommitted
connector_data_4
acks_uncommitted
component_17
transaction
memory

end


binding_info
vhost
=

info
bind
vhost

end


connection_info

info
exchange
nil
%w
technology_37
connector_19
port
peer_address
peer_port
state
pattern_15
component_27
vhost
timeout
frame_max
recv_oct
recv_cnt
send_oct
send_cnt
send_pend

end


info
about
vhost
=
nil
connector_data_13
=


column_length
=



put
#{about}
info\n


cmd
=
#{path_to_rabbitmqctl}
list_#{about}s

cmd
p
#{vhost}
if
vhost

cmd
#{items
join
}

&1


pattern_19
=
io
popen
cmd


pattern_19
readlines
connector_data_9
{
|line|
line
chomp
split
\t
connector_data_9
{
|item|
item
ljust
column_length

column_length
}
}
slice


each
do
|exchange|

exchange
join
+
\n

end


end


subscribe_to_logger
do
|message|

p
technology_2
logger
#{message}

end


%w
connector_26
exchange
component_10
bind
each
do
|method|

self
connector_22
#{method}_info
to_sym

end


event_loop
join
it
should
also
be
mention
that
there
be
already
a
few
distribution
technology_38
quality_attribute_6
which
use
technology_1
or
even
technology_2
specifically
these
technology_38
e
g
nanite25
or
lizzy26
introduce
more
or
le
abstract
pattern_5
on
top
of
technology_1
in
order
to
facilitate
such
a
the
distribution
of
work
over
technology_20
component_8
in
a
cluster


where
to
go
next
apart
from
toy
around
with
a
locally
instal
pattern_12
the
friendly
and
responsive
mailing
list27

should
be
the
first
stop
for

more
about
technology_1
and
technology_2
apart
from
that
you
could
have
a
look
at
the
presentation
and

connector_45
on
the
technology_2
homepage29
chat
with
member
of
the
use
the
#rabbitmq
pattern_15
on
the
freenode30
irc
requirement_13
or
connector_10
one31
of32
the33
various

with
technology_2
and
or
technology_1
relate
content
for
starter
the
of
lshift34
one
of
the
founder
of
technology_2
there
be
also
quite
a
few
technology_1
and
or
technology_2
specific
tweet
quality_attribute_6
on
twitter35
via
the
hashtags
#rabbitmq
and
#amqp
have
fun
explore
and
welcome
to
the
world
of
pattern_6
connector_data_2

technology_25
www
infoq
technology_27
technology_32

ttp
technology_4
sun
technology_27
technology_15
technology_39

advance
connector_data_2
pattern_4
technology_16
implementation

technology_25
www
technology_2
technology_27
how
html#clients

technology_25
technology_31
technology_27
tmm1
technology_32
tree
master

technology_25
www
infoq
technology_27
technology_28

technology_25
rubyeventmachine
technology_27

technology_25
technology_31
technology_27
famoseagle
carrot
tree
master

technology_25
technology_31
technology_27
celldee
bunny
tree
master

technology_25
technology_40
technology_34

download
technology_26

technology_24

technology_25
www
technology_2
technology_27
specification
technology_26

technology_25
www
technology_2
technology_27
how
technology_26

technology_25
www
technology_2
technology_27
how
technology_26

accesscontroldesign

acls

technology_25
www
technology_2
technology_27
mercurial
html#defaultbranch

minimum
technology_41
induction

universally
unique
identifier

or
the
connector_26
associate
with
the
pattern_15

somic
technology_32

yawn
technology_32

basicqosdesign

a
an
alternative
alice
could
have
be
give
another
special
connector_17
key
for
perform
friend
connector_data_11
all
the
chat
component_35
would
bind
friend
298f2dbc


8a73
8ff6175d396d
with
the
bind
key
of
all
valid
component_12
of
the
chat
component_18
other
variant
be
possible
in
fact
all
of
the
component_5
decision
in
this
example
could
have
be
make
in
lot
of
different
way

ezmobius
nanite

bmizerany
lizzy

connector_data_14
technology_2
technology_27
mailing
connector_data_15

technology_2

rabbitm
highlight
presentation

and

freenode

minimum
technology_41
induction

kirk
s
rant
blogspot

technology_25
somic

category
technology_2

technology_25
www
lshift
net

category
lshift
sw
technology_2

twitter
inspire
by
this
content
connector_11
for
infoq
become
an
editor
for
infoq
be
one
of
the
best
decision
of
my
career
it
have
challenge
me
and
help
me
grow
in
so
many
way
we
technology_42
love
to
have
more
people
join
our
team
thomas
bettslead
editor
architecture
and
design
@infoq
senior
principal
engineer
connector_11
for
infoq
rate
this
adoption
style
author

this
content
be
in
the
requirement_1
architecture
topic
relate
topic
development
architecture
&
design
devops
technology_1
technology_20
pattern_7
pattern_20
dynamic
technology_12
open_source
infrastructure
architecture
requirement_1
architecture
relate
editorial
popular
across
infoq
go
requirement_16
with
technology_43
and
graalvm
why
you
should
care
about
architecture
technology_4
news
roundup
jeps
for
jdk

project
lilliput
milestone
technology_43
technology_38
quarkus



state
of
the
technology_4
ecosystem
report
from
relic
ml
technology_36
to
accelerate
your
work
with
cassie
breviu
release
technology_44
dns
private
resolver
in
preview
relate
content
mammoth
stump
in
the
requirement_9
era
meet
eu
regulation
by
be
requirement_9
requirement_16
and
requirement_9
agnostic
wave
a
requirement_3
study
for
low
architectural
complexity
envoy
a
a
component_1
to
component_1
pattern_21
at
mux
why
you
should
care
about
architecture
reduce
cognitive
load
in
agile
devops
team
use
team
topology
technology_45
chronicle
the
end
of
the
component_7
strangler
design
quality_attribute_4
tenant
isolation
in
technology_46
for
serverless
component_37
architecture
it
might
not
be
what
you
think
it
be
architecture
and
design
infoq
trend
report—april

low

technology_36
optimize
engineering
time
for
internal
component_38
quality_attribute_4
the
development
&
supply
chain
of
open_source
os
architecting
for
quality_attribute_16
panel
how
the
financial
time
approach
engineering
enablement
the
infoq
emag
path
to
production
deployment
pipeline
a
a
competitive
advantage
the
infoq
emag
the
infoq
trend
report

build
an
quality_attribute_17
digital
component_19
adam
hansrod
on
the
benefit
challenge
and
approach
hashicorp
vault
improve
eventual
consistency
with
component_4
side
consistent
connector_data_16
announce
the
general
quality_attribute_18
of
technology_44
container
component_37
at
build

requirement_6
at
the
edge
how
connector_1
feedback
from
angry
component_12
help
to
develop
quality_attribute_11
technology_15
jep

component_39
to
extend
pattern_2
match
in
technology_4
cloudflare
d1
provide
quality_attribute_3
technology_47
for
cloudflare
component_40
release

technology_12
requirement_4
train
dataset
massive
technology_4
news
roundup
openjdk
technology_43
connector_data_17
and
cf
payara
component_19
technology_34
technology_48
connector_data_17
how
to
run
your
technology_15
department
a
coach
kalix
build
serverless
requirement_9
requirement_16
requirement_17
crtical
component_38
with
no
component_2
jetpack
bring
update
architectural
and
ui
component_31
and
improve
requirement_2
technology_36
release
technology_44
dns
private
resolver
in
preview
technology_49
support
nitrotpm
and
uefi
quality_attribute_4
boot
architecting
for
the
edge
requirement_9
introduce
technology_50
quality_attribute_19
technology_51
for
requirement_1
component_2
workload
requirement_4
for
developer
a
future
or
a
reality
quality_attribute_20
by
agreement
requirement_10
outcome
over
impose
solution
technology_52
lambda
now
have
support
for
technology_53

runtime
effectively
pattern_22
your
pattern_22
miedwar
meshbesher
on
use
vigilance
control
meta
artificial_intelligence’s
connector_data_1
set
to
accelerate
renewable
energy
catalyst
discovery
for
hydrogen
fuel
deepmind
introduce
gato
a
generalist
requirement_4
agent
go
requirement_16
with
technology_43
and
graalvm
deal
with
thunder
herd
at
braintree
how
norway
s
large
bureaucracy
optimise
for
fast
flow
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_42
out
every
tuesday
join
a
of
over


senior
developer
pattern_23
an
example
enter
your
e
mail
connector_19
select
your
country
select
a
country
i
to
infoq
technology_27
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
hello
stranger
you
need
to
register
an
infoq
account
or
login
or
login
to

but
there
s
so
much
more
behind
be
register
connector_2
the
most
out
of
the
infoq
experience
tell
u
what
you
think
allow
technology_26
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_18
to
any
of
my
connector_data_4
in
this
component_28

watch
component_28
example
by
alexis
richardson
example
by
alexis
richardson
your
connector_data_2
be
await
moderation
thank
you
for
participate
in
the
discussion
the
example
on
technology_31
technology_31
technology_27
abcde
technology_32
technology_2

connector_data_10
back
to
top
close
your
connector_data_10
quote
original
connector_data_2
allow
technology_26
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_18
to
any
of
my
connector_data_4
in
this
component_28
cancel
close
your
connector_data_10
allow
technology_26
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_18
to
any
of
my
connector_data_4
in
this
component_28
cancel
close
ok

development
how
to
prepare
for
the
unexpected
an
influxdata
outage
story
tell
at
kubeconeu

reproducible
development
with
container
green
development
terminology
and
climate
commitment
explain
by
at
devoxx
uk
architecture
&
design
oren
eini
on
technology_11
include
consistency
guarantee
and
technology_7
a
the
implementation
technology_12
kalix
build
serverless
requirement_9
requirement_16
requirement_17
crtical
component_38
with
no
component_2
architecting
for
the
edge
culture
&
how
connector_1
feedback
from
angry
component_12
help
to
develop
quality_attribute_11
technology_15
how
to
run
your
technology_15
department
a
coach
build
a
culture
of
quality_attribute_21
and
curiosity
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
release

technology_12
requirement_4
train
dataset
massive
requirement_4
for
developer
a
future
or
a
reality
devops
hashicorp
vault
improve
eventual
consistency
with
component_4
side
consistent
connector_data_16
cloudflare
d1
provide
quality_attribute_3
technology_47
for
cloudflare
component_40
effectively
pattern_22
your
pattern_22
miedwar
meshbesher
on
use
vigilance
control
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_42
out
every
tuesday
join
a
of
over


senior
developer
pattern_23
an
example
connector_2
a
quick
overview
of
content
publish
on
a
variety
of
innovator
and
early
adopter
technology_21
what
you
don’t
that
you
don’t
stay
up
to
date
with
the
late
connector_data_5
from
the
topic
you
be
interest
in
enter
your
e
mail
connector_19
select
your
country
select
a
country
i
to
infoq
technology_27
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
qcon
development
conference
real
world
technical
talk
no
technology_15
pitch
practical
idea
to
inspire
you
and
your
team
qcon
san
francisco
oct


in
person
qcon
san
francisco
bring
together
the
world
s
most
innovative
senior
engineer
across
multiple
domain
to
connector_18
their
real
world
implementation
of
emerge
trend
and
practice
uncover
emerge
trend
and
practice
to
solve
your
complex
engineering
challenge
without
the
technology_15
pitch
connector_8
your
spot
now
home
create
account
login
qcon
conference
contribute
infoq
editor
about
infoq
about
c4media

technology_18
infoq
developer
requirement_14
diversity
infoq
live


infoq
live


infoq
live


qcon
san
francisco



qcon
plus



follow
u
on
youtube212k
follower
linkedin18k
follower
rss19k
reader
twitter50k
follower
facebook20k

alexanew
stay
in
the
the
infoq
podcast
engineering
culture
podcast
the
architect
newsletter
general
feedback
feedback@infoq
technology_27
advertising
sales@infoq
technology_27
editorial
editors@infoq
technology_27
requirement_14
marketing@infoq
technology_27
infoq
technology_27
and
all
content
copyright
©


c4media
inc
infoq
technology_27
component_25
at
contegix
the
best
isp
we
ve
ever
work
with
privacy
notice
term
and
condition
requirement_18
bt
