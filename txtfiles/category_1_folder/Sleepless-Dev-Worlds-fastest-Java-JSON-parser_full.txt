sleepless
dev
world
s
fast
technology_1
technology_2
requirement_1
sleepless
dev
rick
s
sleepless
in
dublin
random
think
about
development
subscribe
to
atom
atom
rick
rick
tuesday
world
s
fast
technology_1
technology_2
requirement_1
i
connector_1
the
world
s
fast
technology_1
technology_2
requirement_1
so
far
i
be
sure
someone
can
connector_1
one
that
be
fast
i
should
say
i
connector_1
a
technology_1
technology_2
requirement_1
that
be
currently
fast
than
technology_3
smart
technology_2
and
technology_4
the
world
be
pretty
big
and
i
be
sure
if
i
be
able
to
do
this
that
someone
out
there
have
one
that
be
fast
there
be
some
guy
in
the
freeze
tundra
in
northwest
siberia
that
have
the
world
s
fast
technology_2
requirement_1
until
he
come
connector_2
i
will
claim
it
i
wish
i
could
tell
you
that
it
be
the
fast
because
i
use
some
really
fancy
technique
but
i
can
t
if
you
some
fancy
technique
to
make
it
fast
me
i
will
try
to
it
in
late
the
truth
be
my
technique
be
brute
force
trial
and
error
i
connector_1
six
or
seven
different
requirement_1
and
then
requirement_2
tune
them
the
one
that
do
well
i
keep
the
one
that
do
not
do
well
i
kill
then
i
keep
iterate
i
be
a
bit
more
edison
and
lot
le
tesla
although
i
do
have
some
idea
which
i
think
would
make
it
go
fast
and
those
in
retrospect
seem
to
have
pan
out
quality_attribute_1
than
i
expect
i
have
a
quality_attribute_1
mentor
i
a
few
thing
about
requirement_2
and
requirement_2
tune
along
the
way
and
i
there
be
still
some
low
hang
fruit
it
can
be
fast
i
it
can
be
fast
right
now
it
need
feature
more
than
quality_attribute_2
and
fast
will
have
to
be
fast
enough
some
caveat
i
ve
only
test
this
with
that
be
up
to
2mb
in
size
my
plan
be
to
never
go
above
30k
in
size
and
only
optimize
for
small
connector_data_1
small
technology_5
and
pattern_1
connector_data_2
then
someone
connector_1
a
benchmark
with
a
connector_data_3
and
boon
technology_2
requirement_1
be
lose
by
a
20%
margin
behind
technology_4
and
it
make
me
sad
so
i
make
it
fast
i
have
a
nasty
competitive
streak
that
i
try
to
bury
deep
i
connector_3
it
from
my
mom
s
side
of
the
family
but
come
out
and
make
me
argue
on
the
internet
much
long
than
i
should
it
connector_4
mute
with
age
so
why
connector_1
a
technology_2
requirement_1
i
be
the
author
of
boon
boon
be
mean
to
be
an
battery
include
technology_6
for
technology_1
i
look
at
boon
a
the
technology_7
lib
to
technology_7
except
i
can
build
boon
on
top
of
technology_1
and
the
jdk
boon
quality_attribute_3
hand
component_1
requirement_3
slice
notation
in
memory
connector_data_4
connector_5
and
technology_2
`repr`
support
boon
be
useful
but
far
from
do
technology_2
to
me
be
essential
to
boon
every
time
i
mention
that
boon
would
have
technology_2
support
i
connector_3
why
would
you
do
that
why
not
use
technology_4
the
answer
be
technology_4
be
a
fine
technology_6
and
it
have
feature
for
technology_2
that
boon
will
never
have
but
i
t
want
boon
to
quality_attribute_4
on
anything
but
the
jdk
boon
technology_2
support
be
not
mean
to
replace
technology_4
it
do
not
have
all
of
the
feature
of
technology_4
technology_4
be
too
much
for
boon
i
have
use
technology_4
and
it
be
a
great
technology_6
and
it
be
full
feature
i
have
a
lot
of
respect
for
technology_4
boon
can
connector_6
a
technology_2
into
a
hashmap
there
be
no
technology_2
dom
thing
in
boon
the
close
you
connector_3
be
a
connector_data_5
hashmap
double
hierarchy
i
t
much
care
for
technology_2
doms
it
another
component_2
to
and
i
connector_data_5
and
hashmap
quality_attribute_1
boon
can
also
connector_6
in
a
technology_2
and
create
a
hierarchy
of
technology_1
component_3
currently
boon
only
work
with
char
byte
charsequence
stringbuilder
characterbuffer
etc
there
be
no
support
for
inputstream
or
reader
boon
have
an
io
lib
that
can
turn
a
inputstream
or
a
reader
into
a
or
byte
so
you
can
easily
invoke
the
requirement_1
it
take
one
line
of
to
turn
an
inputstream
or
reader
into
a
or
byte
with
boon
feature
that
boon
technology_2
support
have
connector_data_4
serialization
in
only
out
not
connector_7
yet
connector_6
technology_2
a
connector_data_6
connector_data_5
double
and
that
pretty
much
sum
it
up
for
now
i
plan
on
the
follow
connector_data_4
serialization
output
take
a
technology_1
connector_data_4
or
connector_data_6
and
create
technology_8
loose
technology_2
syntax
support
the
first
be
something
i
plan
on
all
along
the
second
be
a
component_4
connector_data_7
it
be
from
my
most
important
component_4
the
first
component_4
of
boon
technology_2
support
you
can
see
the
benchmark
at
technology_9
technology_10
technology_11
richardhightower
technology_8
requirement_1
benchmark
the
benchmark
component_5
be
create
by
st√©phane
landelle
mr
landelle
have
forget
more
about
benchmarking
than
i
he
be
use
the
openjdk
benchmark
technology_12
which
be
suppose
to
simulate
close
to
real
world
usage
by
eliminate
tight
loop
jit
optimization
which
would
not
happen
in
the
real
world
boon
do
well
with
tight
loop
jit
optimization
too
btw
he
setup
jmh
the
jmh
be
a
technology_1
harness
for
build
run
and
analyze
nano
micro
macro
benchmark
connector_1
in
technology_1
and
other
technology_13
target
the
technology_14
it
be
part
of
the
openjdk
stuff
yep
that
be
about
all
i
run
with
technology_1
jar
target
microbenchmarks
jar
*
wi
i
f
t
benchmark
mode
thr
count
sec
mean
mean
error
unit
i
g
b
j
boonbenchmark
actionlabel
thrpt
ops
s
i
g
b
j
gsonbenchmark
actionlabel
thrpt
ops
s
i
g
b
j
jacksonastbenchmark
actionlabel
thrpt
ops
s
i
g
b
j
jacksonobjectbenchmark
actionlabel
thrpt
ops
s
i
g
b
j
jsonsmartbenchmark
actionlabel
thrpt
ops
s
winner
boon
30%
to
90%
fast
benchmark
mode
thr
count
sec
mean
mean
error
unit
i
g
b
j
boonbenchmark
citmcatalog
thrpt
ops
s
i
g
b
j
gsonbenchmark
citmcatalog
thrpt
ops
s
i
g
b
j
jacksonastbenchmark
citmcatalog
thrpt
ops
s
i
g
b
j
jacksonobjectbenchmark
citmcatalog
thrpt
ops
s
i
g
b
j
jsonsmartbenchmark
citmcatalog
thrpt
ops
s
winner
boon
technology_4
and
boon
be
neck
and
neck
technology_4
technology_2
dom
thing
against
boon
s
hashmap
connector_data_5
thing
benchmark
mode
thr
count
sec
mean
mean
error
unit
i
g
b
j
boonbenchmark
thrpt
ops
s
i
g
b
j
gsonbenchmark
thrpt
ops
s
i
g
b
j
jacksonastbenchmark
thrpt
ops
s
i
g
b
j
jacksonobjectbenchmark
thrpt
ops
s
i
g
b
j
jsonsmartbenchmark
thrpt
ops
s
winner
boon
up
to
twice
a
fast
and
at
least
60%
fast
benchmark
mode
thr
count
sec
mean
mean
error
unit
i
g
b
j
boonbenchmark
thrpt
ops
s
i
g
b
j
gsonbenchmark
thrpt
ops
s
i
g
b
j
jacksonastbenchmark
thrpt
ops
s
i
g
b
j
jacksonobjectbenchmark
thrpt
ops
s
i
g
b
j
jsonsmartbenchmark
thrpt
ops
s
winner
boon
33%
fast
to
5x
a
fast
benchmark
mode
thr
count
sec
mean
mean
error
unit
i
g
b
j
boonbenchmark
sgml
thrpt
ops
s
i
g
b
j
gsonbenchmark
sgml
thrpt
ops
s
i
g
b
j
jacksonastbenchmark
sgml
thrpt
ops
s
i
g
b
j
jacksonobjectbenchmark
sgml
thrpt
ops
s
i
g
b
j
jsonsmartbenchmark
sgml
thrpt
ops
s
winner
boon
70%
fast
to
5x
fast
benchmark
mode
thr
count
sec
mean
mean
error
unit
i
g
b
j
boonbenchmark
small
thrpt
ops
s
i
g
b
j
gsonbenchmark
small
thrpt
ops
s
i
g
b
j
jacksonastbenchmark
small
thrpt
ops
s
i
g
b
j
jacksonobjectbenchmark
small
thrpt
ops
s
i
g
b
j
jsonsmartbenchmark
small
thrpt
ops
s
winner
boon
60%
fast
to
10x
fast
benchmark
mode
thr
count
sec
mean
mean
error
unit
i
g
b
j
boonbenchmark
webxml
thrpt
ops
s
i
g
b
j
gsonbenchmark
webxml
thrpt
ops
s
i
g
b
j
jacksonastbenchmark
webxml
thrpt
ops
s
i
g
b
j
jacksonobjectbenchmark
webxml
thrpt
ops
s
i
g
b
j
jsonsmartbenchmark
webxml
thrpt
ops
s
winner
boon
a
lot
fast
benchmark
mode
thr
count
sec
mean
mean
error
unit
i
g
b
j
boonbenchmark
widget
thrpt
ops
s
i
g
b
j
gsonbenchmark
widget
thrpt
ops
s
i
g
b
j
jacksonastbenchmark
widget
thrpt
ops
s
i
g
b
j
jacksonobjectbenchmark
widget
thrpt
ops
s
i
g
b
j
jsonsmartbenchmark
widget
thrpt
ops
s
winner
boon
a
lot
fast
i
believe
the
above
be
do
without
the
index
overlay
requirement_1
there
be
an
index
overlay
requirement_1
version
that
be
a
bit
fast
to
20%
fast
you
turn
it
on
by
set
a
flag
in
the
technology_2
builder
when
i
run
the
test
before
both
the
index
overlay
and
the
normal
requirement_1
be
win
but
it
be
when
i
bench
press
lb
i
tell
people
lb
because
if
i
tell
them
what
i
really
bench
press
no
one
would
believe
me
lb
be
unbelievable
enough
common
and
question
and
my
connector_8
didn
t
you
pick
technology_2
that
boon
would
do
the
best
on
sadly
no
i
use
the
sample
technology_2
from
technology_8
and
one
sample
that
stephane
include
i
think
boon
do
best
on
technology_2
that
have
a
lot
of
number
to
requirement_4
boon
copy
a
technique
from
technology_4
to
do
a
no
buffer
requirement_1
of
and
long
and
then
expand
on
that
idea
to
include
double
so
if
i
be
go
to
cheat
that
be
how
i
would
do
it
i
technology_15
connector_3
a
technology_2
that
be
full
of
double
and
fill
the
up
with
them
and
then
boon
should
destroy
the
competition
but
why
i
make
no
money
from
the
boon
technology_2
requirement_1
i
do
it
to
and
grow
a
a
developer
what
would
i
how
would
i
grow
why
t
you
test
this
against
technology_2
requirement_1
xyz
i
have
only
hear
of
technology_4
and
technology_3
when
i
start
so
those
be
the
two
i
start
with
stephane
technology_8
smart
i
be
sure
since
i
be
not
a
rocket
scientist
that
someone
out
there
have
a
fast
technology_2
requirement_1
those
other
technology_2
requirement_1
be
much
more
mature
true
please
continue
to
use
them
there
be
no
reason
to
switch
to
boon
technology_2
requirement_4
if
they
work
for
you
i
t
want
to
compete
against
technology_4
boon
be
not
a
technology_2
project
it
be
a
project
that
have
technology_2
support
those
other
technology_2
requirement_1
have
feature
xyx
and
boon
do
not
again
true
please
continue
to
use
them
there
be
no
reason
to
switch
to
boon
technology_2
requirement_4
if
they
work
for
you
i
t
want
to
compete
against
technology_4
boon
be
not
a
technology_2
project
it
be
a
project
that
have
technology_2
support
that
say
feel
free
to
connector_9
me
a
feature
connector_data_7
stephane
have
connector_10
me
several
and
i
connector_7
all
but
the
two
i
mention
above
why
why
not
why
do
you
reinvent
the
wheel
why
do
we
have
hyundai
honda
ford
and
chevrolet
i
be
look
for
a
small
technology_2
requirement_1
i
have
to
make
it
fast
because
the
first
thing
developer
ask
be
how
fast
be
this
compare
to
technology_4
so
there
you
go
while
quality_attribute_2
of
your
technology_2
requirement_1
might
not
paredo
out
to
mean
much
to
your
overall
tech
technology_16
one
need
to
make
it
fast
for
it
to
be
consider
i
t
plan
on
spend
much
more
time
on
the
benchmark
side
of
the
house
if
someone
beat
boon
really
badly
then
there
be
lot
of
trick
i
that
i
be
sure
could
connector_3
boon
technology_2
requirement_4
to
go
even
fast
since
it
be
currently
the
fast
that
i
of
and
it
be
fast
than
the
requirement_1
that
connector_4
use
the
most
quality_attribute_2
be
no
long
a
top
priority
my
plan
be
for
boon
to
offer
handlebar
templating
and
expression
and
a
full
query
technology_13
for
oo
which
be
already
connector_7
btw
i
do
plan
on
create
technology_5
and
pattern_1
technology_17
on
top
of
boon
technology_2
support
so
be
slow
be
not
in
the
card
my
plan
be
to
do
this
on
top
of
vertx
because
it
be
easy
for
me
than
technology_18
yes
i
plan
on
connector_11
my
own
pattern_1
technology_17
and
my
own
technology_5
technology_17
and
my
own
web
technology_17
yes
i
plan
on
compete
against
technology_19
mvc
strut
jax
r
etc
so
if
my
technology_2
requirement_1
piss
you
off
wait
until
you
see
my
complete
tech
technology_16
vision
with
my
very
own
handlebar
implementation
replace
jsps
will
i
ever
do
it
all
i
have
doubt
but
boon
be
already
useful
a
be
isn
t
boon
fast
because
it
do
not
support
feature
xyx
maybe
i
be
surprise
that
boon
be
a
fast
a
it
be
i
have
never
do
this
before
this
be
all
to
me
i
figure
technology_4
be
unbeatable
once
i
have
a
more
tolerant
lax
technology_2
requirement_1
maybe
boon
will
be
slow
i
t
your
benchmark
be
unfair
because
you
t
do
connector_9
a
connector_12
connector_data_7
i
will
connector_13
it
out
technology_3
do
a
lot
quality_attribute_1
on
the
initial
benchmark
that
i
connector_1
but
do
not
seem
to
fair
a
well
under
jmh
i
t
actually
why
by
rickhigh
at
be
thisblogthis
connector_14
to
twittershare
to
facebookshare
to
pinterest
no
a
old
home
subscribe
to
atom
about
me
rickhigh
pattern_2
my
complete
profile
relate
sit
technology_20
train
technology_21
train
technology_22
train
technology_21
consult
architecture
analysis
technology_21
consult
quick
start
technology_21
technology_21
support
requirement_5
computing
executive
seminar
requirement_5
computing
expert
infoq
linkedin
profile
my
for
outdated
bio
twitter
fee
archive
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñº
‚ñº
from
to
technology_1
util
connector_data_6
boon
fast
than
technology_4
boon
technology_2
requirement_1
seem
to
be
the
fast
jsonpath
decide
boon
be
the
fast
way
to
do
j
lrucache
in
technology_1
use
technology_1
apis
world
s
fast
technology_1
technology_2
requirement_1
here
we
go
again
late
round
of
optimization
j
boon
fast
way
to
turn
technology_2
into
useable
technology_1
u
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
‚ñ∫
rick
hightower
copyright
technology_23
all
right
reserve
movie
right
give
to
jason
statham
quality_attribute_3
theme
theme
image
by
dino4
powered
by
technology_24
technology_22
and
technology_21
support
train
for
technology_25
technology_26
technology_21
train
