pattern_1
architecture
principle
#4
pattern_2
connector_1
over
pattern_3
connector_1
xebia
xebia
digital
transformation
digital
strategy
devops
and
sre
agile
transformation
requirement_1
connector_data_1
and
requirement_2
technology_1
low
solution
xebia
academy
requirement_3
finance
retail
travel
|
hospitality
healthcare
coding_keyword_1
|
utility
non
profit
transport
|
requirement_4
|
logistics
requirement_5
|
it
technology_1
|
telecom
|

train
requirement_6
story
insight
news

career
about
u
about
u
team
partner
and
location
europe
europe
america
apac
middle
east
and
africa
×
digital
transformation
digital
strategy
devops
and
sre
agile
transformation
requirement_1
connector_data_1
and
requirement_2
technology_1
low
solution
xebia
academy
requirement_3
finance
retail
travel
|
hospitality
healthcare
coding_keyword_1
|
utility
non
profit
transport
|
requirement_4
|
logistics
requirement_5
|
it
technology_1
|
telecom
|

train
requirement_6
story
insight
news

career
about
u
about
u
team
partner
and
location
globe
europe
europe
america
apac
middle
east
and
africa
pattern_1
architecture
principle
#4
pattern_2
connector_1
over
pattern_3
connector_1
by
gero
vermaas



architecture
connector_2
this
coding_keyword_2
be
part
of
a
six
part
series
on
pattern_1
principle
other
part
be
requirement_5
capability
autonomy
small
bound
component_1
best
technology_1
and
one
team
pattern_1
be
a
pattern_4
topic
because
of
that
a
lot
of
people
be
say
a
lot
of
thing
to
help
organization
make
the
best
of
this
architectural
style
xebia
have
define
a
set
of
principle
that
we
feel
should
be
apply
when
connector_3
a
pattern_5
architecture
this
explain
why
we
prefer
pattern_2
connector_1
over
pattern_3
connector_1
in
a
previous
coding_keyword_2
in
this
series
we
explain
that
we
prefer
autonomy
of
pattern_1
over
coordination
between
pattern_1
that
do
not
imply
a
pattern_1
landscape
with
all
pattern_1
run
without
be
dependent
on
any
other
pattern_5
there
will
always
be
connector_4
but
we
try
to
minimise
the
number
of
connector_4
once
you
have
minimise
the
number
of
connector_4
how
should
these
be
connector_5
such
that
autonomy
be
maintain
a
much
a
possible
pattern_3
connector_4
between
component_2
imply
that
the
connector_6
component_3
be
block
and
wait
for
a
connector_7
by
the
connector_8
component_3
before
continue
it’s

this
be
tight
couple
do
not
quality_attribute_1
very
well
and
the
connector_6
component_3
be
impact
by
error
in
the
connector_8
component_3
in
a
high
quality_attribute_2
quality_attribute_3
pattern_1
landscape
that
be
not
preferable
measure
can
be
take
think
of
thing
circuit
breaker
but
it
require
extra
effort
the
prefer
alternative
be
to
use
pattern_2
connector_1
in
this
pattern_6
the
connector_6
component_3
simply
publish
it’s
connector_data_2
or
connector_data_1
and
continue
with
other
work
unrelated
to
this
connector_data_2
the
component_3
have
a
separate
component_4
listen
for
incoming
connector_7
or
connector_data_1
and
component_5
these
when
they
come
in
it
be
not
pattern_7
and
wait
for
a
connector_7
after
it
connector_9
a
connector_data_2
this
improve
quality_attribute_4
problem
in
another
component_3
will
not
break
this
component_3
if
other
component_2
be
temporarily
break
the
connector_6
component_3
might
not
be
able
to
complete
a
component_6
completely
but
the
connector_6
component_3
be
not
break
itself
thus
use
the
pattern_2
pattern_6
the
component_2
be
more
decouple
compare
to
the
pattern_3
pattern_6
and
which
preserve
the
autonomy
of
the
component_3
edit

aug

–

preamble
and
remove
line
“over
the
next
couple
of
day
we
will
cover
each
of
these
principle
in
more
detail
in
a
series
of
coding_keyword_2
“
by
gero
vermaas
login
label
{}
+
name*
email*
label
{}
+
name*
email*


old

most
vote
inline
feedback
pattern_8
all

greg
young

year
ago
aka
tell
don’t
ask
tell
me
something
happen

vs
ask
me
for
current
state
there
be
also
some
place
where
you
much
prefer
the
ask
it
a
matter
of
optimize
for
autonomy
vs
authority
sometimes
you
prefer
authority

connector_data_3
jesse
tomchak

year
ago
connector_data_3
to
greg
young
greg
what
be
an
example
of
where
you’d
prefer
authority
over
autonomy

connector_data_3
greg
young

year
ago
connector_data_3
to
jesse
tomchak
i
can
give
lot
of
example
where
you
would
prefer
authority
of
autonomy
connector_data_4
be
a
quality_attribute_5
one
do
we
really
want
to
synchronize
down
all
the
connector_data_4
on
the
planet
to
your
requirement_7
phone
so
you
can
query
autonomously
it
quite
common
that
you
be
interest
in
very
small
slice
of
a
very
large
dataset
in
which
requirement_8
you
suck
it
up
and
understand
the
possibility
of
problem
another
example
might
be
a
police
connector_data_5
component_7
a
big
requirement
be
that
all
pattern_8
of
connector_data_1
and
search
be
requirement_9
only
the
authority
be
trust
to
do
this
there
be
some
way
of
connector_3
this
without
have
authority
such
a
pattern_9
and
make
the
key
technology_2
an
authority
another
example
would
be
when
you
would
prefer
to
give
no
answer
a
oppose
to
have
the
possibility
of
conflict
answer

connector_data_3
ankit

year
ago
want
to
any
example
where
we
prefer
pattern_10
pattern_5
over
pattern_11
pattern_5
any
real
example
would
be
appriciated

connector_data_3
explore
relate
coding_keyword_2
architecture
pattern_1
architecture
principle
#2
autonomy
over
coordination
gero
vermaas



agile
|
architecture
lean
architecture
principle
#10
architecture
emerge
from
project
gero
vermaas

jul

architecture
lean
architecture
principle
#7
architecture
initiate
by
requirement_5
goal
gero
vermaas

jun

xebia
create
digital
leader
career
privacy
requirement_10
requirement_10
connector_10
linkedin
twitter
technology_3
©
xebia

|
all
right
reserve
wpdiscuzinsert
