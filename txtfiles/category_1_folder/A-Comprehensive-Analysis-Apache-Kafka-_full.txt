a
comprehensive
analysis
technology_1
technology_2
linkedin
and
3rd
party
use
essential
and
non
essential
to
provide
quality_attribute_1
analyze
and
improve
our
component_1
and
to
show
you
relevant
include
professional
and
on
and
off
linkedin
more
in
our
requirement_1
select
connector_1
to
or
reject
to
decline
non
essential
for
this
use
you
can
update
your
choice
at
any
time
in
your
set
connector_1
reject
linkedin
rassul
fazelat
click
intro
expand
search
people
dismiss
dismiss
dismiss
dismiss
dismiss
join
now
sign
in
a
comprehensive
analysis
technology_1
technology_2
report
this
rassul
fazelat
click
intro
rassul
fazelat
click
intro
000+
✹
requirement_2
requirement_2
✹
requirement_3
ml
✹
requirement_4
✹
requirement_5
✹
rpa
✹
nlp
✹
publish
nov
+
follow
disclaimer
this
be
a
combination
of
original
content
and
fact
gather
from
reputable
component_2
sit
below
i
ve
be
compel
to
connector_2
these
due
so
many
tech
writer
put
out
that
be
not
technically
sound
these
be
mean
to
be
factoid
for
a
one
stop
reference
also
please
keep
in
mind
many
of
these
topic
be
so
they
be
quality_attribute_2
a
i
type
this
so
your
input
be
greatly
appreciate
&
welcome
a
part
of
my
comprehensive
analysis
series
i
want
to
take
a
close
look
at
another
open_source
technology_3
that
be
gain
popularity
within
the
requirement_5
world
a
it
relate
to
pattern_1
component_3
over
the
year
there
have
be
multiple
option
for
a
pattern_1
component_3
but
with
the
introduction
of
requirement_5
quality_attribute_3
&
quality_attribute_4
become
a
major
component_4
to
the
age
technology_3
we
consider
a
part
of
the
requirement_6
technological
evolution
this
will
discus
what
s
the
history
behind
technology_1
technology_2
what
be
technology_1
technology_2
and
it
s
various
component_5
and
what
do
they
do
brief
history
of
technology_1
technology_2
technology_1
technology_2
be
originally
develop
by
linkedin
and
be
subsequently
open
component_6
in
early
graduation
from
the
technology_1
incubator
occur
on
in
several
engineer
who
build
technology_2
at
linkedin
create
a
requirement_7
name
confluent
with
a
focus
on
technology_2
jay
kreps
one
of
the
co
founder
of
technology_2
have
take
a
lot
of
literature
in
college
and
he
much
of
franz
technology_2
s
work
when
develop
technology_2
with
fellow
co
founder
neha
narkhede
and
jun
rao
an
open_source
technology_3
that
be
optimize
for
connector_2
it
seem
a
natural
fit
to
name
it
after
the
famous
writer
technology_1
technology_2
be
an
open
component_6
connector_data_1
pattern_2
project
develop
by
the
technology_1
foundation
connector_2
in
technology_4
the
project
aim
to
provide
a
unify
high
quality_attribute_5
low
quality_attribute_6
component_7
for
handle
real
time
connector_data_2
fee
the
design
be
heavily
influence
by
transaction
requirement_8
before
we
start
the
deep
dive
into
technology_1
technology_2
we
must
establish
a
high
level
understand
of
technology_1
technology_2
in
the
connector_data_2
connector_3
life
cycle
the
connector_data_2
connector_3
life
cycle
consist
of
these
key
component_5
create
create
connector_data_2
from
a
multitude
of
component_2
component_8
social
sensor
requirement_8
component_9
click
connector_3
technology_5
image
location
etc
connector_4
make
connector_data_2
connector_5
quality_attribute_7
for
consumption
technology_6
technology_7
technology_1
technology_2
etc
component_10
component_10
connector_5
and
possibly
create
derive
connector_5
technology_1
mapreduce
tez
flink
technology_8
storm
etc
it
be
this
connector_4
component_5
that
we
will
focus
on
in
this
a
we
take
a
deep
look
at
technology_1
technology_2
and
it
s
various
component_5
this
graphic
below
from
the
rich
relevance
do
a
great
illustrate
technology_1
technology_2
s
role
in
requirement_5
architecture
component_6
richrelevance
how
we
selected
technology_1
technology_2
on
our
path
to
real
time
connector_data_2
ingestion
if
you
already
use
a
traditional
pattern_1
component_1
for
exist
component_11
why
not
use
that
same
technology_9
to
connector_3
this
connector_data_2
into
technology_10
technology_1
technology_2
have
key
attribute
that
make
it
the
technology_3
of
choice
in
requirement_5
environment
component_6
mill
fast
&
quality_attribute_8
by
design
quality_attribute_9
technology_1
technology_2
have
the
quality_attribute_3
and
requirement_9
require
by
requirement_5
pattern_3
capability
old
pattern_1
technology_9
be
component_12
base
require
a
lot
of
manual
configuration
to
make
them
work
technology_1
technology_2
have
the
technology_9
that
be
quality_attribute_10
cost
quality_attribute_11
to
manage
more
requirement_10
friendly
and
support
requirement_6
require
pattern_3
capability
slow
component_13
friendly
in
all
requirement_5
deployment
whether
you’re
use
connector_data_2
component_10
component_14
mapreduce
tez
flink
technology_11
or
technology_8
to
fee
connector_data_2
in
they
all
become
slow
component_15
from
the
point
of
pattern_4
of
the
pattern_1
component_3
if
the
connector_6
pattern_1
component_3
be
not
design
to
buffer
effectively
for
slow
component_13
you’ll
find
yourself
with
a
significant
quality_attribute_3
and
quality_attribute_12
problem
technology_1
technology_2
overview
excerpt
on
technology_1
technology_2
from
technology_1
organization
technology_1
technology_2
be
a
quality_attribute_8
component_16
replicate
connector_7
requirement_8
component_1
it
provide
the
requirement_11
of
a
pattern_1
component_3
but
with
a
unique
design
component_6
hortonsworks
here
be
the
basic
of
pattern_1
terminology
technology_1
technology_2
maintain
fee
of
connector_data_3
in
category
connector_8
topic
the
component_17
that
publish
connector_data_3
to
a
technology_2
topic
component_18
the
component_17
that
subscribe
to
topic
and
component_10
the
fee
of
publish
connector_data_3
be
connector_8
component_13
technology_1
technology_2
be
run
a
a
cluster
comprise
of
one
or
more
component_19
each
of
which
be
connector_8
a
pattern_2
so
at
a
high
level
component_20
connector_9
connector_data_3
over
the
requirement_12
to
the
technology_2
cluster
s
which
in
turn
serve
them
up
to
component_13
connector_10
between
the
component_21
and
the
component_19
be
do
with
a
quality_attribute_10
high
requirement_9
technology_12
agnostic
technology_13
technology_14
a
technology_15
component_22
be
provide
for
technology_1
technology_2
but
component_21
be
quality_attribute_7
in
many
technology_12
topic
&
requirement_8
s
first
dive
into
the
high
level
abstraction
technology_2
provides—the
topic
a
topic
be
a
category
or
fee
name
to
which
connector_data_3
be
publish
for
each
topic
the
technology_2
cluster
maintain
a
component_16
requirement_8
that
look
this
component_6
technology_1
organization
each
component_16
be
an
order
immutable
sequence
of
connector_data_3
that
be
continually
append
to—a
connector_7
requirement_8
the
connector_data_3
in
the
component_16
be
each
assign
a
sequential
number
connector_8
the
offset
that
uniquely
identify
each
connector_data_1
within
the
component_16
the
technology_2
cluster
retain
all
publish
messages—whether
or
not
they
have
be
consumed—for
a
quality_attribute_13
period
of
time
for
example
if
the
requirement_8
retention
be
set
to
two
day
then
for
the
two
day
after
a
connector_data_1
be
publish
it
be
quality_attribute_7
for
consumption
after
which
it
will
be
discard
to
free
up
space
technology_2
s
requirement_9
be
effectively
constant
with
respect
to
connector_data_2
size
so
retain
lot
of
connector_data_2
be
not
a
problem
in
fact
the
only
metadata
retain
on
a
per
component_13
basis
be
the
position
of
the
component_13
in
the
requirement_8
connector_8
the
offset
this
offset
be
control
by
the
component_13
normally
a
component_13
will
advance
it
offset
linearly
a
it
connector_11
connector_data_1
but
in
fact
the
position
be
control
by
the
component_13
and
it
can
connector_12
connector_data_3
in
any
order
it
for
example
a
component_13
can
reset
to
an
old
offset
to
reprocess
this
combination
of
feature
mean
that
technology_2
component_15
be
very
cheap—they
can
come
and
go
without
much
impact
on
the
cluster
or
on
other
component_13
for
example
you
can
use
our
command
line
technology_3
to
tail
the
content
of
any
topic
without
connector_13
what
be
connector_12
by
any
exist
component_13
the
component_16
in
the
requirement_8
serve
several
purpose
first
they
allow
the
requirement_8
to
quality_attribute_9
beyond
a
size
that
will
fit
on
a
single
component_23
each
individual
component_16
must
fit
on
the
component_19
that
component_24
it
but
a
topic
have
many
component_16
so
it
can
handle
an
arbitrary
amount
of
connector_data_2
second
they
act
a
the
unit
of
parallelism—more
on
that
in
a
bit
distribution
the
component_16
of
the
requirement_8
be
quality_attribute_8
over
the
component_19
in
the
technology_2
cluster
with
each
component_23
handle
connector_data_2
and
connector_data_4
for
a
connector_14
of
the
component_16
each
component_16
be
replicate
across
a
quality_attribute_13
number
of
component_19
for
fault
tolerance
each
component_16
have
one
component_23
which
act
a
the
leader
and
zero
or
more
component_19
which
act
a
follower
the
leader
handle
all
connector_15
and
connector_2
connector_data_4
for
the
component_16
while
the
follower
passively
replicate
the
leader
if
the
leader
fail
one
of
the
follower
will
automatically
become
the
leader
each
component_23
act
a
a
leader
for
some
of
it
component_16
and
a
follower
for
others
so
load
be
well
balance
within
the
cluster
component_20
component_20
publish
connector_data_2
to
the
topic
of
their
choice
the
component_18
be
responsible
for
choose
which
connector_data_1
to
assign
to
which
component_16
within
the
topic
this
can
be
do
in
a
round
robin
fashion
simply
to
balance
load
or
it
can
be
do
accord
to
some
semantic
component_16
say
base
on
some
key
in
the
connector_data_1
more
on
the
use
of
partitioning
in
a
second
component_15
pattern_1
traditionally
have
two
component_25
pattern_5
and
publish
subscribe
in
a
component_12
a
pool
of
component_15
connector_15
from
a
component_23
and
each
connector_data_1
go
to
one
of
them
in
pattern_6
the
connector_data_1
be
pattern_7
to
all
component_13
technology_2
offer
a
single
component_13
abstraction
that
generalize
both
of
these—the
component_13
group
component_15
label
themselves
with
a
component_13
group
name
and
each
connector_data_1
publish
to
a
topic
be
connector_16
to
one
component_13
instance
within
each
subscribe
component_13
group
component_13
instance
can
be
in
separate
component_17
or
on
separate
component_8
component_6
technology_1
organization
if
all
the
component_13
instance
have
the
same
component_13
group
then
this
work
a
traditional
component_12
balance
load
over
the
component_13
if
all
the
component_13
instance
have
different
component_13
group
then
this
work
pattern_6
and
all
connector_data_3
be
pattern_7
to
all
component_13
more
commonly
however
we
have
find
that
topic
have
a
small
number
of
component_13
group
one
for
each
logical
pattern_8
each
group
be
compose
of
many
component_13
instance
for
quality_attribute_3
and
fault
tolerance
this
be
nothing
more
than
pattern_6
semantics
where
the
pattern_8
be
cluster
of
component_15
instead
of
a
single
component_10
technology_2
have
strong
order
guarantee
than
a
traditional
pattern_1
component_3
too
a
traditional
component_12
retain
connector_data_3
in
order
on
the
component_23
and
if
multiple
component_15
connector_12
from
the
component_12
then
the
component_23
hand
out
connector_data_3
in
the
order
they
be
component_26
however
although
the
component_23
hand
out
connector_data_3
in
order
the
connector_data_3
be
connector_16
asynchronously
to
component_13
so
they
arrive
out
of
order
on
different
component_13
this
effectively
mean
the
order
of
the
connector_data_3
be
lose
in
the
presence
of
parallel
consumption
pattern_1
component_27
often
work
around
this
by
have
a
notion
of
exclusive
component_13
that
allow
only
one
component_10
to
connector_12
from
a
component_12
but
of
this
mean
that
there
be
no
parallelism
in
component_10
technology_2
do
it
quality_attribute_14
by
have
a
notion
of
parallelism—the
partition—within
the
topic
technology_2
be
able
to
provide
both
order
guarantee
and
load
balance
over
a
pool
of
component_13
component_10
this
be
achieve
by
assign
the
component_16
in
the
topic
to
the
component_15
in
the
component_13
group
so
that
each
component_16
be
connector_12
by
exactly
one
component_13
in
the
group
by
do
this
we
ensure
that
the
component_13
be
the
only
reader
of
that
component_16
and
connector_17
the
connector_data_2
in
order
since
there
be
many
component_16
this
still
balance
the
load
over
many
component_13
instance
note
however
that
there
cannot
be
more
component_13
instance
in
a
component_13
group
than
component_16
technology_2
only
provide
a
total
order
over
connector_data_3
within
a
component_16
not
between
different
component_16
in
a
topic
per
component_16
order
combine
with
the
ability
to
component_16
connector_data_2
by
key
be
sufficient
for
most
component_11
however
if
you
require
a
total
order
over
connector_data_3
this
can
be
achieve
with
a
topic
that
have
only
one
component_16
though
this
will
mean
only
one
component_13
component_10
per
component_13
group
guarantee
at
a
high
level
technology_2
give
the
follow
guarantee
connector_data_3
connector_18
by
a
component_18
to
a
particular
topic
component_16
will
be
append
in
the
order
they
be
connector_9
that
be
if
a
connector_data_1
m1
be
connector_18
by
the
same
component_18
a
a
connector_data_1
m2
and
m1
be
connector_18
first
then
m1
will
have
a
lower
offset
than
m2
and
appear
early
in
the
requirement_8
a
component_13
instance
see
connector_data_3
in
the
order
they
be
component_26
in
the
requirement_8
for
a
topic
with
pattern_9
factor
n
we
will
tolerate
up
to
n
component_23
failure
without
lose
any
connector_data_3
connector_7
to
the
requirement_8
more
detail
on
these
guarantee
be
give
in
the
design
section
of
the
technology_1
foundation
technology_2
documentation
here
be
a
description
of
a
few
of
the
popular
use
requirement_13
for
technology_1
technology_2
for
an
overview
of
a
number
of
these
area
in
action
see
this
technology_1
technology_2
popular
use
requirement_13
pattern_1
technology_2
work
well
a
a
replacement
for
a
more
traditional
connector_data_1
pattern_2
connector_data_1
pattern_2
be
use
for
a
variety
of
reason
to
decouple
component_10
from
connector_data_2
component_18
to
buffer
unprocessed
connector_data_1
etc
in
comparison
to
most
pattern_1
component_27
technology_2
have
quality_attribute_14
quality_attribute_5
build
in
partitioning
pattern_9
and
fault
tolerance
which
make
it
a
quality_attribute_14
solution
for
large
quality_attribute_9
connector_data_1
component_10
component_11
in
our
experience
pattern_1
u
be
often
comparatively
low
quality_attribute_5
but
require
low
end
to
end
quality_attribute_6
and
often
quality_attribute_15
on
the
strong
quality_attribute_16
guarantee
technology_2
provide
in
this
domain
technology_2
be
comparable
to
traditional
pattern_1
component_27
such
a
technology_16
or
technology_7
activity
track
the
original
use
requirement_13
for
technology_2
be
to
be
able
to
rebuild
a
component_28
activity
track
pipeline
a
a
set
of
real
time
pattern_6
fee
this
mean
activity
component_29
pattern_4
search
or
other
action
component_30
take
be
publish
to
central
topic
with
one
topic
per
activity
type
these
fee
be
quality_attribute_7
for
subscription
for
a
range
of
use
requirement_13
include
real
time
component_10
real
time
pattern_10
and
loading
into
technology_17
or
offline
connector_data_2
warehousing
component_27
for
offline
component_10
and
report
activity
track
be
often
very
high
volume
a
many
activity
connector_data_3
be
generate
for
each
component_28
component_29
pattern_4
metric
technology_2
be
often
use
for
operational
pattern_11
connector_data_2
this
involve
aggregate
statistic
from
quality_attribute_8
component_31
to
produce
centralized
fee
of
operational
connector_data_2
requirement_8
aggregation
many
people
use
technology_2
a
a
replacement
for
a
requirement_8
aggregation
solution
requirement_8
aggregation
typically
connector_19
physical
requirement_8
off
component_19
and
put
them
in
a
central
place
a
component_23
or
technology_10
perhaps
for
component_10
technology_2
abstract
away
the
detail
of
and
give
a
clean
abstraction
of
requirement_8
or
connector_data_2
a
a
connector_3
of
connector_data_1
this
allow
for
lower
quality_attribute_6
component_10
and
easy
support
for
multiple
connector_data_2
component_2
and
quality_attribute_8
connector_data_2
consumption
in
comparison
to
requirement_8
centric
component_27
scribe
or
technology_18
technology_2
offer
equally
quality_attribute_14
requirement_9
strong
quality_attribute_16
guarantee
due
to
pattern_9
and
much
lower
end
to
end
quality_attribute_6
connector_3
component_10
many
component_30
end
up
do
stage
wise
component_10
of
connector_data_2
where
connector_data_2
be
connector_12
from
topic
of
raw
connector_data_2
and
then
aggregate
enrich
or
otherwise
transform
into
technology_2
topic
for
further
consumption
for
example
a
component_10
flow
for
recommendation
might
crawl
content
from
technology_19
fee
and
publish
it
to
an
topic
further
component_10
might
help
normalize
or
deduplicate
this
content
to
a
topic
of
clean
content
a
final
stage
might
attempt
to
match
this
content
to
component_28
this
create
a
graph
of
real
time
connector_data_2
flow
out
of
the
individual
topic
technology_11
and
samza
be
popular
technology_20
for
connector_20
these
kind
of
transformation
component_10
component_6
be
a
style
of
component_11
design
where
state
connector_21
be
requirement_8
a
a
time
order
sequence
of
component_32
technology_2
s
support
for
very
large
component_26
requirement_8
connector_data_2
make
it
an
excellent
backend
for
an
component_11
build
in
this
style
connector_7
requirement_8
technology_2
can
serve
a
a
kind
of
external
connector_7
requirement_8
for
a
quality_attribute_8
component_3
the
requirement_8
help
replicate
connector_data_2
between
technology_21
and
act
a
a
re
pattern_12
mechanism
for
fail
technology_21
to
restore
their
connector_data_2
the
requirement_8
compaction
feature
in
technology_2
help
support
this
usage
in
this
usage
technology_2
be
similar
to
technology_1
bookkeeper
project
i
hope
this
have
shed
some
light
on
technology_1
technology_2
and
how
incorporate
into
your
current
requirement_5
environment
could
yield
some
strong
quality_attribute_17
feel
free
to
your
below
would
love
to
hear
from
everyone
these
be
mean
to
be
a
much
informative
a
collaborative
rassul
fazelat
follow
me
here
@bigdatavision
be
manage
partner
founder
of
connector_data_2
talent
advisor
a
boutique
connector_data_2
&
requirement_4
talent
advisory
&
headhunting
firm
organizer
of
nyc
requirement_5
visionary
meetup
co
organizer
of
nyc
requirement_14
requirement_4
forum
&
co
organizer
of
nyc
advance
requirement_4
meetup
other
in
the
comprehensive
analysis
requirement_5
series
deconstruct
requirement_2
a
close
look
reason
why
technology_17
a
a
component_1
be
make
sense
for
requirement_15
requirement_4
a
comprehensive
analysis
blockchain
technology_9
beyond
bitcoin
a
comprehensive
analysis
requirement_5
quality_attribute_18
a
comprehensive
analysis
dataflow
technology_9
a
comprehensive
analysis
connector_data_2
component_10
part
deux
technology_1
technology_8
vs
technology_1
technology_11
a
comprehensive
analysis
technology_22
vs
technology_23
a
comprehensive
analysis
technology_1
technology_2
a
comprehensive
analysis
technology_15
vs
technology_24
a
comprehensive
analysis
technology_1
flink
and
how
it
compare
to
technology_1
technology_8
a
comprehensive
analysis
technology_1
technology_8
vs
mapreduce
requirement_5
career
series
why
be
requirement_6
requirement_5
architect
not
connector_data_2
scientist
why
connector_data_2
engineer
be
not
connector_data_2
scientist
top
major
for
a
connector_data_2
science
career
reference
technology_1
technology_2
documentation
per
technology_1
organization
technology_25
technology_2
technology_1
documentation
html#api
connector_14
abdul
qayum
mohammed
thanks
you
sir
this
be
an
excellent
material
that
i
be
look
from
a
conceptual
standpoint
now
it
make
lot
of
sense
to
me
how
technology_2
be
different
from
other
connector_data_1
pattern_2
sign
in
to
this
connector_data_5
sign
in
to
connector_data_5
to
this
6y
report
this
nirmalya
sengupta
mr
rassul
fazelat
thanks
for
connector_22
this
it
give
a
very
quality_attribute_14
synopsis
of
what
technology_2
offer
however
i
see
these
day
that
almost
everyone
who
need
a
component_12
which
can
be
asynchronously
component_10
opt
for
technology_2
what
i
be
want
to
be
what
will
one
miss
or
have
to
pay
for
development
test
quality_attribute_19
wise
if
s
he
go
for
technology_7
a
an
alternative
be
technology_7
s
ha
capability
fall
woefully
short
of
those
of
technology_2
please
educate
me
you
direct
me
to
connector_23
where
i
can
find
this
sign
in
to
this
connector_data_5
sign
in
to
connector_data_5
to
this
6y
report
this
viraf
k
well
connector_2
and
quite
engage
my
compliment
sign
in
to
this
connector_data_5
sign
in
to
connector_data_5
to
this
6y
report
this
linkedin
component_28
very
quality_attribute_10
and
clean
explanation
thanks
sign
in
to
this
connector_data_5
sign
in
to
connector_data_5
to
this
6y
report
this
bimal
mohanty
excellent
presentation
thanks
for
publish
this
sign
in
to
this
connector_data_5
sign
in
to
connector_data_5
to
this
6y
report
this
srinivas
lakkireddy
neat
and
nice
sign
in
to
this
connector_data_5
sign
in
to
connector_data_5
to
this
6y
report
this
shivabasayya
hiremath
quality_attribute_14
one
sign
in
to
this
connector_data_5
sign
in
to
connector_data_5
to
this
6y
report
this
linkedin
component_28
great
for
our
knowledge
base
sign
in
to
this
connector_data_5
sign
in
to
connector_data_5
to
this
6y
report
this
jim
parnitzke
thx
for
connector_14
there
really
be
so
much
crap
out
there
it
be
refresh
to
see
something
this
after
all
sign
in
to
this
connector_data_5
sign
in
to
connector_data_5
to
this
6y
report
this
le
yeamans
a
nice
overview
sign
in
to
this
connector_data_5
sign
in
to
connector_data_5
to
this
6y
report
this
see
more
to
pattern_4
or
a
sign
in
to
pattern_4
or
a
sign
in
more
by
this
author
see
all
a
comparative
analysis
requirement_10
edw
oct
deconstruct
requirement_2
–
a
close
look
feb
a
comprehensive
overview
container
a
a
component_1
caas
next
generation
of
virtualization
sep
others
also
pattern_4
technology_1
technology_2
use
requirement_13
ahmed
seye
4y
reason
why
technology_17
a
a
component_1
be
make
sense
for
requirement_15
requirement_4
rassul
fazelat
click
intro
6y
technology_2
essential
introduction
supriya
sahay
3y
technology_2
s
origin
story
at
linkedin
tanvir
ahmed
3y
all
about
technology_1
technology_2
–
an
quality_attribute_2
quality_attribute_8
connector_7
requirement_8
bargunan
somasundaram
2y
master
the
component_3
design
in
nanosecond
vighnesh
rege
5y
linkedin
©
about
quality_attribute_20
component_28
agreement
privacy
requirement_1
requirement_1
copyright
requirement_1
brand
requirement_1
guest
control
guideline
العربية
arabic
čeština
czech
dansk
danish
deutsch
german
english
english
español
spanish
français
french
हिंदी
hindi
bahasa
indonesia
bahasa
indonesia
italiano
italian
日本語
japanese
한국어
korean
bahasa
malaysia
malay
nederland
dutch
norsk
norwegian
polski
polish
português
portuguese
română
romanian
русский
russian
svenska
swedish
ภาษาไทย
thai
tagalog
tagalog
türkçe
turkish
简体中文
chinese
simplify
正體中文
chinese
traditional
technology_12
