technology_1
technology_2
transform
connector_data_1
use
quality_attribute_1
expression
technology_3
technology_4
twitter
google+
linkedin
navigate
technology_5
core
technology_5
requirement_1
technology_5
connector_data_2
connector_1
technology_3
pattern_1
technology_3
technology_3
technology_3
pattern_2
technology_3
basic
technology_3
oops
technology_3
collection
technology_3
pattern_1
technology_3
connector_data_3
technology_3
generic
technology_3
io
technology_3
serialization
technology_3
annotation
jaxp
technology_6
technology_3
reference
technology_7
technology_8
design
pattern_3
creational
design
pattern_3
structural
design
pattern_3
behavioral
design
pattern_3
technology_5
technology_5
core
technology_5
requirement_1
technology_5
connector_data_2
connector_1
technology_5
technology_9
technology_2
technology_10
web
technology_11
technology_12
connector_data_2
connector_data_4
technology_13
technology_14
technology_15
technology_16
quartz
rxjava
others
tdd
servlet
technology_17
technology_18
technology_19
technology_20
technology_1
unit
test
junit
mockito
testng
technology_1
technology_2
transform
connector_data_1
use
quality_attribute_1
expression
by
ram
satish
on
technology_2
when
sender’s
connector_data_1
technology_21
be
different
from
the
one
receiver
be
expect
then
the
receiver
need
a
pattern_4
to
transform
the
connector_data_1
to
a
technology_21
understand
it
internal
component_1
there
be
several
way
by
which
technology_2
transform
the
connector_data_1
for
example
use
technology_22
xslt
quality_attribute_1
expression
etc
in
this
we
will
see
some
of
the
way
in
which
technology_2
transform
the
connector_data_1
content
use
quality_attribute_1
expression
connector_data_1
pattern_4
this
example
u
the
follow
technology_23
technology_19
technology_1
technology_2
technology_5
release
eclipse
a
the
ide
version
luna
connector_2
we
be
rely
camel’s
core
component_1
the
technology_5
base
component_2
and
the
logger
component_1
in
requirement_2
you
want
to
requirement_3
something
so
our
pom
technology_24
consist
of
technology_2
core
–
technology_2
core
component_2
timer
component_3
etc
slf4j
technology_25
–
in
requirement_2
you
want
to
use
requirement_3
slf4j
log4j12
–
if
you
want
to
use
technology_18
a
the
slf4j
implementation
technology_2
connector_3
–
for
printing
the
connector_data_5
to
console
technology_5
component_4
–
for
technology_5
support
technology_2
technology_5
–
include
it
if
you
want
to
define
connector_4
in
technology_5
pom
technology_24
project
xmlns=
technology_26
technology_19
technology_1
pom
xmlns
xsi=
technology_26
www
w3
xmlschema
instance
xsi
schemalocation=
technology_26
technology_19
technology_1
pom
technology_26
technology_19
technology_1
technology_27
technology_19
technology_27
modelversion
modelversion
technology_28
javarticles
technology_2
camelhelloworld
version
snapshot
version
connector_2
connector_2
technology_1
technology_2
technology_2
core
version
version
connector_2
connector_2
technology_1
technology_2
technology_2
connector_3
version
version
connector_2
connector_2
slf4j
slf4j
technology_25
version
version
connector_2
connector_2
slf4j
slf4j
log4j12
version
version
connector_2
connector_2
springframework
technology_5
component_4
version
release
version
connector_2
connector_2
technology_1
technology_2
technology_2
technology_5
version
version
connector_2
connector_2
project
quality_attribute_1
transformation
“camel
simple”
technology_2
provide
transform
to
do
inline
transformation
of
the
connector_data_1
you
can
use
technology_2
provide
expression
to
transform
the
connector_data_1
content
in
the
below
example
technology_2
u
quality_attribute_1
expression
technology_29
to
convert
the
connector_data_1
content
to
out
original
connector_data_1
out
the
component_5
step
that
follow
the
transform
will
see
the
transform
connector_data_1
content
simpletransformexample
package
technology_28
javarticles
technology_2
technology_1
technology_2
camelcontext
technology_1
technology_2
producertemplate
technology_1
technology_2
builder
routebuilder
technology_1
technology_2
impl
defaultcamelcontext
technology_1
technology_2
impl
defaultproducertemplate
simpletransformexample
{
args
throw
exception
{
camelcontext
camelcontext
=
defaultcamelcontext
try
{
camelcontext
addroutes
routebuilder
{
configure
{
from
direct
start
transform
quality_attribute_1
out
${body}
out
to
connector_3
out
}
}
camelcontext
start
producertemplate
template
=
defaultproducertemplate
camelcontext
template
start
template
sendbody
direct
start
hello
}
finally
{
camelcontext
stop
}
}
}
output
&lt
out&gt
hello&lt
out&gt
we
can
achieve
the
same
thing
use
technology_5
technology_24
applicationcontext
technology_24
technology_24
version=
encoding=
utf
component_3
xmlns=
technology_26
www
springframework
schema
component_3
xmlns
xsi=
technology_26
www
w3
xmlschema
instance
xsi
schemalocation=
technology_26
www
springframework
schema
component_3
technology_26
www
springframework
schema
component_3
technology_5
component_3
technology_27
technology_26
technology_2
technology_1
schema
technology_5
technology_26
technology_2
technology_1
schema
technology_5
technology_2
technology_5
technology_27
camelcontext
xmlns=
technology_26
technology_2
technology_1
schema
technology_5
connector_4
from
uri=
direct
start
transform
quality_attribute_1
out
${body}
out
quality_attribute_1
transform
to
uri=
connector_3
out
connector_4
camelcontext
component_3
simpletransformexampleusingspring
package
technology_28
javarticles
technology_2
technology_1
technology_2
camelcontext
technology_1
technology_2
producertemplate
technology_1
technology_2
impl
defaultproducertemplate
technology_1
technology_2
technology_5
springcamelcontext
springframework
component_4
applicationcontext
springframework
component_4
support
classpathxmlapplicationcontext
simpletransformexampleusingspring
{
args
throw
exception
{
applicationcontext
appcontext
=
classpathxmlapplicationcontext
applicationcontext
technology_24
camelcontext
camelcontext
=
springcamelcontext
springcamelcontext
appcontext
false
try
{
camelcontext
start
producertemplate
template
=
defaultproducertemplate
camelcontext
template
start
template
sendbody
direct
start
hello
}
finally
{
camelcontext
stop
}
}
}
connector_data_1
transformation
use
camel’s
constant
expression
in
the
below
example
if
the
name
contain
‘camel’
we
transform
the
connector_data_1
to
quality_attribute_1
‘yes’
else
a
‘no’
we
use
choice
when
and
otherwise
to
decide
the
outcome
this
be
similar
to
‘if
else’
construct
we
create
a
constant
expression
use
constant
constanttransformexample
package
technology_28
javarticles
technology_2
technology_1
technology_2
camelcontext
technology_1
technology_2
producertemplate
technology_1
technology_2
builder
routebuilder
technology_1
technology_2
impl
defaultcamelcontext
technology_1
technology_2
impl
defaultproducertemplate
constanttransformexample
{
args
throw
exception
{
camelcontext
camelcontext
=
defaultcamelcontext
try
{
camelcontext
addroutes
routebuilder
{
configure
{
from
direct
start
requirement_3
name
be
${body}
choice
when
quality_attribute_1
${body}
contain
technology_2
transform
constant
yes
to
connector_3
out
otherwise
transform
constant
no
to
connector_3
out
end
}
}
camelcontext
start
producertemplate
template
=
defaultproducertemplate
camelcontext
template
start
template
sendbody
direct
start
technology_2
component_1
template
sendbody
direct
start
technology_5
requirement_1
}
finally
{
camelcontext
stop
}
}
}
output
15|
info
|
markerignoringbase
technology_3
|
name
be
technology_2
component_2
yes
15|
info
|
markerignoringbase
technology_3
|
name
be
technology_5
requirement_1
no
transformation
use
camel’s
valuebuilder
a
valuebuilder
be
a
a
builder
of
expression
or
predicate
base
on
requirement_4
in
the
below
example
we
use
valuebuilder
to
build
expression
to
transform
the
connector_data_1
the
connector_data_1
content
itself
can
be
convert
to
a
valuebuilder
use
the
body
we
show
here
couple
of
way
of
transform
connector_data_1
use
body
prepend
and
body
converttostring
if
you
want
to
prepend
some
text
use
prepend
if
you
want
to
convert
an
connector_data_6
into
a
representation
use
converttostring
if
you
want
to
build
your
own
valuebuilder
you
can
do
by
pass
an
implementation
of
expression
connector_data_6
here
we
have
use
technology_2
provide
expressionadapter
which
be
a
helper
for
connector_5
an
expression
connector_data_6
all
you
have
to
do
be
connector_6
evaluate
exchange
in
our
example
we
be
use
it
to
convert
line
character
to
a
space
character
transformusingbodyfunctionsexample
package
technology_28
javarticles
technology_2
technology_1
technology_2
camelcontext
technology_1
technology_2
exchange
technology_1
technology_2
producertemplate
technology_1
technology_2
builder
routebuilder
technology_1
technology_2
builder
valuebuilder
technology_1
technology_2
impl
defaultcamelcontext
technology_1
technology_2
impl
defaultproducertemplate
technology_1
technology_2
support
expressionadapter
transformusingbodyfunctionsexample
{
args
throw
exception
{
camelcontext
camelcontext
=
defaultcamelcontext
try
{
camelcontext
addroutes
routebuilder
{
configure
{
from
direct
bodyprepend
transform
body
prepend
hello
to
connector_3
out
from
direct
bodyconvert
transform
body
converttostring
to
connector_3
out
from
direct
valuebuilder
transform
valuebuilder
expressionadapter
{
@override
connector_data_6
evaluate
exchange
exchange
{
s
=
exchange
getin
getbody
s
=
s
replace
\n
}
}
to
connector_3
out
}
}
camelcontext
start
producertemplate
template
=
defaultproducertemplate
camelcontext
template
start
template
sendbody
direct
bodyprepend
world
template
sendbody
direct
bodyconvert
valueobject
helloworld
template
sendbody
direct
valuebuilder
hello\nworld
}
finally
{
camelcontext
stop
}
}
private
valueobject
{
private
s
valueobject
s
{
this
s
=
s
}
tostring
{
requirement_4
+
s
+
}
}
}
output
helloworld
requirement_4
helloworld
hello
world
transform
use
component_3
in
this
example
we
transform
connector_data_1
use
a
component_3
it
transform
the
connector_data_1
content
to
upper
requirement_2
technology_2
quality_attribute_1
uppercase
be
our
quality_attribute_1
component_3
which
expect
the
connector_data_1
content
in
form
of
a
transform
the
and
then
it
the
component_3
can
be
connector_7
simply
use
since
the
component_3
contain
only
one
we
don’t
have
to
pass
the
name
else
you
need
to
pass
the
component_3
and
the
name
you
also
need
to
register
the
component_3
against
a
name
so
that
the
connector_4
plan
can
connector_1
the
component_3
uppercase
package
technology_28
javarticles
technology_2
uppercase
{
toupper
s
{
s
touppercase
}
}
package
technology_28
javarticles
technology_2
technology_1
technology_2
camelcontext
technology_1
technology_2
producertemplate
technology_1
technology_2
builder
routebuilder
technology_1
technology_2
impl
defaultcamelcontext
technology_1
technology_2
impl
defaultproducertemplate
technology_1
technology_2
util
technology_30
jndicontext
transformusingbeanexample
{
args
throw
exception
{
jndicontext
jndicontext
=
jndicontext
jndicontext
bind
uppercase
uppercase
camelcontext
camelcontext
=
defaultcamelcontext
jndicontext
try
{
camelcontext
addroutes
routebuilder
{
configure
{
from
direct
start
requirement_3
transform
${body}
to
uppercase
transform
uppercase
to
connector_3
out
}
}
camelcontext
start
producertemplate
template
=
defaultproducertemplate
camelcontext
template
start
template
sendbody
direct
start
hello
world
}
finally
{
camelcontext
stop
}
}
}
output
15|
info
|
defaultcamelcontext
technology_3
|
technology_1
technology_2
camelcontext
technology_2
start
in
second
15|
info
|
markerignoringbase
technology_3
|
transform
hello
world
to
uppercase
hello
world
download
the
component_6
“camel
simple”
this
be
an
example
about
technology_2
connector_data_1
transformation
use
quality_attribute_1
expression
you
can
download
the
component_6
here
cameltransformationexamples
zip
connector_8
twitter
google+
pinterest
linkedin
technology_31
be
close
search
for
previous
postsjava
component_7
determine
cpu
timespring
property
placeholder
attributesmule
db
insert
use
filejava
shutdownhook
examplejunit
timeout
testrule
examplespring
hibernatedaosupport
examplecreate
technology_19
projectsecurity
generate
and
export
dsa
keysguava
component_8
exampleandroid
drag
and
drop
exampleapache
technology_2
technology_32
component_1
insertspring
scan
componentsjava
decompress
exampleexample
of
manually
publish
a
connector_data_1
to
an
outbound
channelandroid
listview
quick
‘add’
action
bar
to
the
connector_data_7
component_9
