technology_1
requirement_1
tune
—
way
for
technology_1
optimization
|
by
rinu
gour
|
mediumget
unlimited
accessopen
in
apphomenotificationslistsstorieswriterinu
gourfollowdec
2018·6
min
readkafka
requirement_1
tune
—
way
for
technology_1
optimizationkafka
requirement_1
tune
—
way
for
technology_1
optimizationwhat
be
technology_1
requirement_1
tune
there
be
few
configuration
parameter
to
be
consider
while
we
talk
about
technology_1
requirement_1
tune
hence
to
improve
requirement_1
the
most
important
configuration
be
the
one
which
control
the
disk
flush
rate
also
we
can
divide
these
configuration
on
the
component_1
basis
so
let’s
talk
about
component_2
first
hence
most
important
configuration
which
need
to
be
take
care
at
component_2
side
be
–compressionbatch
sizesync
or
asyncand
at
component_3
side
the
important
configuration
be
–fetch
sizealthough
it’s
always
confuse
what
pattern_1
size
will
be
optimal
when
we
think
about
pattern_1
size
we
can
say
large
pattern_1
size
be
great
to
have
high
quality_attribute_1
it
come
with
quality_attribute_2
issue
that
imply
quality_attribute_2
and
quality_attribute_1
be
inversely
proportional
to
each
other
it
be
possible
to
have
low
quality_attribute_2
with
high
quality_attribute_1
where
we
have
to
choose
a
proper
pattern_1
size
for
that
use
component_4
time
or
refresh
interval
to
find
the
require
right
balance
technology_1
requirement_1
tune
graphtuning
technology_1
for
optimal
performanceto
be
more
specific
tune
involve
two
important
metric
quality_attribute_2
measure
and
quality_attribute_1
measure
quality_attribute_2
measure
mean
how
long
it
take
to
component_5
one
and
similarly
how
many
arrive
within
a
specific
amount
of
time
that
mean
quality_attribute_1
measure
so
most
component_6
be
optimize
for
either
quality_attribute_2
or
quality_attribute_1
while
technology_2
technology_1
balance
both
moreover
we
can
say
a
well
tune
technology_1
component_7
have
enough
pattern_2
to
handle
topic
quality_attribute_1
give
the
quality_attribute_2
require
to
component_5
connector_data_1
a
it
be
connector_1
a
tune
technology_1
producersas
we
technology_1
u
an
pattern_3
pattern_4
component_8
while
our
component_2
connector_data_2
the
connector_2
command
the
connector_data_3
be
a
future
that
future
offer
to
connector_3
the
status
of
the
connector_data_1
in
the
component_5
moreover
a
the
pattern_1
be
ready
the
component_2
connector_4
it
to
the
pattern_2
basically
the
pattern_2
wait
for
an
then
connector_5
the
connector_data_3
and
further
respond
that
the
transaction
be
complete
for
quality_attribute_2
and
quality_attribute_1
two
parameter
be
particularly
important
for
technology_1
requirement_1
tune
i
pattern_1
sizeinstead
of
the
number
of
connector_data_4
pattern_1
size
measure
pattern_1
size
in
total
byte
that
mean
it
control
how
many
byte
of
connector_data_5
to
connector_6
before
connector_7
connector_data_6
to
the
technology_1
pattern_2
so
without
exceed
quality_attribute_3
memory
set
this
a
high
a
possible
make
sure
the
default
requirement_2
be
however
it
might
never
connector_8
full
if
we
increase
the
size
of
our
buffer
on
the
basis
of
other
connector_9
such
a
linger
time
in
millisecond
the
component_2
connector_4
the
connector_data_1
eventually
although
by
set
the
buffer
pattern_1
size
too
high
we
can
impair
memory
usage
that
do
not
impact
quality_attribute_2
moreover
we
be
probably
connector_10
the
best
quality_attribute_1
possible
if
our
component_2
be
connector_7
all
the
time
also
we
might
not
be
connector_11
enough
connector_data_5
to
warrant
the
current
allocation
of
resource
if
the
component_2
be
often
idle
ii
linger
timein
order
to
buffer
connector_data_5
in
pattern_3
mode
linger
m
set
the
maximum
time
let’s
understand
it
with
an
example
a
set
of
pattern_1
100ms
of
connector_data_6
to
connector_2
at
once
here
the
buffer
connector_data_4
delivery
quality_attribute_2
but
this
improve
quality_attribute_1
however
the
component_2
do
not
wait
by
default
hence
it
connector_4
the
buffer
any
time
connector_data_5
be
quality_attribute_3
also
we
can
set
linger
m
to
and
connector_2
more
connector_data_6
in
one
pattern_1
rather
than
connector_7
immediately
this
would
up
to
millisecond
of
quality_attribute_2
to
component_9
connector_2
but
also
reduce
the
number
of
connector_data_7
connector_2
even
if
the
load
on
the
component_7
do
not
warrant
the
delay
so
for
high
quality_attribute_2
and
high
quality_attribute_1
in
our
component_2
increase
linger
m
b
tune
technology_1
brokersas
we
topic
be
divide
into
component_10
further
each
component_10
have
a
leader
also
with
multiple
replica
most
component_10
be
connector_12
into
leader
however
if
the
leader
be
not
balance
properly
it
might
be
possible
that
one
might
be
overwork
compare
to
others
so
on
the
basis
of
our
component_7
or
how
critical
our
connector_data_5
be
we
want
to
be
sure
that
we
have
sufficient
pattern_5
set
to
preserve
our
connector_data_5
it
be
recommend
that
start
with
one
component_10
per
physical
storage
disk
and
one
component_3
per
component_10
technology_3
tune
technology_1
consumersbasically
technology_1
component_11
can
create
quality_attribute_1
issue
it
be
that
the
number
of
component_11
for
a
topic
be
equal
to
the
number
of
component_10
because
to
handle
all
the
component_11
need
to
keep
up
with
the
component_2
we
need
enough
component_10
in
the
same
component_3
group
component_11
split
the
component_10
among
them
hence
more
component_11
to
a
group
can
enhance
requirement_1
also
more
component_3
group
do
not
affect
requirement_1
moreover
the
way
we
use
the
replica
high
watermark
checkpoint
interval
m
property
can
affect
quality_attribute_1
also
we
can
mark
the
last
point
where
we
connector_13
connector_data_1
while
connector_14
from
a
component_10
in
this
way
we
have
a
checkpoint
from
which
to
move
connector_15
without
have
to
reread
prior
connector_data_5
if
we
have
to
go
back
and
locate
the
miss
connector_data_5
so
we
will
never
lose
a
connector_data_4
if
we
set
the
checkpoint
watermark
for
every
but
it
significantly
impact
requirement_1
also
we
have
a
margin
of
quality_attribute_4
with
much
le
impact
on
quality_attribute_1
if
instead
we
set
it
to
connector_3
the
offset
every
hundred
connector_data_4
production
component_12
configuration
in
technology_1
tuningas
per
the
quality_attribute_5
of
the
cluster
environment
and
component_13
configuration
here
be
some
of
the
configuration
parameter
and
their
requirement_2
which
we
can
modify
–do
you
about
important
technology_1
technology_4
—
herekafka
requirement_1
tune
production
component_12
configurationsa
num
replica
fetchersthis
parameter
define
the
number
of
component_14
which
will
be
replicate
connector_data_5
from
the
leader
to
the
follower
a
per
quality_attribute_5
of
component_15
we
can
modify
the
requirement_2
of
this
parameter
it
be
important
to
have
the
number
of
replica
fetchers
to
complete
pattern_5
in
parallel
if
we
have
component_14
quality_attribute_3
b
replica
fetch
max
bytesthis
parameter
be
all
about
how
much
connector_data_5
we
want
to
fetch
from
any
component_10
in
each
fetch
connector_data_8
it’s
quality_attribute_6
to
increase
requirement_2
for
this
parameter
so
that
it
help
to
create
replica
fast
in
the
follower
technology_3
replica
connector_data_9
connector_1
buffer
byteswe
can
increase
the
size
of
a
buffer
if
we
have
le
component_15
quality_attribute_3
for
create
the
replica
also
if
pattern_5
component_15
be
slow
a
compare
to
the
incoming
connector_data_4
rate
it
will
help
to
hold
more
connector_data_5
technology_5
num
partitionswhile
have
technology_1
in
live
we
should
take
care
of
this
configuration
we
can
have
the
level
of
parallelism
and
connector_12
connector_data_5
in
parallel
that
will
automatically
increase
the
quality_attribute_1
however
if
the
component_7
configuration
be
not
capable
to
handle
then
increasing
the
number
of
the
component_10
can
slow
down
our
requirement_1
and
quality_attribute_1
basically
if
a
component_7
do
not
have
sufficient
component_14
or
have
single
disk
then
it
do
not
make
sense
in
create
lot
of
component_10
for
quality_attribute_6
quality_attribute_1
so
we
can
say
the
creation
of
more
component_10
for
a
topic
be
directly
dependent
on
quality_attribute_3
component_14
and
disk
e
num
io
threadsbasically
how
much
disk
we
have
in
our
cluster
that
decide
set
requirement_2
for
i
o
component_15
moreover
a
component_12
u
these
component_14
for
connector_16
the
connector_data_8
hence
a
number
of
component_14
must
quality_attribute_7
on
a
number
of
the
disk
so
this
be
all
about
technology_1
requirement_1
tune
hope
you
our
explanation
conclusion
technology_1
requirement_1
tuninghence
we
have
see
the
whole
concept
of
technology_1
requirement_1
tune
moreover
we
study
tune
technology_1
component_2
tune
technology_1
pattern_2
tune
technology_1
component_3
in
addition
we
discus
production
component_12
configuration
still
if
any
doubt
occur
regard
technology_1
requirement_1
tune
feel
free
to
ask
in
the
section
4more
from
rinu
gourfollowdata
science
enthusiast
|
research
writer
|
technology_6
|
entrepreneurlove
podcast
or
audiobooks
on
the
go
with
our
component_16
try
knowablerecommended
from
mediumdmytrii
s
inhackernoon
comhow
to
pattern_6
component_17
the
fundamental
frameworkjulia
smithincodexhow
to
manage
a
dedicate
development
team
zain
tariqmartianswapm
alfa
rizamake
car
rental
admin
use
technology_7
part
requirement_3
userteodor
costăchioiuinelectronzaarduino
dmx
master
use
rs485
click
boardneel
smartec
consultingsmart
technology_8
development
with
iiottiago
costanetworking
for
developersmeifeng
lincs373
technology_9
week
9abouthelptermsprivacyget
the
appget
startedrinu
gour2
5k
followersdata
science
enthusiast
|
research
writer
|
technology_6
|
entrepreneurfollowmore
from
mediumvidit
tyagistart
work
on
technology_2
technology_1
||
understand
concept
of
technology_2
technology_1
||
technology_2
technology_1
configuration
||…steve
georgeend
to
end
ml
pipeline
use
technology_10
requirement_4
studio
designerchinmohan
biswasaws
step
and
emr
cluster
—
bedrock
for
connector_data_5
requirement_5
a
a
component_17
ecosystemvictor
leungapache
technology_1
connector_17
to
technology_10
hubshelpstatuswritersblogcareersprivacytermsaboutknowable
