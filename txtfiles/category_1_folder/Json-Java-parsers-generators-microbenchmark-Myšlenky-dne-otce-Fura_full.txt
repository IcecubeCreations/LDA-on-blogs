technology_1
technology_2
requirement_1
generator
microbenchmark
myšlenky
dne
otce
fura
myšlenky
dne
otce
fura
dává
je
jen
zřídka
obvykle
jim
není
moc
rozumět
a
často
vám
ani
k
ničemu
nejsou
kafemlejnek
tv
jopenspace
fg
forrest
o
autorovi
technology_1
technology_2
requirement_1
generator
microbenchmark



a
month
ago
i
have
an
incident
in
production
that
be
cause
a
i
find
out
late
by
poor
requirement_2
of
use
technology_3
requirement_1
technology_4
i
ve
optimalized
the
and
manage
to
solve
it
but
decide
to
look
for
another
technology_4
with
quality_attribute_1
requirement_2
characteristic
i
search
for
some
exist
benchmark
and
find
two
of
them
one
be
for
technology_3
manipulation
on
technology_5
and
the
second
one
be
thorough
serialization
test
focus
on
different
use
requirement_3
than
i
have
so
i
decide
to
connector_1
my
own
microbenchmark
copy
the
use
requirement_3
i
have
in
the
production
there
be
many
differencies
among
technology_3
technology_4
regard
their
feature
and
connector_data_1
requirement_2
so
if
you
want
to
my
find
continue
connector_2
benchmark



test
use
requirement_3
be
a
serialization
of
a
rich
pojo
with
collection
of
inner
pojos
reference
another
pojo
see
photoalbum
component_1
connector_data_2
test
technology_3
requirement_1
must
have
direct
pojo
to
technology_3
serialization
and
deserialization
support
in
order
to
connector_3
into
the
suite
i
ve
use
all
technology_4
by
same
naive
approach
connector_4
it
and
use
it
the
simpliest
way
possible
no
tweak
no
optimalizing
whatsoever
that
s
the
way
they
be
usually
use
average
size
of
generate
technology_3
connector_data_3
be
160kb
so
it
be
rather
big
the
problem
in
production
be
cause
by
connector_data_3
of
33kb
size
in
my
requirement_3
disclaimer
microbenchmarking
connector_data_4
be
mislead
if
you
want
to
be
sure
connector_1
your
own
test
with
your
custom
connector_data_3
on
your
hardware
to
be
really
sure
update



i
ve

test
for
staxon
with
three
different
serialization
factory
internal
technology_6
and
technology_7
section

i
ve
re
run
all
the
test
and
update
the
number
setup
hardware
intel®
core™2
duo
cpu
t7500
@

20ghz
×

ssd
disk
but
io
time
be
not
count

technology_2
tm
se
runtime
environment
build


0_23
b05
technology_2
hotspot
tm
component_2
vm
on
ubuntu
linux



bit
technology_8
option
xmx32m
component_2
connector_data_3
requirement_4
be
test
photoalbum
methodology
before
take
measurement
i
pattern_1
thing
up
by
run
the
connector_data_5

time
next

loop
be
count
no
other
except
the
serialization
or
deserialization
be
measure
finally
average
connector_5
time
be
take
for
each
and
technology_4
i
run
test
a
a
full
suite
and
separately
by
each
technology_4
but
the
connector_data_4
didn
t
differ
much
test
technology_4
and
their
version
flexjson


technology_6


technology_7



jsonlib


jsonmarshaller


jsonsmart


beta2
protostuff
technology_3



xstream



staxon


test
be
place
on
technology_9
technology_10
technology_9
technology_11
novoj
javajsonperformancetest
connector_data_4
and

flexjson
there
be
a
few
catch
when
use
this
technology_4
in
order
to
serialize
pojo
right
you
have
to
exclude
serialization
of
a
property
deep
wise
and
include
serialization
of
collection
a
they
be
not
serialize
by
default
technology_4
have
neither
problem
with
date
handle
nor
with
use
generate
technology_12

i
haven
t
notice
any
support
for
resolution
of
circular
reference
technology_4
be
easily
reachable
in
technology_13
repos
advantage
of
this
technology_4
accord
author
be
ability
to
pick
and
choose
specific
property
and
connector_data_6
that
should
be
convert
to
from
technology_1
serialization

978ms

photoalbum
technology_3
size
165kb
deserialization

314ms

photoalbum
technology_6
it
s
very
sophisticate
and
quality_attribute_2
technology_4
it
support
versioning
custom
pattern_2
and
instantiation
factory
exclusion
of
certain
property
custom
name
technology_4
be
super
easy
to
use
with
quality_attribute_1
documentation
i
haven
t
notice
any
support
for
resolution
of
circular
reference
handle
technology_12
or
date
connector_data_2
technology_4
be
easily
reachable
in
technology_13
repos
serialization

11ms

photoalbum
technology_3
size
169kb
deserialization

396667ms

photoalbum
technology_7
it
claim
to
be
a
fast
technology_2
technology_3
technology_4
among
all
and
accord
to
my
statistic
they
be
quite
right
even
then
it
have
very
rich
feature
set
that
exceed
what
be
provide
by
technology_6
but
no
versioning
support
out
of
the
component_3
it
be
super
easy
to
use
it
have
requirement_5
support
for
date
and
jodatime
too
serialization

291ms

photoalbum
technology_3
size
165kb
deserialization

588ms

photoalbum
technology_1
lib
this
technology_4
be
very
quality_attribute_2
but
have
some
glitch
for
example
deserializing
of
date
connector_data_7
doesn
t
work
out
of
the
component_3
and
you
have
to
provide
type
pattern_2
it
have
several
strategy
how
to
cope
with
circular
referencies
very
quality_attribute_1
documentation
be
provide
and
it
have
requirement_6
with
technology_12
it
be
easily
reachable
from
technology_13
repos
but
beware
you
have
to
provide
classifier=jdk15
this
technology_4
burn
me
at
the
production
a
you
can
see
it
have
really
bad
requirement_2
stats
serialization

592ms

photoalbum
technology_3
size
168kb
deserialization

248ms

photoalbum
jsonmarshaller
it
have
problem
with
serialization
deserialization
of
technology_12
connector_data_7
throw
exception
regard
asm
it
have
no
date
support
build
in
it
require
you
to
place
annotation
into
your
component_1
or
dto
that
might
be
rather
uncomfortable
and
maybe
unacceptable
in
some
requirement_3
documentation
be
quite
poor
it
be
not
place
in
technology_13
repos
serialization

8146667ms

photoalbum
technology_3
size
165kb
deserialization

125ms

photoalbum
technology_1
smart
this
technology_4
be
very
simplistic
and
small
pojo
deserialization
come
first
in
version

which
be
currently
in
beta
almost
nothing
be
quality_attribute_2
documentation
be
poor
technology_4
be
not
reachable
in
technology_13
repos
it
s
not
currently
possible
to
deserialize
date
connector_data_2
more
than
that
there
be
no
quality_attribute_2
option
to
custom
type
pattern_2
so
that
deserialization
of
connector_data_2
contain
date
be
not
possible
at
all
serialization

026ms

photoalbum
technology_3
size
172kb
deserialization
protostuff
technology_3
powerful
technology_4
require
rather
complicate
setup
when
not
use
runtimeschema
generator
in
technology_14
setup
i
believe
technology_4
be
use
to
do
much
more
stuff
than
i
ve
use
it
for
technology_3
transformation
be
piece
of
work
it
can
do
it
can
convert
to
technology_15
connector_data_8
and
more
it
have
no
problem
with
date
connector_data_7
and
technology_12

technology_4
be
quality_attribute_3
in
technology_13
repos
serialization

9116666ms

photoalbum
technology_3
size
165kb
deserialization

2213334ms

photoalbum
xstream
technology_4
formerly
use
to
serialize
and
deserialize
to
from
connector_data_8
internally
use
jettison
to
transfrom
connector_data_3
to
from
technology_1
it
be
easy
to
use
highly
quality_attribute_4
and
support
resolution
of
circular
reference
technology_4
handle
date
connector_data_7
out
of
the
component_3
it
have
no
problem
with
technology_12
and
be
place
in
technology_13
repos
serialization

84967ms

photoalbum
technology_3
size
171kb
deserialization

361ms

photoalbum
staxon
staxon
aim
primarily
on
the
connector_6
component_4
and
present
use
requirement_3
be
not
it
primary
kind
of
target
usage
nevertheless
i
be
ask
in
the
commentary
section
to
some
test
for
this
technology_4
so
i
do
so
staxon
seem
very
easy
to
use
very
well
document
it
handle
date
connector_data_7
out
of
the
component_3
and
be
place
in
technology_13
repos
it
s
requirement_2
be
not
one
of
the
best
seem
rather
average
for
the
use
requirement_3
test
but
remember
when
use
connector_6
style
or
connector_2
connector_7
connector_data_4
might
be
different
staxon
over
technology_6
serialization

510667ms

photoalbum
technology_3
size
176kb
deserialization

171ms

photoalbum
staxon
over
technology_7
serialization

8446665ms

photoalbum
technology_3
size
176kb
deserialization

099ms

photoalbum
staxon
default
implementation
serialization

3436666ms

photoalbum
technology_3
size
176kb
deserialization

087ms

photoalbum
fastjson
young
technology_4
since
mid

that
perform
really
fast
it
dynamically
create
specific
serializer
deserializer
use
asm
for
each
custom
pojo
type
it
have
considerable
amount
of
component_5
feature
though
not
very
well
document
documentation
a
a
whole
be
very
poor
but
a
long
a
it
work
you
be
quality_attribute_5
to
go
technology_4
handle
date
connector_data_7
out
of
the
component_3
it
have
no
problem
with
technology_12
and
be
place
in
technology_13
repos
serialization

88ms

photoalbum
technology_3
size
165kb
deserialization

02ms

photoalbum
summary
all
stats
be
clearly
comparable
on
the
follow
graph
my
conclusion
be
that
when
you
need
easily
serialize
deserialize
technology_2
pojos
without
sacrifice
requirement_2
and
have
some
backup
in
term
of
quality_attribute_6
and
quality_attribute_7
you
should
choose
technology_7
fastjson
or
technology_6
technology_4
technology_7
be
my
winner
and
i
be
go
to
migrate
all
of
my
to
this
one
any

and
thought
be
appreciate
and
remember
this
be
only
microbenchmark
so
make
test
for
your
own
use
requirement_3
if
you
want
to
be
100%
sure
update


fastjson
test
be

it
place
itself
among
the
best
perform
technology_4
serialization
be
slightly
bad
than
technology_7
but
in
deserialization
it
be
the
clear
winner
o
autorovi
jan
novotný
alias
novoj
vývojář
v
fg
forrest
autor
kafemlejnek
tv
spoluorganizátor
jopenspace
ne
konference
komentáře
j&rsquo
requirement_7
battu
technology_16
|
octo
talk





…
une
sérialisation
rapide
faisant
confiance
à
la
communauté
ainsi
qu’à
quelques
benchmark
je
choisis
de
prendre
technology_7
comme
parseur
technology_1
par
la
suite
de
essais
avec
boon
ou
…
technology_3
y
technology_2
introducción
a
technology_6
|
danielme
technology_11





…
si
necesitamos
optimizar
al
máximo
los
procesos
que
impliquen
estas
coversiones
entre
technology_2
y
technology_1
aquí
hay
un
benchmark
muy
interesante
sobre
varias
librerias
de
parseo
en
la
que
technology_6
no
sale
mal
…
technology_3
requirement_1
&laquo
peace
be
with
you





…
technology_10

novoj
net



technology_1
technology_2
requirement_1
generator
microbenchmark
…
ryu





try
this
solution
in
very
easy
way
copy
and
paste
component_6
or
url
and
then
click
go
technology_10
www
maya
wizard
technology_11
component_6
json2java
technology_17
cowtowncoder





quality_attribute_1
to
see
fastjson
include
too
–
it
be
definitely
fast
a
name
imply
which
be
not
always
the
requirement_3
with
libs
one
other
thing
that’d
be
nice
to
test
if
you
happen
to
have
time
be
technology_7
afterburner
from
technology_10
technology_9
technology_11
fasterxml
technology_7

afterburner
which
quality_attribute_8
up
technology_7
serialization
and
deserialization
a
bit
by
use
dynamic
byte
generation
otec
fura





update


fastjson
test
be

–
it
place
itself
among
the
best
perform
technology_4
serialization
be
slightly
bad
than
technology_7
but
in
deserialization
it
be
the
clear
winner
wenshao





fastjson
support
pojo
it’s
technology_18
very
quality_attribute_9
serialize
component_4
technology_1
tojsonstring
obj
deserialize
component_4
vo
vo
=
technology_1
parseobject
…
vo

otec
fura





if
it
support
pojo
serialization
and
deserialization
i
would
it
when
have
some
spare
time
accord
to
doc
it
be
suppose
to
work
with
pojos
or
you
can
make
benchmark
test
on
your
own
and
create
a
connector_8
connector_data_9
thanks
for
suggestion
wenshao





fastjson
component_7
in
technology_9
technology_10
technology_9
technology_11
alibabatech
fastjson
wenshao





why
not
include
fastjson
technology_10
technology_9
technology_11
eishay
technology_8
serializers
wiki
stag
connector_data_1
fastjson
fast
than
technology_7
it’s
fast
cowtowncoder





your
find
be
odd
because
use
pojos
should
be
fast
than
hashmaps
not
slow
hashmaps
have
high
overhead
than
basic
technology_2
connector_data_7
due
to
key
requirement_4
pattern_3
use
up
more
memory
so
their
use
do
not
make
much
sense
to
me
for
high
requirement_2
use
requirement_3
pojo
bind
be
definitely
fast
than
connector_data_10
with
technology_7
at
any
rate
i
have
not
find
technology_1
smart
particularly
fast
–
it
appear
to
be
quality_attribute_8
see
technology_10
technology_9
technology_11
eishay
technology_8
serializers
wiki
which
be
quality_attribute_1
enough
for
many
use
requirement_3
otec
fura





staxon
test
be
finally

i
have
some
issue
with
switch
serialization
deserialization
factory
in
runtime
it
seem
technology_4
be
optimize
for
choose
one
factory
at
the
start
of
the
component_8
and
never
connector_9
it
what
be
rather
common
usage
i
suppose
kazuaki
maeda





i
have
connector_10
your
component_9
in
technology_12
thank
you
in

novoj
technology_1
transformer
protostuff
protostuffio
technology_12
you
connector_1
jsonioutil
writeto
out
photoalbum
schema
true
this
statement
serialize
attribute
name
in
numeric
for
example
{
“1”

“2”
“john
doe”
“3”
“speed
kill
”
“4”

}
if
you
connector_9
it
to
jsonioutil
writeto
out
photoalbum
schema
false
the
serialize
them
in
alphabetic
{
“id”

“name”
“john
doe”
“motto”
“speed
kill
”
“gender”

}
this
be
a
small
thing
but
i
prefer
the
latter
false
to
the
former
true
and
i
would
to
about
your
connector_data_11
in
english
i
can
not
connector_10
your
mother
technology_19
when
i
connector_1
technical
document
i
would
to
your
name
in
acknowledgement
i
connector_1
my
connector_data_11
in
my
web
component_10
technology_10
www
rugson

could
you
connector_11
to
me
please
thank
you
very
much
otec
fura





some
more
detail
benchmark
be
locate
at
technology_10
technology_9
technology_11
eishay
technology_8
serializers
wiki
that
i
reference
in
the
perex
but
there
be
many
approach
that
could
be
test
i
take
only
one
of
them
pojo
relate
of
you
can
use
my
component_9
cod
and
use
it
for
you
own
experiment
everything
at
this
be
creative
technology_20
license
so
do
with
it
what
you
will
component_11
be
at
technology_21
so
you
can
fork
easily
if
you

connector_12
your
connector_data_4
will
be
highly
appreciate
kazuaki
maeda





i’m
very
interest
in
your
work
i
try
serialization
benchmark
last
year
but
the
technology_22
to
serialize
be
connector_data_8
and
binary
base
i
would
to
compare
many
approach
of
connector_data_2
serialization
from
qualitative
and
quantitative
aspect
can
i
use
your
test
component_12
and
the
connector_data_4
in
my
benchmark
after
finish
the
experiment
i
can
open
the
connector_data_4
on
my
web

thank
you
sreenath
v





technology_7
for
requirement_8
component_13
you
can
use
minify
jar
which
be
~134kb
technology_7
mini
doesn’t
support
annotation
and
which
off

be
fine
for
requirement_8
component_13
jesse
wilson





component_9

my
measurement
show
a
close
race
between
technology_6
and
technology_7
don’t
forget
that
gson’s
jar
be
way
small
than
jackson’s
the
technology_6


jar
be

kib
this
include
both
connector_6
and
bind
to
do
both
with
technology_7
you’ll
need

kib
in
jar

otec
fura





staxon
be
focus
on
technology_23
connector_2
connector_7
and
therefore
i
didn’t
include
it
into
the
test
suite
in
the
first
time
test
suite
measure
direct
pojo
serialization
deserialization
and
this
be
not
aim
of
the
staxon
a
i
connector_3
it
after
connector_2
some
doc
i
find
out
that
with
combination
with
technology_24
tag
staxson
could
be
use
for
pojo
serialization
deserialization
so
i’ll
try
to
prepare
a
test
for
it
connector_13
connector_data_12
of
this
please
pratik
parikh





can
you
also
put
technology_10
technology_9
technology_11
beckchr
staxon
in
equation
to
tell
u
how
it
perform
it
seem
you
have
a
set
test
that
you
run
against
all
the
technology_18
it
would
really
help
to
see
how
this
technology_18
requirement_2
in
compare
to
technology_7
i
be
personally
a
fan
of
technology_7
and
their
implementation
but
the
concept
be
staxon
and
the
conversion
capability
in
place
between
technology_25
and
technology_1
thanks
for
connector_12
otec
fura





oh
well
that’s
nasty
i
haven’t
run
at
this
issue
yet
thanks
for
connector_14
steve
loughran





i
have
to
rip
all
of
jsonlib
out
last
week
a
it
seem
to
auto
requirement_9

begin
with
“
”
or
“{”
a
technology_1
whenever
you
insert
them
into
the
connector_data_2
component_1
or
attach
a
parent
to
another
technology_26
technology_10
steveloughran
blogspot
technology_11



because
you
can
rewrite
your
technology_27
try
test
what
the
libs
do
with
multiple
entry
of
the
same
name
technology_1
lib
assume
you
want
an
of
that
name
and
aggregate
them
similarly
see
what
reject
illegal
technology_1
such
a
unquoted
key
{illegal
true}
or
trail
comma
the
author
think
they
be
be
helpful
but
they
be
encourage
you
to
create
invalid
technology_1
otec
fura





yes
i
focus
on
pojo
serialization
deserialization
which
be
quite
common
in
web
space
imho
though
accord
to
this
stats
technology_10
technology_9
technology_11
eishay
technology_8
serializers
wiki
technology_1
smart
place
itself
in
the
middle
of
the
requirement_2
requirement_10
maybe
in
some
specific
use
requirement_3
it
jump
up
if
you
have
your
test
somewhere
it
might
be
interest
to
other
reader
to
study
your
use
requirement_3
it
they
give
different
connector_data_1
leo





i
do
extensive
test
of
technology_1
requirement_1
with
really
large
technology_1
connector_data_3
set
requirement_9
alone
and
we
never
use
pojo
because
it
be
simply
a
quality_attribute_8
bump
in
my
test
no
other
requirement_1
match
the
quality_attribute_8
of
smart
technology_1
which
be
quality_attribute_10
in
technology_13
in
it’s



version
our
use
requirement_3
be
slightly
different
though
we
have
to
requirement_9
the
technology_1
a
fast
a
possible
into
managable
hash
connector_data_10
to
stay
real
time
geemang





it’d
be
interest
to
see
how
the
technology_3
support
in
technology_12


measure
up
otec
fura





yes
you’re
right
in
term
of
requirement_2
protostuff
seem
to
be
one
of
the
best
but
a
i
say
in
the
begin
of
the

“i’ve
use
all
technology_4
by
same
naive
approach
–
connector_4
it
and
use
it
the
simpliest
way
possible
no
tweak
no
optimalizing
whatsoever
that’s
the
way
they
be
usually
use
”
this
technology_4
take
me
most
time
to
quality_attribute_11
among
all
test
technology_4
so
i
would
recommend
it
for
more
serious
work
when
you
have
time
to
study
and
try
for
quick
usage
i
wouldn’t
go
that
way
because
technology_7
or
technology_6
be
performant
enough
and
much
easy
to
use
tomek
kaczanowski





so
you
do
not
recommend
protostuff
technology_3
because
it
be
hard
to
use
than
the
competition
right
poslední
články
proxycian
zkušenosti
monkeytracker
projektu
a
jeho
ukončení
forresti
publikují
open_source
logical
over
matrix
of
sort
number
what
lie
on
background
of
e
commerce
precalculated
modify
preorder
tree
traversal
kafemlejnek
tv

–
netio
chytré
zásuvky
pro
průmysl
soutěž
kafemlejnek
tv

–
techniky
a
nástroje
kterými
po
vás
hackeři
půjdou
zamyšlení
nad
procesy
kafemlejnek
tv

–
hacktrophy
bug
bounty
a
a
component_6
kategorie
technology_5
bezpečnost
databáze
devfest
english
geecon
technology_12
hackathon
ibatis
intellij
idea
technology_2
technology_2
softwarové
nástroje
programování
programming
technology_28
jopenspace
linux
requirement_11
requirement_11
úvahy
technology_13
technology_29
monkeytracker
nezařazené
podcast
programming
programování
reportáže
technology_30
softwarové
nástroje
technology_31
technology_32
strip
teamcity
testování
requirement_12
web
webexpo
úvahy
toto
dílo
podléhá
licenci
creative
technology_20
uveďte
původ
zachovejte
licenci


mezinárodní
license
štítky
technology_33
asus
infinity
pad
běžné
problémy
c3p0
cglib
count
dbcp
download
e
commerce
eclipse
game
geecon
generiky
gpars
groovyserv
hack
hardware
httpclient
httpserver
ide
technology_2
jdk


jelly
component_14
jopenspace
technology_34
junit
jwplayer
kafemlejnektv
konference
letsencrypt
manual
upgrade
measure
mock
pattern_4
video
play
monkeytracker
motion
capture
technology_35
open
component_9
pattern_5
pattern_6
reflexe
pattern_7
quality_attribute_12
quality_attribute_13
technology_30
simulate
springframework
springone
testování
technology_36
turris
omnia
unit
test
vimeo
warhorse
webexpo
youtube
základy
školení
©

myšlenky
dne
otce
fura
generate
with
hugo
and
mainroad
theme
