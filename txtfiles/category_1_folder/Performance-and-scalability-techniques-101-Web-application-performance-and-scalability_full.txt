requirement_1
and
quality_attribute_1
technique
web
component_1
requirement_1
and
quality_attribute_1
web
forefront
aboute
the
author
&
consult
connector_1
all
book
&
begin
technology_1
web
requirement_1
and
quality_attribute_1
essay
search
homepage
connector_1
all
book
and
begin
technology_1
web
requirement_1
and
quality_attribute_1
essay
web
component_1
requirement_1
and
quality_attribute_1
go
to
component_2
of
content
«
key
requirement_1
and
quality_attribute_1
technologiessoftware
a
a
component_3
and
requirement_2
computing
component_4
»
requirement_1
and
quality_attribute_1
technique
be
familiar
with
both
the
limit
resource
and
key
technology_2
that
influence
a
web
component_1
s
requirement_1
and
quality_attribute_1
it
time
to
analyze
how
both
resource
and
technology_2
influence
the
basic
technique
apply
to
solve
requirement_1
and
quality_attribute_1
issue
a
web
component_1
be
bear
every
web
component_1
start
out
small
component_5
demand
build
up
over
time
which
be
one
of
the
primary
reason
requirement_1
and
quality_attribute_1
issue
start
to
arise
when
a
web
component_1
launch
it
s
rarely
afflict
with
requirement_1
and
quality_attribute_1
issue
to
the
point
of
become
unusable
it
s
only
after
a
gradual
increase
in
component_5
which
in
turn
increase
the
amount
of
connector_data_1
component_6
power
and
other
resource
need
to
keep
a
web
component_1
run
smoothly
that
requirement_1
and
quality_attribute_1
issue
start
to
appear
the
topic
of
requirement_1
and
quality_attribute_1
in
web
component_7
be
always
interest
because
they
be
multidimensional
they
can
be
tackle
on
multiple
front
from
the
operate
component_8
programming
technology_3
web
component_9
permanent
storage
component_8
or
other
part
that
compose
a
web
component_1
and
can
also
be
connector_2
in
various
way
from
quality_attribute_2
connector_3
make
to
component_10
or
configuration
to
deep
design
choice
which
be
best
contemplate
from
the
outset
to
avoid
scrap
part
of
an
component_1
that
t
perform
or
quality_attribute_3
at
a
give
threshold
in
order
to
classify
the
part
of
a
web
component_1
s
afflict
by
requirement_1
and
quality_attribute_1
issue
i
will
use
the
follow
three
tier
classification
connector_data_2
throughout
the
book
content
tier
requirement_3
component_11
tier
permanent
storage
tier
to
further
illustrate
what
s
imply
by
each
of
these
tier
component_2
have
several
example
of
a
web
component_1
s
part
and
how
they
relate
to
this
three
tier
connector_data_2
include
a
series
of
associate
requirement_1
and
quality_attribute_1
technique
component_2
web
component_1
tier
core
technology_2
&
requirement_1
and
quality_attribute_1
technique
tierstatic
content
tierbusiness
component_11
tierpermanent
storage
tier
core
technology_2
involve
component_12
side
technology_3
technology_4
technology_5
technology_1
web
component_13
browser
component_9
side
programming
web
technology_6
script
technology_3
technology_7
technology_8
technology_9
net
web
component_13
component_1
component_13
operate
component_14
connector_data_1
storage
component_15
technology_10
column
orientated
quality_attribute_4
connector_data_1
connector_4
mechanism
technology_11
technology_12
technology_13
gql
operate
component_14
requirement_1
and
quality_attribute_1
technique
compression
technology_4
technology_5
technology_1
tune
profile
technology_5
technology_14
component_12
side
browser
pattern_1
web
component_9
tune
tune
profile
technology_7
technology_8
technology_9
net
refactoring
technology_7
technology_8
technology_9
net
component_9
side
pattern_1
web
component_9
tune
operate
component_8
tune
tune
profile
technology_10
or
other
connector_data_1
storage
component_16
index
sharding
operate
component_8
tune
grasping
how
a
production
environment
be
set
up
for
run
web
component_7
be
an
important
aspect
of
understand
the
constraint
and
benefit
of
use
requirement_1
and
quality_attribute_1
technique
in
each
of
these
three
tier
a
you
in
the
previous
chapter
virtualization
have
create
a
blurry
line
for
a
production
environment
s
hardware
and
it
resource
cpu
memory
bandwidth
and
i
o
capacity
but
whether
a
web
component_1
rely
on
virtualization
or
not
at
it
initial
stage
it
generally
make
sense
to
quality_attribute_5
everything
that
make
up
a
web
component_1
core
programming
component_17
technology_8
technology_15
technology_9
or
other
web
technology_6
and
permanent
storage
component_8
a
if
it
be
run
on
a
development
workstation
technically
speak
all
the
web
component_1
s
tier
component_18
on
the
same
technology_16
or
component_19
a
illustrate
in
figure
figure
all
web
component_1
tier
component_18
on
the
same
technology_16
or
component_19
at
this
early
stage
one
of
the
first
question
you
need
to
ask
yourself
be
how
much
resource
you
need
to
run
a
web
component_1
the
initial
provision
can
probably
best
be
estimate
by
the
resource
connector_5
in
a
web
component_1
s
test
phase
however
no
matter
how
quality_attribute_6
your
estimate
if
a
web
component_1
be
successful
it
will
eventually
hit
a
wall
where
wall
basically
mean
end
component_20
start
experience
sluggishness
or
outright
inaccessibility
when
attempt
to
pattern_2
a
web
component_1
the
abc
s
of
web
component_1
requirement_1
and
quality_attribute_1
in
the
grand
technology_17
of
thing
there
will
be
one
of
three
road
you
will
need
to
take
to
remove
this
wall
and
increase
a
web
component_1
s
requirement_1
and
quality_attribute_1
requirement_1
tune
vertical
quality_attribute_7
or
horizontal
quality_attribute_3
assume
your
now
face
with
a
web
component_1
s
first
report
of
unresponsive
behavior
what
do
you
do
now
that
you
ve
quality_attribute_5
a
web
component_1
to
a
single
technology_16
or
component_19
a
illustrate
in
figure
the
step
would
consist
of
apply
one
or
all
the
follow
requirement_1
tune
this
step
would
consist
of
refactoring
a
web
component_1
s
component_10
analyze
a
web
component_1
s
configuration
set
attempt
to
further
parallelize
a
web
component_1
s
component_11
connector_6
pattern_1
strategy
detecting
pattern_3
spot
and
another
series
of
often
invasive
wise
that
be
throughout
a
web
component_1
s
tier
these
topic
will
be
detail
a
the
book
progress
vertical
quality_attribute_3
this
step
would
consist
of
migrate
a
web
component_1
or
individual
tier
to
technology_16
with
great
resource
horizontal
quality_attribute_3
this
step
would
consist
of
decouple
a
tier
from
a
web
component_1
or
decouple
a
tier
in
itself
to
run
on
multiple
technology_16
in
this
scenario
instead
of
more
resource
which
be
the
requirement_4
of
vertical
quality_attribute_3
a
web
component_1
or
it
tier
be
decouple
so
that
demand
be
spread
out
among
multiple
technology_16
which
of
these
last
step
you
undertake
quality_attribute_8
on
a
series
of
factor
include
the
particularity
of
your
web
component_1
a
development
team
s
experience
a
web
component_1
s
initial
technology_2
choice
a
well
a
what
be
more
attainable
give
your
resource
figure
illustrate
a
decision
tree
apply
to
either
an
entire
web
component_1
or
it
individual
tier
figure
decision
tree
for
requirement_1
tune
horizontal
and
vertical
quality_attribute_3
a
this
last
figure
illustrate
if
a
development
team
have
very
little
experience
make
requirement_1
tune
connector_7
it
can
be
easy
to
simply
skip
to
the
next
step
of
vertically
quality_attribute_7
an
component_1
or
vertically
quality_attribute_7
it
different
tier
by
the
same
connector_data_3
if
your
component_3
technology_18
or
connector_data_1
center
have
difficulty
provision
vertical
quality_attribute_3
it
can
be
easy
to
simply
skip
to
the
next
step
of
horizontally
quality_attribute_7
an
component_1
s
tier
or
horizontally
quality_attribute_7
tier
in
themselves
if
neither
quality_attribute_7
scenario
be
plausible
and
you
have
an
experience
development
team
stick
to
requirement_1
tune
be
the
best
alternative
a
i
already
mention
what
be
too
expensive
for
either
of
these
phase
quality_attribute_8
on
your
circumstance
in
addition
a
a
web
component_1
mature
you
will
notice
that
it
become
more
and
more
difficult
to
achieve
any
order
of
requirement_1
and
quality_attribute_1
in
the
phase
you
invest
more
time
in
the
bulk
and
rest
of
the
book
discus
requirement_1
tune
technique
relate
to
a
web
component_1
s
tier
a
well
a
the
different
technology_2
use
in
these
different
tier
in
this
chapter
s
remain
section
i
will
discus
the
characteristic
and
limitation
of
use
vertical
and
horizontal
quality_attribute_3
so
you
can
weigh
the
benefit
of
take
any
of
the
previous
connector_8
vertical
quality_attribute_7
dimension
component_21
or
technology_16
in
the
requirement_4
of
virtualization
be
a
trial
and
error
component_6
a
explain
in
chapter
web
component_1
s
have
limit
resource
but
they
can
equally
be
in
high
demand
or
remain
idle
in
an
o
what
happen
if
a
web
component_1
s
o
or
one
if
it
tier
suddenly
need
more
physical
memory
or
what
happen
if
cpu
cycle
be
sit
idle
on
an
o
component_18
a
web
component_1
s
content
tier
while
they
be
desperately
need
on
the
o
instance
component_18
an
component_1
s
permanent
storage
tier
if
you
rely
on
component_21
with
a
single
o
the
reassignment
or
addition
of
o
resource
require
either
physically
modify
the
hardware
or
perform
o
migration
to
a
large
component_19
with
virtualization
these
connector_data_4
become
easy
since
assign
resource
per
o
become
more
quality_attribute_9
on
account
of
the
hypervisor
use
in
virtualization
architecture
either
of
these
last
technique
which
account
for
provision
a
component_19
or
technology_16
with
more
resource
in
a
vertical
quality_attribute_3
vertical
be
something
in
an
upright
position
that
hence
have
the
possibility
to
go
up
in
quality_attribute_7
terminology
this
imply
that
a
component_19
or
technology_16
on
which
a
web
component_1
be
run
can
be
upwardly
equipped
with
more
cpu
memory
bandwidth
or
i
o
capacity
thus
if
a
web
component_1
encounter
a
great
demand
for
any
of
these
resource
and
you
be
able
to
move
a
web
component_1
or
one
of
it
tier
to
a
component_19
or
technology_16
with
great
capacity
you
will
have
vertically
quality_attribute_3
an
component_1
so
assume
you
connector_9
your
first
report
of
sluggish
or
unresponsive
behavior
unequivocally
the
root
cause
of
such
behavior
will
be
an
excess
demand
for
a
particular
resource
whether
it
be
cpu
memory
bandwidth
or
i
o
capacity
further
assume
you
ve
already
exhaust
every
requirement_1
technique
at
your
disposal
involve
component_1
or
configuration
connector_7
what
you
be
leave
with
to
tackle
this
problem
be
either
vertical
or
horizontal
quality_attribute_3
with
the
quality_attribute_2
form
be
vertical
quality_attribute_3
vertical
quality_attribute_7
be
quality_attribute_2
because
it
require
no
connector_3
to
a
web
component_1
a
web
component_1
simply
go
from
run
on
a
single
technology_16
to
run
on
a
single
technology_16
with
more
resource
however
even
though
vertical
quality_attribute_7
be
the
quality_attribute_2
of
quality_attribute_7
technique
it
to
can
hit
a
wall
limitation
on
vertical
quality_attribute_7
can
be
due
to
the
operate
component_8
itself
or
an
operational
constraint
quality_attribute_10
requirement_5
or
a
technology_18
s
architecture
for
example
component_2
show
the
limit
of
various
operate
component_14
accord
to
their
manufacturer
component_2
operate
component_8
resource
limit
operate
systemos
typephysical
memory
limitscpu
limit
window
component_9
standard32
bits4gb
window
component_9
standard64
bits32gb
linux32
bits1gb~4gb
linux64
bits4gb~32gb
component_22
physical
memory
memory
limit
for
window
release
&
a
you
can
see
in
this
last
component_2
even
if
a
web
component_1
rely
on
virtualization
it
doesn
t
matter
how
many
resource
a
component_19
or
virtualization
hypervisor
have
at
it
disposal
an
operate
component_8
be
still
bind
to
limit
that
can
thwart
the
component_6
of
vertical
quality_attribute_3
operational
constraint
be
another
common
occurrence
for
hit
a
wall
in
vertical
quality_attribute_3
component_2
show
operational
constraint
that
often
lead
to
limit
in
vertical
quality_attribute_3
component_2
vertical
quality_attribute_7
limit
due
to
operational
constraint
constraintdescription
securitysince
quality_attribute_10
breach
be
unlikely
to
occur
simultaneously
on
multiple
operate
component_8
a
web
component_1
s
tier
be
often
split
into
multiple
operate
component_14
for
quality_attribute_10
purpose
thus
reduce
the
possibility
of
catastrophic
connector_data_1
loss
or
theft
technology_19
portsan
operate
component_8
be
bind
to
certain
port
number
that
cannot
be
replicate
irrespective
of
the
resource
assign
to
an
operate
component_8
thus
a
quality_attribute_2
requirement
have
to
run
two
web
component_13
or
pattern_4
e
g
due
to
multiple
sub
domain
or
other
requirement
can
limit
the
quality_attribute_11
of
vertical
quality_attribute_3
since
an
operate
component_8
only
have
a
single
set
of
technology_19
port
e
g
one
port
which
be
the
default
to
connector_9
connector_4
to
web
component_9
technology_18
hardware
architectureusing
an
operate
component_8
doesn
t
necessarily
mean
you
will
be
able
to
operate
it
with
it
maximum
resource
capacity
hardware
run
an
operate
component_8
might
not
be
capable
of
allocate
more
resource
e
g
your
component_18
technology_18
or
connector_data_1
center
have
lower
resource
threshold
than
those
dictate
by
the
operate
component_8
vendor
due
to
cost
or
architecture
design
managementto
ease
administrative
connector_data_4
a
web
component_1
can
also
be
split
into
multiple
operate
component_8
one
operate
component_8
contain
a
web
component_1
s
permanent
storage
tier
administer
by
dba
another
operate
component_8
administer
by
a
web
component_1
s
development
team
and
so
on
a
you
can
conclude
even
though
vertical
quality_attribute_7
require
little
to
no
connector_3
to
a
web
component_1
s
underlie
connector_data_2
especially
compare
to
requirement_1
technique
which
require
modify
a
web
component_1
s
and
configuration
vertical
quality_attribute_7
can
also
hit
a
wall
when
such
a
wall
be
hit
in
vertical
quality_attribute_7
due
to
any
of
these
last
situation
the
need
arise
for
a
web
component_1
to
rely
on
horizontal
quality_attribute_3
horizontal
quality_attribute_7
though
be
not
a
straightforward
a
more
resource
to
a
technology_16
since
it
become
necessary
to
take
into
account
design
and
even
component_17
choice
use
by
an
component_1
horizontal
quality_attribute_7
horizontal
quality_attribute_7
refer
to
assign
resource
on
a
lateral
basis
in
quality_attribute_7
terminology
this
imply
that
the
technology_16
on
which
a
web
component_1
be
run
cannot
be
equipped
with
more
cpu
memory
bandwidth
or
i
o
capacity
and
thus
a
web
component_1
be
split
to
run
on
multiple
component_21
or
technology_16
the
component_6
of
horizontally
quality_attribute_7
a
web
component_1
be
more
elaborate
than
that
of
vertically
quality_attribute_3
the
reason
be
that
by
rely
on
horizontal
quality_attribute_3
you
need
to
devise
a
way
to
decouple
a
web
component_1
the
quality_attribute_2
way
to
decouple
a
web
component_1
be
by
mean
of
it
tier
recap
from
the
previous
paragraph
these
tier
would
be
content
tier
consist
of
image
or
other
resource
that
make
up
an
component_1
s
and
t
need
component_6
in
most
web
component_7
this
would
be
jpeg
gif
image
technology_5
technology_20
cascade
style
or
pre
build
technology_4
component_23
requirement_3
component_11
tier
consist
of
a
web
technology_6
for
component_6
connector_data_1
provide
by
component_20
or
component_24
in
the
permanent
storage
tier
quality_attribute_8
on
your
preference
this
could
be
technology_21
on
rail
technology_7
cake
technology_22
grail
technology_8
or
monorail
net
among
many
others
permanent
storage
tier
consist
of
a
permanent
storage
location
for
connector_data_1
in
most
web
component_7
this
be
a
relational
component_25
component_8
technology_10
so
for
example
one
of
the
first
and
most
common
horizontal
quality_attribute_7
approach
use
in
web
component_7
be
to
separate
the
permanent
storage
tier
from
the
rest
of
a
web
component_1
this
technique
be
very
common
on
account
most
permanent
storage
solution
e
g
technology_10
be
standalone
technology_23
perfectly
fit
for
be
decouple
this
make
it
an
easy
migration
component_6
for
two
technology_16
once
vertical
quality_attribute_7
hit
a
wall
free
resource
for
the
remain
part
of
a
web
component_1
and
run
the
permanent
storage
on
it
own
technology_16
by
easily
decouple
understand
that
a
web
component_1
can
connector_10
with
a
permanent
storage
tier
through
a
requirement_6
by
simply
specify
connector_11
parameter
figure
illustrate
this
scenario
figure
horizontal
quality_attribute_7
permanent
storage
tier
separate
from
requirement_3
component_11
tier
and
content
tier
suppose
you
ve
now
migrate
the
permanent
storage
tier
and
free
resource
for
the
rest
of
the
component_1
but
after
some
time
you
once
again
connector_9
report
from
component_20
complain
about
sluggishness
and
unresponsiveness
in
the
component_1
now
you
re
face
with
another
decision
perform
vertical
quality_attribute_7
or
continue
down
the
path
of
horizontal
quality_attribute_7
by
mean
of
tier
the
requirement_3
component_11
tier
and
content
tier
be
use
the
same
web
component_9
so
it
possible
to
apply
horizontal
quality_attribute_7
in
order
for
each
tier
to
have
it
own
web
component_9
and
technology_16
since
the
requirement_3
component_11
tier
be
compose
of
a
programming
technology_3
run
time
support
technology_20
a
web
technology_6
a
web
component_9
and
configuration
that
likely
take
considerable
time
to
setup
i
would
not
recommend
migrate
this
tier
due
to
it
more
complex
nature
instead
migrate
the
content
tier
be
an
easy
solution
give
that
element
be
also
be
dispatch
by
the
same
web
component_9
attend
the
requirement_3
component_11
tier
i
e
dynamic
content
a
well
a
take
up
i
o
capacity
it
make
perfect
sense
to
migrate
this
content
tier
to
a
separate
technology_16
liberate
resource
for
the
requirement_3
component_11
tier
in
this
requirement_4
since
the
content
tier
be
compose
of
reside
on
a
component_8
this
make
the
tier
easily
decouple
from
the
requirement_3
component_11
tier
figure
illustrate
this
scenario
figure
horizontal
quality_attribute_7
all
tier
on
their
own
technology_16
content
tier
use
dedicate
web
component_9
a
this
figure
illustrate
each
tier
be
now
component_18
on
it
own
technology_16
assign
each
tier
it
own
technology_16
be
an
excellent
step
toward
an
component_1
s
overall
requirement_1
and
quality_attribute_1
however
even
with
this
architecture
it
s
possible
that
once
demand
increase
a
web
component_1
s
requirement_1
and
quality_attribute_1
will
suffer
once
again
so
now
pick
up
the
component_6
from
where
a
web
component_1
s
tier
be
each
on
their
own
technology_16
figure
you
ve
work
diligently
on
each
tier
s
requirement_1
tune
to
the
extent
of
become
very
difficult
to
attain
any
noticeable
improvement
by
modify
it
component_1
or
configuration
parameter
equally
vertical
quality_attribute_7
have
cease
to
be
an
option
because
each
technology_16
s
operate
component_8
be
close
to
it
resource
limit
a
illustrate
in
component_2
the
next
quality_attribute_12
option
be
to
horizontally
quality_attribute_3
tier
in
themselves
this
component_6
be
quite
elaborate
quality_attribute_8
on
a
web
component_1
s
initial
design
principle
next
i
will
describe
the
various
approach
to
horizontally
quality_attribute_7
the
content
tier
the
requirement_3
component_11
tier
and
the
permanent
storage
tier
requirement_2
computing
component_4
nearly
quality_attribute_13
vertical
horizontal
quality_attribute_7
one
of
the
big
advantage
of
rely
on
requirement_2
computing
component_4
be
their
build
in
ability
to
quality_attribute_3
both
vertically
and
horizontally
in
fact
this
build
in
ability
be
so
advance
in
some
technology_18
that
you
ll
often
not
even
realize
if
it
vertical
or
horizontal
quality_attribute_7
that
s
be
use
on
your
component_1
tier
the
next
chapter
will
look
at
how
it
s
some
of
these
technology_18
make
this
possible
the
rest
of
this
chapter
will
continue
to
explore
the
underlie
principle
of
vertical
and
horizontal
quality_attribute_7
in
web
component_1
complexity
of
horizontally
quality_attribute_7
individual
web
component_1
tier
the
connector_12
to
quality_attribute_4
component_14
and
cluster
horizontally
quality_attribute_7
individual
tier
can
become
complex
on
account
of
both
the
technology_2
and
design
choice
make
at
the
outset
however
there
be
two
particular
design
choice
that
increase
complexity
when
attempt
to
horizontally
quality_attribute_3
each
tier
decouple
and
component_26
decouple
part
of
an
individual
tier
be
critical
to
facilitate
horizontal
quality_attribute_3
in
the
previous
horizontal
quality_attribute_7
scenario
decouple
be
straightforward
the
permanent
storage
tier
be
easily
transfer
to
it
own
technology_16
with
the
requirement_3
component_11
tier
connector_13
it
through
a
requirement_6
figure
decouple
the
content
tier
from
the
requirement_3
component_11
tier
be
also
quality_attribute_2
since
it
consist
of
separate
figure
however
decouple
a
single
tier
be
difficult
if
it
have
a
monolithic
design
for
example
take
the
permanent
storage
tier
which
consist
of
a
technology_10
if
the
connector_data_1
manage
by
a
technology_10
grow
large
enough
there
will
be
a
press
need
to
do
horizontal
quality_attribute_7
once
you
exhaust
both
requirement_1
and
quality_attribute_1
technique
a
well
a
reach
the
limit
of
vertical
quality_attribute_7
i
e
limit
of
an
o
present
in
component_2
since
the
component_27
in
a
technology_10
have
relationship
among
one
another
problem
can
arise
because
their
connector_data_1
be
tightly
couple
in
other
word
it
s
not
possible
to
move
component_27
arbitrarily
between
technology_16
or
split
one
large
component_2
into
several
technology_16
to
accommodate
horizontal
quality_attribute_3
since
it
could
break
connector_14
crud
e
g
on
what
technology_16
be
component_2
x
be
component_28
locate
on
technology_16
which
have
part
of
component_2
y
or
technology_16
contain
the
other
part
of
component_2
y
the
same
can
occur
in
the
requirement_3
component_11
tier
if
the
demand
increase
exponentially
due
to
increase
component_20
or
elaborate
requirement_3
component_11
component_6
there
will
be
a
press
need
to
do
horizontal
quality_attribute_3
problem
can
arise
if
requirement_3
component_11
be
tightly
couple
since
you
can
t
arbitrarily
place
part
of
your
component_1
s
requirement_3
component_11
in
one
technology_16
that
might
be
require
by
requirement_3
component_11
present
in
a
another
technology_16
therefore
it
also
become
necessary
to
devise
strategy
to
split
up
requirement_3
component_11
to
work
across
various
technology_16
in
addition
to
decouple
component_29
be
another
factor
that
will
weigh
heavily
on
connector_14
horizontal
quality_attribute_3
component_29
hold
connector_data_1
for
component_5
with
the
requirement_3
component_11
tier
hold
short
term
connector_data_1
e
g
for
minute
or
hour
and
the
permanent
storage
tier
hold
long
term
connector_data_1
e
g
for
day
or
year
expand
each
tier
into
various
technology_16
create
an
affinity
problem
which
technology_16
hold
component_26
connector_data_1
for
a
particular
component_5
figure
illustrate
this
problem
figure
technology_24
affinity
problem
which
technology_16
hold
a
component_5
s
component_26
connector_data_1
the
scenario
present
in
this
last
figure
can
occur
in
both
an
component_1
s
requirement_3
component_11
tier
where
connector_data_1
be
component_6
temporarily
a
well
a
an
component_1
s
permanent
storage
tier
where
connector_data_1
be
component_24
for
posterity
under
such
circumstance
it
s
necessary
to
ensure
consistency
by
either
replicate
&
synchronize
connector_data_1
across
technology_16
or
use
component_9
affinity
figure
illustrate
both
approach
figure
technology_24
affinity
solution
pattern_5
&
synchronization
or
component_9
affinity
both
approach
in
this
last
figure
constitute
the
most
common
technique
use
to
horizontally
quality_attribute_3
each
tier
of
an
component_1
in
addition
they
also
represent
the
most
common
approach
use
in
cluster
and
quality_attribute_4
computing
component_1
a
mention
in
the
previous
chapter
on
key
technology_2
cluster
or
the
more
general
purpose
quality_attribute_4
computing
component_30
allow
resource
pool
beyond
that
of
the
large
individual
component_14
or
technology_16
to
achieve
a
common
goal
and
it
s
in
this
pool
component_6
cluster
and
quality_attribute_4
computing
component_7
also
achieve
consistency
among
it
member
technology_16
through
a
pattern_6
that
either
replicate
&
synchronize
connector_data_1
among
technology_16
or
enforce
component_9
affinity
this
fundamental
premise
of
a
consistent
i
e
single
and
unify
pattern_2
for
each
of
an
component_1
s
tier
be
key
to
horizontal
quality_attribute_3
though
a
consistent
pattern_2
of
a
tier
make
up
of
several
technology_16
can
vary
in
complexity
quality_attribute_8
on
the
tier
and
nature
of
an
component_1
a
an
component_1
designer
this
be
what
will
allow
you
to
concentrate
on
a
tier
s
specific
requirement
it
win
t
matter
if
a
particular
tier
be
two
or
dozen
of
technology_16
a
horizontal
quality_attribute_7
strategy
for
an
individual
tier
have
to
take
care
of
this
consistency
problem
for
you
the
follow
section
will
describe
these
approach
with
characteristic
specific
to
each
of
an
component_1
s
tier
a
it
be
mention
at
the
outset
in
the
fundamental
concept
chapter
and
it
will
become
even
clear
in
the
remain
section
of
this
chapter
the
le
component_26
connector_data_1
use
by
an
component_1
or
individual
tier
the
easy
it
s
to
apply
horizontal
quality_attribute_7
on
it
horizontal
quality_attribute_7
the
content
tier
the
content
tier
represent
the
easy
of
all
tier
to
quality_attribute_3
horizontally
the
reason
be
very
quality_attribute_2
since
the
content
tier
be
well
there
be
a
limit
need
to
maintain
consistency
between
technology_16
to
understand
this
analyze
the
typical
resource
associate
with
a
technology_16
support
an
component_1
s
content
tier
component_8
with
a
directory
layout
for
image
jpeg
gif
or
other
technology_4
technology_5
technology_1
web
component_9
for
attend
and
dispatch
connector_data_5
give
the
nature
of
these
resource
whatever
pattern_5
and
synchronization
component_6
need
to
take
place
between
technology_16
use
a
pattern_7
architecture
can
be
do
in
an
ample
time
span
hour
day
or
even
week
in
addition
the
need
to
maintain
component_9
affinity
for
component_20
be
non
existent
since
a
connector_data_5
make
on
technology_16
technology_16
or
technology_16
for
a
resource
should
always
have
the
same
connector_15
irrespective
of
the
order
or
number
of
connector_data_6
i
e
resource
be
stateless
but
how
exactly
will
you
when
to
horizontally
quality_attribute_3
an
component_1
s
content
tier
the
primary
symptom
for
this
tier
similar
to
other
component_1
tier
be
increase
quality_attribute_14
you
start
to
see
image
take
long
than
usual
to
load
on
an
end
component_5
s
browser
technology_5
technology_20
and
technology_25
go
unload
lead
to
distort
web
component_23
render
or
faulty
component_11
and
inclusively
a
web
component_9
suddenly
die
under
increase
demand
a
outline
in
figure
you
also
opt
to
apply
vertical
quality_attribute_7
or
a
series
of
requirement_1
and
quality_attribute_1
technique
to
the
tier
before
go
down
the
horizontal
quality_attribute_7
connector_16
a
you
early
in
this
chapter
vertical
quality_attribute_7
would
consist
of
simply
move
the
tier
to
a
technology_16
with
more
resource
where
a
part
ii
of
the
book
will
connector_2
a
series
of
requirement_1
and
quality_attribute_1
specifically
relate
to
this
tier
but
assume
you
ve
decide
to
apply
horizontal
quality_attribute_3
the
first
thing
you
need
to
connector_2
be
how
to
set
up
the
tier
s
pattern_7
architecture
a
master
be
the
technology_16
where
you
would
apply
connector_3
make
to
an
component_1
s
content
tier
and
the
slave
technology_16
s
the
one
s
connector_17
connector_data_7
the
one
s
be
replicate
synchronize
from
the
master
at
predetermine
time
after
apply
connector_data_7
to
a
master
technology_16
use
a
technology_26
technology_27
connector_18
component_6
or
some
other
mechanism
pattern_5
&
synchronization
between
master
and
slave
s
can
take
place
use
a
variety
of
technology_28
the
quality_attribute_2
form
to
do
synchronization
be
to
rely
on
a
series
of
command
to
transfer
between
technology_16
on
unix
type
component_14
these
command
can
include
technology_27
technology_29
mget
and
mput
among
others
with
these
command
and
aid
with
a
script
to
specify
particular
or
directory
to
transfer
a
well
a
a
utility
technology_30
to
connector_14
instruction
at
specific
time
you
can
easily
take
the
first
step
toward
horizontally
quality_attribute_7
this
tier
another
approach
for
create
pattern_8
architecture
with
pattern_5
&
synchronization
capability
be
to
use
turn
key
technology_28
rsync
or
dr
ftpd
these
type
of
technology_28
make
it
easy
to
undergo
the
component_6
instead
of
use
the
previous
unix
command
in
a
piecemeal
fashion
or
use
a
customize
script
though
bear
in
mind
use
any
turny
key
technology_28
also
require
extra
effort
to
install
and
configure
i
should
also
point
out
that
rsync
be
in
fact
use
to
generate
the
pattern_8
architecture
for
download
the
of
many
open
component_10
project
e
g
technology_31
and
linux
distribution
so
it
s
prove
technology_28
for
high
demand
project
once
you
ve
setup
a
pattern_7
architecture
include
the
pattern_5
synchronization
component_6
you
then
have
to
establish
a
connector_19
requirement_7
a
connector_19
requirement_7
establish
how
connector_data_6
be
spread
out
among
the
master
and
slave
s
there
be
several
way
to
go
about
this
component_6
too
one
approach
to
connector_19
an
component_1
s
horizontal
content
tier
be
by
do
round
robin
dns
if
you
re
unfamiliar
with
dns
it
s
the
component_6
by
which
domain
name
be
pattern_9
into
i
p
connector_2
round
robin
dns
consist
of
assign
multiple
i
p
connector_2
to
the
same
domain
configure
to
serve
an
component_1
s
content
tier
with
each
i
p
connector_2
correspond
to
a
different
technology_16
the
follow
represent
a
domain
zone
illustrate
round
robin
dns
domain
technology_32
in
a
domain
technology_32
in
a
domain
technology_32
in
a
domain
technology_32
in
a
a
you
can
see
the
domain
domain
technology_32
be
assign
to
four
different
i
p
connector_2
where
each
one
represent
a
technology_16
of
an
component_1
s
content
tier
when
a
connector_data_5
be
make
for
a
resource
on
domain
technology_32
e
g
domain
technology_32
logo
gif
the
dns
component_9
s
for
say
domain
will
answer
with
a
sequence
of
four
possible
i
p
connector_2
to
the
connector_data_5
component_12
e
g
a
browser
the
component_12
will
then
have
four
technology_16
from
which
to
fetch
resource
even
though
round
robin
dns
you
configure
several
technology_16
it
s
a
very
rudimentary
connector_19
technique
the
major
drawback
be
that
it
s
a
component_12
e
g
a
browser
which
determine
on
which
technology_16
to
make
connector_data_5
for
example
some
component_31
always
use
the
first
i
p
connector_2
of
a
sequence
other
component_31
only
attempt
connector_data_6
on
subsequent
i
p
connector_2
of
a
sequence
until
a
connector_data_5
on
a
prior
i
p
connector_2
time
out
while
other
component_31
alternate
connector_data_6
between
all
i
p
connector_2
e
g
request1
to
i
p
request2
to
i
p
request3
to
i
p
request4
to
i
p
request5
back
to
i
p
and
so
on
a
relate
drawback
when
a
component_12
connector_8
connector_data_6
to
multiple
i
p
s
be
that
it
s
unlikely
to
be
able
to
determine
if
a
technology_16
be
down
make
some
connector_data_6
unsuccessful
yet
another
relate
issue
be
that
component_31
win
t
be
able
to
determine
load
across
technology_16
it
can
turn
out
that
one
i
p
be
heavily
load
with
connector_data_5
while
another
technology_16
go
mostly
idle
in
summary
it
s
not
feasible
to
delegate
horizontal
quality_attribute_7
connector_19
to
a
component_12
a
variation
to
perform
round
robin
dns
through
component_31
be
through
a
dynamic
name
component_9
a
name
component_9
be
the
piece
of
that
answer
component_31
with
domain
to
i
p
connector_2
connector_20
e
g
component_12
what
be
the
i
p
connector_2
for
domain
technology_32
name
component_9
it
s
typical
name
component_13
connector_21
the
connector_data_8
quality_attribute_12
in
a
domain
zone
and
that
to
a
component_12
a
in
the
previous
domain
zone
scenario
it
a
sequence
of
four
possible
i
p
connector_2
a
dynamic
name
component_9
doesn
t
a
sequence
of
i
p
connector_2
but
rather
dynamically
determine
which
i
p
connector_2
or
technology_16
to
respond
with
base
on
another
set
of
criterion
e
g
current
load
quality_attribute_15
etc
thus
avoid
some
of
the
common
pitfall
associate
with
component_31
determine
a
technology_16
from
a
round
robin
dns
configuration
one
dynamic
name
component_9
project
be
lbnamed
another
alternative
to
connector_19
connector_data_6
between
the
technology_16
of
an
component_1
s
content
tier
be
to
place
a
dedicate
technology_16
in
front
of
all
the
content
technology_16
to
do
the
connector_8
this
dedicate
technology_16
be
connector_22
a
load
balancer
or
sprayer
load
balancer
or
sprayer
be
quality_attribute_12
in
many
form
among
the
early
load
balancer
you
ll
find
those
consist
of
specialize
hardware
require
to
be
physically
instal
in
a
connector_data_1
center
or
connector_data_5
on
special
order
to
a
component_3
technology_18
more
recently
though
base
load
balancer
capable
of
be
instal
on
ordinary
hardware
or
technology_16
have
mature
and
become
quite
popular
these
base
load
balancer
be
categorize
a
reverse
pattern_4
since
reverse
pattern_4
be
use
to
apply
a
variety
of
requirement_1
and
quality_attribute_1
technique
in
addition
to
load
balance
they
be
further
discus
in
part
ii
of
the
book
dedicate
to
content
tier
requirement_1
and
quality_attribute_1
technique
irrespective
of
form
load
balancer
offer
more
sophisticate
strategy
for
determine
onto
which
technology_16
to
connector_16
connector_data_5
these
strategy
can
include
determine
average
load
per
technology_16
pattern_10
web
component_13
for
health
connector_23
and
automatically
discard
and
connector_24
administrator
of
unavailable
technology_16
due
to
cost
and
installation
requirement
hardware
base
load
balancer
be
mostly
reserve
for
very
high
end
component_8
where
a
base
load
balancer
quality_attribute_12
through
reverse
pattern_4
be
use
in
budget
constrain
project
even
though
these
last
load
balancer
be
more
prone
to
configuration
error
than
their
hardware
base
counterpart
similar
to
other
hardware
vs
solution
e
g
hardware
raid
vs
raid
requirement_2
computing
for
an
component_1
s
content
tier
some
requirement_2
computing
technology_18
have
make
it
nearly
pain
free
to
quality_attribute_3
an
component_1
s
content
tier
many
now
allow
you
to
connector_18
resource
and
not
have
to
ever
worry
about
underlie
issue
connector_8
load
balance
unavailable
technology_16
or
inclusively
a
web
component_9
suddenly
die
with
a
sudden
influx
of
traffic
the
only
downside
to
use
some
of
these
technology_18
be
that
you
win
t
be
able
to
customize
the
underlie
if
you
ve
perform
test
confirm
your
resource
show
optimal
requirement_1
and
quality_attribute_1
by
use
x
component_8
and
y
web
component_9
you
aren
t
likely
to
have
the
ability
to
install
them
on
a
requirement_2
computing
component_3
of
this
type
the
requirement_1
and
quality_attribute_1
be
build
in
into
these
component_3
technology_18
another
potential
downside
be
cost
give
certain
volume
however
if
you
re
look
for
convenience
rather
than
customization
or
extreme
low
volume
cost
ratio
a
solution
from
a
requirement_2
computing
technology_18
for
your
component_1
s
content
tier
be
the
way
to
go
the
next
chapter
will
describe
some
of
the
component_3
technology_18
horizontal
quality_attribute_7
the
requirement_3
component_11
tier
you
ve
already
exhaust
apply
requirement_1
and
quality_attribute_1
technique
a
well
a
vertical
quality_attribute_7
on
your
component_1
s
requirement_3
component_11
tier
your
next
option
be
to
horizontally
quality_attribute_3
it
break
down
the
resource
typically
associate
with
a
technology_16
support
an
component_1
s
requirement_3
component_11
tier
to
illustrate
the
complexity
of
horizontally
quality_attribute_7
it
requirement_3
component_11
be
connector_14
for
component_20
through
a
web
technology_6
or
plain
programming
technology_3
web
component_9
component_1
component_9
for
attend
and
dispatch
connector_data_5
connector_12
to
a
permanent
storage
component_8
for
obtain
support
component_6
connector_data_1
or
connector_25
component_6
connector_data_1
for
a
long
period
give
the
nature
of
an
component_1
s
requirement_3
component_11
tier
resource
you
will
face
a
sub
set
of
the
same
issue
present
in
an
component_1
s
content
tier
a
well
a
a
set
give
the
statefull
nature
of
some
of
these
resource
the
sub
set
of
issue
you
re
already
familiar
with
be
those
relate
to
establish
a
connector_19
requirement_7
since
the
requirement_3
component_11
tier
generate
the
dynamic
content
associate
with
an
component_1
when
horizontally
quality_attribute_7
it
into
several
technology_16
a
series
of
web
component_9
component_1
component_9
entry
point
will
arise
similar
to
those
in
an
component_1
s
content
tier
therefore
it
will
be
necessary
to
carry
out
a
similar
strategy
such
a
round
robin
dns
dynamic
name
serve
or
load
balancer
however
the
similarity
between
horizontally
quality_attribute_7
both
tier
end
there
unlike
the
content
tier
in
which
component_9
affinity
isn
t
critical
or
the
pattern_5
synchronization
component_6
isn
t
time
sensitive
on
account
of
the
resource
be
the
requirement_3
component_11
tier
be
extremely
sensitive
to
both
these
issue
on
account
of
the
resource
often
present
state
figure
illustrate
this
sensitivity
component_5
john
smith
can
initially
be
connector_8
to
technology_16
where
he
can
connector_26
with
the
requirement_3
component_11
of
an
component_1
but
if
in
this
connector_27
the
technology_16
generate
component_26
connector_data_1
for
the
component_5
and
the
component_5
be
late
connector_8
to
technology_16
then
you
can
have
a
serious
problem
if
technology_16
nothing
about
the
component_5
s
component_26
connector_data_1
figure
illustrate
how
to
solve
this
problem
either
all
of
john
smith
s
connector_data_6
be
connector_8
to
technology_16
a
k
a
component_9
affinity
or
john
smith
s
component_26
connector_data_1
be
replicate
synchronize
with
all
the
other
technology_16
that
make
up
an
component_1
s
requirement_3
component_11
tier
before
even
discus
the
topic
of
component_9
affinity
or
pattern_5
synchronization
in
an
component_1
s
requirement_3
component_11
tier
i
would
recommend
you
to
do
one
thing
above
everything
else
avoid
deal
with
them
in
the
first
place
this
sound
a
trivial
answer
but
there
be
in
fact
a
relatively
easy
way
to
do
this
decouple
an
component_1
s
requirement_3
component_11
tier
into
part
by
do
so
you
can
effectively
create
multiple
sub
component_8
that
t
require
operate
on
the
principle
of
quality_attribute_4
computing
hence
no
need
for
component_9
affinity
or
pattern_5
synchronization
figure
illustrate
how
this
divide
and
conquer
approach
work
figure
monolithic
and
decouple
requirement_3
tier
in
a
monolithic
requirement_3
tier
the
relationship
between
requirement_3
component_11
be
opaque
mean
the
component_11
connector_28
fulfil
through
deep
relationship
e
g
apis
technology_20
when
apply
horizontal
quality_attribute_7
under
these
circumstance
you
re
confront
with
the
situation
in
figure
of
have
multiple
technology_16
lead
to
different
connector_data_5
pipeline
by
decouple
a
requirement_3
component_11
tier
you
gain
twofold
a
great
leeway
to
further
apply
vertical
quality_attribute_3
since
now
each
decouple
part
have
an
entire
technology_16
s
resource
to
itself
i
e
memory
bandwidth
cpu
and
i
o
and
the
peace
of
mind
of
not
have
to
worry
about
quality_attribute_4
computing
issue
part
of
which
be
the
issue
in
figure
this
decouple
component_6
be
also
often
connector_22
a
connector_29
nothing
architecture
give
that
each
part
doesn
t
connector_30
anything
with
other
part
for
a
moment
you
might
wonder
what
implication
do
the
multiple
pipeline
in
a
decouple
requirement_3
component_11
tier
have
the
reality
be
that
have
multiple
connector_data_5
pipeline
doesn
t
automatically
mean
you
need
to
carry
out
component_9
affinity
or
a
pattern_5
synchronization
component_6
in
a
decouple
requirement_3
component_11
tier
one
pipeline
fulfill
a
particular
piece
of
requirement_3
component_11
e
g
sale
another
pipeline
another
piece
of
requirement_3
component_11
e
g
top
and
so
on
in
a
monolithic
requirement_3
component_11
tier
a
single
pipeline
fulfill
the
entire
requirement_3
component_11
which
be
why
component_9
affinity
or
a
pattern_5
synchronization
component_6
be
require
so
what
happen
if
once
decouple
one
of
the
requirement_3
component_11
part
e
g
catalog
can
no
long
be
vertically
quality_attribute_3
and
require
horizontal
quality_attribute_7
itself
well
you
decouple
it
again
into
more
sub
component_8
e
g
menscatalog
womenscatalog
childrenscatalog
by
do
so
you
again
gain
great
leeway
to
further
apply
vertical
quality_attribute_7
and
avoid
have
to
deal
with
component_9
affinity
or
a
pattern_5
synchronization
scenario
this
architecture
of
have
multiple
pipeline
to
fulfill
a
requirement_3
component_11
tier
s
duty
be
often
connector_22
a
component_3
orientated
architecture
each
decouple
part
represent
a
component_3
that
be
then
aggregate
with
other
component_4
to
fulfill
an
component_1
s
requirement_3
component_11
such
component_4
be
design
to
connector_26
with
one
another
or
inclusively
provide
part
of
an
component_1
s
graphical
component_5
the
primary
requirement
for
achieve
a
component_3
orientated
architecture
be
to
connector_data_2
an
component_1
s
requirement_3
component_11
tier
with
clear
and
quality_attribute_16
contrary
to
opaque
technique
by
mean
of
component_32
or
technology_20
many
technique
have
emerge
to
achieve
this
among
the
primary
one
you
ll
find
the
follow
web
component_4
technology_33
and
pattern_11
web
component_4
be
the
most
recent
approach
use
to
decouple
requirement_3
component_11
they
come
in
one
of
two
flavor
technology_33
and
rest
both
technique
consist
of
exchange
connector_data_8
generally
of
the
technology_34
kind
or
similar
markup
variation
e
g
technology_35
by
use
such
a
technology_36
quality_attribute_17
between
sub
component_8
become
easy
to
achieve
give
technology_34
s
wide
support
across
several
programming
technology_3
and
component_17
what
technology_33
and
pattern_11
do
be
define
the
way
these
connector_data_1
exchange
take
place
from
support
discovery
mechanism
definition
to
error
handle
technology_33
be
the
more
elaborate
approach
offer
quality_attribute_18
feature
quality_attribute_10
transaction
and
guarantee
delivery
this
make
technology_33
quality_attribute_6
suit
for
decouple
mission
critical
requirement_3
component_11
e
g
financial
transaction
&
order
component_6
however
this
same
set
of
feature
make
technology_33
substantially
more
difficult
to
connector_31
require
more
forethought
to
create
both
the
component_12
part
of
an
component_1
a
well
a
the
correspond
component_9
side
part
of
an
component_1
pattern_11
though
similar
to
technology_33
in
that
it
rely
on
the
exchange
of
connector_data_9
connector_data_1
be
underpin
by
the
web
s
technology_14
technology_37
this
fact
make
pattern_11
far
easy
to
connector_31
and
understand
it
work
a
when
you
connector_data_5
web
component_23
or
submit
connector_data_8
through
a
web
form
connector_data_8
be
exchange
between
component_12
and
component_9
use
technology_14
e
g
connector_9
and
except
in
rest
s
requirement_4
a
component_12
and
component_9
can
be
any
type
of
sub
component_8
operate
on
the
web
not
necessarily
a
browser
and
web
component_9
the
pattern_11
approach
be
widely
use
not
only
by
web
component_7
designer
in
general
but
also
by
many
of
the
major
internet
portal
since
it
offer
an
easy
way
to
exchange
connector_data_1
between
sub
component_8
however
a
widely
adopt
a
pattern_11
be
it
isn
t
suit
for
mission
critical
component_1
in
great
part
due
to
the
same
technology_14
technology_37
technology_14
isn
t
design
to
deal
with
scenario
involve
advance
quality_attribute_10
transaction
failure
or
guarantee
delivery
though
you
could
shoe
horn
part
of
an
component_1
s
to
deal
with
these
issue
you
would
be
re
invent
what
the
technology_33
technology_37
be
already
design
to
do
therefore
pattern_11
be
best
suit
for
connector_32
between
sub
component_8
that
have
little
to
no
side
effect
if
pattern_11
be
use
to
connector_33
a
sale
catalog
or
a
component_5
s
profile
a
fail
or
duplicate
connector_data_5
be
of
little
consequence
if
pattern_11
be
use
to
update
a
sale
catalog
or
create
a
component_5
s
profile
though
doable
you
have
to
be
more
careful
in
how
you
approach
it
design
since
duplicate
connector_data_6
can
have
adverse
consequence
if
pattern_11
be
use
to
make
financial
transaction
the
underpinnings
of
pattern_11
make
it
an
extremely
risky
choice
give
the
provision
that
need
to
be
take
into
account
in
this
scenario
e
g
transaction
advance
quality_attribute_10
guarantee
delivery
one
closely
connector_12
technique
to
pattern_11
be
technology_38
technology_39
be
a
technique
that
allow
web
component_1
component_31
i
e
browser
to
directly
connector_4
an
component_1
s
requirement_3
component_11
tier
since
browser
run
on
the
technology_14
technology_37
this
make
them
ideal
component_31
for
pattern_11
component_3
technology_39
be
beneficial
for
reduce
web
component_1
quality_attribute_14
since
it
allow
browser
to
load
an
component_1
s
connector_data_1
asynchronously
i
e
in
part
a
well
a
cut
requirement_3
component_6
demand
on
component_9
since
part
of
the
requirement_3
component_11
be
shift
and
connector_14
on
the
component_12
pattern_12
technology_2
pattern_12
technology_2
be
one
of
the
early
approach
to
decouple
an
component_1
s
requirement_3
component_11
though
there
be
multiple
pattern_12
technology_2
from
which
to
choose
in
principle
all
pattern_12
technology_2
work
alike
one
component_8
connector_34
a
connector_data_10
to
an
intermediate
sub
component_8
where
it
late
take
by
another
or
several
sub
component_8
this
intermediate
sub
component_8
be
why
pattern_12
component_14
be
often
catalog
a
middle
ware
figure
illustrate
a
pattern_12
technology_2
architecture
figure
pattern_12
architecture
the
architecture
impose
by
pattern_12
technology_2
have
a
lot
of
trait
relate
to
resolve
requirement_1
and
quality_attribute_1
issue
i
ve
already
state
the
obvious
which
be
decouple
an
component_1
s
part
but
in
addition
pattern_12
technology_2
also
allow
pattern_13
connector_32
which
in
turn
allow
component_14
to
run
in
a
pattern_14
fashion
which
contribute
to
great
quality_attribute_19
another
characteristic
often
associate
with
pattern_12
technology_2
be
fault
tolerance
since
there
be
an
intermediate
component_8
use
to
pattern_15
connector_data_11
between
two
sub
component_8
the
emit
component_8
doesn
t
need
100%
up
time
in
order
for
a
connector_17
component_8
to
continue
to
work
a
an
emit
component_8
also
doesn
t
require
100%
up
time
from
a
connector_17
component_14
to
emit
connector_data_10
finally
another
characteristic
of
pattern_12
technology_2
be
it
quality_attribute_17
ability
the
same
pattern_15
of
connector_data_11
between
sub
component_8
serve
a
an
ideal
to
bridge
any
quality_attribute_17
issue
connector_data_9
in
web
component_3
a
component_8
base
on
technology_8
or
technology_40
can
emit
connector_data_10
that
can
late
be
connector_5
by
component_14
connector_35
in
technology_9
or
technology_15
the
only
thing
that
s
require
be
that
the
component_14
involve
agree
on
the
pattern_12
technology_2
other
technology_2
besides
web
component_4
and
pattern_12
technology_2
there
be
several
other
technology_2
use
to
decouple
component_8
one
technology_2
that
enjoy
great
success
prior
to
the
emergence
of
web
component_4
be
corba
which
in
fact
be
still
widely
use
in
some
corporation
similar
to
web
component_4
in
allow
quality_attribute_17
irrespective
of
a
component_8
s
implementation
technology_3
technology_41
also
provide
a
technology_3
neutral
manner
for
sub
component_8
to
connector_10
with
one
another
however
a
quality_attribute_20
a
technology_2
a
technology_41
be
for
certain
component_1
it
can
become
extremely
complex
to
connector_31
require
the
deployment
of
intermediate
pattern_15
connector_22
orb
s
on
both
component_12
and
component_9
work
with
an
intermediate
technology_3
connector_22
idl
to
create
both
component_12
and
component_9
a
well
a
some
advance
skill
to
configure
and
put
everything
together
with
the
emergence
of
technology_33
provide
a
similar
set
of
mission
critical
feature
a
well
a
a
similar
technology_3
neutral
approach
technology_41
have
lose
some
of
it
appeal
a
a
decouple
technology_2
move
down
the
line
we
come
to
technology_3
specific
way
to
decouple
an
component_1
s
requirement_3
component_11
these
approach
be
le
favorable
than
the
one
i
mention
previously
because
they
be
peg
to
a
particular
programming
technology_3
or
component_17
unlike
web
component_3
pattern_12
component_14
or
corba
which
can
effectively
bridge
component_17
difference
these
other
pattern_16
technology_2
require
that
both
component_12
and
component_9
be
align
with
the
same
technology_2
among
these
technology_2
you
can
find
technology_40
technology_42
technology_43
or
the
old
dcom
technology_2
to
decouple
base
component_1
technology_44
to
decouple
technology_8
component_1
drb
for
technology_21
component_7
and
pyro
for
technology_9
component_1
but
what
if
you
can
t
decouple
so
you
ve
come
to
the
point
of
have
a
monolithic
requirement_3
tier
that
for
whatever
reason
e
g
time
budget
technical
expertise
you
can
t
apply
any
of
the
decouple
strategy
outline
and
you
can
t
further
vertically
quality_attribute_3
or
apply
requirement_1
and
quality_attribute_1
technique
this
be
a
tough
situation
to
be
in
because
you
re
go
to
have
to
apply
one
of
the
solution
present
in
figure
which
will
inevitably
require
a
custom
pattern_6
either
connector_35
by
your
team
or
offer
by
some
third
party
first
of
all
i
would
discourage
anyone
s
attempt
at
connector_1
their
own
pattern_6
to
solve
the
scenario
of
component_9
affinity
or
pattern_5
&
synchronization
in
an
component_1
s
requirement_3
component_11
tier
a
describe
at
the
start
of
the
book
create
a
quality_attribute_4
computing
environment
be
fraught
with
pitfall
that
be
often
not
clear
so
while
it
seem
quality_attribute_2
at
first
sight
there
be
a
high
probability
you
will
overlook
certain
aspect
and
fall
into
one
or
many
of
the
fallacy
of
quality_attribute_4
computing
the
only
quality_attribute_21
solution
i
ve
see
for
solve
component_9
affinity
on
an
component_1
s
requirement_3
component_11
tier
be
through
a
load
balancer
the
reason
be
because
a
load
balancer
be
place
in
front
a
the
initial
entry
point
of
an
component_1
s
requirement_3
component_11
tier
in
this
requirement_4
a
load
balancer
work
by
inspect
connector_data_6
and
detecting
connector_data_8
or
component_26
redirect
connector_data_6
to
the
same
technology_16
on
the
initial
connector_data_5
and
subsequent
connector_data_5
component_9
affinity
enforce
in
this
manner
offer
a
very
straightforward
solution
for
horizontal
quality_attribute_3
since
you
t
have
to
tinker
with
a
web
component_1
s
requirement_3
component_11
in
fact
some
would
say
it
s
quality_attribute_2
than
try
to
decouple
an
component_1
s
requirement_3
component_11
but
i
wouldn
t
agree
on
this
last
point
a
quicker
solution
perhaps
but
not
necessarily
quality_attribute_2
by
introduce
a
load
balancer
into
a
web
component_1
s
requirement_3
component_11
tier
you
face
two
additional
issue
in
a
production
environment
the
overhead
of
instal
configure
and
maintain
a
load
balancer
hardware
or
base
a
well
a
the
need
to
quality_attribute_5
multiple
copy
of
a
web
component_1
s
requirement_3
component_11
tier
a
component_6
identical
to
horizontally
quality_attribute_7
a
web
component_1
s
content
tier
in
contrast
by
decouple
a
web
component_1
s
requirement_3
component_11
tier
you
avoid
horizontally
quality_attribute_7
the
tier
altogether
keep
a
single
copy
of
a
web
component_1
s
requirement_3
component_11
in
a
production
environment
no
load
balancer
or
multiple
requirement_3
component_11
tier
copy
to
worry
about
cite
occam
s
technology_45
plurality
should
not
be
posit
without
necessity
which
be
often
rephrase
a
the
kiss
principle
keep
it
quality_attribute_2
stupid
or
keep
it
short
and
quality_attribute_2
or
even
keep
it
quality_attribute_2
and
straightforward
so
be
warn
even
though
introduce
a
load
balancer
with
multiple
copy
of
a
web
component_1
s
requirement_3
component_11
tier
might
seem
a
quicker
solution
than
decouple
it
part
it
can
eventually
become
much
more
complex
to
maintain
so
a
difficult
a
decouple
a
web
component_1
s
requirement_3
tier
can
seem
in
the
long
run
it
s
perhaps
the
quality_attribute_6
connector_16
to
take
prior
to
embark
on
horizontal
quality_attribute_3
if
you
aren
t
able
to
enforce
component_9
affinity
or
perhaps
you
already
have
but
still
require
to
horizontally
quality_attribute_3
a
web
component_1
s
requirement_3
component_11
tier
you
re
leave
with
the
remain
option
present
in
figure
pattern_5
&
synchronization
apply
pattern_5
&
synchronization
be
one
of
the
more
complex
requirement_1
and
quality_attribute_1
connector_data_4
to
undertake
on
a
web
component_1
s
requirement_3
component_11
tier
this
be
due
to
the
interactive
nature
of
end
component_5
with
a
web
component_1
s
requirement_3
component_11
one
second
they
can
submit
connector_data_1
while
the
next
minute
they
expect
to
modify
the
same
connector_data_1
this
require
all
participate
technology_16
to
replicate
and
synchronize
their
connector_data_1
often
in
a
timespan
of
second
a
already
mention
this
particular
pattern_5
and
synchronization
component_6
between
technology_16
fulfil
a
web
component_1
s
requirement_3
component_11
tier
be
best
leave
in
the
hand
of
a
third
party
not
your
own
initiative
certain
third
party
use
for
achieve
this
requirement_8
require
that
you
incorporate
it
into
an
component_1
from
the
outset
through
an
technology_46
so
if
you
think
decouple
part
of
an
component_1
s
requirement_3
component_11
tier
be
difficult
try
re
connector_35
part
of
an
component_1
so
it
s
able
to
replicate
and
synchronize
itself
to
achieve
horizontal
quality_attribute_3
in
this
sense
though
there
have
be
significant
progress
by
some
of
third
party
technology_18
offer
very
non
invasive
technique
for
apply
pattern_5
and
synchronization
to
technology_26
programming
technology_3
construct
but
once
again
you
fall
victim
to
the
programming
technology_3
or
web
technology_6
you
choose
from
the
outset
some
programming
technology_3
have
a
dearth
of
option
for
incorporate
pattern_5
and
synchronization
into
an
component_1
s
requirement_3
component_11
tier
while
others
have
a
multitude
of
option
from
which
to
choose
in
no
particular
order
some
of
the
solution
for
apply
horizontal
quality_attribute_7
via
pattern_5
&
synchronization
in
an
component_1
s
requirement_3
component_11
tier
be
technology_47
gigaspaces
technology_48
pattern_17
requirement_2
computing
for
an
component_1
s
requirement_3
component_11
tier
once
again
we
come
to
the
inevitable
comparison
of
how
certain
requirement_2
computing
component_4
connector_2
the
issue
of
quality_attribute_7
an
component_1
s
requirement_3
component_11
tier
a
series
of
requirement_2
computing
technology_18
offer
the
ability
to
quality_attribute_3
an
component_1
s
requirement_3
component_11
tier
a
if
it
be
a
single
technology_16
underneath
though
these
requirement_2
computing
technology_18
run
on
a
pattern_6
that
allow
them
to
replicate
and
synchronize
requirement_3
component_11
connector_data_1
it
be
describe
in
the
previous
section
but
what
if
you
can
t
decouple
in
this
sense
similar
to
an
component_1
s
content
tier
requirement_2
computing
allow
you
to
quality_attribute_3
in
a
pain
free
way
since
you
t
have
to
worry
about
the
particularity
of
configure
or
administer
the
pattern_6
require
for
this
to
work
successfully
however
among
the
downside
you
find
be
that
you
ll
be
lock
into
a
technology_18
s
pattern_6
which
be
what
can
allow
you
to
quality_attribute_3
in
a
pain
free
way
the
next
chapter
will
describe
some
of
these
component_3
technology_18
horizontal
quality_attribute_7
the
permanent
storage
tier
to
quality_attribute_6
understand
the
complexity
of
quality_attribute_7
the
permanent
storage
tier
i
recommend
you
re
connector_21
the
section
present
in
the
last
chapter
entitle
permanent
storage
component_8
a
the
strategy
describe
next
be
base
on
the
concept
and
technology_2
present
there
similar
to
an
component_1
s
requirement_3
component_11
tier
it
s
a
fundamental
premise
to
have
a
single
and
unify
permanent
storage
tier
in
order
to
successfully
apply
horizontal
quality_attribute_7
to
it
however
even
though
horizontally
quality_attribute_7
a
permanent
storage
tier
connector_36
some
of
the
same
characteristic
of
the
previous
tier
it
s
still
have
a
unique
set
of
characteristic
that
make
it
different
but
before
even
go
down
the
path
of
horizontally
quality_attribute_7
an
component_1
s
permanent
storage
tier
i
would
suggest
the
same
approach
a
an
component_1
s
requirement_3
component_11
tier
avoid
it
at
all
cost
quality_attribute_2
right
so
do
you
also
decouple
an
component_1
s
permanent
storage
tier
not
exactly
decouple
present
it
own
set
of
problem
for
this
particular
tier
that
i
will
connector_2
shortly
what
you
can
do
be
limit
the
demand
place
on
this
tier
which
can
connector_37
you
away
from
horizontally
quality_attribute_3
you
do
this
by
connector_6
pattern_1
strategy
on
an
component_1
s
requirement_3
component_11
tier
you
see
unlike
the
requirement_3
component_11
tier
whose
increase
demand
quality_attribute_8
largely
on
the
amount
of
end
component_20
an
component_1
be
attend
you
have
more
control
over
the
only
component_12
that
place
demand
on
an
component_1
s
permanent
storage
tier
the
requirement_3
component_11
tier
even
though
a
requirement_3
component_11
tier
s
component_31
i
e
browser
can
connector_31
certain
pattern_1
strategy
you
re
at
a
relative
loss
try
to
cut
load
on
this
front
with
pattern_1
because
there
be
thousand
of
component_31
with
different
set
require
different
connector_data_1
however
in
the
requirement_4
of
a
permanent
storage
tier
s
component_12
the
requirement_3
component_11
tier
you
can
perfectly
beforehand
on
which
connector_data_1
demand
occur
the
most
and
connector_31
aggressive
pattern_1
strategy
to
lower
the
load
on
a
permanent
storage
tier
since
this
be
relate
to
an
component_1
s
requirement_3
component_11
tier
part
iii
of
the
book
will
connector_2
some
of
these
pattern_1
strategy
you
can
use
to
reduce
load
on
an
component_1
s
permanent
storage
tier
move
along
i
ll
assume
you
ve
exhaust
all
vertical
quality_attribute_7
possibility
a
well
a
the
requirement_1
and
quality_attribute_1
technique
cover
in
part
iv
of
an
component_1
s
permanent
storage
tier
you
now
have
to
do
horizontal
quality_attribute_7
to
offset
load
from
this
tier
well
you
re
back
to
a
scenario
the
one
in
figure
which
technology_16
hold
a
component_5
s
connector_data_1
i
e
component_9
affinity
or
how
do
you
perform
pattern_5
and
synchronization
connector_data_4
similar
to
an
component_1
s
requirement_3
component_11
tier
it
s
leave
to
a
permanent
storage
tier
s
pattern_6
to
enforce
these
quality_attribute_4
computing
connector_data_12
and
so
there
be
vary
degree
of
complexity
to
configure
and
manage
this
type
of
setup
quality_attribute_8
on
the
storage
component_8
you
use
some
be
design
out
of
the
component_19
with
these
feature
while
others
need
much
effort
to
run
in
this
way
what
i
will
do
next
be
describe
the
various
approach
use
to
horizontally
quality_attribute_3
an
component_1
s
permanent
storage
tier
and
in
this
same
component_6
also
include
the
permanent
storage
solution
that
rely
on
say
approach
out
of
the
component_19
cluster
the
easy
way
to
horizontally
quality_attribute_3
an
component_1
s
permanent
storage
tier
be
to
use
out
of
the
component_19
cluster
out
of
the
component_19
cluster
allow
an
component_1
s
permanent
storage
tier
to
run
across
multiple
technology_16
and
act
a
a
single
and
unify
tier
forget
about
deal
with
component_9
affinity
or
pattern_5
and
synchronization
issue
an
out
of
the
component_19
cluster
be
design
to
take
care
of
all
these
thing
internally
to
a
permanent
storage
tier
s
primary
component_12
the
requirement_3
component_11
tier
everything
be
do
through
a
single
pipeline
under
the
hood
though
a
cluster
s
connector_38
all
kind
of
duty
to
solve
the
quality_attribute_4
nature
of
operate
multiple
technology_16
these
duty
can
include
enforce
acid
property
load
balance
fault
tolerance
and
other
concept
particular
to
horizontally
quality_attribute_7
an
component_1
s
permanent
storage
tier
that
i
will
explain
shortly
quality_attribute_8
on
the
permanent
storage
solution
you
initially
choose
the
path
to
use
out
of
the
component_19
cluster
can
be
very
straightforward
or
complex
some
permanent
storage
solution
offer
a
clear
path
of
migrate
from
a
technology_26
version
i
e
non
cluster
to
a
cluster
version
while
other
migration
path
can
require
transform
connector_data_1
that
can
often
seem
you
be
make
a
installation
altogether
these
migration
component_33
be
particularly
common
among
technology_10
vendor
which
offer
le
expensive
license
for
technology_26
version
run
on
a
single
technology_16
with
the
possibility
of
upgrade
to
a
cluster
version
capable
of
operate
across
multiple
technology_16
among
the
lead
technology_10
out
of
the
component_19
cluster
solution
you
ll
find
technology_49
cluster
and
technology_48
rac
other
permanent
storage
solution
such
a
the
quality_attribute_4
kind
mention
in
the
previous
chapter
run
by
design
a
out
of
the
component_19
cluster
mean
a
soon
a
you
install
them
you
can
easily
apply
horizontal
quality_attribute_7
on
them
this
characteristic
be
in
fact
one
of
the
major
reason
why
these
permanent
storage
solution
have
connector_39
so
much
attention
you
t
have
to
worry
about
horizontal
quality_attribute_7
since
it
s
effectively
provide
out
of
the
component_19
unlike
certain
technology_10
solution
a
easy
a
all
this
sound
out
of
the
component_19
cluster
incorporate
many
technique
and
often
time
requirement_9
off
to
work
across
several
technology_16
for
this
reason
it
s
vital
you
understand
what
some
of
these
technique
and
requirement_9
off
be
since
even
though
two
permanently
storage
solution
can
be
horizontally
quality_attribute_22
they
can
behave
dramatically
different
when
it
come
to
connector_data_1
transaction
pattern_5
and
synchronization
out
of
the
component_19
cluster
rely
heavily
on
the
use
of
pattern_5
and
synchronization
in
this
way
if
an
be
make
on
technology_16
of
cluster
and
a
subsequent
be
make
on
technology_16
of
a
cluster
technology_16
will
what
take
place
on
technology_16
thus
guarantee
connector_data_1
consistency
figure
depict
this
solution
which
be
also
require
when
horizontally
quality_attribute_7
an
component_1
s
requirement_3
component_11
tier
to
quality_attribute_6
understand
the
complexity
of
apply
pattern_5
and
synchronization
to
an
component_1
s
permanent
storage
tier
it
s
easy
to
part
from
the
fundamental
of
the
cap
theorem
introduce
in
the
previous
chapter
the
cap
theorem
state
that
out
of
three
basic
property
consistency
quality_attribute_15
and
component_34
tolerance
only
two
be
achievable
at
any
give
time
in
a
quality_attribute_4
component_8
since
an
out
of
the
component_19
cluster
or
apply
horizontal
quality_attribute_7
by
definition
consist
of
have
multiple
component_14
or
technology_16
achieve
a
common
goal
you
ve
use
up
one
property
of
the
cap
theorem
component_34
tolerance
this
leave
you
with
one
more
property
with
a
component_8
either
favor
consistency
or
quality_attribute_15
make
sense
of
the
cap
theorem
and
it
relation
to
pattern_5
and
synchronization
be
pretty
quality_attribute_2
once
you
component_35
assume
a
component_8
be
compose
of
two
technology_16
an
be
make
on
technology_16
which
a
a
consequence
have
to
be
replicate
and
synchronize
with
the
connector_data_1
on
technology_16
in
requirement_4
a
subsequent
make
it
way
to
technology_16
favor
consistency
penalize
component_8
quality_attribute_15
since
the
pattern_5
and
synchronization
component_6
require
time
and
lock
up
resource
on
each
technology_16
favor
component_8
quality_attribute_15
penalize
consistency
by
not
take
the
time
and
lock
up
resource
to
do
pattern_5
and
synchronization
on
each
technology_16
you
increase
quality_attribute_15
but
at
the
risk
of
connector_data_1
inconsistency
on
subsequent
this
penalty
for
either
requirement_4
become
more
severe
a
the
number
of
technology_16
in
a
cluster
or
horizontal
architecture
increase
out
of
the
component_19
cluster
such
a
technology_10
cluster
or
the
quality_attribute_4
storage
solution
describe
in
the
previous
chapter
take
several
approach
to
deal
with
this
consistency
vs
quality_attribute_15
conundrum
some
of
these
approach
include
limit
the
overall
number
of
technology_16
grouping
a
component_8
s
technology_16
on
the
basis
of
their
e
g
connector_40
and
connector_21
to
support
quorum
base
pattern_18
technique
the
last
of
which
consist
of
a
storage
component_16
tally
vote
across
it
multiple
technology_16
to
decide
if
an
i
e
connector_data_1
transaction
be
connector_41
or
roll
back
certain
technology_23
be
design
with
100%
consistency
in
mind
yet
others
be
design
with
a
preference
for
quality_attribute_15
over
consistency
while
the
more
versatile
one
can
even
be
configure
on
a
requirement_4
by
requirement_4
basis
for
example
technology_50
which
be
a
quality_attribute_4
column
row
orientated
solution
and
s
simpledb
which
be
a
quality_attribute_4
document
orientated
solution
offer
some
of
the
most
quality_attribute_9
approach
to
configure
consistency
vs
quality_attribute_15
property
on
an
component_1
s
horizontally
component_34
storage
tier
so
what
be
preferable
when
horizontally
quality_attribute_7
an
component_1
s
storage
tier
consistency
or
quality_attribute_15
it
quality_attribute_8
on
the
type
of
connector_data_1
an
component_1
handle
it
s
similar
to
select
a
storage
component_8
in
itself
where
the
type
of
component_1
can
weigh
heavily
on
a
decision
be
it
an
component_1
for
manage
financial
transaction
consistency
for
sure
be
it
an
component_1
for
component_6
order
quality_attribute_15
be
probably
quality_attribute_6
since
you
t
want
to
miss
any
order
vanilla
pattern_5
and
synchronization
backup
and
a
poor
man
s
cluster
in
out
of
the
component_19
cluster
the
act
of
pattern_5
and
synchronization
be
tightly
quality_attribute_18
into
a
technology_23
however
this
be
not
always
the
requirement_4
especially
in
requirement_4
where
a
storage
component_8
be
not
design
to
be
horizontally
quality_attribute_3
e
g
technology_26
technology_10
technology_23
in
such
requirement_4
pattern_5
and
synchronization
be
apply
in
an
hoc
fashion
through
the
use
of
back
up
utility
custom
make
script
and
inclusively
manual
intervention
to
consolidate
connector_data_1
transaction
all
this
can
be
an
arduous
undertake
especially
when
you
compare
the
component_6
to
out
of
the
component_19
cluster
nevertheless
for
limit
budget
project
or
for
component_7
where
shift
the
technical
direction
of
a
permanent
storage
tier
be
impossible
manual
pattern_5
and
synchronization
technique
can
serve
a
a
poor
man
s
cluster
among
the
technology_23
you
find
yourself
use
in
these
circumstance
particularly
if
you
rely
on
technology_10
technology_2
be
technology_48
connector_data_1
guard
and
technology_49
pattern_5
sharding
sharding
be
another
relate
topic
to
the
act
of
horizontally
quality_attribute_7
an
component_1
s
permanent
storage
tier
a
shard
by
definition
be
a
piece
break
of
an
artifact
in
permanent
storage
component_8
it
s
the
act
of
break
up
connector_data_1
into
several
part
and
place
it
on
different
technology_16
to
accommodate
requirement_1
and
quality_attribute_1
demand
though
in
principle
it
sound
similar
to
decouple
a
requirement_3
component_11
tier
give
that
it
also
achieve
a
connector_29
nothing
architecture
it
s
slightly
different
so
when
be
sharding
recommend
to
begin
with
sharding
be
recommend
when
a
particular
type
of
connector_data_1
in
a
storage
component_8
grow
beyond
the
capacity
of
a
single
technology_16
either
due
to
technical
or
requirement_5
need
for
example
connector_42
component_5
or
technology_23
on
a
single
technology_16
can
become
impractical
though
use
pattern_5
and
synchronization
under
these
circumstance
can
aid
in
offset
load
from
a
single
technology_16
to
multiple
technology_16
another
approach
undertake
to
increase
requirement_1
and
quality_attribute_1
be
sharding
by
use
sharding
each
of
the
component_36
be
divide
into
several
block
and
spread
out
over
several
technology_16
several
out
of
the
component_19
cluster
such
a
technology_10
cluster
or
the
quality_attribute_4
storage
solution
describe
in
the
previous
chapter
support
sharding
a
part
of
their
internal
design
for
example
quality_attribute_4
column
row
storage
component_14
base
on
s
bigtable
component_30
automatically
generate
tablet
which
be
technically
shard
every
time
a
component_2
reach
a
certain
size
spread
them
the
across
several
technology_16
the
same
can
be
say
about
certain
quality_attribute_4
document
orientated
component_25
technology_10
cluster
or
specialize
storage
component_15
spider
for
technology_49
that
support
sharding
the
importance
of
have
a
storage
component_8
manage
shard
internally
cannot
be
underestimate
create
connector_data_1
shard
be
a
difficult
a
decouple
an
component_1
s
requirement_3
component_11
tier
on
what
basis
will
shard
be
create
on
technology_23
component_36
e
g
a
m
n
z
component_5
this
be
not
a
obvious
a
create
clear
and
quality_attribute_16
in
an
component_1
s
requirement_3
component_11
tier
to
further
complicate
thing
sharding
can
alter
the
connector_data_1
connector_4
pattern_19
use
by
an
component_1
s
requirement_3
component_11
tier
in
non
horizontal
quality_attribute_7
scenario
an
component_1
s
requirement_3
component_11
tier
can
count
on
locate
all
connector_data_1
on
single
technology_16
but
happen
when
different
shard
hold
an
component_1
s
connector_data_1
if
you
rely
on
a
storage
component_8
to
manage
sharding
you
allow
it
to
provide
a
single
and
unify
pattern_2
to
the
requirement_3
component_11
tier
instead
of
have
to
deal
with
it
yourself
manual
sharding
not
for
the
faint
of
heart
for
requirement_4
where
shift
an
component_1
s
permanent
storage
to
one
that
internally
support
sharding
isn
t
possible
you
can
connector_31
sharding
use
alternate
approach
but
be
aware
none
of
these
approach
be
for
the
faint
of
heart
one
technique
can
consist
of
have
a
shard
resolve
storage
component_8
the
requirement_3
component_11
first
proceed
with
it
to
this
storage
component_8
which
then
connector_43
re
direct
the
connector_data_5
to
the
shard
hold
the
connector_data_1
pertinent
to
the
the
advantage
to
this
approach
be
that
it
require
minimal
connector_3
to
an
component_1
s
requirement_3
component_11
tier
the
disadvantage
be
that
it
can
become
an
extremely
complicate
architecture
by
introduce
an
intermediate
resolve
component_8
the
other
technique
consist
of
modify
an
component_1
s
requirement_3
tier
so
it
s
this
tier
that
resolve
on
which
shard
to
proceed
quality_attribute_8
on
the
connector_data_1
the
disadvantage
in
this
requirement_4
be
that
it
can
take
a
substantial
amount
of
work
to
connector_7
a
requirement_3
component_11
s
to
work
across
shard
though
i
should
point
out
that
for
this
particular
scenario
there
be
certain
project
that
have
emerge
to
make
this
component_6
easy
one
such
project
be
hivedb
design
for
the
need
of
sharding
with
technology_8
technology_51
and
technology_49
requirement_2
computing
for
an
component_1
s
permanent
storage
tier
similar
to
the
component_3
offer
make
by
some
requirement_2
computing
technology_18
for
the
previously
mention
component_1
tier
there
be
also
several
requirement_2
computing
technology_18
that
offer
pain
free
quality_attribute_7
for
an
component_1
s
permanent
storage
tier
many
now
offer
technology_10
solution
document
orientated
solution
and
even
column
row
orientated
solution
without
ever
have
to
worry
about
underlie
issue
load
balance
pattern_5
&
synchronization
sharding
or
storage
issue
among
other
thing
the
only
downside
to
use
some
of
these
technology_18
be
that
you
could
be
lock
into
a
technology_18
s
pattern_6
which
be
what
can
allow
you
to
quality_attribute_3
in
a
pain
free
way
the
next
chapter
will
describe
some
of
the
component_3
technology_18
include
their
particular
offer
in
storage
component_8
«
key
requirement_1
and
quality_attribute_1
technologiessoftware
a
a
component_3
and
requirement_2
computing
component_4
»
enabling
technology_5
offer
a
quality_attribute_6
navigation
experience
welcome
it
look
you
re
use
an
blocker
we
respect
your
privacy
however
the
content
you
re
connector_44
wouldn
t
be
freely
quality_attribute_12
without
revenue
from
advertiser
you
can
disable
your
adblocker
to
continue
connector_44
freely
go
to
homepage
you
re
try
to
connector_21
free
content
which
be
support
this
require
you
to
enable
technology_5
please
enable
technology_5
to
continue
pattern_2
