advance
architecture
for
technology_1
core
web
component_1
bt
attend
qcon
san
francisco
oct


and
find
practical
inspiration
from
leader
register
close
toggle
navigation
facilitate
the
technology_2
of
knowledge
and
innovation
in
professional
development
english
edition
english
edition
chinese
edition
japanese
edition
french
edition
contribute
search
sign
up
login
password
forget
password
infoq
account
back
to
login
resend
activation
back
to
login
login
with
twitter

t
have
an
infoq
account
sign
up
notifications1
login
to
unlock
infoq
s
feature
stay
up
to
date
and
connector_1
connector_2
your
favorite
content
follow
your
favorite
editor
and
peer
sign
up
login

t
have
an
account
register
here
logo
back
to
homepage



apr
unique
visitor
news

presentation
podcast
guide
topic
development
technology_3
technology_4
technology_5
technology_6
technology_7
go
technology_8
technology_9
feature
in
development
reproducible
development
with
container
avdi
grimm
describe
the
future
of
development
which
be
already
here
connector_1
a
tour
of
a
devcontainer
and
contrast
it
with
a
deployment
container
all
in
development
architecture
&
design
architecture
requirement_1
architecture
quality_attribute_1
requirement_2
design
requirement_3
study
pattern_1
component_2
mesh
pattern_2
quality_attribute_2
feature
in
architecture
&
design
oren
eini
on
technology_10
include
consistency
guarantee
and
technology_6
a
the
implementation
technology_11
wesley
reisz
talk
to
oren
eini
about
the
history
of
technology_10
technology_10
be
a
fully
pattern_3
technology_12
document
component_3
that
connector_3
both
cp
and
ap
guarantee
at
different
time
the
two
discus
those
cp
ap
quality_attribute_3
component_4
challenge
the
choice
of
implementation
technology_11
technology_13
and
the
current
plan
for
technology_10


which
include
a
component_5
side
sharding
implementation
all
in
architecture
design
requirement_4
ml
&
connector_data_1
engineering
requirement_5
requirement_6
technology_12
component_3
connector_data_1
requirement_7
connector_4
feature
in
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
katharine
jarmul
discus
utilize
quality_attribute_3
connector_data_1
science
and
requirement_6
component_6
such
a
federate

to
from
connector_data_1
at
the
edge
all
in
requirement_4
ml
connector_data_1
eng
culture
&
agile
diversity
leadership
lean
kanban
personal
growth
scrum
sociocracy
craftmanship
team
collaboration
test
ux
feature
in
culture
&
how
to
run
your
technology_14
department
a
coach
have
find
what
i
think
be
my
connector_5
a
an
agile
coach
i
take
the
tough
decision
to
move
sideways
into
technology_14
requirement_8
in
the
hope
of
use
what
i’d

to
one
day
run
my
own
department
i
believe
that
come
from
coach
would
allow
me
to
see
thing
others
could
not
and
create
something
special
time
will
tell
if
i
have
succeed
this
be
the
story
of
where
i
be
up
to
so
far
all
in
culture

devops
infrastructure
continuous
delivery
automation
container
requirement_9
observability
feature
in
devops
panel
quality_attribute_4
component_4
the
panelist
discus
the
quality_attribute_2
for
the
supply
chain
and
quality_attribute_2
risk
measurement
all
in
devops
eventsnew
helpful
connector_6
about
infoq
infoq
editor
contribute
about
c4media
diversity
choose
your
technology_11
en
中文
日本
fr
infoq
live
how
requirement_9
architecture
achieve
cost
connector_7
improve
quality_attribute_5
&
connector_8
requirement_10
register
now
infoq
live
how
to
migrate
an
component_7
to
serverless
and
what
be
the
common
mistake
to
avoid
register
now
qcon
san
francisco
understand
the
emerge
trend
you
should
pay
attention
to
attend
in
person
on
oct



infoq
homepage

advance
architecture
for
technology_1
core
web
component_1
technology_15
jdconf
’22
requirement_9
requirement_11
technology_3
technology_16
configuration
graalvm
technology_17
and
more
watch
all
component_8
on
demand
advance
architecture
for
technology_1
core
web
component_1
this
item
in
japanese
coding_keyword_1
bookmark
jun



min
connector_9
by
chris
woodruff
review
by
jeff
martin
connector_10
for
infoq
join
a
of
expert
increase
your
visibility
grow
your
career

more
key
takeaway
technology_1
core
s
architecture
offer
several
benefit
a
compare
to
the
component_9
technology_1
technology_18
technology_1
core
benefit
from
incorporate
support
for
connector_11
injection
from
the
start
single
responsibility
principle
simplify
implementation
and
design
the
port
and
adapter
pattern_2
decouple
requirement_12
component_10
from
other
connector_11
decouple
architecture
make
test
much
easy
and
more
quality_attribute_6
with
the
release
of
technology_15
core


have
the
next
major
version
of
the
general
purpose
modular
cross
component_11
and
open_source
component_11
that
be
initially
release
in

technology_15
core
have
be
create
to
have
many
of
the
component_12
that
be
quality_attribute_7
in
the
current
release
of
technology_15
technology_19
it
be
initially
create
to
allow
for
the
next
generation
of
technology_1
solution
but
now
drive
and
be
the
basis
for
many
other
scenario
include
iot
requirement_9
and
next
generation
requirement_13
solution
in
this
series
we
will
explore
some
of
the
benefit
technology_15
core
and
how
it
can
benefit
not
only
traditional
technology_15
developer
but
all
technologist
that
need
to
bring
quality_attribute_6
performant
and
economical
solution
to
requirement_14
this
infoq
be
part
of
the
series
net
core
you
can
subscribe
to
connector_12
connector_data_2
via
r
the
internet
be
a
very
different
place
from
five
year
ago
coding_keyword_2
alone
20when
i
first
start
a
a
professional
developer
today
web
component_12
connector_13
the
modern
internetand
drive
both
web
component_13
and
requirement_13
component_14
the
skill
of
create
quality_attribute_6
web
component_12
that
other
developer
can
connector_14
be
in
high
demand
our
api’s
that
drive
most
modern
web
and
requirement_13
component_14
need
to
have
the
quality_attribute_8
and
quality_attribute_5
to
stay
component_2
even
when
traffic
be
at
the
requirement_2
limit
the
purpose
of
this
be
to
describe
the
architecture
of
an
technology_1
core


web
component_1
solution
use
the
hexagonal
architecture
and
port
and
adapter
pattern_2
first
we
will
look
at
the
feature
of
technology_15
core
and
technology_1
core
that
benefit
modern
web
api’s
the
solution
and
all
from
this
article’s
example
can
be
foundin
my
technology_20
pattern_4
chinookaspnetcoreapihex
technology_15
core
and
technology_1
core
for
web
component_1
technology_1
core
be
a
web
technology_19
that
build
on
top
of
technology_15
core
to
shed
the
component_9
technology_18
that
have
be
around
since
technology_15


by
comparison
technology_1


still
us
the
component_15
webassembly
that
contain
all
the
webforms
technology_21
and
a
a
connector_data_3
be
still
broughtinto
more
recent
technology_1
pattern_5

solution
by
shed
these
component_9
connector_11
and
develop
the
technology_19
from
scratch
technology_1
core


give
the
developer
much
quality_attribute_9
requirement_2
and
be
architected
for
cross
component_11
connector_15
with
technology_1
core


your
solution
will
work
a
well
on
linux
a
they
do
on
window
you
can
connector_9
more
about
the
benefit
of
technology_15
core
and
technology_1
core
from
the
three
other

in
this
series
the
first
be
requirement_2
isa
technology_15
core
feature
by
maarten
balliauw
technology_1
core
the
power
of
quality_attribute_10
by
chris
klug
and
finally
technology_22
and
technology_15
core
be
beautiful
together
by
eric
boyd
architecture
build
a
great
component_1
quality_attribute_11
ongreatarchitecture
we
will
be
look
at
many
aspect
of
our
component_1
design
and
development
from
the
build
infunctionality
of
technology_1
core
to
architecture
philosophy
and
finally
design
pattern_2
there
be
muchplanning
and
think
behind
this
architecture
so
let’s
connector_1
start
connector_11
injection
before
we
dig
into
the
architecture
of
our
technology_1
core
web
component_1
solution
i
want
to
discus
what
i
believe
be
a
singlebenefit
which
make
technology_15
core
developer
life
so
much
quality_attribute_9
that
be
dependencyinjection
di
now
i
you
will
say
that
we
have
di
in
technology_15
technology_19
and
technology_1
solution
i
will
agree
butthe
di
we
use
in
the
past
would
be
from
third
party
commercial
technology_23
or
maybe
open_source
technology_21
they
do
a
quality_attribute_9

butfor
a
quality_attribute_9
portion
of
technology_15
developer
there
be
a
big

curve
andall
di
technology_21
have
their
uniqueway
of
handle
thing
today
with
technology_15
core
we
have
di
build
right
into
the
technology_19
from
the
start
moreover
it
be
quite
quality_attribute_12
to
work
with
andyou
connector_1
it
out
of
the
component_16
the
reason
we
need
to
use
di
in
our
component_1
be
that
it
allow
usto
have
the
best
experience
decouple
our
architecture
pattern_6
and
also
to
allowus
to
mock
the
connector_data_1
pattern_6
or
have
multiple
connector_data_1
component_17
build
for
our
technology_24
to
use
the
technology_15
core
di
technology_19
justmake
sure
your
project
reference
the

aspnetcore
allnuget
package
which
contain
a
connector_11
on

extnesions
dependencyinjection
abstractionspackage
this
package
give
connector_16
to
the
iservicecollection

which
have
a
component_15
iserviceprovider
that
you
can
connector_data_4
getservice
tservice
toget
the
component_18
you
need
from
the
iservicecollection

you
will
need
to
the
component_18
your
project
need
to
more
about
technology_15
core
connector_11
inject
i
suggest
you
review
the
follow
document
on
msdn
introduction
to
connector_11
injection
in
technology_1
core
we
will
now
look
at
the
philosophy
of
why
we
architected
our
component_1
a
i
do
the
two
aspect
of
design
any
architecture
dependon
these
two
idea
allow
deep
quality_attribute_13
and
utilize
prove
pattern_2
and
architecture
in
your
solution
quality_attribute_13
of
the
component_1
quality_attribute_13
for
any
engineering
component_19
be
the
ease
with
which
a
technology_14
can
be
maintain
find
defect
correct
find
defect
repair
or
replace
defective
component_20
without
have
to
replace
still
work
part
prevent
unexpected
malfunction
maximize
a
technology_14
s
useful
life
have
the
ability
to
meet
requirement
make
future
quality_attribute_14
easy
or
cope
with
a
connector_17
environment
thiscan
be
a
difficult
road
to
go
down
without
a
well
plan
and
connector_18
architecture
quality_attribute_13
be
a
long
term
issue
and
should
be
lookedat
with
a
vision
of
your
component_1
in
the
far
distance
with
that
in
mind
you
need
to
make
decision
that
lead
to
this
future
vision
and
not
to
short
termshortcuts
that
seem
to
make
life
easy
right
now
make
hard
decision
at
the
start
will
allow
your
project
to
have
a
long
life
and
provide
benefit
that
component_21
demand
what
make
a
architecture
have
high
quality_attribute_13
how
do
we
evaluate
if
our
component_1
canbe
maintain
do
our
architecture
allow
for
connector_19
that
have
minimal
if
not
zero
impact
onother
area
of
the
component_15
debug
of
the
component_1
should
be
easy
and
not
have
to
difficult
set
up
to
be
do
we
should
have
establish
pattern_2
and
be
through
common
such
a
browser
debug
technology_25
test
should
be
automate
a
possible
and
be
clear
and
not
complicate
and
implementation
the
key
to
my
component_1
architecture
be
the
use
of
technology_6
to
allow
for
alternative
implementation
if
you
have
connector_10
technology_15
with
technology_13
you
have
probably
use

i
use
in
my
solution
to
build
out
a
contract
in
my
domain
pattern_6
that
guarantee
that
any
connector_data_1
pattern_6
i
develop
for
my
component_1
adhere
to
the
contract
for
connector_data_1
pattern_4
it
also
allow
the
pattern_7
in
my
component_1
project
to
adhere
to
another
establish
contract
for
connector_20
the
correct
to
component_19
the
component_1
in
the
domain
project’s
supervisor
be
very
important
to
technology_15
core
and
if
you
need
a
refresher
go
here
for
more
connector_data_5
port
and
adapter
pattern_2
we
want
our
connector_data_6
throughout
our
component_1
solution
to
have
single
responsibility
thiskeeps
our
connector_data_6
quality_attribute_12
and
easily
connector_17
if
we
need
to
fix
bug
or
enhance
our

if
you
have
these
“code
smells”
in
your

then
you
might
be
violate
the
single
responsibility
principle
a
a
general
rule
i
look
at
the
implementation
of
the
contract
for
length
and
complexity
i
do
nothave
a
limit
to
the
line
of
in
my

butif
you
passeda
single
pattern_8
in
your
ide
it
might
be
too
long
also
connector_21
the
cyclomatic
complexity
of
your
to
determine
the
complexity
of
your
project’s
and

the
port
and
adapter
pattern_2
aka
hexagonal
architecture
be
a
way
to
fix
this
problem
of
have
requirement_12
component_10
couple
too
tightly
to
other
connector_11
such
a
connector_data_1
connector_16
or
component_1
technology_19
use
this
pattern_2
will
allow
your
component_1
solution
to
have
clear
boundary
well
namedobjects
that
have
single
responsibility
and
finally
allow
easy
development
and
quality_attribute_13
we
can
see
the
pattern_2
best
visually
an
onion
with
port
locate
on
the
outside
of
the
hexagon
and
the
adapter
and
requirement_12
component_10
locate
close
to
the
core
i
see
the
external
connector_22
of
the
architecture
a
the
port
the
component_1
that
be
consumedor
the
component_3
connector_22
use
by
component_22
technology_19
core


would
be
example
of
port
while
the
internal
connector_data_1
pattern_4
would
be
the
adapter
next
let’s
look
at
the
logical
segment
of
our
architecture
and
some
demo
example
domain
pattern_6
before
we
look
at
the
component_1
and
domain
pattern_6
we
need
to
explain
how
we
build
out
the
contract
through
and
the
implementation
for
our
component_1
requirement_12
component_10
let’s
look
at
the
domain
pattern_6
the
domain
pattern_6
have
the
follow

define
the
component_23
connector_data_6
that
will
be
usedthroughout
the
solution
these
component_24
will
represent
the
connector_data_1
layer’s
datamodels
define
the
component_25
which
will
be
use
by
the
component_1
pattern_6
for
technology_26
connector_data_7
and
connector_23
a
single
connector_data_6
or
set
of
connector_data_8
define
the
through
which
our
connector_data_1
pattern_6
can
connector_24
the
connector_data_1
connector_16
component_10
connector_3
the
supervisor
that
will
containmethods
connector_25
from
the
component_1
pattern_6
each
will
represent
an
component_1
connector_data_4
and
will
convert
connector_data_1
from
the
inject
connector_data_1
pattern_6
to
component_25
to
be
coding_keyword_3
our
domain
component_22
connector_data_6
be
a
representation
of
the
component_3
that
we
be
use
to
component_26
and
connector_26
connector_data_1
use
for
the
component_1
requirement_12
component_10
each
component_22
connector_data_8
will
contain
the
property
represent
in
our
requirement_3
the
technology_27
component_27
a
an
exampleis
the
album
component_22
coding_keyword_4
seal
album
{
coding_keyword_4
coding_keyword_5
albumid
{
connector_1
set
}
coding_keyword_4
coding_keyword_6
title
{
connector_1
set
}
coding_keyword_4
coding_keyword_5
artistid
{
connector_1
set
}
coding_keyword_4
icollection
track
track
{
connector_1
set
}
=
hashset
track
coding_keyword_4
artist
artist
{
connector_1
set
}
}
the
album
component_27
in
the
technology_27
component_3
have
threecolumns
albumid
title
andartistid
these
three
property
be
part
of
the
album
component_22
a
well
a
the
artist’s
name
a
collection
of
associate
track
and
the
associate
artist
a
we
will
see
in
the
other
pattern_6
in
the
component_1
architecture
we
will
build
upon
this
component_22
object’s
definition
for
the
component_25
in
the
project
the
component_25
be
the
extension
of
the
component_23
and
help
give
more
connector_data_5
for
the
component_28
of
the
apis
coding_keyword_2
slook
at
the
album
viewmodel
it
be
very
similar
to
the
album
component_22
but
with
an
additional
property
in
the
design
of
my
technology_24
i
determine
that
each
album
should
have
the
name
of
the
artist
in
the
connector_data_9
pass
back
from
the
technology_24
thiswill
allow
the
component_1
component_28
to
have
that
crucial
piece
of
connector_data_5
about
the
album
without
have
to
have
the
artist
viewmodel
pass
back
in
the
connector_data_9
especially
when
we
be
connector_27
back
a
large
set
of
album
an
example
of
our
albumviewmodel
be
below
coding_keyword_4
albumviewmodel
{
coding_keyword_4
coding_keyword_5
albumid
{
connector_1
set
}
coding_keyword_4
coding_keyword_6
title
{
connector_1
set
}
coding_keyword_4
coding_keyword_5
artistid
{
connector_1
set
}
coding_keyword_4
coding_keyword_6
artistname
{
connector_1
set
}
coding_keyword_4
artistviewmodel
artist
{
connector_1
set
}
coding_keyword_4
ilist
trackviewmodel
track
{
connector_1
set
}
}
the
other
area
that
be
developedinto
the
domain
pattern_6
isthe
contract
via
for
each
of
the
component_23
define
in
the
pattern_6
again
we
will
use
the
album
component_22
to
show
the
that
be
define
coding_keyword_4
ialbumrepository
idisposable
{
connector_data_10
connector_data_11
album
getallasync
cancellationtoken
ct
=
default
cancellationtoken
connector_data_10
album
getbyidasync
coding_keyword_5
coding_keyword_7
cancellationtoken
ct
=
default
cancellationtoken
connector_data_10
connector_data_11
album
getbyartistidasync
coding_keyword_5
coding_keyword_7
cancellationtoken
ct
=
default
cancellationtoken
connector_data_10
album
addasync
album
newalbum
cancellationtoken
ct
=
default
cancellationtoken
connector_data_10
bool
updateasync
album
album
cancellationtoken
ct
=
default
cancellationtoken
connector_data_10
bool
deleteasync
coding_keyword_5
coding_keyword_7
cancellationtoken
ct
=
default
cancellationtoken
}
a
show
in
the
above
example
the
definesthe
need
to
connector_24
the
connector_data_1
connector_16
for
the
album
component_22
each
component_22
connector_data_8
and
be
well
define
and
simplistic
that
allow
the
next
pattern_6
to
be
well
define
finally
the
core
of
the
domain
project
be
the
supervisor

itspurpose
be
to
pattern_9
to
and
from
component_23
and
component_25
and
perform
requirement_12
component_10
away
from
either
the
component_1
and
the
connector_data_1
connector_16
component_10
have
the
supervisor
handle
this
also
will
isolate
the
component_10
to
allow
unit
test
on
the
translation
and
requirement_12
component_10
look
at
the
supervisor
for
acquire
and
pass
a
single
album
to
the
component_1

we
can
see
the
component_10
in
connector_13
the
component_1
component_29
to
the
connector_data_1
connector_16
inject
into
the
supervisor
but
still
keep
each
isolate
coding_keyword_4
pattern_10
connector_data_10
albumviewmodel
getalbumbyidasync
coding_keyword_5
coding_keyword_7
cancellationtoken
ct
=
default
cancellationtoken
{
var
albumviewmodel
=
albumcoverter
convert
await
_albumrepository
getbyidasync
coding_keyword_7
ct
albumviewmodel
artist
=
await
getartistbyidasync
albumviewmodel
artistid
ct
albumviewmodel
track
=
await
gettrackbyalbumidasync
albumviewmodel
albumid
ct
albumviewmodel
artistname
=
albumviewmodel
artist
name
coding_keyword_3
albumviewmodel
}
keep
most
of
the
and
component_10
in
the
domain
project
will
allow
every
project
to
keep
and
adhere
to
the
single
responsibility
principle
connector_data_1
pattern_6
the
next
pattern_6
of
the
component_1
architecture
we
will
look
at
be
the
connector_data_1
pattern_6
in
our
example
solution
we
be
use
component_22
technology_19
core


thiswill
mean
that
we
have
the
component_22
technology_19
core’s
technology_28
define
but
also
the
connector_data_1
component_24
generate
for
each
component_22
in
the
technology_27
component_3
if
we
look
at
the
connector_data_1
component_6
for
the
album
component_22
a
an
example
we
will
see
that
we
have
three
property
that
be
storedin
the
component_3
along
with
a
property
that
contain
a
connector_data_11
of
associate
track
to
the
album
in
addition
to
a
property
that
contain
the
artist
connector_data_8
while
you
can
have
a
multitude
of
connector_data_1
pattern_6
implementation
justremember
that
it
must
adhere
to
the
requirement
document
on
the
domain
pattern_6
each
connector_data_1
pattern_6
implementation
must
work
with
the
pattern_8
component_24
and
pattern_4
detail
in
the
domain
pattern_6
the
architecture
we
be
develop
for
the
component_1
us
the
pattern_4
pattern_2
for
connector_13
the
component_1
pattern_6
to
the
connector_data_1
pattern_6
thisis
do
use
connector_11
injection
a
we
discuss
early
for
each
of
the
pattern_4
connector_data_6
we
connector_24
we
will
discus
how
we
use
connector_11
injection
and
the
when
we
look
at
the
component_1
pattern_6
the
key
to
the
connector_data_1
pattern_6
be
the
implementation
of
each
component_22
pattern_4
use
the
develop
in
the
domain
pattern_6
look
at
the
domain
layer’s
album
pattern_4
a
an
example
show
that
it
connector_3
the
ialbumrepository

each
pattern_4
will
inject
the
technology_28
that
will
allow
for
connector_16
to
the
technology_27
component_3
use
component_22
technology_19
core
coding_keyword_4
albumrepository
ialbumrepository
{
private
readonly
chinookcontext
_context
coding_keyword_4
albumrepository
chinookcontext
component_30
{
_context
=
component_30
}
private
pattern_10
connector_data_10
bool
albumexists
coding_keyword_5
coding_keyword_7
cancellationtoken
ct
=
default
cancellationtoken
{
coding_keyword_3
await
getbyidasync
coding_keyword_7
ct
=
coding_keyword_8
}
coding_keyword_4
coding_keyword_9
dispose
{
_context
dispose
}
coding_keyword_4
pattern_10
connector_data_10
connector_data_11
album
getallasync
cancellationtoken
ct
=
default
cancellationtoken
{
coding_keyword_3
await
_context
album
tolistasync
ct
}
coding_keyword_4
pattern_10
connector_data_10
album
getbyidasync
coding_keyword_5
coding_keyword_7
cancellationtoken
ct
=
default
cancellationtoken
{
coding_keyword_3
await
_context
album
findasync
coding_keyword_7
}
coding_keyword_4
pattern_10
connector_data_10
album
addasync
album
newalbum
cancellationtoken
ct
=
default
cancellationtoken
{
_context
album

newalbum
await
_context
savechangesasync
ct
coding_keyword_3
newalbum
}
coding_keyword_4
pattern_10
connector_data_10
bool
updateasync
album
album
cancellationtoken
ct
=
default
cancellationtoken
{
if
await
albumexists
album
albumid
ct
coding_keyword_3
false
_context
album
update
album
_context
update
album
await
_context
savechangesasync
ct
coding_keyword_3
true
}
coding_keyword_4
pattern_10
connector_data_10
bool
deleteasync
coding_keyword_5
coding_keyword_7
cancellationtoken
ct
=
default
cancellationtoken
{
if
await
albumexists
coding_keyword_7
ct
coding_keyword_3
false
var
toremove
=
_context
album
find
coding_keyword_7
_context
album
remove
toremove
await
_context
savechangesasync
ct
coding_keyword_3
true
}
coding_keyword_4
pattern_10
connector_data_10
connector_data_11
album
getbyartistidasync
coding_keyword_5
coding_keyword_7
cancellationtoken
ct
=
default
cancellationtoken
{
coding_keyword_3
await
_context
album
where
a
=
a
artistid
==
coding_keyword_7
tolistasync
ct
}
}
have
the
connector_data_1
pattern_6
pattern_11
all
connector_data_1
connector_16
will
allow
facilitate
a
quality_attribute_9
test
story
for
your
technology_24
we
can
build
multiple
connector_data_1
connector_16
implementation
one
for
technology_27
component_3
storage
another
for
maybe
a
requirement_9
technology_12
storagemodel
and
finally
a
mock
storage
implementation
for
the
unit
test
in
the
solution
component_1
pattern_6
the
final
pattern_6
that
we
will
look
at
be
the
area
that
your
component_1
component_31
will
connector_28
this
pattern_6
contain
the
for
the
web
component_1
component_10
include
the
pattern_7
the
component_1
project
for
the
solution
will
have
a
single
responsibility
andthat
be
only
to
handlethe
technology_26
connector_data_7
connector_29
by
the
web
component_5
and
to
coding_keyword_3
the
technology_26
connector_23
with
either
success
or
failure
there
will
be
a
very
minimal
requirement_12
component_10
in
this
project
we
will
handle
exception
and
error
that
have
occur
in
the
domain
or
connector_data_1
project
to
effectively
connector_30
with
the
component_28
of
apis
this
connector_31
will
use
technology_26
connector_23
cod
and
any
connector_data_1
to
be
returnedlocated
in
the
technology_26
connector_23
body
in
technology_1
core


web
technology_24
connector_32
be
handle
use
attribute
connector_33
if
you
need
to
more
about
attribute
connector_32
in
technology_1
core
go
here
we
be
also
use
connector_11
injection
tohave
the
supervisor
assign
toeach
pattern_7
each
controller’s
action
have
a
correspond
supervisor
that
will
handle
the
component_10
for
the
component_1
connector_data_4
i
have
a
segment
of
the
album
pattern_7
below
to
show
these
concept
connector_34
technology_24
pattern_7
coding_keyword_4
albumcontroller
pattern_7
{
private
readonly
ichinooksupervisor
_chinooksupervisor
coding_keyword_4
albumcontroller
ichinooksupervisor
chinooksupervisor
{
_chinooksupervisor
=
chinooksupervisor
}
httpget
produce
typeof
connector_data_11
albumviewmodel
coding_keyword_4
pattern_10
connector_data_10
iactionresult
connector_1
cancellationtoken
ct
=
default
cancellationtoken
{
try
{
coding_keyword_3
objectresult
await
_chinooksupervisor
getallalbumasync
ct
}
catch
exception
ex
{
coding_keyword_3
statuscode

ex
}
}
}
the
web
component_1
project
for
the
solution
be
very
quality_attribute_12
and
thin
i
strive
to
keep
a
little
of
in
this
solution
a
it
could
be
replacedwith
another
form
of
connector_35
in
the
future
conclusion
a
i
have
demonstrate
design
and
develop
a
great
technology_1
core


web
component_1
solution
take
insight
in
order
tohave
a
decouple
architecture
that
will
allow
each
pattern_6
to
be
quality_attribute_15
and
follow
the
single
responsibility
principle
i
hope
my
connector_data_5
will
allow
you
to
create
and
maintain
your
production
web
component_12
for
your
organization’s
need
about
the
author
chris
woodruff
woody
have
a
degree
in
component_32
science
from
michigan
state
university’s
college
of
engineering
woody
have
be
develop
and
architecting
solution
for
over

year
and
have
work
in
many
different
component_33
and
technology_25
he
be
a
leader
help
such
a
grdevnight
grdevday
west
michigan
day
of
technology_15
and
codemash
he
be
also
instrumental
in
bring
the
popular
give
camp
to
western
michigan
where
technology_18
professional
lend
their
time
and
development
expertise
to
assist
local
non
profit
a
a
speaker
and
podcaster
woody
have
speak
and
discuss
a
variety
of
topic
include
component_3
design
and
open_source
he
have
be
a
pattern_12
in
visual
technology_13
connector_data_1
component_11
and
technology_27
and
be
recognize
in

a
one
of
the
top

mvp
world
wide
woody
be
a
developer
advocate
for
jetbrains
and
evangelize
net
technology_15
core
and
jetbrains
technology_14
in
north
america
with
the
release
of
technology_15
core


have
the
next
major
version
of
the
general
purpose
modular
cross
component_11
and
open_source
component_11
that
be
initially
release
in

technology_15
core
have
be
create
to
have
many
of
the
component_12
that
be
quality_attribute_7
in
the
current
release
of
technology_15
technology_19
it
be
initially
create
to
allow
for
the
next
generation
of
technology_1
solution
but
now
drive
and
be
the
basis
for
many
other
scenario
include
iot
requirement_9
and
next
generation
requirement_13
solution
in
this
series
we
will
explore
some
of
the
benefit
technology_15
core
and
how
it
can
benefit
not
only
traditional
technology_15
developer
but
all
technologist
that
need
to
bring
quality_attribute_6
performant
and
economical
solution
to
requirement_14
this
infoq
be
part
of
the
series
net
core
you
can
subscribe
to
connector_12
connector_data_2
via
r
inspire
by
this
content
connector_10
for
infoq
become
an
editor
for
infoq
be
one
of
the
best
decision
of
my
career
it
have
challenge
me
and
help
me
grow
in
so
many
way
we
technology_29
love
to
have
more
people
join
our
team
thomas
bettslead
editor
architecture
and
design
@infoq
senior
principal
engineer
connector_10
for
infoq
rate
this
adoption
style
author

this
content
be
in
the
technology_15
topic
relate
topic
development
technology_1
core
technology_15
core
technology_15
core
series
web
component_1
technology_15
component_1
architecture
relate
editorial
relate
sponsor
content
relate
sponsor
protect
identity
quality_attribute_4
digital
component_2
enable
quality_attribute_16
and
quality_attribute_4
component_34
connector_16
to
web
and
requirement_13
component_7
start
free
trial
relate
content
create
and
use
technology_26
component_35
sdks
in
technology_15

color
in
net
an
in
depth
guide
connector_20
start
with
grpc
and
technology_15
technology_30
chronicle
the
end
of
the
coding_keyword_4
component_1
strangler
hashicorp
vault
improve
eventual
consistency
with
component_5
side
consistent
connector_data_12
announce
the
general
quality_attribute_17
of
technology_22
container
component_14
at
build

requirement_6
at
the
edge
how
connector_20
feedback
from
angry
component_21
help
to
develop
quality_attribute_9
technology_14
jep

component_36
to
extend
pattern_2
match
in
technology_3
cloudflare
d1
provide
quality_attribute_3
technology_31
for
cloudflare
component_37
release

technology_11
requirement_4
train
dataset
massive
technology_3
news
roundup
openjdk
technology_17
connector_data_13
and
cf
payara
component_11
technology_32
technology_33
connector_data_13
how
to
run
your
technology_14
department
a
coach
kalix
build
serverless
requirement_9
requirement_11
requirement_12
crtical
component_13
with
no
component_3
jetpack
bring
update
architectural
and
ui
component_20
and
improve
requirement_2
technology_25
release
technology_22
dns
private
resolver
in
coding_keyword_4
preview
technology_34
support
nitrotpm
and
uefi
quality_attribute_4
boot
architecting
for
the
edge
requirement_9
introduce
technology_35
quality_attribute_18
technology_36
for
requirement_1
component_3
workload
requirement_4
for
developer
a
future
or
a
reality
quality_attribute_19
by
agreement
requirement_10
outcome
over
impose
solution
technology_37
lambda
now
have
support
for
technology_38

runtime
effectively
pattern_13
your
pattern_13
miedwar
meshbesher
on
use
vigilance
control
meta
artificial_intelligence’s
connector_data_1
set
to
accelerate
renewable
energy
catalyst
discovery
for
hydrogen
fuel
deepmind
introduce
gato
a
generalist
requirement_4
agent
mammoth
stump
in
the
requirement_9
era
meet
eu
regulation
by
be
requirement_9
requirement_11
and
requirement_9
agnostic
go
requirement_11
with
technology_17
and
graalvm
deal
with
thunder
herd
at
braintree
how
norway
s
large
bureaucracy
optimise
for
fast
flow
how
to
prepare
for
the
unexpected
an
influxdata
outage
story
tell
at
kubeconeu

the
what
and
why
of
programmable
pattern_14
state
of
the
technology_3
ecosystem
report
from
relic
+
technology_3
=
♡
a
story
tell
by
martijn
verburg
at
devoxx
uk
trust
drive
development
build
cognitive
and
emotional
pillar
laion
release
five
billion
image
text
pair
dataset
laion
5b
why
you
should
care
about
architecture
microstream


connector_36
support
for
technology_39
technology_3
news
roundup
jeps
for
jdk

project
lilliput
milestone
technology_17
technology_19
quarkus



flutter

now
quality_attribute_20
on
all
support
component_11
extend
material
design

connector_13
goal
to
daily
teamwork
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_37
out
every
tuesday
join
a
of
over


senior
developer
pattern_8
an
example
enter
your
e
mail
connector_38
select
your
country
select
a
country
i
to
infoq
technology_40
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
hello
stranger
you
need
to
register
an
infoq
account
or
login
or
login
to
coding_keyword_10

but
there
s
so
much
more
behind
be
register
connector_1
the
most
out
of
the
infoq
experience
tell
u
what
you
think
allow
technology_41
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_14
to
any
of
my
connector_data_15
in
this
component_38

watch
component_38
single
responsibility
by
philipp
rößner
re
single
responsibility
by
chris
woodruff
re
single
responsibility
by
philipp
rößner
re
single
responsibility
by
chris
woodruff
re
single
responsibility
by
jonathan
loscalzo
re
single
responsibility
by
chris
woodruff
advance
architecture
for
technology_1
core
web
component_1
by
joel
mamedov
re
advance
architecture
for
technology_1
core
web
component_1
by
chris
woodruff
re
advance
architecture
for
technology_1
core
web
component_1
by
charles
cherry
re
advance
architecture
for
technology_1
core
web
component_1
by
chris
woodruff
domain
by
arman
kurtagić
domain
by
tomasz
rzepecki
re
domain
by
tomasz
rzepecki
where
do
pattern_15
fit
by
ali
roshan
re
where
do
pattern_15
fit
by
tomasz
rzepecki
connector_data_16
permission
by
yongmin
lee
re
connector_data_16
permission
by
roxana
bacila

tier
architecture
for
technology_42
by
saurav
karna
ichinooksupervisor
by
zion
bokobza
great
by
rajendra
verma
one
question
by
syam
s
single
responsibility
by
philipp
rößner
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
nice

i
be
always
connector_39
out
different
type
of
architecture
and
what
i
about
this
be
that
the
domain
pattern_6
be
connector_24
a
the
real
core
and
one
important
connector_11
in
the
solution
but
i
be
struggle
with
your
supervisor

from
my
point
of
pattern_8
it
be
violate
the
single
responsibility
principle
i
be
always
split
my
domain
component_10
into

relate
to
use
requirement_3
then
you
have
to
inject
sometimes
more
than

connector_11
into
the
pattern_7
but
it
feel
way
more
controllable
than
have
the
whole
domain
inside
of
one

what
do
you
think
connector_data_18
back
to
top
advance
architecture
for
technology_1
core
web
component_1
by
joel
mamedov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
thanks
for
the

i
think
domain
pattern_6
be
redundant
your
domain
component_23
should
be
represent
by
connector_data_1
pattern_6
too
many
pattern_6
and
lot
of
connector_data_8
connector_11
and

i
miss
old
pattern_16
day
that
thing
be
much
quality_attribute_12
you
have
component_29
and
component_39
connector_data_18
back
to
top
re
advance
architecture
for
technology_1
core
web
component_1
by
chris
woodruff
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
thanks
for
the
connector_23
and

the
reason
for
have
a
three
tier
architecture
be
to
allow
inject
a
different
connector_data_1
connector_16
implementation
and
for
test
a
you
can
see
from
my
technology_1
core
web
component_1
solution
i
can
use
connector_11
injection
to
inject
a
different
connector_data_1
connector_16
base
on
my
need
connector_data_18
back
to
top
re
single
responsibility
by
chris
woodruff
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
do
agree
that
my
supervisor
be
quite
large
and
do
not
adhere
to
an
srp
a
i
would
want
it
the
reason
why
i
have
to
go
down
that
path
be
so
i
do
not
connector_1
circular
reference
if
you
look
at
the
relationship
between
the
connector_data_1
component_6
you
will
see
that
there
be
component_40
that
have
association
that
would
cause
this
to
happen
one
example
be
the
relationship
between
artist
and
album
i
appreciate
your

and
i
be
always
try
to
find
a
way
to
have
my
architecture
have
single
responsibility
when
i
create

be
not
able
to
for
this
instance
connector_data_18
back
to
top
re
single
responsibility
by
philipp
rößner
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
isn
t
it
possible
to
to
connector_1
a
single
incstance
per
connector_data_16
from
technology_5
core
di
so
you
could
connector_1
the
same
instance
of
the
component_22
technology_19
technology_28
to
all
your
pattern_4

that
should
avoid
circular
reference
or
do
i
connector_1
you
wrong
there
connector_data_18
back
to
top
re
single
responsibility
by
chris
woodruff
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
that
be
one
of
my
path
that
i
go
down
and
fail
i
have
each
component_22
pattern_4
connector_1
the
technology_28
inject
for
the
connector_data_1
connector_16
and
run
into
the
circular
reference
i
be
look
other
possible
solution
for
the
supervisor

thanks
connector_data_18
back
to
top
domain
by
arman
kurtagić
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
hi
chris
thank
you
for
the

quality_attribute_9

suggestion
to
reconsider
implementation
of
the
domain
component_23
or
remove
them
or
make
on
that
point
that
this
be
an
example
of
hex
arch
style
show
no
domain
component_10
which
be
one
of
the
important
thing
right
now
there
be
no
component_10
in
domain
and
they
be
represent
anemic
domain
component_6
that
be
one
of
the
top
thing
i
see
when
work
with
junior
developer
there
be
a
risk
that
such
implementation
lead
to
procedural
style
of
cod
while
work
in
oop
technology_11
mean
that
important
component_10
be
likely
to
be
scatter
over
the
pattern_6
connector_data_18
back
to
top
domain
by
tomasz
rzepecki
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
why
domain
pattern_6
instead
of
businesslogic
pattern_6
the
domain
pattern_6
might
suggest
usage
of
ddd
principle
which
be
not
include
in
this
example
connector_data_18
back
to
top
re
advance
architecture
for
technology_1
core
web
component_1
by
charles
cherry
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
re
separate
the
connector_data_1
connector_16
layeri
do
this
with
the
ef
core
in
memory
component_3
technology_23
use
technology_43
i
can
load
the
connector_data_1
i
need
for
test
and
then
i
can
test
out
all
of
my
connector_data_1
connector_16
without
hit
the
actual
component_3
connector_data_18
back
to
top
re
single
responsibility
by
jonathan
loscalzo
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
think
that
a
use
requirement_3
implementation
would
be
quality_attribute_9
than
supervisor
for
me
supervisor
be
a
kind
of
pattern_17
component_2
pattern_2
and
i
can
t
see
the
hexarchitecture
¿where
be
port
and
adapter
for
me
it
s
a
quality_attribute_12
n
pattern_6
architecture
with
an
entry
point
connector_data_4
supervisor
on
the
other
hand
it
be
a
cool
architecture
for
teaching
it
could
continue
with
pattern_3
feature
interception
requirement_15
etc
could
i
take
it
and
adapt
to
a
for
my
friend
connector_data_18
back
to
top
re
advance
architecture
for
technology_1
core
web
component_1
by
chris
woodruff
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
thanks
and
that
be
also
a
great
way
to
have
test
connector_data_1
for
unit
test
i
want
to
show
a
very
quality_attribute_12
technique
but
if
i
be
do
more
advance
test
your
would
be
at
the
top
of
the
connector_data_11
thanks
connector_data_18
back
to
top
re
single
responsibility
by
chris
woodruff
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
yes
i
start
this
architecture
and
it
be
not
the
best
representation
of
the
hex
architecture
i
be
glad
you

what
i
do
and
i
appreciate
your

connector_data_18
back
to
top
re
domain
by
tomasz
rzepecki
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
find
team
which
use
style
from
and
refuse
to
go
futher
into
ddd
practice
they
find
anemic
domain
component_6
a
state
of
the
art
of
ddd
i
think
it
important
to
mention
that
this
be
not
ddd
relate
connector_data_18
back
to
top
where
do
pattern_15
fit
by
ali
roshan
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
this
be
a
very
informative

where
do
the
pattern_15
pattern_6
fit
in
i
use
build
in
memory
pattern_15
and
i
be
rewrite
our
technology_5
technology_24
into
technology_5
core


i
be
think
about
pass
pattern_15
a
connector_11
injection
at
component_2
start
up
pattern_15
will
be
use
with
in
requirement_12
component_10
connector_data_1
pattern_6
and
the
technology_24
pattern_6
any
tip
regard
that
connector_data_18
back
to
top
re
where
do
pattern_15
fit
by
tomasz
rzepecki
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
if
your
requirement_12
talk
about
pattern_15
so
put
it
in
requirement_12
component_10
but
usually
it
be
infrastructure
concern
pattern_6
that
be
not
mention
in
this

please
find
something
about
domain
drive
design
to
find
how
and
why
keep
your
requirement_12
component_10
clear
from
infrastructure
and
technical
concern
connector_data_18
back
to
top
connector_data_16
permission
by
yongmin
lee
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
hello
chris
i
need
your
permission
to
copy
the
content
of
this
to
my

my
be
a
personal
with
a
collection
of
quality_attribute_9
stuff
this
i
be
not
make
any
profit
out
of
this
so
i
would
to
ask
your
permission
to
use
the
content
of
this

i
want
to
pattern_9
it
into
korean
and
coding_keyword_10
it
on
my

for
your
connector_data_5
my
be
for
a
personal
use
and
i
be
not
make
any
profit
out
of
it
i
be
definitely
go
to
show
the
original
connector_40
wait
for
your

connector_data_18
back
to
top
re
connector_data_16
permission
by
roxana
bacila
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
hi
yongmin
infoq
do
not
agree
to
any
third
party
copy
the
content
we
publish
to
another
component_11
in
it
entirely
we
agree
to
coding_keyword_10
of
a
summary
and
a
connector_40
back
to
the
infoq
original

we
be
fine
with
you
coding_keyword_10
a
translation
into
korean
if
chris
be
also
fine
with
it
thanks
roxana
bacilacommunity
managerinfoq
requirement_1
development
communityinfoq
technology_40
|
infoq
china
|
infoq
japan
|
infoq
brazil
|
infoq
france
|
qcon
connector_data_18
back
to
top

tier
architecture
for
technology_42
by
saurav
karna
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
hi
chris
i
ought
to
create
an
component_1
and
i
choose
technology_42
over
component_22
technology_19
because
i
need
requirement_2
and
i
be
wonder
what
to
use
with
technology_42
single
tier
or
n
tier
it
s
a
quality_attribute_12
component_1
that
convert
connector_data_1
from
technology_27
to
technology_43
for
an
angular
ui
but
maybe
many
other
requirement_16
will
be

to
the
technology_24
in
the
future
i
be
relatively
here
so
any
suggestion
connector_data_18
back
to
top
ichinooksupervisor
by
zion
bokobza
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
first
thanks
chris
some
remark
i
have

can
you
please
supply
the
and
implementation
of
the
above

i
think
you
mean
to
use
ialbumrepository

you
can
connector_7
some
quality_attribute_21
to
the
component_3
in
deleteasync
coding_keyword_4
pattern_10
connector_data_10
bool
deleteasync
coding_keyword_5
coding_keyword_7
cancellationtoken
ct
=
default
cancellationtoken
{
var
toremove
=
_context
album
find
coding_keyword_7
if
toremove
==
coding_keyword_8
coding_keyword_3
fasle
_context
album
remove
toremove
await
_context
savechangesasync
ct
coding_keyword_3
true
}3
i
think
the
connector_7
connector_19
should
be
do
in
another
if
you
want
to
handle
transaction
maybe
you
want
to
do
some
connector_19
and
at
the
end
of
all
connector_19
you
should
connector_data_4
savechangesasync
zion
bokobza
connector_data_18
back
to
top
great
by
rajendra
verma
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
it
s
a
great

thanks
connector_data_18
back
to
top
one
question
by
syam
s
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
in
this
sample
all
the
pattern_6
be
part
of
single
project
otherwise
connector_data_1
pattern_6
wont
connector_1
reference
of
domain
component_6
so
you
be
prefer

pattern_6
in
single
project
connector_data_18
back
to
top
close
your
connector_data_18
quote
original
connector_data_17
allow
technology_41
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_14
to
any
of
my
connector_data_15
in
this
component_38
cancel
close
your
connector_data_18
allow
technology_41
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_14
to
any
of
my
connector_data_15
in
this
component_38
cancel
close
ok

development
how
to
prepare
for
the
unexpected
an
influxdata
outage
story
tell
at
kubeconeu

reproducible
development
with
container
green
development
terminology
and
climate
commitment
explain
by
at
devoxx
uk
architecture
&
design
oren
eini
on
technology_10
include
consistency
guarantee
and
technology_6
a
the
implementation
technology_11
kalix
build
serverless
requirement_9
requirement_11
requirement_12
crtical
component_13
with
no
component_3
architecting
for
the
edge
culture
&
how
connector_20
feedback
from
angry
component_21
help
to
develop
quality_attribute_9
technology_14
how
to
run
your
technology_14
department
a
coach
build
a
culture
of
quality_attribute_22
and
curiosity
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
release

technology_11
requirement_4
train
dataset
massive
requirement_4
for
developer
a
future
or
a
reality
devops
hashicorp
vault
improve
eventual
consistency
with
component_5
side
consistent
connector_data_12
cloudflare
d1
provide
quality_attribute_3
technology_31
for
cloudflare
component_37
effectively
pattern_13
your
pattern_13
miedwar
meshbesher
on
use
vigilance
control
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_37
out
every
tuesday
join
a
of
over


senior
developer
pattern_8
an
example
connector_1
a
quick
overview
of
content
publish
on
a
variety
of
innovator
and
early
adopter
technology_18
what
you
don’t
that
you
don’t
stay
up
to
date
with
the
late
connector_data_5
from
the
topic
you
be
interest
in
enter
your
e
mail
connector_38
select
your
country
select
a
country
i
to
infoq
technology_40
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
qcon
development
conference
real
world
technical
talk
no
technology_14
pitch
practical
idea
to
inspire
you
and
your
team
qcon
san
francisco
oct


in
person
qcon
san
francisco
bring
together
the
world
s
most
innovative
senior
engineer
across
multiple
domain
to
connector_41
their
real
world
implementation
of
emerge
trend
and
practice
uncover
emerge
trend
and
practice
to
solve
your
complex
engineering
challenge
without
the
technology_14
pitch
connector_7
your
spot
now
home
create
account
login
qcon
conference
contribute
infoq
editor
about
infoq
about
c4media

technology_44
infoq
developer
requirement_14
diversity
infoq
live


infoq
live


infoq
live


qcon
san
francisco



qcon
plus



follow
u
on
youtube212k
follower
linkedin18k
follower
rss19k
reader
twitter50k
follower
facebook20k

alexanew
stay
in
the
the
infoq
podcast
engineering
culture
podcast
the
architect
newsletter
general
feedback
feedback@infoq
technology_40
advertising
sales@infoq
technology_40
editorial
editors@infoq
technology_40
requirement_14
marketing@infoq
technology_40
infoq
technology_40
and
all
content
copyright
©


c4media
inc
infoq
technology_40
component_41
at
contegix
the
best
isp
we
ve
ever
work
with
privacy
notice
term
and
condition
requirement_17
bt
