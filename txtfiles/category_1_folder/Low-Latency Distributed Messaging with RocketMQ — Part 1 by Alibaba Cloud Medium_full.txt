low
quality_attribute_1
quality_attribute_2
pattern_1
with
rocketmq
—
part

|
by
alibaba
requirement_1
|
mediumget
unlimited
accessopen
in
apphomenotificationslistsstorieswritealibaba
cloudfollowmar

2018·8
min
readlow
quality_attribute_1
quality_attribute_2
pattern_1
with
rocketmq
—
part
1this
be
the
first
part
of
the
—
low
quality_attribute_1
quality_attribute_2
pattern_1
with
rocketmq
in
this

we
will
discus
about
the
history
of
the
alibaba
requirement_1
connector_data_1
component_1
family
we
will
talk
about
reduce
quality_attribute_1
a
well
a
the
advantage
and
disadvantage
of
use
component_2
pattern_2
we
will
then
talk
about
the
development
of
rocketmq
and
how
it
eliminate
quality_attribute_1
history
of
the
pattern_1
component_1
familyalibaba
requirement_1
connector_data_1
component_3
component_1
have
experience
three
generation
of
evolution
so
far
the
first
generation
feature
the
connector_1
mode
and
utilize
relational
component_4
for
connector_data_2
storage
connector_data_3
run
on
the
first
generation
of
alibaba
requirement_1
feature
very
low
quality_attribute_1
it
connector_2
wide
component_5
especially
for
alibaba
and
taobao’s
high
frequency
transaction
the
second
generation
also

a
connector_3
mode
bear
a
proprietary
connector_data_1
storage
component_6
develop
by
alibaba
requirement_1
it
quality_attribute_3
requirement_2
be
comparable
to
that
of
technology_1
however
give
taobao’s
component_5
scenario
especially
the
scenario
require
high
quality_attribute_4
such
a
transaction
chain
the
pattern_1
component_1
place
priority
on
quality_attribute_5
and
quality_attribute_4
rather
than
quality_attribute_3
the
real
time
requirement_2
of
connector_data_1
delivery
remain
superior
to
connector_1
mode
give
it
adoption
of
a
persistent
connector_4
connector_3
mode
after
the
first
two
generation
go
live
and
undergo
numerous
enhancement
for
many
year
the
team
at
alibaba
requirement_1
develop
the
high
requirement_2
and
low
quality_attribute_1
pattern_1
component_1
rocketmq
develop
in

it
be
primarily
base
on
the
amalgamation
of
the
connector_3
and
connector_1
mode
rocketmq
become
open_source
in

after

year
of
test
on
transaction
chain
of
alibaba’s
double
eleven
singles’
day
core
the
survive
and
thrive
alibaba
requirement_1
donate
rocketmq
to
the
technology_2
foundation
asf
ever
since
rocketmq’s
popularity
flourish
and
be
become
one
of
the
most
important
quality_attribute_2
pattern_1
component_1
within
the
technology_2

after
technology_3
and
technology_1
so
far
rocketmq
have
provide
laudable
component_7
for
thousand
of
component_8
within
the
alibaba
group
rocketmq
have
play
a
decisive
role
in
the
quality_attribute_5
of
the
group’s
incredible
mid
range
terabyte
quality_attribute_6
connector_data_1
flow
figure

the
quest
for
high
quality_attribute_7
and
low
latencyrelationship
between
quality_attribute_7
and
latencywith
the
perfection
of
the
technology_4
technology_5
ecology
and
improvement
to
jvm’s
requirement_2
technology_6
and
technology_7
be
no
long
the
only
choice
for
low
quality_attribute_1
scenario
a
such
this
section
mainly
describe
some
exploration
into
rocketmq’s
quality_attribute_7
and
low
quality_attribute_1
the
requirement_2
metric
for
an
component_5
tend
to
consider
the
quality_attribute_3
and
quality_attribute_1
quality_attribute_3
refer
to
the
number
of
connector_data_4
that
a
component_9
can
component_10
over
a
period
quality_attribute_1
be
the
end
to
end
response_timelow
quality_attribute_1
have
different
definition
under
different
circumstance
for
example
in
a
chat
component_5
we
can
define
low
quality_attribute_1
a
within
200ms
and
in
a
transaction
component_6
we
can
define
it
a
within
10ms
compare
with
quality_attribute_3
quality_attribute_1
be
susceptible
to
the
effect
of
numerous
factor
such
a
the
cpu
requirement_3
memory
and
operate
component_6
a
per
little’s
law
when
quality_attribute_1
become
too
high
the
connector_data_4
reside
in
the
quality_attribute_2
component_6
will
increase
sharply
render
some
technology_8
unavailable
the
state
of
unavailability
can
even
spread
to
other
technology_8
connector_data_5
in
the
loss
of
component_7
capacity
to
the
entire
component_6
connector_data_5
in
the
fault
term
an
avalanche
therefore
to
improve
the
quality_attribute_7
of
the
overall
quality_attribute_2
component_6
we
need
to
create
low
quality_attribute_1
applicationsways
of
explore
low
latencythe
big
role
of
rocketmq
a
a
pattern_1
component_1
be
pattern_3
decouple
allow
for
cut
down
peak
and
load
shift
quality_attribute_2
component_8
that
use
rocketmq
for
pattern_3
decouple
can
freely
quality_attribute_6
up
and
down
meanwhile
when
connector_data_2
peak
arrive
the
need
to
technology_9
a
large
quantity
of
connector_data_3
into
rocketmq
arise
and
the
backend
component_11
can
connector_5
the
connector_data_2
base
on
their
respective
consumption
rat
thus
it
be
imperative
to
ensure
low
quality_attribute_1
of
the
chain
in
which
rocketmq
connector_6
connector_data_1
in

tmall
launch
of
play
their
‘red
envelope’
game
for
singles’
day
the
game
be
very
sensitive
to
quality_attribute_1
and
could
only
tolerate
quality_attribute_1
of
within
50ms
during
the
initial
stage
of
the
load
test
there
be
massive
quality_attribute_1
of
50–500ms
when
rocketmq
connector_7
connector_data_1
connector_data_5
in
several
failure
during
the
peak
usage
of
the
red
envelope
game
extensively
affect
the
front
end
requirement_4
the
picture
below
be
the
thermodynamic
diagram
of
quality_attribute_1
of
red
envelope
cluster
connector_8
connector_data_3
during
load
test
figure

a
a
pattern_1
component_1
develop
in
pure
technology_4
technology_5
rocketmq’s
self
contain
memory
rely
on
component_2
pattern_2
to
accelerate
and
technology_9
this
mean
that
such
factor
a
technology_10
gc
kernel
linux
memory
requirement_5
mechanism
and
the
io
will
affect
it
requirement_2
a
show
below
the
risk
of
quality_attribute_1
exist
in
each
connector_9
from
connector_10
a
connector_data_1
from
the
component_12
to
the
final
persistence
on
a
disk
from
observation
of
online
connector_data_2
there
be
accidental
quality_attribute_1
of
second
in
rocketmq
connector_data_1
connector_8
chain
figure

technology_10
pausethe
technology_10
technology_4
virtual
component_13
produce
many
pause
during
operational
component_10
common
example
include
gc
jit
revokebias
and
redefineclasses
aop
gc
pause
have
the
big
influence
on
component_5
rocketmq
try
to
avoid
full
gc
but
the
pause
bring
about
by
minor
gc
be
inevitable
adjustment
and
optimization
to
gc
be
a
galilean
issue
it
take
a
lot
of
test
to
help
component_8
adjust
their
gc
parameter
adjustment
and
optimization
be
achievable
through
such
mean
a
adjust
the
technology_9
size
gc
time
and
optimize
the
connector_data_2
connector_data_6
for
other
technology_10
pause
the
component_6
can
output
technology_10
pause
time
to
the
gc
requirement_6
through
xx
+printgcapplicationstoppedtime
the
specific
reason
for
the
pause
be
output
through
xx
+printsafepointstatistics
xx
printsafepointstatisticscount=1
and
specific
optimization
be
perform
in
requirement_7
many
pause
of
revokebias
emerge
in
rocketmq
the
best
option
be
to
close
the
bias
lock
feature
through
xx
usebiasedlocking
additionally
the
output
of
the
gc
requirement_6
can
produce
a
io
and
sometimes
lead
to
unwanted
pause
it
be
possible
to
output
gc
requirement_6
to
tmpfs
memory
component_6
but
tmpfs
will
occupy
memory
to
avoid
memory
waste
you
can
roll
gc
requirement_6
with
xx
+usegclogfilerotation
despite
gc
requirement_6
produce
io
technology_10
will
output
some
statistical
connector_data_2
connector_data_7
by
the
jstat
command
to
the
directory
tmp
hsperfdata
you
can
close
the
feature
through
xx
+perfdisablesharedmem
and
technology_11
be
use
to
replace
the
jstat
lock
—
a
powerful
technology_12
for
synchronizationas
a
protection
mechanism
of
critical
zone
developer
widely
use
lock
in
the
development
of
multi
component_14
component_5
however
lock
be
a
double
edge
sword
excessive
or
incorrect
use
of
lock
diminish
the
requirement_2
of
multi
component_14
component_5
lock
in
technology_4
be
non
fair
lock
by
default
lock
do
not
consider
pattern_4
problem
and
hence
the
direct
attempt
to
obtain
lock
if
it
fail
pattern_4
start
automatically
non
fair
lock
will
cause
long
component_14
wait
time
and
high
quality_attribute_1
often
the
use
of
fair
lock
tend
to
connector_data_5
in
great
requirement_2
loss
to
component_5
on
the
other
hand
synchronization
will
lead
to
component_15
switch
which
bring
about
certain
expense
component_15
switch
be
often
at
a
level
of
microsecond
but
if
there
be
too
many
component_16
and
competitive
pressure
dozen
of
millisecond
level
expense
will
occur
we
can
use
locksupport
park
to
imitate
component_15
switch
for
test
to
avoid
quality_attribute_1
connector_data_5
from
lock
use
ca
primitive
to
unlock
rocketmq
kernel
chain
reduce
quality_attribute_1
and
significantly
improve
quality_attribute_3
high
memory
consumptionmemory
in
linux
mainly
include
anonymous
memory
and
component_2
pattern_2
with
limitation
of
linux
memory
come
into
play
high
quality_attribute_1
occur
when
component_8
connector_11
the
memory
linux
us
a
much
memory
a
possible
a
a
pattern_2
precisely
there
be
little
memory
quality_attribute_8
for
the
component_17
if
sufficient
memory
be
unavailable
component_8
connector_data_7
or
connector_12
memory
component_2
will
lead
to
memory
reclamation
the
backend
memory
will
enter
direct
reclaim
when
reclaim
at
quality_attribute_9
slow
than
that
of
memory
allocation
component_8
will
spin
up
and
wait
until
the
end
of
memory
reclamation
which
connector_data_8
in
huge
quality_attribute_1
a
show
below
figure

on
the
other
hand
the
kernel
will
also
reclaim
anonymous
memory
component_2
after
swap
out
of
the
anonymous
memory
component_2
the
next
connector_11
will
produce
a
io
connector_data_5
in
increase
quality_attribute_1
a
show
below
figure

the
quality_attribute_1
produce
in
the
two
requirement_7
be
avoidable
by
adjustment
and
optimization
to
the
kernel
parameter
vm
extra_free_kbytes
and
vm
swappiness
memory
requirement_5
be
by
linux
and
occur
in
component_2
4kb
for
each
component_2
quality_attribute_1
arise
when
connector_5
connector_7
competition
occur
within
the
memory
on
the
same
component_2
in
such
requirement_7
it
be
necessary
for
component_8
to
adjust
memory
connector_11
to
avoid
these
quality_attribute_1
component_2
pattern_2
—
advantage
and
disadvantagespage
pattern_2
be
pattern_2
use
to
accelerate
the
connector_13
and
connector_8
of

they
provide
more
powerful
technology_9
ability
for
rocketmq
rocketmq
connector_data_9
connector_data_2
to
the
memory
it
first
connector_6
in
component_2
pattern_2
during
the
connector_8
of
connector_data_1
and
make
connector_data_3
persistent
through
pattern_3
flush
to
disk
it
also
support
pattern_5
flush
to
disk
mode
one
can
connector_5
connector_data_3
directly
from
the
component_2
pattern_2
which
be
also
the
commonly
use
mode
of
quality_attribute_2
storage
technology_13
in
the
requirement_8
a
show
below
figure

in
most
requirement_7
the
connector_5
connector_7
quality_attribute_9
in
this
mode
be
prompt
however
when
the
operate
component_6
perform
a
writeback
of
dirty
component_2
memory
reclaim
and
memory
swap
in
and
out
large
connector_5
connector_7
quality_attribute_1
emerge
connector_data_5
in
an
accidental
high
quality_attribute_1
state
of
the
storage
component_1
in
connector_14
to
this
rocketmq
us
a
variety
of
optimization
technique
such
a
memory
pre
distribution
preheat
mlock
component_6
connector_data_10
and
connector_5
connector_7
split
to
ensure
the
elimination
of
the
quality_attribute_1
connector_data_5
from
component_2
pattern_2
while
utilize
their
advantage
optimization
resultsthrough
optimization
of
the
above
requirement_7
rocketmq
eliminate
high
quality_attribute_1
while
connector_8
connector_data_1
and
have
go
through
singles’
day
for
test
below
be
the
dynamic
diagram
of
connector_data_1
connector_8
duration
after
optimization

995%
of
quality_attribute_1
rat
from
the
optimize
rocketmq’s
connector_data_1
connector_8
be
within
1ms
and
100%
within
100ms
a
show
below
figure

summarylatency
be
a
crucial
aspect
when
it
come
to
it
and
requirement_9
there
be
several
way
of
explore
the
factor
that
cause
low
quality_attribute_1
rocketmq
be
an
ideal
technology_12
to
eliminate
high
quality_attribute_1
while
connector_8
connector_data_1
in
the
second
part
of
this

we
will
be
discuss
the
key
to
ensure
capacity
along
with
the
highly
quality_attribute_8
architecture
of
rocketmq
reference
technology_14
www
alibabacloud
technology_15

low
quality_attribute_1
quality_attribute_2
connector_data_1
with
rocketmq
%e2%80%93
part
1_p552987
spm=a2c41



more
from
alibaba
cloudfollowfollow
me
to
keep
abreast
with
the
late
technology_16
news
requirement_8
insight
and
developer
trend
alibaba
requirement_1

technology_14
www
alibabacloud
comlove
podcast
or
audiobooks
on
the
go
with
our
component_18
try
knowablerecommended
from
mediumtulusibrahiminjavascript
in
plain
englishfrontend
tip
to
help
you
fasterjeremias
rößlerinhackernoon
comassertions
consider
harmfulalibaba
cloudcreating
an
alibaba
requirement_1
container
component_7
component_5
with
technology_17
swarmsergey
vasilievpvs
studio
for
jetbrains
clion
astra
per
asperanikesh
balamireflecting
on
the
journey
and
bid
farewell
to
for
nepal
communityraigon
jollycheat

gcloud
bq
gsutil
kubectl
for
requirement_1
associate
certificateappaloosa
storeinappaloosa
component_19
engineeringembracing
component_20
on
androidalibaba
cloud6
best
practice
for
quality_attribute_10
an
component_5
on
alibaba
requirement_1
part

abouthelptermsprivacyget
the
appget
startedalibaba
cloud4
6k
followersfollow
me
to
keep
abreast
with
the
late
technology_16
news
requirement_8
insight
and
developer
trend
alibaba
requirement_1

technology_14
www
alibabacloud
comfollowmore
from
mediumknoldus
inc
use
pug
template
for
build
technology_8
applicationsjasbir
singhsmt
pattern_6
with
technology_1
connectnazelin
özalparchitecture
technology_18
best
practice
installation
cluster
multi
dc
with
ansiblenitin
guptalearn
grpc

minute
readhelpstatuswritersblogcareersprivacytermsaboutknowable
