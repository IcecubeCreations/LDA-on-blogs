a
pattern_1
technology_1
for
pattern_2
pattern_3
architecture
support
by
kong
pattern_1

presentation
resource
adoptnew
refactoringnew
testingnew
other
technology_1
about
a
pattern_1
technology_1
for
pattern_2
the
beginning
of
a
pattern_1
technology_1
for
pattern_3
architecture
点击这里，访问本系列文章的中文翻译
click
here
for
chinese
translation
of
the
pattern_1
click
here
for
pdf
component_1
architecture
pattern_1
which
architecture
should
you
choose
for
an
component_1
monolithic
architecture
architect
an
component_1
a
a
single
quality_attribute_1
unit
pattern_3
architecture
architect
an
component_1
a
a
collection
of
loosely
couple
component_2
decomposition
how
to
decompose
an
component_1
into
component_3
decompose
by
requirement_1
capability
define
component_2
correspond
to
requirement_1
capability
decompose
by
subdomain
define
component_2
correspond
to
ddd
subdomains
self
contain
component_3
design
component_2
to
handle
pattern_4
connector_data_1
without
wait
for
other
component_2
to
respondnew
component_3
per
teamnew
refactoring
to
microservicesnew
strangler
component_1
anti
corruption
pattern_5
connector_data_2
requirement_2
how
to
maintain
connector_data_2
consistency
and
connector_1
query
component_4
per
component_3
each
component_3
have
it
own
private
component_4
connector_2
component_4
component_2
connector_3
a
component_4
saga
use
saga
which
a
sequence
of
local
transaction
to
maintain
connector_data_2
consistency
across
component_2
component_5
composition
connector_1
connector_4
by
invoke
the
component_2
that
own
the
connector_data_2
and
perform
an
in
memory
join
cqrs
connector_1
connector_4
by
maintain
one
or
more
materialize
pattern_6
that
can
be
efficiently
query
domain
publish
an
whenever
connector_data_2
connector_5
component_6
persist
aggregate
a
a
sequence
of
pattern_7
pattern_8
how
to
publish
connector_data_3
a
part
of
a
component_4
transaction
pattern_7
outbox
transaction
requirement_3
tail
pattern_9
pattern_10
test
how
to
make
test
easy
component_7
drive
contract
test
a
test
suite
for
a
component_3
that
be
connector_6
by
the
developer
of
another
component_3
that
connector_7
it
component_7
side
contract
test
a
test
suite
for
a
component_3
component_8
e
g
another
component_3
that
verify
that
it
can
connector_8
with
the
component_3
component_3
component_9
sest
a
test
suite
that
test
a
component_3
in
isolation
use
test
double
for
any
component_2
that
it
invoke
deployment
pattern_1
how
to
quality_attribute_2
an
application’s
component_3
multiple
component_3
instance
per
component_10
quality_attribute_2
multiple
component_3
instance
on
a
single
component_10
component_3
instance
per
component_10
quality_attribute_2
each
component_3
instance
in
it
own
component_10
component_3
instance
per
vm
quality_attribute_2
each
component_3
instance
in
it
vm
component_3
instance
per
container
quality_attribute_2
each
component_3
instance
in
it
container
serverless
deployment
quality_attribute_2
a
component_3
use
serverless
deployment
component_11
component_3
deployment
component_11
quality_attribute_2
component_2
use
a
highly
automate
deployment
component_11
that
provide
a
component_3
abstraction
cross
cut
concern
how
to
handle
cross
cut
concern
pattern_3
chassis
a
technology_2
that
handle
cross
cut
concern
and
simplify
the
development
of
component_2
externalize
configuration
externalize
all
configuration
such
a
component_4
location
and
credential
component_3
template
a
template
that
connector_9
technology_3
cross
cut
concern
and
be
intend
to
be
copy
by
a
developer
in
order
to
quickly
start
develop
a
component_3
connector_10
pattern_1
style
which
connector_10
mechanism
do
component_2
use
to
connector_8
with
each
other
and
their
external
component_8
remote
invocation
use
an
rpi
base
technology_4
for
inter
component_3
connector_10
pattern_8
use
pattern_11
pattern_8
for
inter
component_3
connector_10
domain
specific
technology_4
use
a
domain
specific
technology_4
idempotent
component_7
ensure
that
connector_data_4
component_12
can
cope
with
be
invoke
multiple
time
with
the
same
connector_data_4
external
component_5
how
do
external
component_13
connector_8
with
the
component_3
component_5
gateway
a
component_3
that
provide
each
component_8
with
unify
to
component_2
backend
for
front
end
a
separate
component_5
gateway
for
each
kind
of
component_8
component_3
discovery
how
do
the
component_8
of
an
rpi
base
component_3
discover
the
requirement_4
location
of
a
component_3
instance
component_8
side
discovery
component_8
connector_4
a
component_3
registry
to
discover
the
location
of
component_3
instance
component_14
side
discovery
pattern_12
connector_4
a
component_3
registry
to
discover
the
location
of
component_3
instance
component_3
registry
a
component_4
of
component_3
instance
location
self
registration
component_3
instance
register
itself
with
the
component_3
registry
3rd
party
registration
a
3rd
party
register
a
component_3
instance
with
the
component_3
registry
quality_attribute_3
how
to
prevent
a
requirement_4
or
component_3
failure
from
cascade
to
other
component_3
circuit
breaker
invoke
a
remote
component_3
via
a
pattern_13
that
fail
immediately
when
the
failure
rate
of
the
remote
connector_data_5
exceed
a
threshold
quality_attribute_4
how
to
connector_8
the
identity
of
the
requestor
to
the
component_2
that
handle
the
connector_data_6
connector_11
connector_data_7
a
connector_data_7
that
securely
connector_12
connector_data_8
about
component_15
that
be
exchange
between
component_2
observability
how
to
understand
the
behavior
of
an
component_1
and
troubleshoot
problem
requirement_3
aggregation
aggregate
component_1
requirement_3
component_1
metric
instrument
a
service’s
to
gather
statistic
about
audit
requirement_3
component_16
component_15
activity
in
a
component_4
quality_attribute_5
trace
instrument
component_2
with
that
assign
each
external
connector_data_6
an
unique
identifier
that
be
pass
between
component_3
component_16
connector_data_8
e
g
start
time
end
time
about
the
work
e
g
component_3
connector_data_6
perform
when
handle
the
external
connector_data_6
in
a
centralized
component_3
exception
track
report
all
exception
to
a
centralized
exception
track
component_3
that
aggregate
and
track
exception
and
connector_13
developer
health
connector_14
component_5
component_3
component_5
e
g
technology_5

that

the
health
of
the
component_3
and
be
intend
to
be
pattern_14
for
example
by
a
pattern_15
component_3
requirement_3
deployment
and
connector_5
ui
pattern_1
how
to
connector_1
a
ui
screen
or
component_17
that
display
connector_data_2
from
multiple
component_3
component_14
side
component_17
fragment
composition
build
a
webpage
on
the
component_14
by
compose
technology_6
fragment
generate
by
multiple
requirement_1
capability
subdomain
specific
web
component_18
component_8
side
ui
composition
build
a
ui
on
the
component_8
by
compose
ui
fragment
render
by
multiple
requirement_1
capability
subdomain
specific
ui
component_19
about
pattern_2
io
pattern_2
io
be
bring
to
you
by
chris
richardson
experience
architect
author
of
pojos
in
action
the
creator
of
the
original
technology_7
technology_8
and
the
author
of
pattern_2
pattern_1
chris
help
component_13
around
the
world
adopt
the
pattern_3
architecture
through
consult
engagement
and
train
and
workshop
workshop
in
australia
apac
timezone
in

i’ll
be
teaching
a
pattern_2
workshopover
zoom
in
an
apac
friendly
gmt+9
timezone
how
to
create
a
component_3
template
and
pattern_3
chassis
take
a
look
at
my
man
liveproject
that
teach
you
how
to
develop
a
component_3
template
and
pattern_3
chassis
virtual
bootcamp
quality_attribute_5
connector_data_2
pattern_1
in
a
pattern_3
architecture
my
virtual
bootcamp
quality_attribute_5
connector_data_2
pattern_1
in
a
pattern_3
architecture
be
now
open
for
enrollment
it
cover
the
key
quality_attribute_5
connector_data_2
requirement_2
pattern_1
include
saga
component_5
composition
and
cqrs
it
consist
of
video
lecture
lab
and
a
weekly
ask
me
anything
video
conference
repeat
in
multiple
timezones
the
regular
requirement_5
be
$395
person
but
use
coupon
yxeerwtj
to
sign
up
for
$195
valid
until
26th

there
be
deep
discount
for
buy
multiple
seat
more
signup
for
the
newsletterfor
requirement_6
you
can
trust
about
pattern_2
chris
offer
numerous
resource
for

the
pattern_3
architecture
train
chris
teach
comprehensive
workshop
train
and
bootcamps
for
executive
architect
and
developer
to
help
your
organization
use
pattern_2
effectively
avoid
the
pitfall
of
adopt
pattern_2
and
essential
topic
such
a
component_3
decomposition
and
design
and
how
to
refactor
a
monolith
to
pattern_2
connector_15
in
person
and
remotely
connector_16
the
book
pattern_2
pattern_1
connector_17
chris
richardson
s
book
example
pattern_2
component_18
want
to
see
an
example
connector_14
out
chris
richardson
s
example
component_1
see
build
pattern_2
ready
to
start
use
the
pattern_3
architecture
consult
component_2
engage
chris
to
create
a
pattern_2
adoption
roadmap
and
help
you
define
your
pattern_3
architecture
the
eventuate
component_11
use
the
eventuate
io
component_11
to
tackle
quality_attribute_5
connector_data_2
requirement_2
challenge
in
your
pattern_2
architecture
eventuate
be
chris
s
late
startup
it
make
it
easy
to
use
the
saga
pattern_1
to
manage
transaction
and
the
cqrs
pattern_1
to
connector_1
query
ass
your
architecture
ass
your
component_1
s
pattern_3
architecture
and
identify
what
need
to
be
improve
consult
component_2
engage
chris
to
conduct
an
architectural
assessment
self
assessment
alternatively
conduct
a
self
assessment
use
the
pattern_2
assessment
component_11
join
the
pattern_2
group
the
pattern_1
how
to
apply
the
pattern_1
component_1
architecture
pattern_1
monolithic
architecture
pattern_3
architecture
decomposition
decompose
by
requirement_1
capability
decompose
by
subdomain
self
contain
servicenew
component_3
per
teamnew
refactoring
to
microservicesnew
strangler
component_1
anti
corruption
pattern_5
connector_data_2
requirement_2
component_4
per
component_3
connector_2
component_4
saga
component_5
composition
cqrs
domain
component_6
pattern_7
pattern_8
pattern_7
outbox
transaction
requirement_3
tail
pattern_9
pattern_10
test
component_3
component_9
test
component_7
drive
contract
test
component_7
side
contract
test
deployment
pattern_1
multiple
component_3
instance
per
component_10
component_3
instance
per
component_10
component_3
instance
per
vm
component_3
instance
per
container
serverless
deployment
component_3
deployment
component_11
cross
cut
concern
pattern_3
chassis
component_3
template
externalize
configuration
connector_10
style
remote
invocation
pattern_8
domain
specific
technology_4
idempotent
component_7
external
component_5
component_5
gateway
backend
for
front
end
component_3
discovery
component_8
side
discovery
component_14
side
discovery
component_3
registry
self
registration
3rd
party
registration
quality_attribute_3
circuit
breaker
quality_attribute_4
connector_11
connector_data_7
observability
requirement_3
aggregation
component_1
metric
audit
requirement_3
quality_attribute_5
trace
exception
track
health
connector_14
component_5
requirement_3
deployment
and
connector_5
ui
pattern_1
component_14
side
component_17
fragment
composition
component_8
side
ui
composition
tweet
follow
@microsvcarch
copyright
©

chris
richardson
•
all
right
reserve
•
support
by
kong
please
enable
technology_9
to
pattern_6
the

powered
by
disqus
