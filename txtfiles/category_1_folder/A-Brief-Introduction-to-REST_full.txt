a
brief
introduction
to
pattern_1
bt
live
webinar
and
q&a
connector_1
technology_1
on
technology_2
technology_3
for
real
time
component_1
live
webinar
26th

register
now
close
toggle
navigation
facilitate
the
technology_4
of
knowledge
and
innovation
in
professional
development
english
edition
english
edition
chinese
edition
japanese
edition
french
edition
contribute
search
sign
up
login
password
forget
password
infoq
account
back
to
login
resend
activation
back
to
login
login
with
twitter

t
have
an
infoq
account
sign
up
notifications1
login
to
unlock
infoq
s
feature
stay
up
to
date
and
connector_2
connector_3
your
favorite
content
follow
your
favorite
editor
and
peer
sign
up
login

t
have
an
account
register
here
logo
back
to
homepage



apr
unique
visitor
news

presentation
podcast
guide
topic
development
technology_5
technology_6
technology_7
technology_8
technology_9
go
technology_10
technology_11
feature
in
development
reproducible
development
with
container
avdi
grimm
describe
the
future
of
development
which
be
already
here
connector_2
a
tour
of
a
devcontainer
and
contrast
it
with
a
deployment
container
all
in
development
architecture
&
design
architecture
requirement_1
architecture
quality_attribute_1
requirement_2
design
requirement_3
study
pattern_2
component_2
mesh
pattern_3
quality_attribute_2
feature
in
architecture
&
design
oren
eini
on
technology_12
include
consistency
guarantee
and
technology_8
a
the
implementation
technology_13
wesley
reisz
talk
to
oren
eini
about
the
history
of
technology_12
technology_12
be
a
fully
pattern_4
technology_14
document
component_3
that
connector_4
both
cp
and
ap
guarantee
at
different
time
the
two
discus
those
cp
ap
quality_attribute_3
component_4
challenge
the
choice
of
implementation
technology_13
technology_15
and
the
current
plan
for
technology_12


which
include
a
component_5
side
sharding
implementation
all
in
architecture
design
requirement_4
ml
&
connector_data_1
engineering
requirement_5
requirement_6
technology_14
component_3
connector_data_1
requirement_7
connector_1
feature
in
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
katharine
jarmul
discus
utilize
quality_attribute_3
connector_data_1
science
and
requirement_6
component_6
such
a
federate

to
from
connector_data_1
at
the
edge
all
in
requirement_4
ml
connector_data_1
eng
culture
&
agile
diversity
leadership
lean
kanban
personal
growth
scrum
sociocracy
craftmanship
team
collaboration
test
ux
feature
in
culture
&
how
to
run
your
technology_16
department
a
coach
have
find
what
i
think
be
my
connector_5
a
an
agile
coach
i
take
the
tough
decision
to
move
sideways
into
technology_16
requirement_8
in
the
hope
of
use
what
i’d

to
one
day
run
my
own
department
i
believe
that
come
from
coach
would
allow
me
to
see
thing
others
could
not
and
create
something
special
time
will
tell
if
i
have
succeed
this
be
the
story
of
where
i
be
up
to
so
far
all
in
culture

devops
infrastructure
continuous
delivery
automation
container
requirement_9
observability
feature
in
devops
panel
quality_attribute_4
component_4
the
panelist
discus
the
quality_attribute_2
for
the
supply
chain
and
quality_attribute_2
risk
measurement
all
in
devops
eventsnew
helpful
connector_6
about
infoq
infoq
editor
contribute
about
c4media
diversity
choose
your
technology_13
en
中文
日本
fr
infoq
live
how
requirement_9
architecture
achieve
cost
connector_7
improve
quality_attribute_5
&
connector_8
requirement_10
register
now
infoq
live
how
to
migrate
an
component_7
to
serverless
and
what
be
the
common
mistake
to
avoid
register
now
qcon
san
francisco
understand
the
emerge
trend
you
should
pay
attention
to
attend
in
person
on
oct



infoq
homepage

a
brief
introduction
to
pattern_1
architecture
&
design
connector_1
technology_1
on
technology_2
technology_3
for
real
time
component_1
live
webinar
26th

connector_7
your
seat
a
brief
introduction
to
pattern_1
leia
em
português
this
item
in
japanese
lira
ce
contenu
en
français
bookmark
dec



min
connector_9
by
stefan
tilkov
connector_10
for
infoq
join
a
of
expert
increase
your
visibility
grow
your
career

more
you
or
not
be
aware
that
there
be
debate
go
on
about
the
“right”
way
to
connector_11
heterogeneous
component_7
to
component_7
connector_12
while
the
current
mainstream
clearly
focus
on
web
component_8
base
on
technology_17
technology_18
and
the
w
*
specification
universe
a
small
but
very
vocal
minority
claim
there’s
a
quality_attribute_6
way
rest
short
for
representational
state
transfer
in
this

i
will
try
to
provide
a
pragmatic
introduction
to
pattern_1
and
pattern_5
technology_19
component_7
requirement_11
without
digress
into
this
debate
i
will
go
into
more
detail
while
explain
those
aspect
that
in
my
experience
cause
the
most
discussion
when
someone
be
connector_13
to
this
approach
for
the
first
time
key
pattern_1
principle
most
introduction
to
pattern_1
start
with
the
formal
definition
and
background
i’ll
defer
this
for
a
while
and
provide
a
simplify
pragmatic
definition
pattern_1
be
a
set
of
principle
that
define
how
web
technology_20
such
a
technology_19
and
uris
be
suppose
to
be
use
which
often
differ
quite
a
bit
from
what
many
people
actually
do
the
promise
be
that
if
you
adhere
to
pattern_1
principle
while
design
your
component_7
you
will
end
up
with
a
component_9
that
exploit
the
web’s
architecture
to
your
benefit
in
summary
the
five
key
principle
be
give
every
“thing”
an
connector_14
thing
together
use
technology_20
resource
with
multiple
representation
connector_15
statelessly
let’s
take
a
close
look
at
each
of
these
principle
give
every
“thing”
an
relate
sponsor
content
relate
sponsor
protect
identity
quality_attribute_4
digital
component_2
enable
quality_attribute_7
and
quality_attribute_4
component_10
connector_16
to
web
and
requirement_12
component_7
start
free
trial
i’m
use
the
term
“thing”
here
instead
of
the
formally
correct
“resource”
because
this
be
such
a
quality_attribute_8
principle
that
it
shouldn’t
be
hide
behind
terminology
if
you
think
about
the
component_4
that
people
build
there
be
usually
a
set
of
key
abstraction
that
merit
be
identify
everything
that
should
be
identifiable
should
obviously
connector_2
an
—
on
the
web
there
be
a
unify
concept
for

the
uri
uris
make
up
a
global
namespace
and
use
uris
to
identify
your
key
resource
mean
they
connector_2
a
unique
global

the
benefit
of
a
consistent
name
technology_21
for
thing
be
that
you
don’t
have
to
come
up
with
your
own
technology_21
—
you
can
rely
on
one
that
have
already
be
define
work
pretty
well
on
global
quality_attribute_9
and
be
understand
by
practically
anybody
if
you
consider
an
arbitrary
high
level
connector_data_2
within
the
last
component_7
you
build
assume
it
wasn’t
build
in
a
pattern_5
way
it
be
quite
likely
that
there
be
many
use
requirement_3
where
you
would
have
profit
from
this
if
your
component_7
include
a
requirement_13
abstraction
for
instance
i’m
reasonably
sure
that
component_11
would
have

to
be
able
to
connector_17
a
connector_14
to
a
specific
requirement_13
via
to
a
co
component_12
create
a
bookmark
for
it
in
their
browser
or
even
connector_10
it
down
on
a
piece
of
paper
to
drive
home
this
point
imagine
what
an
awfully
horrid
requirement_14
decision
it
would
be
if
an
online
component_13
such
a

technology_22
do
not
identify
every
one
of
it
technology_16
with
a
unique
a
uri
when
confront
with
this
idea
many
people
wonder
whether
this
mean
they
should
connector_18
their
component_3
entry
or
their

directly
—
and
be
often
appal
by
the
mere
idea
since
year
of
connector_data_2
orient
practice
have
tell
u
to
hide
the
persistence
aspect
a
an
implementation
detail
but
this
be
not
a
conflict
at
all
usually
the
thing
—
the
resource
—
that
merit
be
identify
with
a
uri
be
far
more
abstract
than
a
component_3
entry
for
example
an
order
resource
might
be
compose
of
order
item
an
connector_19
and
many
other
aspect
that
you
might
not
want
to
connector_18
a
individually
identifiable
resource
take
the
idea
of
identify
everything
that
be
worth
be
identify
further
lead
to
the
creation
of
resource
that
you
usually
don’t
see
in
a
typical
component_7
design
a
component_1
or
component_1
step
a
sale
a
negotiation
a
connector_data_3
for
a
quote
—
these
be
all
example
of
“things”
that
merit
identification
this
in
turn
can
lead
to
the
creation
of
more
persistent
component_14
than
in
a
non
restful
design
here
be
some
example
of
uris
you
might
come
up
with
technology_19
example
technology_22
requirement_13

technology_19
example
technology_22
order



technology_19
example
technology_22
technology_16

technology_19
example
technology_22
component_1
salary
increase

a
i’ve
chosen
to
create
human
readable
uris
—
a
useful
concept
even
though
it’s
not
a
pre
requisite
for
a
pattern_5
design
—
it
should
be
quite
easy
to
guess
their
mean
they
obviously
identify
individual
“items”
but
take
a
look
at
these
technology_19
example
technology_22
order


technology_19
example
technology_22
technology_16
color=green
at
first
these
appear
to
be
something
different
—
after
all
they
be
not
identify
a
thing
but
a
collection
of
thing
assume
the
first
uri
identify
all
order
submit
in

and
the
second
one
the
set
of
green
technology_16
but
these
collection
be
actually
thing
—
resource
—
themselves
and
they
definitely
merit
identification
note
that
the
benefit
of
have
a
single
globally
unify
name
technology_21
apply
both
to
the
usage
of
the
web
in
your
browser
and
to
component_15
to
component_15
connector_12
to
summarize
the
first
principle
use
uris
to
identify
everything
that
merit
be
identifiable
specifically
all
of
the
“high
level”
resource
that
your
component_7
provide
whether
they
represent
individual
item
collection
of
item
virtual
and
physical
connector_data_2
or
computation
connector_data_4
connector_14
thing
together
the
next
principle
we’re
go
to
look
at
have
a
formal
description
that
be
a
little
intimidate
“hypermedia
a
the
component_16
of
component_7
state”
sometimes
abbreviate
a
hateoas
seriously
—
i’m
not
make
this
up
at
it
core
be
the
concept
of
hypermedia
or
in
other
word
the
idea
of
connector_14
connector_6
be
something
we’re
all
familiar
with
from
technology_23
but
they
be
in
no
way
restrict
to
human
consumption
consider
the
follow
make
up
connector_data_5
fragment
order
self=
technology_19
example
technology_22
requirement_13

amount

amount
technology_16
ref=
technology_19
example
technology_22
technology_16

requirement_13
ref=
technology_19
example
technology_22
requirement_13

order
if
you
look
at
the
technology_16
and
requirement_13
connector_6
in
this
document
you
can
easily
imagine
how
an
component_7
that
have
connector_20
it
can
“follow”
the
connector_6
to
connector_20
more
connector_data_6
of

this
would
be
the
requirement_3
if
there
be
a
quality_attribute_8
“id”
attribute
adhere
to
some
component_7
specific
name
technology_21
too
—
but
only
within
the
application’s
component_17
the
beauty
of
the
connector_14
approach
use
uris
be
that
the
connector_6
can
point
to
resource
that
be
provide
by
a
different
component_7
a
different
component_5
or
even
a
different
requirement_15
on
another
continent
—
because
the
name
technology_21
be
a
global
technology_20
all
of
the
resource
that
make
up
the
web
can
be
connector_14
to
each
other
there
be
an
even
more
important
aspect
to
the
hypermedia
principle
—
the
“state”
part
of
the
component_7
in
short
the
fact
that
the
component_5
or
component_2
technology_24
if
you
prefer
provide
a
set
of
connector_6
to
the
component_18
the
component_2
component_19
enable
the
component_18
to
move
the
component_7
from
one
state
to
the
next
by
follow
a
connector_14
we
will
look
at
the
effect
of
this
aspect
in
another
soon
for
the
moment
keep
in
mind
that
connector_6
be
an
extremely
useful
way
to
make
an
component_7
dynamic
to
summarize
this
principle
use
connector_6
to
refer
to
identifiable
thing
resource
wherever
possible
hyperlinking
be
what
make
the
web
the
web
use
technology_20
there
be
an
implicit
assumption
in
the
discussion
of
the
first
two
principle
that
the
connector_21
component_7
can
actually
do
something
meaningful
with
the
uris
if
you
see
a
uri
connector_10
on
the
side
of
a
bus
you
can
enter
it
into
your
browser’s
connector_19
and
hit
—
but
how
do
your
browser
what
to
do
with
the
uri
it

what
to
do
with
it
because
every
resource
support
the
same

the
same
set
of
or

if
you
prefer
technology_19
connector_data_7
these
verb
and
in
addition
to
the
two
everyone

connector_2
and

the
set
of
technology_20
include
put
delete
head
and
option
the
mean
of
these
be
define
in
the
technology_19
specification
along
with
some
guarantee
about
their
behavior
if
you
be
an
oo
developer
you
can
imagine
that
every
resource
in
a
pattern_5
technology_19
scenario
extend
a
this
in
some
technology_5
technology_15
style
pseudo
syntax
and
concentrate
on
the
key

resource
{
resource
uri
u
connector_22
connector_2
connector_22

connector_data_3
r
connector_22
put
connector_data_3
r
connector_22
delete
}
because
the
same
be
use
for
every
resource
you
can
rely
on
be
able
to
connector_20
a
representation
—
i
e
some
render
of
it
—
use
connector_2
because
get’s
semantics
be
define
in
the
specification
you
can
be
sure
that
you
have
no
obligation
when
you
connector_data_8
it
—
this
be
why
the
be
connector_23
“safe”
connector_2
support
very
quality_attribute_10
and
sophisticate
pattern_6
so
in
many
requirement_3
you
don’t
even
have
to
connector_17
a
connector_data_3
to
the
component_5
you
can
also
be
sure
that
a
connector_2
be
idempotent
—
if
you
issue
a
connector_2
connector_data_3
and
don’t
connector_2
a
connector_data_4
you
might
not
whether
your
connector_data_3
never
reach
it
destination
or
the
connector_22
connector_2
lose
on
it
way
back
to
you
the
idempotence
guarantee
mean
you
can
simply
issue
the
connector_data_3
again
idempotence
be
also
guarantee
for
put
which
basically
mean
“update
this
resource
with
this
connector_data_1
or
create
it
at
this
uri
if
it’s
not
there
already”
and
for
delete
which
you
can
simply
try
again
and
again
until
you
connector_2
a
connector_data_4
—
delete
something
that’s
not
there
be
not
a
problem

which
usually
mean
“create
a
resource”
can
also
be
use
to
invoke
arbitrary
component_1
and
thus
be
neither
quality_attribute_11
nor
idempotent
if
you
connector_18
your
application’s
requirement_16
or
service’s
requirement_16
if
you
prefer
in
a
pattern_5
way
this
principle
and
it
restriction
apply
to
you
a
well
this
be
hard
to
connector_24
if
you’re
use
to
a
different
design
approach
—
after
all
you’re
quite
likely
convinced
that
your
component_7
have
much
more
component_20
than
what
be
expressible
with
a
handful

me
spend
some
time
try
to
convince
you
that
this
be
not
the
requirement_3
consider
the
follow
example
of
a
quality_attribute_8
procurement
scenario
you
can
see
that
there
be
two
component_8
define
here
without
imply
any
particular
implementation
technology_25
the
to
these
component_8
be
specific
to
the
connector_data_9
—
it’s
an
ordermanagement
and
customermanagement
component_2
we
be
talk
about
if
a
component_18
want
to
connector_25
these
component_2
it
need
to
be
cod
against
this
particular
—
there
be
no
way
to
use
a
component_18
that
be
build
before
these
be
specify
to
meaningfully
connector_26
with
them
the
define
the
services’
component_7
technology_26
in
a
pattern_5
technology_19
approach
you
would
have
to
connector_2
by
with
the
generic
that
make
up
the
technology_19
component_7
technology_26
you
might
come
up
with
something
this
you
can
see
that
what
have
be
specific
of
a
component_2
have
be
connector_data_10
to
the
technology_20
technology_19
—
and
to
disambiguate
i
have
create
a
whole
universe
of
resource
“that’s
cheat
”
i
hear
you
cry
no
it’s
not
a
connector_2
on
a
uri
that
identify
a
requirement_13
be
a
meaningful
a
a
getcustomerdetails

some
people
have
use
a
triangle
to
visualize
this
imagine
the
three
vertex
a
knob
that
you
can
turn
you
can
see
that
in
the
first
approach
you
have
many
and
many
kind
of
connector_data_1
and
a
fix
number
of
“instances”
essentially
a
many
a
you
have
component_2
in
the
second
you
have
a
fix
number
of

many
kind
of
connector_data_1
and
many
connector_data_11
to
invoke
those
fix
upon
the
point
of
this
be
to
illustrate
that
you
can
basically
express
anything
you
with
both
approach
why
be
this
important
essentially
it
make
your
component_7
part
of
the
web
—
it
contribution
to
what
have
turn
the
web
into
the
most
successful
component_7
of
the
internet
be
proportional
to
the
number
of
resource
it

to
it
in
a
pattern_5
approach
an
component_7
might
a
few
million
requirement_13
uris
to
the
web
if
it’s
design
the
same
way
component_21
have
be
design
in
technology_27
time
it
contribution
usually
be
a
single
“endpoint”
—
comparable
to
a
very
small
door
that
provide
entry
to
a
universe
of
resource
only
for
those
who
have
the
key
the
uniform
also
enable
every
component_22
that
understand
the
technology_19
component_7
technology_26
to
connector_26
with
your
component_7
example
of
component_23
that
benefit
from
this
be
generic
component_24
such
a
curl
and
technology_28
pattern_7
pattern_6
technology_19
component_5
gateway
even

yahoo
msn
and
many
more
to
summarize
for
component_24
to
be
able
to
connector_26
with
your
resource
they
should
connector_11
the
default
component_7
technology_26
technology_19
correctly
i
e
make
use
of
the
technology_20
connector_2
put

delete
resource
with
multiple
representation
we’ve
ignore
a
slight
complication
so
far
how
do
a
component_18
how
to
deal
with
the
connector_data_1
it
connector_20
e
g
a
a
connector_data_4
of
a
connector_2
or
connector_data_3
the
approach
take
by
technology_19
be
to
allow
for
a
separation
of
concern
between
handle
the
connector_data_1
and
invoke

in
other
word
a
component_18
that

how
to
handle
a
particular
connector_data_1
technology_29
can
connector_26
with
all
resource
that
can
provide
a
representation
in
this
technology_29
let’s
illustrate
this
with
an
example
again
use
technology_19
content
negotiation
a
component_18
can
ask
for
a
representation
in
a
particular
technology_29
connector_2
requirement_13

technology_19


component_25
example
technology_22
connector_24
component_7
vnd
mycompany
customer+xml
the
connector_data_4
might
be
some
requirement_15
specific
connector_data_5
technology_29
that
represent
requirement_13
connector_data_6
if
the
component_18
connector_27
a
different
connector_data_3
e
g
one
this
connector_2
requirement_13

technology_19


component_25
example
technology_22
connector_24
text
x
vcard
the
connector_data_4
could
be
the
requirement_13
connector_19
in
vcard
technology_29
i
have
not
show
the
connector_22
which
would
contain
metadata
about
the
type
of
connector_data_1
in
the
technology_19
content
type

this
illustrate
why
ideally
the
representation
of
a
resource
should
be
in
technology_20
technology_29
—
if
a
component_18
“knows”
both
the
technology_19
component_7
technology_26
and
a
set
of
connector_data_1
technology_29
it
can
connector_26
with
any
pattern_5
technology_19
component_7
in
the
world
in
a
very
meaningful
way
unfortunately
we
don’t
have
technology_20
technology_29
for
everything
but
you
can
probably
imagine
how
one
could
create
a
small
ecosystem
within
a
requirement_15
or
a
set
of
collaborate
partner
by
rely
on
technology_20
technology_29
of
all
of
this
do
not
only
apply
to
the
connector_data_1
connector_28
from
the
component_5
to
the
component_18
but
also
for
the
reverse
direction
—
a
component_5
that
can
connector_25
connector_data_1
in
specific
technology_29
do
not
care
about
the
particular
type
of
component_18
provide
it
follow
the
component_7
technology_26
there
be
another
significant
benefit
of
have
multiple
representation
of
a
resource
in
practice
if
you
provide
both
an
technology_23
and
an
connector_data_5
representation
of
your
resource
they
be
consumable
not
only
by
your
component_7
but
also
by
every
technology_20
web
browser
—
in
other
word
connector_data_6
in
your
component_7
become
quality_attribute_12
to
everyone
who

how
to
use
the
web
there
be
another
way
to
exploit
this
you
can
turn
your
application’s
web
ui
into
it
web
component_26
—
after
all
component_26
design
be
often
drive
by
the
idea
that
everything
that
can
be
do
via
the
ui
should
also
be
doable
via
the
technology_30
conflate
the
two
connector_data_12
into
one
be
an
amazingly
useful
way
to
connector_2
a
quality_attribute_6
web
for
both
human
and
other
component_7
summary
provide
multiple
representation
of
resource
for
different
need
connector_15
statelessly
the
last
principle
i
want
to
connector_19
be
stateless
connector_12
first
of
all
it’s
important
to
stress
that
although
pattern_1
include
the
idea
of
statelessness
this
do
not
mean
that
an
component_7
that
connector_29
it
functionally
cannot
have
state
—
in
fact
this
would
render
the
whole
approach
pretty
useless
in
most
scenario
pattern_1
mandate
that
state
be
either
turn
into
resource
state
or
keep
on
the
component_18
in
other
word
a
component_5
should
not
have
to
retain
some
sort
of
connector_12
state
for
any
of
the
component_24
it
connector_30
with
beyond
a
single
connector_data_3
the
most
obvious
reason
for
this
be
quality_attribute_1
—
the
number
of
component_24
connector_31
would
seriously
impact
the
server’s
footprint
if
it
have
to
keep
component_18
state
note
that
this
usually
require
some
re
design
—
you
can’t
simply
stick
a
uri
to
some
component_27
state
and
connector_data_8
it
restful
but
there
be
other
aspect
that
might
be
much
more
important
the
statelessness
constraint
isolate
the
component_18
against
connector_32
on
the
component_5
a
it
be
not
dependent
on
talk
to
the
same
component_5
in
two
consecutive
connector_data_3
a
component_18
could
connector_33
a
document
contain
connector_6
from
the
component_5
and
while
it
do
some
component_1
the
component_5
could
be
shut
down
it
hard
disk
could
be
rip
out
and
be
replace
the
could
be
update
and
restart
—
and
if
the
component_18
follow
one
of
the
connector_6
it
have
connector_34
from
the
component_5
it
won’t
notice
pattern_1
in
theory
i
have
a
confession
to
make
what
i
explain
be
not
really
rest
and
i
might
connector_2
flame
for
simplify
thing
a
little
too
much
but
i
want
to
start
thing
a
little
differently
than
usual
so
i
do
not
provide
the
formal
background
and
history
of
pattern_1
in
the
begin
me
try
to
connector_19
this
if
somewhat
briefly
first
of
all
i’ve
avoid
take
great
care
to
separate
pattern_1
from
technology_19
itself
and
the
use
of
technology_19
in
a
pattern_5
way
to
understand
the
relationship
between
these
different
aspect
we
have
to
take
a
look
at
the
history
of
rest
the
term
pattern_1
be
define
by
roy
t

in
his
phd
thesis
you
might
actually
want
to
follow
that
connector_14
—
it’s
quite
readable
for
a
dissertation
at
least
roy
have
be
one
of
the
primary
designer
of
many
essential
web
technology_26
include
technology_19
and
uris
and
he
formalize
a
lot
of
the
idea
behind
them
in
the
document
the
dissertation
be
consider
“the
pattern_1
bible”
and
rightfully
so
—
after
all
the
author
invent
the
term
so
by
definition
anything
he
connector_10
about
it
must
be
consider
authorative
in
the
dissertation
roy
first
define
a
methodology
to
talk
about
architectural
style
—
high
level
abstract
pattern_3
that
express
the
core
idea
behind
an
architectural
approach
each
architectural
style
come
with
a
set
of
constraint
that
define
it
example
of
architectural
style
include
the
“null
style”
which
have
no
constrain
at
all
pattern_8
and
pattern_9
component_18
component_5
quality_attribute_3
connector_data_11
and
—
you
guess
it
—
rest
if
all
of
this
sound
quite
abstract
to
you
you
be
right
—
pattern_1
in
itself
be
a
high
level
style
that
could
be
connector_11
use
many
different
technology_25
and
instantiate
use
different
requirement_10
for
it
abstract
property
for
example
pattern_1
include
the
concept
of
resource
and
a
uniform
—
i
e
the
idea
that
every
resource
should
respond
to
the
same

but
pattern_1
doesn’t
say
which
these
should
be
or
how
many
of
them
there
should
be
one
“incarnation”
of
the
pattern_1
style
be
technology_19
and
a
set
of
relate
set
of
technology_20
such
a
uris
or
slightly
more
abstractly
the
web’s
architecture
itself
to
continue
the
example
from
above
technology_19
“instantiates”
the
pattern_1
uniform
with
a
particular
one
consist
of
the
technology_19
verb
a

define
the
pattern_1
style
after
the
web
—
or
at
least
most
of
it
—
be
already
“done”
one
might
argue
whether
it’s
a
100%
match
but
in
any
requirement_3
the
web
technology_19
and
uris
be
the
only
major
certainly
the
only
relevant
instance
of
the
pattern_1
style
a
a
whole
and
a
roy

be
both
the
author
of
the
pattern_1
dissertation
and
have
be
a
strong
influence
on
the
web
architecture’s
design
this
should
not
come
a
a
surprise
finally
i’ve
use
the
term
“restful
http”
from
time
to
time
for
a
quality_attribute_8
reason
many
component_21
that
use
technology_19
don’t
follow
the
principle
of
pattern_1
—
and
with
some
justification
one
can
say
that
use
technology_19
without
follow
the
pattern_1
principle
be
equal
to
abuse
technology_19
of
this
sound
a
little
zealous
—
and
in
fact
there
be
often
reason
why
one
would
violate
a
pattern_1
constraint
simply
because
every
constraint
induce
some
requirement_17
off
that
might
not
be
acceptable
in
a
particular
situation
but
often
pattern_1
constraint
be
violate
due
to
a
quality_attribute_8
lack
of
understand
of
their
benefit
to
provide
one
particularly
nasty
example
the
use
of
technology_19
connector_2
to
invoke
such
a
delete
an
connector_data_2
violate
rest’s
quality_attribute_13
constraint
and
plain
common
sense
the
component_18
cannot
be
hold
quality_attribute_14
which
be
probably
not
what
the
component_5
developer
intend
but
more
on
this
and
other
notable
abuse
in
a
follow
up

summary
in
this

i
have
attempt
to
provide
a
quick
introduction
into
the
concept
behind
rest
the
architecture
of
the
web
a
pattern_5
technology_19
approach
to
connector_35
requirement_16
be
different
from
pattern_10
quality_attribute_3
connector_data_2
and
web
component_2
it
take
some
mind
shift
to
really
understand
this
difference
be
aware
about
pattern_1
principle
be
beneficial
whether
you
be
build
component_21
that
connector_18
a
web
ui
only
or
want
to
turn
your
component_7
component_26
into
a
quality_attribute_6
web
citizen
stefan
tilkov
be
the
lead
editor
of
infoq’s
pattern_11
and
co
founder
principal
consultant
and
lead
restafarian
of
germany
switzerland
base
innoq
be
you
an
architect
or
aspire
to
be
stay
on
top
of
trend
in
the
requirement_18
with
one
monthly
newsletter
connector_10
by
architect
for
architect
inspire
by
this
content
connector_10
for
infoq
become
an
editor
for
infoq
be
one
of
the
best
decision
of
my
career
it
have
challenge
me
and
help
me
grow
in
so
many
way
we
technology_31
love
to
have
more
people
join
our
team
thomas
bettslead
editor
architecture
and
design
@infoq
senior
principal
engineer
connector_10
for
infoq
rate
this
adoption
style
author

this
content
be
in
the
requirement_1
architecture
topic
relate
topic
architecture
&
design
pattern_1
web
component_8
pattern_11
web
component_26
component_26
infrastructure
architecture
requirement_1
architecture
relate
editorial
popular
across
infoq
go
requirement_19
with
technology_32
and
graalvm
why
you
should
care
about
architecture
technology_5
news
roundup
jeps
for
jdk

project
lilliput
milestone
technology_32
technology_33
quarkus



state
of
the
technology_5
ecosystem
report
from
relic
ml
technology_34
to
accelerate
your
work
with
cassie
breviu
release
technology_35
dns
private
resolver
in
preview
relate
content
quarkus



introduce
fine
grain
transaction
component_26
component_26
showdown
pattern_1
vs
graphql
vs
grpc
–
which
should
you
use
a
standardize
specification
drive
component_26
lifecycle
ballerina
for
full
technology_36
developer
a
guide
to
create
backend
component_28
mammoth
stump
in
the
requirement_9
era
meet
eu
regulation
by
be
requirement_9
requirement_19
and
requirement_9
agnostic
wave
a
requirement_3
study
for
low
architectural
complexity
envoy
a
a
component_2
to
component_2
pattern_7
at
mux
why
you
should
care
about
architecture
reduce
cognitive
load
in
agile
devops
team
use
team
topology
technology_37
chronicle
the
end
of
the
component_26
strangler
design
quality_attribute_4
tenant
isolation
in
technology_38
for
serverless
component_29
architecture
it
might
not
be
what
you
think
it
be
architecture
and
design
infoq
trend
report—april

low

technology_34
optimize
engineering
time
for
internal
component_21
architecting
for
quality_attribute_15
panel
how
the
financial
time
approach
engineering
enablement
the
infoq
emag
path
to
production
deployment
pipeline
a
a
competitive
advantage
the
infoq
emag
the
infoq
trend
report

build
an
quality_attribute_16
digital
component_30
adam
hansrod
on
the
benefit
challenge
and
approach
hashicorp
vault
improve
eventual
consistency
with
component_5
side
consistent
connector_data_13
announce
the
general
quality_attribute_17
of
technology_35
container
component_29
at
build

requirement_6
at
the
edge
how
connector_36
feedback
from
angry
component_11
help
to
develop
quality_attribute_6
technology_16
jep

component_31
to
extend
pattern_3
match
in
technology_5
cloudflare
d1
provide
quality_attribute_3
technology_39
for
cloudflare
component_32
release

technology_13
requirement_4
train
dataset
massive
technology_5
news
roundup
openjdk
technology_32
connector_data_14
and
cf
payara
component_30
technology_2
technology_40
connector_data_14
how
to
run
your
technology_16
department
a
coach
kalix
build
serverless
requirement_9
requirement_19
requirement_14
crtical
component_21
with
no
component_3
jetpack
bring
update
architectural
and
ui
component_23
and
improve
requirement_2
technology_34
release
technology_35
dns
private
resolver
in
preview
technology_41
support
nitrotpm
and
uefi
quality_attribute_4
boot
architecting
for
the
edge
requirement_9
introduce
technology_42
quality_attribute_18
technology_43
for
requirement_1
component_3
workload
requirement_4
for
developer
a
future
or
a
reality
quality_attribute_19
by
agreement
requirement_10
outcome
over
impose
solution
technology_44
lambda
now
have
support
for
technology_45

runtime
effectively
pattern_12
your
pattern_12
miedwar
meshbesher
on
use
vigilance
control
meta
artificial_intelligence’s
connector_data_1
set
to
accelerate
renewable
energy
catalyst
discovery
for
hydrogen
fuel
deepmind
introduce
gato
a
generalist
requirement_4
agent
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_28
out
every
tuesday
join
a
of
over


senior
developer
pattern_13
an
example
enter
your
e
mail
connector_19
select
your
country
select
a
country
i
to
infoq
technology_22
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
hello
stranger
you
need
to
register
an
infoq
account
or
login
or
login
to

but
there
s
so
much
more
behind
be
register
connector_2
the
most
out
of
the
infoq
experience
tell
u
what
you
think
allow
technology_23
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_15
to
any
of
my
connector_data_16
in
this
component_33

watch
component_33
love
the
analogy
by
peter
lacey
re
love
the
analogy
by
mike
glendinning
re
love
the
analogy
by
felipe
nascimento
re
love
the
analogy
by
stefan
tilkov
re
love
the
analogy
by
mike
schinkel
pattern_1
on
net
by
ole
friis
re
pattern_1
on
net
by
stefan
tilkov
re
pattern_1
on
net
by
vlad
bezden
pattern_5
with
many
parameter
by
tom
dyer
re
pattern_5
with
many
parameter
by
rafael
de
f
ferreira
re
pattern_5
with
many
parameter
by
tom
dyer
re
pattern_5
with
many
parameter
by
lipman
li
re
pattern_5
with
many
parameter
by
kirstan
vandersluis
re
pattern_5
with
many
parameter
by
tom
dyer
re
pattern_5
with
many
parameter
by
mike
schinkel
re
pattern_5
with
many
parameter
by
stephan
schlöpke
re
pattern_5
with
many
parameter
by
kirstan
vandersluis
re
pattern_5
with
many
parameter
by
stephan
schlöpke
re
pattern_5
with
many
parameter
by
kirstan
vandersluis
re
pattern_5
with
many
parameter
by
stephan
schlöpke
re
pattern_5
with
many
parameter
by
ally
kendall
re
pattern_5
with
many
parameter
by
torben
wölm
very
nice
by
nikita
ivanov
representation
by
jim
standley
re
representation
by
tom
dyer
technology_15
analogy
by
maximilian
schulz
resource
graph
traversal
be
not
the
same
a
state
transition
by
ganesh
prasad
re
resource
graph
traversal
be
not
the
same
a
state
transition
by
stephan
schlöpke
re
resource
graph
traversal
be
not
the
same
a
state
transition
by
stefan
tilkov
re
resource
graph
traversal
be
not
the
same
a
state
transition
by
ganesh
prasad
re
resource
graph
traversal
be
not
the
same
a
state
transition
by
mike
schinkel
what
when
pattern_1
semantics
be
not
enough
by
gael
fraiteur
re
what
when
pattern_1
semantics
be
not
enough
by
ally
kendall
re
what
when
pattern_1
semantics
be
not
enough
by
mike
schinkel
re
what
when
pattern_1
semantics
be
not
enough
by
stefan
tilkov
excellent
by
sadek
drobi
architecture
of
resource
by
vladimir
vacula
re
architecture
of
resource
by
stefan
tilkov
re
architecture
of
resource
by
mike
s
re
architecture
of
resource
by
mike
schinkel
understand
the
difference
by
william
martinez
so
iow
this
apply
only
to
web
project
what
about
window
project
by
parimal
jisaheb
re
so
iow
this
apply
only
to
web
project
what
about
window
project
by
stefan
tilkov
re
so
iow
this
apply
only
to
web
project
what
about
window
project
by
mike
schinkel
re
so
iow
this
apply
only
to
web
project
what
about
window
project
by
florian
schwarz
thanks
by
yuen
chi
lian
question
about
use
of

by
matthias
k
re
question
about
use
of

by
stefan
tilkov
re
question
about
use
of

by
m
k
pattern_5
transaction
component_2
by
ian
goldsmith
re
pattern_5
transaction
component_2
by
stefan
tilkov
re
pattern_5
transaction
component_2
by
mark
little
connector_17
large
connector_data_4
set
by
john
john
do
you
suppose
that
all
possible
action
can
be
reduce
to

verb
by
mark
kamoski
use
of
connector_24
to
define
require
representation
by
martin
haigh
re
use
of
connector_24
to
define
require
representation
by
stefan
tilkov
rest
uri
design
with
url
parameter
by
thomas
tkac
uml
diagram
by
ersoy
hasanoglu
re
uml
diagram
by
stefan
tilkov
re
uml
diagram
by
ersoy
hasanoglu
re
uml
diagram
by
peng
zhang
well
writen
and
very
easy
to
understand
by
phoenix
bai
re
well
writen
and
very
easy
to
understand
by
stefan
tilkov
pattern_1
&
technology_20
behavior
by
dan
noonen
thank
you
for
a
clear
explanation
by
anuradha
va
love
the
analogy
by
peter
lacey
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
in
a
pattern_5
approach
an
component_7
might
a
few
million
requirement_13
uris
to
the
web
if
it’s
design
the
same
way
component_21
have
be
design
in
technology_27
time
it’s
contribution
usually
be
a
single
“endpoint”
—
comparable
to
a
very
small
door
that
provide
entry
to
a
universe
of
resource
only
for
those
who
have
the
key
brilliant
connector_data_18
back
to
top
pattern_1
on
net
by
ole
friis
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
at
the
project
i
m
currently
work
on
it
would
be
really
nice
to
have
a
pattern_1
instead
of
the
technology_46
we
re
currently
go
for
the
reason
we
re
go
for
technology_46
be
that
the
project
be
do
in
technology_47


and
the
technology_47
technology_33
have
excellent
support
for
technology_17
however
i
have
not
be
able
to
find
quality_attribute_6
technology_47
pattern_1
technology_33
be
do
astoria
but
that
s
a

s
publicise
your
component_3
through
the
web
thing
and
besides
that
it
require
technology_48
and
thus
technology_47

do
anybody
of
any
preferably
open
component_34
pattern_1
technology_33
for
technology_47
that
be
worth
connector_37
out
connector_data_18
back
to
top
pattern_5
with
many
parameter
by
tom
dyer
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
how
would
you
connector_data_3
a
resource
that
be
identify
by
a
large
set
of
parameter
for
example
i
want
a
connector_data_19
of
all
the
dependent
require
technology_16
for
a
give
set
of
technology_16
uri
be
required_products
{43

very
large
set
of
technology_16
ids}
and
the
resource
identify
be
the
connector_data_19
of
require
technology_16
for
this
set
of
technology_16

seem
it
connector_2
but
be
there
too
many
parameter
need
to
identify
the
resource
maybe
a
but
a
be
not
quality_attribute_11
indempotent
and
be
typically
use
to
create
a
resource
which
the
connector_data_19
of
connector_38
be
not
perhaps
a

but
a
be
not
quality_attribute_11
it
can
have
side
effect
and
be
typically
use
for
a
resource
update
or
for
create
a
resource
associate
with
the
uri
thanks
connector_data_18
back
to
top
very
nice
by
nikita
ivanov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
one
of
the
clear
pattern_1

i
ve
connector_9
in
a
while
thanks
nikita
ivanov
gridgain
grid
computing
make
quality_attribute_8
connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
rafael
de
f
ferreira
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i

t
see
why
not
use
connector_2
technology_19
doesn
t
prescribe
an
upper
bind
on
the
size
of
the
uri
connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
tom
dyer
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
dunno
that
kind
of
smell
bad
i
mean
isn
t
the
resource
identifier
set
of
technology_16

here
go
to
connector_2
too
large
at
some
point
wonder
if
the
set
of
technology_16

s
aren
t
a
resource
that
can
be
create
via

then
it
s
identifier
uri
can
be
use
to
connector_2
the
collection
of
dependent
technology_16
connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
lipman
li
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
unless
you
connector_data_8
connector_2
the
very
long
uri
within
browser
browser
do
have
the
length
limitation
it
shall
not
be
any
problem
to
connector_26
between
component_21
provide
the
component_21
do
not
have
length
limitation
on
the
connector_2
url
length
technology_19
itself
seem
no
length
limitation
connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
kirstan
vandersluis
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
agree
technology_19
itself
do
not
impose
a
limit
but
i
have
experience
connector_2
size
limitation
on
a
number
of
project
within
browser
typcially
connector_39
technology_49
base
resource
with
attach
xsl
stylesheets
if
your
connector_5
component_24
be
only
other
component_7
it
would
seem
that
this
would
work
but
another
caution
be
that
pattern_14
might
impose
size
restriction
see
for
example
classicasp
aspfaq
technology_22
form
what
be
the
limit
o
i
technology_31
have
to
agree
with
tom
dyer
that
the
approach
of
stuff
an
arbitrarily
large
connector_data_19
into
the
query
seem
awkward
i
think
this
situation
fit
stefan
s
exception
criterion
from
his

there
be
often
reason
why
one
would
violate
a
pattern_1
constraint
simply
because
every
constraint
induce
some
requirement_17
off
that
might
not
be
acceptable
in
a
particular
situation
i
certainly

t
claim
to
be
a
pattern_1
expert
but
in
my
opinion
i
technology_31
say
a
would
be
a
quality_attribute_6
approach
in
this
requirement_3
connector_data_18
back
to
top
representation
by
jim
standley
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
be
an
editor
a
representation
be
it
ok
to
put
representation
on
the
url
i
have
do
this
recently
repo
element


technology_23
repo
element

technology_50

technology_50
repo
element

edit

an
edit
component_35
connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
tom
dyer
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
tend
to
agree
with
kirstan
and
think
i
technology_31
use
a
and
not
be
so
tie
to
the
pattern_1
uniform
for
this
requirement_3
quality_attribute_6
point
about
possible
pattern_14
limitation
also
i
probably
wouldn
t
connector_2
the
pattern_6
benefit
of
connector_2
because
the
same
uri
from
this
large
set
of
uri
s
wouldn
t
be
connector_40
that
often
the
resource
would
mostly
likely
not
be
a
quality_attribute_6
pattern_6
canidate
this
be
probably
take
this
to
the
absurd
but
can
one
use
an
executable
artifact
proc
block
technology_1
select
a
part
of
uri
the
connector_data_4
of
connector_41
the
block
on
the
resource
component_5
would
be
use
to
identify
the
resource
connector_data_18
back
to
top
re
representation
by
tom
dyer
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
yes
it
s
ok
to
put
the
representation
on
the
url
this
be
what
technology_51
do
and
be
suggest
by
the
o
reilly
pattern_1
web
component_8
book
repo
element

edit

an
edit
component_35
be
similar
to
the
uri
use
in
technology_51
for
a
form
that
will
be
fill
in
to
update
a
resource
would
be
repo
element

edit
in
rail
connector_data_18
back
to
top
re
pattern_1
on
net
by
stefan
tilkov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
ole
you
might
want
to
connector_42
out
these

www
infoq
technology_22
news


technology_52
web
programming
andwww
infoq
technology_22
news


mindtouch
dreamhth
stefan
connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
stephan
schlöpke
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
think
a
quality_attribute_6
way
to
use
this
would
be
to
have
a
sort
of
search
or
query
you
create
you
could
do
a
on
some
uri
query
product_dep
which
would
create
a
query
resource
now
you

technology_16
to
the
query
either
by
connector_43
a
technology_16
uri
connector_data_19
with
the
initial
or
by
connector_5
on
query
product_dep
{id}
with
every
to
the
query
resource
the
connector_2
on
the
query
resource
would
connector_44
it
be
very
similar
with
search
something
with
multiple
parameter
in
such
a
requirement_3
it
would
be
much
easy
to
create
a
search
resource
and
once
create
do
a
connector_2
on
the
create
resource
and
when
do
connector_17
a
delete
to
the
create
query
resource
there
be
multiple
way
to
solve
this
however
i
think
do
a
connector_2
on
an
uri
and
build
the
uri
something
{10


}
on
the
component_18
seem
not
right
it
would
require
the
component_18
to
have
a
detail
knowledge
of
build
the
uris
while
normaly
the
component_18
should
only
follow
connector_6
provide
by
the
component_2
very
nice
articel
stephan
btw
connector_data_18
back
to
top
technology_15
analogy
by
maximilian
schulz
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
although
it
be
a
different
analogy
than
peter
be
refer
to
i
love
the
one
about
technology_15

we
have
some
hardcore
technology_15
guy
here
who
i
try
to
convince
to
give
pattern_1
base
component_8
a
try
and
the
analogy
be
probably
perfect
to
describe
how
it
can
be
understand
i
will
give
it
a
try
next
week
during
our
end
of
year
team
meet
and
evaluation
anyways
pattern_1
be
not
that
to
me
but
i
cannot
wait
to
connector_9
the
next
part
connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
kirstan
vandersluis
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
think
that
create
and
manage
a
query
set
connector_data_2
on
the
component_5
side
violate
another
pattern_5
criterion
should
be
stateless
i
suppose
you
could
take
the
pattern_13
that
a
query
set
itself
be
an
component_7
connector_data_2
with
a
uri
a
you
mention
then
pattern_1
put
connector_2
delete
would
make
sense
to
manage
the
query
set
still
seem
a
bit
awkward
though
for
requirement_2
reason
if
nothing
else
if
i
m
query
for

item
that
s

put
to
my
query
set
before
i
invoke
the
query
there
should
instead
be
an
to
connector_17
a
query
in
one

and
i
think
be
fine
to
do
this
connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
stephan
schlöpke
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
actually
there
be
no
reason
to
put
a
connector_data_19
of
query
connector_data_20
in
mutliple
put
if
for
instance
you
have

connector_data_20
to
query
why
not
do
a
put
to
create
a
query
resource
connector_43
all

connector_data_20
at
once
and
i
wouldn
t
say
it
violate
any
pattern_5
criterion
actually
it
be
stateless
since
the
state
be
persistent
in
the
resource
in
this
requirement_3
the
query
resource
and
to
my
understand
that
be
the
idea
instead
of
use
component_27
state
put
the
state
into
the
resource
and
i
see
not
really
a
difference
to
the

a
put
create
a
resource
and

the
connector_14
to
the
create
resource
the
resource
create
be
the
connector_data_4
of
the
query
and
optionally
put
can
not
only
the
location
but
the
content
a
well
so
with
one
put
you
can
connector_2
the
connector_data_4
difference
to
be
that
you
do
not
need
to
remember
the
connector_data_4
since
with
the
location
beeing
connector_44
to
the
resource
you
can
refresh
the
location
and
connector_33
your
connector_data_4
again
or
you
can
connector_14
it
unless
you
delete
the
query
right
after
you
use
it
mostly
you
can
do
that
with
too
but
normaly
you
to
a
resource
to
update
it
so
the
way
would
be
a
violation
of
the
uniform
definition
i
think
but
i

t
think
the
put
connector_2
delete
be
a
violation
connector_data_18
back
to
top
resource
graph
traversal
be
not
the
same
a
state
transition
by
ganesh
prasad
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
stefan
great

i
understand
and
greatly
respect
the
pattern_1
pattern_13
of
the
world
however
i
have
find
in
my
discussion
with
restafarians
that
there
be
some
aspect
that
tend
to
be
confuse
especially
the
terminology
that
tend
to
be
use
around
the
hateoas
concept
you
say
there
be
an
even
more
important
aspect
to
the
hypermedia
principle
—
the
“state”
part
of
the
component_7
in
short
the
fact
that
the
component_5
or
component_2
technology_24
if
you
prefer
provide
a
set
of
connector_6
to
the
component_18
the
component_2
component_19
enable
the
component_18
*to
move
the
component_7
from
one
state
to
the
next
by
follow
a
link*
when
you
say
the
component_18
move
the
component_7
from
one
state
to
the
next
i
understand
that
to
mean
that
connector_data_14
be
take
place
but
if
the
component_18
be
merely
traverse
connector_6
use
a
sequence
of
connector_2
for
example
then
the
component_7
s
state
have
not
connector_44
at
all
what
have
connector_44
be
the
component_18
s
pattern_13
or
representation
of
the
component_7
the
component_18
have
merely
connector_44
it
perspective
of
the
component_7
s
state
and
be
look
at
it
from
a
different
angle
so
to
speak
in
other
word
the
component_18
be
traverse
the
resource
graph
which
be
a
hyperlinked
set
of
uris
represent
resource
we
need
to
make
a
clear
distinction
between
state
transition
which
most
people
would
expect
to
only
occur
on
update
and
mere
connector_14
traversal
which
connector_44
the
component_18
s
pattern_13
representation
of
the
component_7
but
not
it
state
if
the
hateaos
component_6
mean
connector_14
traversal
when
it
talk
about
state
transition
then
we
really
need
to
clean
up
the
terminology
because
it
needlessly
confuse
non
restafarians
regard
ganesh
connector_data_18
back
to
top
re
resource
graph
traversal
be
not
the
same
a
state
transition
by
stephan
schlöpke
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
you
sure
can
do
a
state
transition
with
resource
traversal
for
example
you
have
a
resource
which
be
in
the
edit
state
and
you
edit
it
at
someuri
resource

now
you
connector_2
the
connector_14
to
someuri
resource

state=finish
when
you
follow
that
connector_14
the
state
connector_32
on
the
resource
be
no
long
editable
the
state
connector_44
you
can
connector_data_8
multiple
time
without
ever

with
a
different
connector_data_4
now
you
wouldn
t
be
give
an
edit
connector_14
anymore
and
connector_5
the
old
edit
connector_14
to
edit
the
resource
would
connector_data_4
in
an
illegal
state
connector_data_4
i
think
that
this
be
a
real
state
transition
and
i
would
say
that
it
conform
to
rest
connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
kirstan
vandersluis
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
that
seem
viable
stephan
to
use
a
put
a
you
describe
to
load
the
entire
query
with
one
connector_data_8
instead
of
the

connector_data_7
i
previously
state
but
i
be
still
bother
a
bit
by
state
you
mention
the
resource
create
be
the
connector_data_4
of
the
query
initially
i
think
we
be
discuss
build
up
a
query
connector_45
the
query
a
a
resource
use
put
then
be
able
to
reference
that
resource
to
invoke
the
query
either
way
whether
you
component_13
the
query
or
component_13
it
connector_data_4
you
have
create
component_27
specific
connector_data_1
and
will
need
to
consider
it
requirement_8
do
you
rely
on
the
component_18
to
delete
it
what
if
they

t
do
it
connector_2
remove
with
a
component_27
timeout
this
component_27
connector_data_1
be
one
thing
pattern_1
attempt
to
avoid
by
recommend
stateless
connector_46
so
if
we
have
to
bend
the
rule
and
go
outside
the
normal
pattern_1
mode
of

i
would
still
opt
to
pass
these
large
connector_47
through
a

connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
stephan
schlöpke
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
would
in
most
requirement_3
only
component_13
the
query
in
a
component_3
i
do
this
in
a
project
recently
we
component_13
the
query
in
the
component_3
and
the
component_18
also
submit
a
time
to
life
so
if
the
component_18
do
not
delete
the
query
it
connector_48
remove
late
that
be
the
state
component_13
in
the
resource
rather
than
have
a
component_27
requirement_8
a
pattern_15
which
for
example
connector_49
once
an
hour
remove
all
entry
in
the
component_3
which
be
outdated
idially
the
component_18
connector_27
a
delete
when
the
connector_data_4
resource
be
no
long
need
it
be
in
real
life
i
have
a
guy
in
my
office
connector_23
archie
he
be
responsible
to
gain
document
from
the
libray
whenever
someone
need
it
once
i
have
a
connector_data_3
for
a
couple
of
document
i
hand
him
a
connector_data_19
what
to
connector_2
now
i
can
wait
until
he
connector_2
everything
in
order
to
take
it
with
me
or
i
go
back
into
my
office
wait
for
an
that
he
have
gather
all
my
document
for
me
to
pick
up
in
a
component_2
design
that
i
create
a
connector_data_19
which
be
my
query
connector_data_3
i
do
a
put
to
archie
so
he
have
the
newly
create
connector_data_19
the
receipt
i
connector_2
be
an
uri
where
i
can
connector_2
my
document
once
they
be
connector_50
in
the
normal
requirement_3
they
be
instantly
quality_attribute_12
so
i
do
a
connector_2
on
the
resource
and
have
my
connector_data_4
in
various
situation
a
backend
need
more
time
to
gather
the
document
together
which
take
a
couple
of
minute
this
give
me
a
a
component_18
the
option
to
inform
the
component_10
that
his
connector_data_3
be
beeing
component_1
once
the
connector_data_3
be
component_1
the
component_10
can
see
the
connector_data_4
or
if
it
be
a
real
long
connector_data_3
a
mail
be
connector_17
to
the
component_10
with
the
uri
connector_14
where
to
connector_2
the
connector_data_4
since
archie
want
his
document
back
he
keep
the
connector_data_19
until
i
be
do
with
the
document
once
i
be
do
i
the
document
and
connector_2
the
connector_data_19
back
or
the
connector_data_19
connector_48
destroy
this
be
where
the
component_18
put
the
delete
to
the
connector_data_4
once
he
or
she
be
do
with
it
the
quality_attribute_6
thing
in
it
be
that
if
you
connector_41
the
query
and
connector_51
the
connector_data_4
it
be
totally
independend
from
someone
delete
or

entry
to
the
component_3
those
the
connector_data_4
i
see
dosnt
connector_44
while
i
be
work
with
it
this
can
be
of
benefit
especially
when
you
do
a
search
if
you
connector_17
the
connector_14
connector_data_4
to
another
person
he
or
she
can
open
it
and
the
4th
entry
be
the
same
you
saw
in
some
requirement_3
it
might
be
quality_attribute_6
to
component_13
the
query
and
the
first
connector_2
remove
it
this
however
be
not
pattern_1
conform
i
think
since
the
connector_2
i
can
only
connector_41
once
connector_41
a
delete
with
the
option
of
a
timeout
and
a
clean
up
connector_data_9
be
i
think
the
best
way
to
go
in
such
a
requirement_3
the
component_18
have
the
chance
to
work
with
the
connector_data_4
resource
a
long
a
he
want
without
have
to
component_13
it
also
this
way
it
be
easy
to
pattern_6
such
a
resource
while
with
you
cannot
pattern_6
the
resource
in
a
pattern_7
since
the
pattern_7
dosn
t
in
what
relationship
the

content
to
the
connector_data_4
be
connector_data_18
back
to
top
re
resource
graph
traversal
be
not
the
same
a
state
transition
by
stefan
tilkov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
ganesh
you
writewhen
you
say
the
component_18
move
the
component_7
from
one
state
to
the
next
i
understand
that
to
mean
that
connector_data_14
be
take
place
but
if
the
component_18
be
merely
traverse
connector_6
use
a
sequence
of
connector_2
for
example
then
the
component_7
s
state
have
not
connector_44
at
all
there
be
resource
state
and
component_7
state
and
i
agree
the
traversal
of
a
connector_14
by
the
component_18
via
connector_2
do
not
connector_44
the
resource
state
but
it
connector_32
the
component_7
state
a
the
component_18
be
now
look
at
or
hold
on
to
a
different
representation
which
include
different
connector_6
than
the
one
before
component_7
state
be
thus
keep
on
the
component_18
which
mean
the
component_5
doesn
t
care
about
it
but
the
representation
connector_28
from
the
component_5
to
the
component_18
drive
it
because
they
contain
or
do
not
contain
connector_6
to
specific
other
resource
hypermedia
a
the
component_16
of
component_7
state
be
both
the
least
understand
and
the
most
powerful
aspect
of
rest
which
be
why
we
have
an
about
this
come
up
soon
connector_data_18
back
to
top
what
when
pattern_1
semantics
be
not
enough
by
gael
fraiteur
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
it
seem
pattern_1
semantics
be
identical
to
crud
one
create
update
delete
it
force
each
resource
to
have
a
very
quality_attribute_8
state
diagram
a
start
technology_53
with
a
create
transition
then
a
unique
normal
technology_53
with
an
update
transition
loop
back
to
itself
and
a
delete
transition
go
to
the
terminal
technology_53
this
be
a
pretty
simplistic
representation
of
the
state
of
a
resource
what
be
we
want
to
have
a
rich
state
diagram
take
the
example
of
an
order
how
to
represent
the
transition
from
the
state
book
to
ship
this
be
a
parameterless
transition
and
how
to
represent
the
transition
to
the
state
cancel
when
we
want
to
the
reason
cancellation
transition
with
one
parameter
connector_data_2
orient
methologies
have

u
how
to
deal
with
these
situation
use


but
what
would
be
the
right
approach
use
rest
connector_data_18
back
to
top
excellent
by
sadek
drobi
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
great
stefan
wait
for
the
next
connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
ally
kendall
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
would
use
indirection
i
e
i
would
give
it
a
short
name
such
a
a
hash
of
the
parameter
connector_data_18
back
to
top
re
what
when
pattern_1
semantics
be
not
enough
by
ally
kendall
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
these
be
update
which
be

in
oo
term
the
specifier
be
always
a
parameter
of
a

connector_data_18
back
to
top
re
what
when
pattern_1
semantics
be
not
enough
by
stefan
tilkov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
there
be
multiple
option
one
be
to
put
a
state
to
the
resource
effectively
connector_44
it
internal
e
g
from
book
to
ship
another
way
be
to
do
a
logical
move
of
the
resource
from
one
collection
of
book
order
to
another
of
ship
order
a
third
way
be
to
represent
the
state
connector_44
a
a
resource
in
itself
e
g
by

it
to
the
order
where
it
become
a
sub
resource
this
way
you
have
a
history
of
connector_44
the
connector_data_10
to
crud
be
not


a
can
create
resource
or
simply
component_1
something
and
a
connector_data_4
in
requirement_3
a
be
use
to
create
a
resource
the
component_5
choose
the
uri
a
put
can
be
use
when
the
uri
of
the
resource
one
want
to
affect
be

it
will
either
create
or
update
a
resource
there
connector_data_18
back
to
top
re
love
the
analogy
by
mike
glendinning
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
of
in
the
real
world
where
confidentiality
and
privacy
of
requirement_13
connector_data_6
be
important
connector_52
a
small
door
with
a
key
be
often
a
quality_attribute_6
idea
ask
the
uk
government
after
their
recent
loss
of
personal
bank
detail
for

million
citizen
in
fact
this
be
one
of
the
interest
tension
in
the
design
of
web
base
hypermedia
component_7
the
more
we
make
connector_data_1
quality_attribute_20
through
uris
and
hyperlink
the
hard
it
become
to
quality_attribute_4
and
control
connector_16
this
problem
be
exacerbate
by
the
crude
quality_attribute_2
technology_33
of
technology_19
in
the
world
of
requirement_1
component_7
the
norm
have
be
for
year
to
design
component_4
that
strictly
control
connector_16
to
connector_data_1
this
be
in
line
with
the
design
and
of
our
organisation
but
contrast
markedly
with
the
web
where
the
goal
have
always
be
to
*provide*
connector_16
to
connector_data_1
it
have
also
lead
to
a
whole
requirement_18
for
requirement_1
connector_data_1
warehousing
and
requirement_14
intelligence
solution
that
unlock
hide
connector_data_1
if
pattern_1
be
to
take
over
for
requirement_1
component_7
i
suggest
it
s
go
to
have
to
connector_19
issue
of
connector_data_1
quality_attribute_2
much
more
seriously
the
long
term
effect
on
our
requirement_1
architecture
might
be
quite
interest
nonetheless
connector_data_18
back
to
top
re
resource
graph
traversal
be
not
the
same
a
state
transition
by
ganesh
prasad
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
stefan
tilkov
say
there
be
resource
state
and
component_7
state
ah
that
explain
everything
in
my
terminology
there
s
component_18
state
and
component_7
state
you
connector_data_8
them
component_7
state
and
resource
state
fair
enough
this
tie
in
neatly
with
our
component_6
sofea
component_2
orient
front
end
architecture
where
component_18
state
be
manage
on
the
component_18
and
a
pattern_16
on
the
component_18
side
connector_53
with
component_8
either
technology_46
or
rest
to
drive
what
we
connector_data_8
presentation
flow
obviously
component_18
state
and
presentation
flow
be
constrain
by
the
representation
that
the
component_2
tier
connector_18
i
think
it
s
important
to
clarify
that
technology_17
base
web
component_8
also
connector_18
*representations*
of
behaviour
because
these
do
not
simply
mirror
on
domain
connector_data_2
unlike
with
rest
base
component_2
component_18
state
be
not
directly
constrain
by
technology_17
base
web
component_2
because
of
it
nature
a
a
verb
orient
pattern_13
of
a
domain
rather
than
a
noun
orient
pattern_13
that
be
rest
either
a
whole
component_1
have
to
be
pattern_17
in
a
single
connector_11
by
w
bpel
for
the
component_18
to
connector_25
or
the
component_18
have
to
define
a
bespeak
component_1
use
the
set
of
component_8
quality_attribute_12
this
be
not
necessarily
a
disadvantage
it
s
a
different
component_6
regard
ganesh
connector_data_18
back
to
top
architecture
of
resource
by
vladimir
vacula
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
great
stefan
i
be
think
about
your
example
with
resource
you
present
resource
order
and
order
{id}
requirement_13
and
requirement_13
{id}
requirement_13
{id}
order
what
if
i

t
want
to
categorize
connector_data_2
in
uri
name
of
resource
what
if

mean
a
document
without
identification
if
document
be
an
order
or
requirement_13
card

s
say
i
have
resource
document
{id}
which
connector_11
connector_2
of
detail
and
of
document
search
which

connector_data_19
and
connector_11
of
restrict
condition
i
e
category
requirement_13
or
more
complex
category
requirement_13
category_id

relation
order
be
it
quality_attribute_6
to
use
category
in
uri
of
resource

order
instead
of
create
general
resource

search
be
there
any
recommendation
which
way
be
quality_attribute_6
and
why
and
finally
what
if
order

really
huge
connector_data_19
in
search
i
could
connector_11
condition
i
e
last

max_date



how
to
handle
this
issue
in
requirement_3
i
use
resource
order
thanks
connector_data_18
back
to
top
re
architecture
of
resource
by
stefan
tilkov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
hi
vladimir
first
of
all
the
character
that
make
up
a
uri
be
much
le
important
than
one
think
but
anway
i
prefer
to
give
resource
meaningful
name
but
this
be
a
design
decision
your
document
{id}
example
would
mean
that
a
to
it
would
be
handle
the
same
way
regardless
of
whether
it
s
an
order
or
requirement_13
unless
you
switch
on
the
content
type
if
handle
both
similarly
e
g
if
you
want
to
component_13
a
document
without
look
at
it
content
be
what
you
want
this
seem
perfectly
fine
i
suggest
to
connector_11
search
a
connector_2
not

it
s
useful
to
be
able
to
connector_14
to
a
search
connector_data_4
and
it
s
a
meaningful
resource
in
itself
the
connector_data_19
of
all
requirement_13
name
smith
qualify
a
a
resource
from
my
pov
regard
the
large
connector_data_19
one
way
be
to
redirect
a
connector_data_3
to
order
to
order
offset=0&count=10
and
include
a
connector_14
to
order
offset=10&count=10
i
e
the
indivual
component_35
become
resource
in
themselves
hth
stefan
connector_data_18
back
to
top
re
love
the
analogy
by
felipe
nascimento
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
great

do
you
suggest
any
material
about
pattern_1
quality_attribute_2
we
can
take
a
look
at
if
component_7
do
not
hold
state
how
to
connector_42
if
some
component_18
component_7
have
the
authority
to
connector_16
one
resource
should
the
component_18
component_7
pass
in
the
credential
in
every
connector_data_3
should
the
pattern_5
component_7
have
a
quality_attribute_2
component_2
that
would
a
component_27
that
would
be
use
by
the
component_18
component_7
in
every
subsequent
connector_data_3
tksfelipe
connector_data_18
back
to
top
re
love
the
analogy
by
stefan
tilkov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
thanks
felipe
yes
both
connector_43
the
credential
with
every
connector_data_3
the
way
technology_19
basic
auth
do
thing
and
connector_43
a
quality_attribute_2
connector_data_13
similar
to

s
webauth
be
fine
i
will
take
up
pattern_1
quality_attribute_2
a
another
topic
to
cover
not
necessarily
by
myself
connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
torben
wölm
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
you
could
also
use
custom
technology_19

for
your
many
parameter
connector_data_18
back
to
top
understand
the
difference
by
william
martinez
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
a
pattern_5
technology_19
approach
to
connector_35
requirement_16
be
different
from
pattern_10
quality_attribute_3
connector_data_2
and
web
component_2
it
take
some
mind
shift
to
really
understand
this
difference
stefan
totally
agree
with
your
claim
most
of
the
discussion
i
ve
have
in
the
past
relate
to
the
confusion
of
all
those
four
thing
for
some
web
component_8
be
a
way
to
quality_attribute_3
connector_data_2
thus
a
technology_54
be
an
connector_13
connector_data_2
some
others
cannot
imaging
technology_54
a
a
pattern_18
thing
it
be
an
connector_13
pattern_10
even
more
some
see
on
pattern_1
a
quality_attribute_8
w
which
be
not
i
mean
pattern_1
be
much
more
that
w
and
technology_54
can
be
connector_11
use
pattern_1
philosophy
in
fact
technology_54
architecture
s
resource
pattern_13
be
totally
quality_attribute_18
with
rest
but
to
understand
this
you
need
a
mind
shift
totally
true
connector_data_18
back
to
top
so
iow
this
apply
only
to
web
project
what
about
window
project
by
parimal
jisaheb
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
so
iow
this
apply
only
to
web
project
what
about
window
project
connector_data_18
back
to
top
re
so
iow
this
apply
only
to
web
project
what
about
window
project
by
stefan
tilkov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
if
i
understand
your
question
correctly
no
this
do
not
only
apply
to
project
that
use
an
technology_23
ui
you
could
have
your
rich
component_18
connector_15
with
your
component_5
use
technology_19
accord
to
pattern_1
principle
connector_data_18
back
to
top
thanks
by
yuen
chi
lian
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
this
have
definitely
help
me
to
form
a
clear
picture
about
pattern_1
and
it
fundamental
cheer
yc
connector_data_18
back
to
top
re
architecture
of
resource
by
mike
s
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
a
bit
off
topic
but
this
remind
me
of
one
project
which
might
be
of
interest
to
the
poster
on
topic
though
totally
agree
with
stefan
s
connector_22
search
should
be
connector_13
a
connector_2
able
uri
which
effectively
create
unlimited
connector_data_19
of
resource
which
be
search
connector_data_4
a
slight
addition
to
the
pagination
solution
i
think
it
be
quality_attribute_6
be
do
the
same
way
content
negotiation
be
that
be
connector_2
order
would
same
representation
a
order
offset=0&count=10
mention
the
latter
a
location
so
that
the
component_18
can
pattern_6
the
connector_data_4
against
the
proper
key
interestingly
the
spec
talk
about
location
a
the
target
for
redirection
connector_data_18
back
to
top
re
what
when
pattern_1
semantics
be
not
enough
by
mike
schinkel
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
actually
in
a
pattern_5
design
put
be
use
for
update
only
or
insert
when
the
component_18
determine
the
resource
uri
and
can
be
use
to
insert
or
various
other
component_1
connector_data_18
back
to
top
re
pattern_5
with
many
parameter
by
mike
schinkel
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
be
part
of
rest
s
uniform

for
technology_19
that
uniform
be
generally
consider
to
be
connector_2
put

delete
and
head
although
it
can
include
a
few
other
patch
and
since
pattern_1
be
an
architecture
style
it
could
be
use
with
a
different
connector_data_3
connector_22
technology_26
and
with
a
different
uniform
although
that
s
a
point
to
clarify
the
though
component_1
a
few
people
be
use
pattern_1
outside
technology_19
connector_data_18
back
to
top
re
love
the
analogy
by
mike
schinkel
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
the
type
of
quality_attribute_2
concern
you
mention
be
a
red
herring
pattern_5
component_29
can
be
full
quality_attribute_4
with
technology_55
on
top
of
technology_19
quality_attribute_2
or
do
you
pattern_13
technology_55
a
not
be
sufficient
and
if
so
why
connector_data_18
back
to
top
re
resource
graph
traversal
be
not
the
same
a
state
transition
by
mike
schinkel
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
actually
the
term
representation
be
a
define
term
in
the
component_17
of
pattern_1
a
per
the
w3c
s
architecture
of
the
world_wide_web
volume
one
a
oppose
to
your
colloquial
use
of
the
term
relate
to
technology_17
and
the
fact
that
the
component_18
have
an
effectively
infinite
potential
number
of
to
and
understand
in
technology_46
a
oppose
to
the
tight
contrained
number
of
be
one
of
the
key
advantage
of
rest
consider
pattern_1
the
physical
quality_attribute_21
of
the
plug
on
your
component_36
s
power
cord
and
the
electrical
outlet
where
your
component_36
connector_48
it
power
rest
s
constraint
on
verb
be
the
plug
outlet
s
physical
quality_attribute_21
contraint
conversely
imagine
have
every
power
cord
have
a
different
type
of
plug
that
be
technology_46
and
all
it

actually
if
you
travel
a
lot
internationally
you
already
what
a
nightmare
of
inefficiency
and
lack
of
capability
that
lack
of
conformity
can
produce
connector_data_18
back
to
top
re
architecture
of
resource
by
mike
schinkel
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
also
to
stefan
s
connector_data_18
your
propose
search
be
state
a
a
verb
and
for
pattern_1
you
should
use
a
noun
if
for
no
other
reason
that
it
put
you
in
the
pattern_5
frame
of
mind
in
the
requirement_13
requirement_3
you
mention
i
technology_31
say
use
requirement_13
and
requirement_13

order
after
all
you
can
think
of
a
url
a
a
generalize
query
mechanism
in
many
way
the
url
be
really
suppose
to
be
an
opaque
but
because
of
web
component_5
implementation
many
of
u
have
be
condition
to
think
of
url
be
be
directory
and
filename
even
in
the
requirement_3
of
dynamic
output
from
such
a
technology_56
technology_57
aspx
etc
the
url
really
should
represent
the
resource
whose
representation
it

when
dereferenced
and
hide
how
the
representation
be
prepare
on
the
component_5
a
the
component_18
really
doesn
t
need
to

there
be
no
need
for
a
special
search
metaphor
so
for
your
latter
order
requirement_3
you
can
use
order
last10
and
order
thru



or
if
you
connector_data_8
order
use
component_35
a
stefan
suggest
connector_data_18
back
to
top
re
so
iow
this
apply
only
to
web
project
what
about
window
project
by
mike
schinkel
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
exactly
and
i
think
there
would
be
huge
benefit
to
build
restful
desktop
component_21
use
oop
connector_data_11
that
all
descend
from
a
base
of
resource
a
in
stefan
s
example
if
i
have
time
to
play
with
this
i
technology_31
love
to
create
such
a
technology_33
connector_data_18
back
to
top
re
so
iow
this
apply
only
to
web
project
what
about
window
project
by
florian
schwarz
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
what
about
the
technology_58
project
www
technology_58

it
s
focus
be
on
web
development
but
it
can
also
be
use
for
desktop
component_7
all
of
it
s
core
subclass
the
uniform

which
represent
a
uniform
with
the
technology_19
connector_2
put
etc
connector_data_18
back
to
top
question
about
use
of

by
matthias
k
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
on
several
occasion
i
have
connector_9
that
use

would
violate
the
pattern_1
principle
of
stateless
connector_46
i

t
really
see
why
this
be
necessarily
true
a
far
a
i
understand
the
demand
for
stateless
connector_12
only
concern
the
state
of
resource
and
not
component_18
or
component_7
state
however
the
most
typical
use
of
a

namely
connector_45
component_10
preference
or
component_27
connector_data_1
do
for
one
not
concern
resource
state
but
component_7
or
component_18
state
second
all
require
component_27
connector_data_1
can
be
carry
around
in
the
itself
and
not
be
component_13
in
the
component_5
memory
identifyable
be
a
component_27
key
a
be
the
requirement_3
with
e
g
technology_59
in
other
word
i
do
not
see
where
the
mere
use
of

do
not
harm
component_5
quality_attribute_1
and
quality_attribute_5
if
use
properly
that
be
say
what
be
your
thought
about
the
use
of

in
a
pattern_5
component_7
be
i
miss
something
connector_data_18
back
to
top
re
question
about
use
of

by
stefan
tilkov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i

t
think
you
be
miss
anything
in
my
opinion

themselves

t
violate
pattern_1
principle
use

to
component_13
a
key
that
identify
an
entry
in
a
component_5
side
component_27
state
connector_data_1
connector_data_21
do
connector_data_18
back
to
top
re
question
about
use
of

by
m
k
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
would
follow
the
last
up
by
say
that
a
hold
a
component_5
side
component_27

but
the
component_27
itself
can
also
be
something
connector_13
in
a
pattern_5
way
for
example
a
requirement_10
could
be
example
technology_22
component_27

take
by
itself
isn
t
a
component_5
side
component_27
another
resource
or
noun
except
perhaps
that
it
gut
be
only
connector_13
internally
to
component_7
s
require
a
component_27
connector_data_18
back
to
top
pattern_5
transaction
component_2
by
ian
goldsmith
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
m
begin
to
connector_2
a
grasp
of
pattern_1
principle
and
contraints
but
be
struggle
with
one
particular
example
i
m
try
to
component_6
a
component_2
that
manage
connector_37
account
provide
some
very
basic
capability
the
basic
resource
be
an
account
which
have
an
and
a
set
of
attribute
this
be
easy
to
component_6
connector_2
component_25
account
will
an
connector_data_5
doc
connector_data_19
all
the
account
a
pattern_1
resource
e
g
component_25
account
{accountid}
connector_2
component_25
account
{accountid}
will
an
connector_data_5
document
that
connector_data_22
all
the
attribute
for
now

assume
the
only
attribute
be
the
balance
of
the
account
what
i
want
to
create
be
a
set
of
for
withdraw
deposit
and
transfer
clearly
i
could
create
these
use
document
for
each
and
them
to
the
account
e
g

component_25
account
{accountid}
withdraw
fund
{value}
fund
withdraw
this
doesn
t
seem
to
follow
the
pattern_1
contraint
of
use
a
common
set
of
though
to
be
more
restful
i
guess
i
would
have
to
put
a
balance
requirement_10
to
the
account
at
least
this
would
be
idempotent
but
this
connector_48
clumsy
quickly
especially
for
transfer
give
the
different
pattern_19
level
require
it
s
easy
to
see
a
requirement_3
where
i
would
have
different
pattern_19
level
for
deposit
and
withdraw
for
example
be
i
miss
something
obvious
be
there
an
easy
way
to
connector_11
this
type
of
component_2
thanks
in
advance
ian
component_25
component_25
component_25
component_25
connector_data_18
back
to
top
re
pattern_5
transaction
component_2
by
stefan
tilkov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
ian
you
might
want
to
think
about
component_6
the
trans
action
you
describe
a
resource
in
their
own
right
e
g
you
could
create
a
transaction
via

connector_2
back
the
uri
in
a
location

and
then
put
the
state
connector_data_6
include
from
where
to
withdraw
and
where
to
deposit
connector_data_18
back
to
top
re
pattern_5
transaction
component_2
by
mark
little
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
mention
in
my
presentation
at
qcon
london
that
we
hp
do
some
work
on
pattern_5
transaction
back
in

well
the
specification
still
exist
and
if
i
ever
find
time
i
m
intend
to
re
connector_11
it
on
technology_60
i
technology_31
be
glad
to
discus
this
if
you
re
interest
connector_data_18
back
to
top
connector_17
large
connector_data_4
set
by
john
john
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
hi
all
do
you
have
any
idea
how
to
connector_17
large
connector_data_4
set
connector_data_3
connector_2
userserver



component_37
with
connector_14
it
be
bad
practise
to
all
component_37
to
component_10
i
think
one
of
the
solution
can
be
connector_17
to
component_10
technology_19



see
other
connector_22
and
to
location
set
domain
technology_22
component_10
range=100

which
mean
that
resource
contain
component_37
from

to

do
anybody
have
idea
how
to
solve
this
problem
it
be
quality_attribute_6
to
solve
it
with

status

thx
connector_data_18
back
to
top
do
you
suppose
that
all
possible
action
can
be
reduce
to

verb
by
mark
kamoski
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
do
you
suppose
that
all
possible
action
can
be
reduce
to

verb
connector_data_18
back
to
top
use
of
connector_24
to
define
require
representation
by
martin
haigh
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
also
think
this
be
a
great
introduction
to
rest
thanks
i
be
however
struggle
with
the
use
of
the
connector_data_3
connector_24
to
define
the
representation
require
the
connector_24
define
the
content
type
that
be
acceptable
and
be
often
a
connector_data_19
whilst
this
could
be
specifically
set
by
a
custom
component_18
somthing
a
browser
define
a
connector_data_19
of
requirement_10
often

or
more
would
in
not
be
quality_attribute_6
to
have
the
representation
require
define
in
the
url
a
part
of
the
for
example
customer123
pdf
that
way
a
component_10
could
explictely
point
their
browser
at
an
technology_23
svg
pdf
etc
represention
a
they
want
connector_data_18
back
to
top
re
use
of
connector_24
to
define
require
representation
by
stefan
tilkov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
martin
you
can
do
either
or
both
it
s
entirely
acceptable
to
do
both
content
negotiation
and
have
additional
explicit
resource
in
requirement_3
you
want
to
be
able
to
connector_14
to
specific
representation
connector_data_18
back
to
top
rest
uri
design
with
url
parameter
by
thomas
tkac
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
hi
i
designig
pattern_1
web
component_38
and
i
want
to
apply
some
on
resource
op1
op2
op3
which
have
one
or
two
argument
i
want
to
apply
this
in
one
requestsample
connector_2
resource
op1=name&op1=name2&op2=aa
bb&op1=name3in
order
which
be
in
requestat
first
op1
then
op1
op2
op1
with
argument
requirement_10
be
this
quality_attribute_6
practise
or
do
you
have
any
suggestion
recommendation
how
to
solve
this
problem
thx
connector_data_18
back
to
top
uml
diagram
by
ersoy
hasanoglu
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
in
which
component_7
you
draw
those
beautifull
uml
diagram
connector_data_18
back
to
top
re
uml
diagram
by
stefan
tilkov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
ersoy
i
can
t
imagine
you
re
still
interest
in
an
answer
but
if
you
be
it
be
omnigraffle
on
mac
o
x
connector_data_18
back
to
top
re
uml
diagram
by
ersoy
hasanoglu
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
much
appreciate
thank
you
stefan
kind
regard
connector_data_18
back
to
top
re
uml
diagram
by
peng
zhang
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
nobody
understand
pattern_1
or
technology_19
please
refer

steveklabnik
technology_22



nobody
underst
and
www
mfrbee
technology_22
requirement_17
connector_data_18
back
to
top
re
pattern_1
on
net
by
vlad
bezden
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
ole
if
you
still
look
at
technology_47
pattern_1
technology_33
i
would
recommend
technology_48
web
technology_30
very
nice
and
clean
technology_33
the
one
i
most
from
all
previous
m
implementation
connector_data_18
back
to
top
well
writen
and
very
easy
to
understand
by
phoenix
bai
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
thanks
for
the
brilliant
piece
connector_data_18
back
to
top
pattern_1
&
technology_20
behavior
by
dan
noonen
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
i
have
a
question
about
the
word
technology_20
in
reference
to
pattern_1
&
pattern_5
technology_19
a
a
backdrop
for
the
question
consider
all
of
the
apparently
valid
approach
suggest
in
the
component_17
of
the
restful
with
many
parameter
question
if
the
world
of
pattern_1
and
pattern_5
technology_19
provide
many
different
option
to
achieve
the
same
goal
win
t
we
continue
to
find
ourselves
in
a
situation
where
a
bunch
of
component_5
specific
component_20
connector_48
cod
into
component_18
i
that
for
this
i
need
to
do
it
this
pattern_5
way
in
order
to
make
the
right
thing
happen
and
for
that
i
need
to
do
it
that
pattern_5
way
this
doesn
t
feel
much
different
to
me
than
pattern_11
and
the
plethora
of
component_2
specific
component_20
one
have
to
against
when
deal
in
that
space
what
s
the
benefit
of
use
a
few
technology_20
command
connector_2

etc
when
you
still
have
to
wind
down
to
manage
component_5
specific
construct
in
order
to
achieve
anything
meaningful
i
m
guess
i
haven
t
make
that
mind
shift
that
s
mention
yet
&
i
m
hop
some
connector_data_15
will
help
connector_data_18
back
to
top
re
well
writen
and
very
easy
to
understand
by
stefan
tilkov
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
thanks
much
appreciate
connector_data_18
back
to
top
thank
you
for
a
clear
explanation
by
anuradha
va
your
connector_data_17
be
await
moderation
thank
you
for
participate
in
the
discussion
thanks
it
would
have
be
nice
to
connector_2
such
clear
explanation
for
every
concept
that
one
need
to
be
aware
of
connector_data_18
back
to
top
close
your
connector_data_18
quote
original
connector_data_17
allow
technology_23
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_15
to
any
of
my
connector_data_16
in
this
component_33
cancel
close
your
connector_data_18
allow
technology_23
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_15
to
any
of
my
connector_data_16
in
this
component_33
cancel
close
ok

development
how
to
prepare
for
the
unexpected
an
influxdata
outage
story
tell
at
kubeconeu

reproducible
development
with
container
green
development
terminology
and
climate
commitment
explain
by
at
devoxx
uk
architecture
&
design
oren
eini
on
technology_12
include
consistency
guarantee
and
technology_8
a
the
implementation
technology_13
kalix
build
serverless
requirement_9
requirement_19
requirement_14
crtical
component_21
with
no
component_3
architecting
for
the
edge
culture
&
how
connector_36
feedback
from
angry
component_11
help
to
develop
quality_attribute_6
technology_16
how
to
run
your
technology_16
department
a
coach
build
a
culture
of
quality_attribute_22
and
curiosity
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
release

technology_13
requirement_4
train
dataset
massive
requirement_4
for
developer
a
future
or
a
reality
devops
hashicorp
vault
improve
eventual
consistency
with
component_5
side
consistent
connector_data_13
cloudflare
d1
provide
quality_attribute_3
technology_39
for
cloudflare
component_32
effectively
pattern_12
your
pattern_12
miedwar
meshbesher
on
use
vigilance
control
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_28
out
every
tuesday
join
a
of
over


senior
developer
pattern_13
an
example
connector_2
a
quick
overview
of
content
publish
on
a
variety
of
innovator
and
early
adopter
technology_25
what
you
don’t
that
you
don’t
stay
up
to
date
with
the
late
connector_data_6
from
the
topic
you
be
interest
in
enter
your
e
mail
connector_19
select
your
country
select
a
country
i
to
infoq
technology_22
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
qcon
development
conference
real
world
technical
talk
no
technology_16
pitch
practical
idea
to
inspire
you
and
your
team
qcon
san
francisco
oct


in
person
qcon
san
francisco
bring
together
the
world
s
most
innovative
senior
engineer
across
multiple
domain
to
connector_54
their
real
world
implementation
of
emerge
trend
and
practice
uncover
emerge
trend
and
practice
to
solve
your
complex
engineering
challenge
without
the
technology_16
pitch
connector_7
your
spot
now
home
create
account
login
qcon
conference
contribute
infoq
editor
about
infoq
about
c4media

technology_61
infoq
developer
requirement_20
diversity
infoq
live


infoq
live


infoq
live


qcon
san
francisco



qcon
plus



follow
u
on
youtube212k
follower
linkedin18k
follower
rss19k
reader
twitter50k
follower
facebook20k

alexanew
stay
in
the
the
infoq
podcast
engineering
culture
podcast
the
architect
newsletter
general
feedback
feedback@infoq
technology_22
advertising
sales@infoq
technology_22
editorial
editors@infoq
technology_22
requirement_20
marketing@infoq
technology_22
infoq
technology_22
and
all
content
copyright
©


c4media
inc
infoq
technology_22
component_25
at
contegix
the
best
isp
we
ve
ever
work
with
privacy
notice
term
and
condition
requirement_21
bt
