evaluate
connector_1
technology_1
for
large
quality_attribute_1
connector_1
|
by
jaemi
bremner
|
adobe
tech
|
mediumget
unlimited
accessopen
in
apphomenotificationslistsstorieswritepublished
inadobe
tech
blogjaemi
bremnerfollowsep

2019·9
min
readevaluating
connector_1
technology_1
for
large
quality_attribute_1
streamingauthors
fakrudeen
ali
ahmed
jianmei
ye
and
jody
arthurthis
offer
a
behind
the
scene
look
at
adobe
experience
platform’s
component_1
for
evaluate
connector_1
technology_1
for
large
quality_attribute_1
component_1
to
provide
quality_attribute_2
requirement_1
experience
with
adobe
experience
requirement_2
adobe
experience
requirement_2
provide
personalization
advance
requirement_3
and
other
component_2
to
help
requirement_4
use
adobe
experience
component_3
meet
the
rise
requirement_1
expectation
for
personalize
experience
help
our
requirement_1
connector_2
these
kind
of
experience
in
real
time
require
an
ability
to
component_1
huge
amount
of
connector_data_1
while
at
the
same
time
ensure
quality_attribute_3
and
peak
requirement_5
every
day
billion
of
be
connector_3
to
adobe
experience
component_3
and
into
adobe
experience
requirement_2
in
pattern_1
and
component_1
with
daily
or
weekly
workflow
on
technology_2
technology_3
and
the
volume
of
connector_data_1
our
component_4
connector_4
be
grow
fast
we
evaluate
four
different
connector_1
technology_1
in
order
to
find
the
best
one
to
support
our
need
for
large
quality_attribute_1
component_1
in
order
to
component_1
an
ever
increasing
volume
of
connector_data_1
need
by
our
requirement_1
this
describe
our

which
development
team
in
other
organization
can
use
a
a
component_5
for
evaluate
connector_1
technology_1
for
their
own
use
requirement_6
select
the
candidate
technology_1
for
our
use
caseour
primary
goal
be
to
convert
the
workflow
we
build
for
our
weekly
pattern_1
component_1
in
adobe
experience
requirement_2
into
a
real
time
connector_1
workflow
with
sub
second
quality_attribute_4
there
be
many
technology_1
quality_attribute_5
to
support
connector_5
after
do
some
initial
research
to
narrow
down
the
connector_data_2
we
choose
to
evaluate
storm
flink
samza
and
technology_3
base
on
their
feature
set
relative
to
our
particular
use
requirement_6
in
this
section
we
provide
a
brief
description
of
each
of
these
technology_1
in
term
of
it
potential
benefit
for
our
use
requirement_6
stormapache
technology_4
be
an
open
component_6
real
time
connector_1
technology_1
that
quality_attribute_6
with
any
component_7
and
component_8
technology_5
that
already
exist
in
the
technology_6
and
can
be
use
with
any
programming
technology_7
storm
be
fast
too
it’s
ability
to
component_1
connector_1
connector_data_1
have
be
measure
at
more
than
a
million
per
second
per
technology_8
technology_4
topology
be
able
to
connector_6
connector_7
of
connector_data_1
and
component_1
them
in
arbitrarily
complex
way
and
repartitioning
them
from
technology_8
to
technology_8
in
any
way
require
for
the
workflow
figure

example
of
a
connector_1
dataflow
in
storm
component_6
storm
technology_2

flinkapache
flink
support
both
connector_1
and
pattern_1
component_1
flink
run
in
all
common
cluster
environment
and
be
capable
of
perform
computation
at
in
memory
quality_attribute_7
and
at
any
quality_attribute_1
by
precisely
control
time
and
state
flink’s
runtime
can
run
any
kind
of
component_9
on
unbounded
connector_5
when
configure
for
high
quality_attribute_8
flink
do
not
have
a
single
point
of
failure
and
be
capable
of
quality_attribute_9
to
thousand
of
core
and
terabyte
of
component_9
state
while
still
connector_8
high
quality_attribute_10
and
low
quality_attribute_4
figure

example
of
a
connector_1
dataflow
in
flink
component_6
technology_2

figure

overview
of
flink
connector_5
component_6
technology_2

sparkapache
technology_3
connector_1
be
an
extension
of
the
core
technology_3
technology_9
technology_3
connector_1
be
very
quality_attribute_11
offer
high
quality_attribute_10
fault
tolerant
component_1
of
live
connector_data_1
connector_5
connector_data_1
can
be
ingest
from
many
component_6
component_1
and
connector_9
out
to
filesystems
component_8
and
live
requirement_7
figure

high
level
architecture
of
technology_3
component_6
technology_3
technology_2

it
be
important
to
note
that
technology_3
with
technology_3
connector_1
be
not
a
requirement_8
connector_1
technology_1
unlike
the
other
three
component_4
we
evaluate
technology_3
connector_1
component_10
connector_data_1
in
micro
pattern_1
which
be
a
variant
of
traditional
pattern_1
component_1
because
it
allow
component_1
in
very
small
pattern_1
those
pattern_1
can
be
component_1
in
rapid
succession
closely
mimic
real
time
connector_1
of
discrete
connector_data_1
it
could
be
argue
that
compare
technology_3
connector_1
with
requirement_8
connector_1
technology_1
isn’t
really
a
fair
test
however
technology_3
be
so
widely
use
in
the
requirement_9
one
might
reasonably
assume
it
to
be
a
logical
choice
especially
with
the
quality_attribute_8
of
technology_3
connector_5
for
build
connector_1
workflow
but
be
it
the
best
choice
without
test
there
be
no
way
for
u
to
if
this
option
would
be
a
wise
choice
in
our
use
requirement_6
we
also
want
to
see
how
micro
pattern_1
component_1
build
on
a
component_4
a
quality_attribute_12
a
technology_3
would
technology_6
up
against
other
widely
use
requirement_8
connector_1
technology_1
figure

example
of
connector_1
connector_data_1
in
micro
pattern_1
with
technology_3
with
technology_3
connector_5
component_6
technology_3
technology_2

samzaapache
samza
offer
quality_attribute_11
high
requirement_5
storage
that
support
stateful
pattern_2
component_9
one
of
it
key
feature
be
stateful
connector_5
component_1
the
ability
to
maintain
state
allow
samza
to
support
very
sophisticate
connector_5
component_1

such
a
join
input
connector_5
grouping
connector_data_3
and
aggregate
group
of
connector_data_3
in
samza
each
connector_data_4
be
associate
with
it
own
instance
of
a
local
component_8
which
only
connector_10
connector_data_1
correspond
to
the
component_11
component_1
by
that
connector_data_4
when
quality_attribute_9
a
workflow
samza
provide
more
computational
resource
by
transparently
migrate
the
connector_data_5
from
one
component_12
to
another
give
each
connector_data_4
it
own
state
this
allow
connector_data_5
to
be
relocate
without
impact
the
overall
requirement_5
figure

illustration
of
local
state
requirement_10
in
samza
facilitate
connector_1
component_1
component_6
samza
technology_2

our
evaluation
criteriaour
evaluation
include
both
qualitative
and
quantitative
criterion
while
quantitative
benchmarking
be
critical
in
evaluate
a
connector_1
technology_1
the
additional
more
qualitative
measure
include
in
the
connector_data_2
below
be
also
important
to
consider
in
choose
a
connector_1
technology_1
to
support
the
real
time
need
of
adobe
experience
component_3
requirement_1
use
adobe
experience
requirement_2
maintainabilitydeveloper
friendlinessframework
complexitymaturitythroughputlatencyreliabilitywhile
these
criterion
will
not
be
relevant
to
all
use
requirement_6
the
basic
component_1
we
describe
here
for
evaluate
qualitative
criterion
can
be
apply
to
any
situation
in
which
a
developer
need
to
identify
the
best
solution
to
meet
his
or
need
evaluate
a
connector_1
technology_1
qualitativelythe
follow
be
two
component_13
for
criterion
we
use
for
our
qualitative
evaluation
with
the
factor
we
consider
for
them
and
some
of
our
connector_data_6
component_14

qualitative
evaluation
criterion
and
the
factor
evaluate
specific
to
adobe
experience
platform’s
use
requirement_6
component_14

connector_data_7
for
a
few
of
the
factor
we
evaluate
for
our
qualitative
criterion
that
include
technology_3
pattern_1
component_1
changesquantitative
benchmarkingfor
each
technology_1
we
evaluate
the
relative
difficulty
in
set
up
and
operational
complexity
a
part
of
our
quantitative
benchmarking
the
figure
below
provide
a
generalize
diagram
of
our
benchmarking
set
up
every
connector_1
technology_1
have
typically
two
component_15
the
component_6
which
connector_11
the
connector_data_1
from
the
connector_data_3
component_7
and
connector_12
it
to
the
processor
and
the
processor
that
do
the
computational
work
the
interrelationship
between
these
component_16
be
important
for
back
pressure
awareness
and
for
the
component_6
to
be
able
to
throttle
when
necessary
to
ensure
even
consumption
in
line
with
component_1
figure

benchmarking
setup
for
our
requirement_5
test
we
set
up
our
connector_5
component_1
to
run
multiple
time
with
one
million
run
for
each
test
we
then
run
a
long
run
quality_attribute_3
test
for
three
day
we
repeat
this
for
each
of
the
four
technology_1
we
be
evaluate
benchmarking
resultsstormthroughput
for
the
majority
of
run
with
our
technology_4
set
up
the
mean
quality_attribute_10
be

per
second
with
a
technology_10
deviation
of

millisecond
these
connector_data_7
pattern_3
into
a
99%
confidence
level
that
we
can
expect
quality_attribute_10
between
50–1

per
secondlatency
the
99th
component_1
quality_attribute_4
be
below

millisecond
for
most
of
our
run
and
the
99th
component_1
quality_attribute_4
technology_10
be
le
than

millisecond
both
of
these
connector_data_7
be
obtain
at
a
confidence
level
of
great
than
99%
quality_attribute_3
in
the
three
day
over
which
the
connector_data_1
be
connector_5
our
technology_4
set
up
do
not
experience
any
crash
or
failure
figure

component_1
quality_attribute_4
connector_data_7
for
our
technology_4
test
flinkthroughput
for
the
majority
of
our
run
with
flink
the
mean
quality_attribute_10
be


per
second
with
a
technology_10
deviation
of

millisecond
with
these
connector_data_6
we
can
expect
quality_attribute_10
of
600–1

per
second
with
99%
confidence
quality_attribute_4
the
99th
component_1
quality_attribute_4
be
below

millisecond
for
most
of
our
run
and
the
99th
component_1
quality_attribute_4
technology_10
be
le
than

millisecond
both
of
these
connector_data_7
be
obtain
at
a
confidence
level
of
great
than
99%
quality_attribute_3
a
with
our
technology_4
test
flink
do
not
experience
any
crash
or
failure
over
the
three
day
test
figure

component_1
quality_attribute_4
connector_data_7
for
our
flink
test
sparkthroughput
for
the
majority
of
our
run
with
technology_3
the
mean
quality_attribute_10
be


per
second
with
a
technology_10
deviation
of

millisecond
these
connector_data_7
suggest
we
can
expect
quality_attribute_10
to
range
between
500–1

per
second
with
99%
confidence
however
we
find
that
technology_3
be
unable
to
quality_attribute_13
the
workload
to
all

executor
there
be
only
about

executor
active
during
our
three
day
test
quality_attribute_4
for
the
majority
of
the
run
the
99th
component_1
quality_attribute_4
be
6–7
second
with
a
99%
confidence
level
quality_attribute_3
over
the
three
day
test
technology_3
crash
in
every
connector_1
attempt
for
pattern_1
short
than
a
minute
and
for
one
second
pattern_1
in
particular
technology_3
be
unable
to
complete
the
one
million
requirement_5
run
we
attribute
this
problem
to
spark’s
inability
to
connector_13
backpressure
back
to
the
component_6
figure

component_1
quality_attribute_4
connector_data_7
for
our
technology_3
test
samzathroughput
for
the
majority
of
our
run
with
samza
the
mean
quality_attribute_10
be

per
second
with
a
technology_10
deviation
of

millisecond
this
mean
we
can
expect
quality_attribute_10
of
185–815
per
second
with
99%
confidence
quality_attribute_4
the
99th
component_1
quality_attribute_4
be
below

millisecond
for
most
of
our
run
and
the
99th
component_1
quality_attribute_4
technology_10
be

millisecond
with
both
connector_data_7
obtain
at
great
than
99%
confidence
quality_attribute_3
samza
produce
a
“prelaunch
err”
during
the
connector_14

however
there
be
no
error
or
crash
during
the
component_1

which
produce
a
steady
state
quality_attribute_4
of
about

millisecond
and
a
quality_attribute_10
of


second
over
the
three
day
test
figure

component_1
quality_attribute_4
connector_data_7
for
our
samza
test
bring
it
all
togetherbringing
all
of
our
qualitative
and
quantitative
connector_data_7
into
a
single
component_14
we
be
able
to
easily
identify
the
best
connector_1
technology_1
for
the
large
quality_attribute_1
component_1
necessary
to
support
the
grow
real
time
need
of
our
adobe
experience
component_3
requirement_1
technology_2
flink
be
our
component_3
of
choice
for
the
follow
reason
the
ability
to
handle
backpressure
play
a
critical
role
in
the
quality_attribute_14
of
a
connector_1
component_4
flink
provide
excellent
handle
of
backpressure
compare
to
technology_3
connector_5
for
example
which
have
no
ability
to
connector_13
back
pressure
to
component_6
component_15
flink
perform
a
well
a
or
quality_attribute_2
than
the
other
three
technology_1
in
term
of
it
quality_attribute_10
and
low
quality_attribute_4
and
prove
highly
quality_attribute_12
during
our
rigorous
test
flink
do
not
crash
and
provide
excellent
requirement_5
flink
technology_1
have
quality_attribute_2
support
overall
compare
to
the
other
technology_1
we
evaluate
which
bode
well
for
it
continue
development
and
quality_attribute_15
component_14

connector_data_7
combine
to
support
decision
make
adobe
experience
component_3
component_10
billion
of
each
day
within
adobe
experience
requirement_2
at
more
than


per
second
with
so
much
connector_data_1
come
into
the
component_4
we

we
need
to
find
a
quality_attribute_2
way
to
component_1
it
to
support
the
grow
real
time
need
of
adobe
experience
component_3
requirement_1
in
order
to
build
a
connector_1
component_4
capable
of
component_1
huge
amount
of
connector_data_1
in
real
time
we
need
to
thoroughly
evaluate
our
option
for
connector_1
technology_1
we
believe
the
evaluation
we’ve
describe
here
offer
a
useful
component_5
for
developer
team
in
other
organization
connector_data_4
with
choose
a
technology_1
that
will
help
them
meet
the
challenge
inherent
in
component_1
connector_1
at
high
quality_attribute_1
follow
the
adobe
tech
for
more
developer
story
and
resource
and
connector_15
out
adobe
developer
on
twitter
for
the
late
news
and
developer
technology_11
sign
up
here
for
future
adobe
experience
component_3
meetups
reference
technology_12
storm
technology_2

technology_12
samza
technology_2

technology_12
technology_3
technology_2

connector_5
technology_12
flink
technology_2


2more
from
adobe
tech
blognews
update
and
thought
relate
to
adobe
developer
and
technology_5
connector_16
more
from
adobe
tech
blogrecommended
from
mediumpavel
tuzovinitnextterraform
don’t
use
technology_13
technology_14
with
your
cluster
resource
abhishek
asarawaingeek
culturedocker
image
for
novicejt
earlautomate
connector_17
messagesmehar
kailainswiggy
bytesdetecting
component_17
cloning
&
location
spoof
on
androidgyanendra
kumar
knojiyabest
book
for
engineersdzivetemail
requirement_11
in
technology_15
with
a
fake
technology_16
component_18
—
etherealariel
herreraintowards
devestated
technology_9
connector_18
real
estate
property
connector_data_1
use
pythonmandvivermaindailytechlogin
with
use
technology_17
technology_18
technology_19
abouthelptermsprivacyget
the
appget
startedjaemi
bremner1
1k
followersexperience
technologist
currently
director
of
developer
content
component_19
for
technology_20
former
developer
advocate
for
adobe
experience
component_3
twitter
@jaenessfollowmore
from
mediumedu
technology_5
watchinevent
drive
utopiabuild
serverless
connector_1
architecture
with
upstash
kafkaelliot
westinexpedia
group
technologykafka
schema
registry
pem
authenticationrania
zyaneapache
technology_21
monitoringsamuel
hu
tech
blogmicro
architectural
analysis
of
in
memory
oltp
revisitedhelpstatuswritersblogcareersprivacytermsaboutknowable
