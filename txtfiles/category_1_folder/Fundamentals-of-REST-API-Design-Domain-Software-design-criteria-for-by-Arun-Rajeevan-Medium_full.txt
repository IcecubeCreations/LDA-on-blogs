fundamental
of
pattern_1
component_1
design
domain
design
criterion
for…
|
by
arun
rajeevan
|
mediumget
unlimited
accessopen
in
apphomenotificationslistsstorieswritearun
rajeevanfollowoct
2018·6
min
readfundamentals
of
pattern_1
component_1
designdomain
connector_1
between
two
different
servicesfull
form
pattern_1
—
representational
state
transferkeywords
in
rest
resource
oriented2
representation3
addressability4
statelessness5
scalability6
connectedness7
uniform
interfacewhy
pattern_1
to
create
quality_attribute_1
uniformly
interfaced
component_2
component_3
which
be
completely
stateless
explanation
of
each
keywords
resource
orient
a
resource
be
something
that
can
be
component_4
on
a
component_5
and
represent
a
a
connector_2
of
bit
resource
orient
refer
to
component_6
each
component_7
a
resource
which
can
be
connector_3
by
at
least
one
identifier
representation
some
connector_data_1
about
the
current
state
of
a
resource
addressability
each
resource
should
be
quality_attribute_2
through
at
least
one
identifier
statelessness
the
component_3
never
rely
on
connector_data_2
from
previous
connector_data_3
there
be
type
of
state
in
rest
resource
state
component_8
stateresource
state
the
representation
of
a
resource
which
be
component_4
on
a
component_9
this
state
be
same
for
all
the
component_10
component_8
state
the
connector_data_2
that
be
component_4
on
respective
component_10
each
component_10
have
different
state
this
connector_data_2
or
state
be
provide
to
the
component_3
while
make
a
connector_data_3
note
don’t
connector_4
confuse
with
the
in
memory
state
of
component_3
this
state
will
be
create
whenever
there
be
a
component_10
connector_data_3
and
flush
out
after
connector_5
the
connector_6
back
to
component_10
quality_attribute_3
capability
to
handle
large
number
of
connector_data_3
x
technology_1
quality_attribute_4
run
multiple
copy
of
entire
component_8
y
technology_1
quality_attribute_4
run
multiple
copy
of
a
particular
component_3
which
have
huge
number
of
connector_data_4
at
a
particular
instant
of
time
connectedness
sometimes
representation
of
a
resource
be
not
a
connector_2
of
bit
but
it
contain
connector_7
to
other
resource
uniform
deal
with
how
a
component_10
talk
to
a
component_3
and
understand
what
to
tell
the
component_3
also
the
component_3
should
be
able
to
understand
what
component_11
want
to
say
guideline
for
pattern_1
use
httpidempotent
technology_2
methodsan
technology_2
be
say
to
be
idempotent
if
the
component_9
provide
the
same
representation
of
a
resource
irrespective
of
the
number
of
time
component_12
connector_data_3
it
example
an
image
of
a
cat
be
component_4
at
component_9
if
the
component_12
connector_8
this
image
time
continuously
the
component_9
will
serve
the
same
representation
time
if
the
component_12
replace
this
image
with
a
image
time
it
be
same
a
the
first
replace
non
idempotent
but
what
if
there
be
an
image
counter
resource
at
component_9
side
which
connector_8
incremented
during
an
technology_2
connector_data_3
so
in
this
scenario
if
the
component_12
connector_data_4
time
the
counter
be
incremented
by
get1
never
connector_9
connector_data_5
in
connector_4
connector_data_3
it
should
be
idempotent
mean
it
should
serve
the
same
representation
irrespective
of
the
number
of
time
the
component_10
connector_data_3
the
connector_4
uri
must
be
descriptive
meaningful
and
resource
orient
conditional
connector_4
whenever
component_9
serve
a
representation
it
should
include
a
time
requirement_1
for
last
modify
technology_2
this
time
denote
the
last
time
the
connector_data_1
underlie
the
representation
be
connector_10
the
component_10
can
component_4
this
requirement_1
of
last
modify
and
use
it
late
so
the
second
time
the
component_10
make
a
connector_4
connector_data_3
for
that
connector_data_3
it
can
provide
that
time
in
the
if
modify
since
connector_data_3
when
the
component_9
connector_11
this
connector_4
connector_data_3
it
compare
the
time
with
the
late
modify
resource
state
time
if
both
be
same
then
component_9
connector_12
a
connector_6
of
“not
modified”
and
doesn’t
connector_9
any
connector_data_1
but
if
the
the
time
doesn’t
match
then
component_9
connector_9
“ok”
and
provide
the
representation
in
the
connector_6
body
note
last
modify
if
modify
since
and
etag
if
none
match
can
be
use
interchangeably
the
component_9
should
set
requirement_1
for
pattern_2
control
to
avoid
pattern_2
of
resource
at
component_10
side
or
web
gateway
for
indefinite
period
of
time
post1
to
create
a
resource
whose
uri
be
go
to
be
determine
by
component_9
it
be
not
idempotent
put1
to
replace
the
current
representation
of
an
exist
resource
with
a
representation
if
component_10
or
decide
the
uri
to
create
a
resource
under
that
uri
then
use
put
it
be
idempotent
put
versus
postyou
can
connector_13
the
creation
of
resource
through
put
or
both
but
a
component_10
can
only
use
put
to
create
resource
when
it
can
calculate
the
final
uri
of
the
resource
example
in
amazon’s
technology_3
component_3
the
uri
path
to
the
bucket
be
{bucket
name}
since
the
component_10
choose
the
bucket
name
put
be
use
on
the
other
hand
the
uri
to
a
resource
which
be
component_4
in
a
component_13
look
{database
component_13
name}
{database
id}
the
name
of
the
component_14
component_13
be
in
advance
but
be
create
run
time
in
such
scenario
be
use
to
connector_9
connector_data_3
to
a
a
“factory”
resource
locate
at
{database
component_13
name}
the
component_9
choose
a
uri
for
the
resource
uri
naming1
use
path
variable
to
separate
element
of
a
hierarchy
it
can
be
imagine
a
a
direct
graph
use
punctuation
character
to
separate
multiple
piece
of
connector_data_1
at
the
same
level
of
a
hierarchy
use
query
variable
only
to
suggest
argument
be
plug
into
an
algorithm
uris
be
suppose
to
designate
resource
not
on
the
resource
so
the
expect
requirement_1
on
the
uri
be
noun
but
sometimes
some
can
themselves
be
a
resource
in
such
scenario
it
be
ok
to
have
uri
with
{do
operation}http
status
codes1
whenever
there
be
an
error
condition
connector_9
an
technology_2
connector_6
in
the
range
3xx
4xx
or
5xx
and
provide
supplementary
connector_data_1
in
technology_2
if
the
component_9
provide
a
connector_6
body
during
error
condition
then
it
will
be
a
document
describe
the
error
condition
not
a
representation
of
the
connector_data_3
resource
“not
found”
be
use
when
the
component_12
try
to
connector_14
a
resource
which
doesn’t
exist
it
be
helpful
to
connector_9
some
description
about
the
error
in
the
body
a
it
help
in
debug
but
usually
only
status
be
connector_9
in
production
environment
“see
other”
can
be
use
when
component_12
have
mistyped
some
uri
and
the
component_9
can
somehow
figure
out
that
he
she
be
try
to
use
some
valid
uri
“bad
request”
can
be
use
when
component_12
have
type
a
logically
impossible
requirement_1
in
the
uri
but
it
match
the
uri
template
component_9
have
define
for
example
latitude
be
not
logically
possible
and
there
be
no
resource
“service
unavailable”
can
be
use
when
the
component_9
be
unable
to
fulfill
that
particular
connector_data_3
“internal
component_9
error”
can
be
use
to
express
some
condition
occur
due
to
corrupt
connector_data_1
hardware
failure
or
a
bug
happy
cod
“ok”
be
use
when
component_9
connector_12
the
expect
connector_data_6
the
component_10
want
“accepted”
be
use
to
acknowledge
that
the
have
be
create
at
component_9
side
and
come
back
late
to
the
status
of
the
pattern_3
pattern_3
pattern_4
transaction
use
technology_2
restrelationship
between
resource
suppose
alice
and
bob
be
resource
one
day
they
connector_4
married
a
component_10
can
put
to
alice
uri
that
she
connector_4
married
to
bob
and
can
put
to
bob’s
uri
that
he
connector_4
married
to
alice
in
short
put
connector_data_3
on
two
different
uris
the
best
way
be
to
consider
the
relationship
itself
a
resource
a
component_10
can
connector_9
put
connector_data_3
to
marriage
uri
to
declare
two
people
married
pattern_3
technology_2
have
a
pattern_5
connector_data_3
connector_6
component_6
the
component_10
open
a
connector_data_7
make
a
connector_data_3
to
the
component_9
and
keep
the
connector_data_7
open
until
the
component_9
have
connector_15
the
connector_6
if
the
component_10
doesn’t
care
about
the
connector_6
it
can
close
the
connector_data_7
early
but
if
it
want
a
connector_6
then
it
leave
the
connector_data_7
open
until
the
component_9
connector_12
the
connector_6
the
problem
be
not
all
can
be
complete
in
the
time
we
expect
some
take
hour
or
day
an
technology_2
connector_data_3
should
be
time
out
after
some
kind
of
inactivity
so
how
to
find
a
reestful
solution
for
such
time
connector_16
the
solution
be
that
the
be
split
into
two
or
more
pattern_5
connector_data_3
the
first
connector_data_3
spawn
the
and
subsequent
connector_data_4
the
component_10
about
the
status
of
the
example
imagine
that
we
have
a
web
component_3
that
handle
a
component_15
connector_data_3
the
component_10
make
it
component_3
connector_data_4
normally
possibly
without
any
knowledge
that
the
connector_data_3
will
be
hand
asynchronously
it
connector_12
connector_data_3
this
one
queuehost
example
comgive
me
the
square
root
of
123223422322233the
component_9
connector_17
the
connector_data_3
create
a
and
put
it
at
the
end
of
the
component_15
it
will
take
a
long
time
for
the
to
be
complete
instead
of
keep
the
component_10
wait
until
the
finally
run
the
component_9
connector_12
this
connector_6
right
away
acceptedlocation
technology_2
example
technology_4
component_15
job345the
component_10
will
use
this
uri
to
connector_18
the
status
of
the
pattern_4
sometimes
component_11
need
to
operate
on
more
than
one
resource
at
once
what
if
he
she
want
to
modify
a
set
of
resource
at
once
it
be
state
early
that
each
uri
should
denote
a
resource
or
set
of
resource
if
component_12
want
to
delete
a
set
of
resource
at
once
then
he
she
will
connector_9
delete
connector_data_3
to
that
uri
which
represent
the
set
but
what
the
status
what
if
the
component_9
fail
to
delete
one
of
the
resource
in
hat
set
one
solution
be
“accepted”
and
connector_9
component_10
a
connector_19
which
he
she
can
use
late
to
connector_18
the
status
another
solution
be
“multi
status”
which
tell
the
component_10
to
look
into
the
connector_6
body
for
a
connector_data_8
of
status
cod
more
from
arun
rajeevanfollowsuffering
from
knowledge
questlove
podcast
or
audiobooks
on
the
go
with
our
component_16
try
knowablerecommended
from
mediumassaf
gannonineverything
full
stackmicroservices
pattern_6
and
everything
in
betweencarlos
lisandrainbluekirifrom
pattern_1
to
grpc
with
technology_5
coreahmed
almushtaghilthe
“cloud”
be
take
over…imran
alikotlin
seal
classread
download*+
a
guide
to
the
collision
avoidanceread
download*+
a
guide
to
the
collision
avoidancedoctor
veethe
from
decagon
my
journey
to
greatnesshamid
aliopen
container
in
remote
ssh
component_17
use
vscodegrabingrabhow
we
connector_20
domain
drive
development
in
golangabouthelptermsprivacyget
the
appget
startedarun
rajeevan167
followerssuffering
from
knowledge
questfollowmore
from
mediumrachelle
palmerwhere
to
technology_6
in
2022tharindu
dasun
doloswalaare
you
still
didn’t
start
use
version
control
for
connector_data_1
vlad
antsitovichintroduction
to
graphqlrohan
raoapihelpstatuswritersblogcareersprivacytermsaboutknowable
