real
time
metric
use
prometheus
&
grafana
|
redbyte
redbyte
solution
&
component_1
reference
about
u
sk
en
martin
kovã¡äik
engineer
@martinkovacik
jul
real
time
metric
use
prometheus
&
grafana
if
you’ve
ever
do
a
serious
web
component_2
you’ve
certainly
meet
with
a
requirement
for
it
pattern_1
or
track
various
component_3
and
runtime
metric
explore
component_4
metric
you
discover
different
pattern_2
of
component_2
usage
e
g
low
traffic
during
weekend
and
holiday
or
for
example
visualize
cpu
disk
space
and
ram
usage
etc
a
an
example
if
the
ram
usage
graph
show
that
the
usage
be
constantly
rise
and
to
normal
only
after
the
component_3
restart
there
be
a
memory
leak
certainly
there
be
many
reason
for
connector_1
component_3
and
runtime
metric
for
your
component_3
there
be
several
technology_1
for
component_3
pattern_1
e
g
zabbix
and
others
technology_1
of
this
type
focus
mainly
on
runtime
pattern_1
i
e
cpu
usage
quality_attribute_1
ram
etc
but
they
be
not
very
well
suit
for
component_3
pattern_3
and
answer
question
how
many
component_5
be
currently
requirement_1
in
what’s
the
distribution
of
component_6
connector_2
time
etc
in
this
i’ll
show
you
how
to
do
real
time
runtime
and
component_3
pattern_3
use
prometheus
and
grafana
a
an
example
let’s
consider
opendata
component_7
of
itms2014+
prometheus
our
pattern_3
solution
consist
of
two
part
the
core
of
the
solution
be
prometheus
which
be
a
multi
dimensional
time
series
component_8
you
can
imagine
it
a
a
connector_data_1
of
timestamped
name
metric
each
consist
of
a
set
of
key=value
pair
represent
the
pattern_1
variable
prometheus
feature
relatively
extensive
alerting
option
it
have
it
own
query
technology_2
and
also
basic
mean
for
visualise
the
connector_data_2
for
more
advance
visualisation
i
recommend
grafana
prometheus
unlike
most
other
pattern_3
solution
work
use
connector_3
approach
this
mean
that
each
of
the
pattern_1
component_9
connector_4
an
technology_3
connector_5
pattern_1
metric
prometheus
then
periodically
download
the
metric
grafana
grafana
be
a
component_10
for
visualize
and
analyze
connector_data_2
grafana
do
not
have
it
own
timeseries
component_8
it’s
basically
a
frontend
to
popular
connector_data_2
component_11
prometheus
influxdb
graphite
elasticsearch
and
others
grafana
allow
you
to
create
requirement_2
and
requirement_3
and
connector_6
it
with
others
i’ll
show
you
that
in
a
moment
publish
metric
from
an
component_3
in
order
for
prometheus
to
be
able
to
download
metric
it
be
necessary
to
connector_7
an
technology_3
from
your
component_3
when
connector_data_3
this
technology_3
should
current
component_3
metric
we
need
to
instrument
the
component_3
prometheus
support
two
metric
encoding
technology_4
plain
text
and
technology_5
buffer
fortunately
prometheus
provide
component_12
technology_6
for
all
major
programming
technology_2
include
technology_7
go
technology_8
technology_9
technology_10
technology_11
technology_12
technology_13
technology_14
j
technology_15
technology_16
technology_17
technology_18
and
others
a
i
connector_8
early
let’s
consider
itms2014+
opendata
technology_19
which
be
an
component_3
connector_8
in
go
there
be
an
official
prometheus
go
component_12
technology_6
embed
it
be
very
easy
and
consist
of
only
three
step
the
first
step
be
to
prometheus
component_12
technology_6
to
1package
3import
technology_20
technology_21
prometheus
client_golang
prometheus
technology_20
technology_21
prometheus
client_golang
prometheus
promhttp
the
second
step
be
to
create
an
technology_3
for
connector_5
the
component_3
metric
in
this
requirement_4
i
use
gorilla
mux
and
negroni
technology_3
technology_22
1r
=
mux
newrouter
2r
path
metric
pattern_4
promhttp
pattern_4
3n
=
negroni
negroni
newrecovery
4n
usehandler
r
we
be
only
interest
in
line
where
we
say
that
the
metric
will
be
component_13
by
prometheus
pattern_4
which
will
connector_7
component_3
metric
in
prometheus
technology_4
something
very
similar
to
the
follow
output
go_goroutines
go_memstats_alloc_bytes
949552e+06
go_memstats_buck_hash_sys_bytes
542265e+06
go_memstats_frees_total
49226407e+08
go_memstats_gc_sys_bytes
568768e+06
go_memstats_heap_alloc_bytes
949552e+06
go_memstats_last_gc_time_seconds
5020497859690137e+09
go_memstats_lookups_total
go_memstats_mallocs_total
49277644e+08
go_memstats_mcache_inuse_bytes
go_memstats_stack_sys_bytes
go_memstats_sys_bytes
0659192e+07
process_open_fds
process_resident_memory_bytes
3012096e+07
process_start_time_seconds
50171016757e+09
process_virtual_memory_bytes
42384384e+08
in
production
you
would
usually
want
some
kind
of
connector_9
control
for
example
technology_3
basic
pattern_5
and
technology_3
r
path
metric
pattern_4
httpauth
simplebasicauth
username_not_shown
password_not_shown
promhttp
pattern_4
although
we
have
only
three
line
of
we
can
now
connector_10
the
application’s
runtime
metric
e
g
number
of
active
goroutines
ram
allocation
cpu
usage
etc
however
we
do
not
connector_7
any
component_3
domain
specific
metric
in
the
third
step
i’ll
show
you
how
to
custom
component_3
metric
let’s
some
metric
that
we
can
answer
these
question
which
pattern_6
be
most
use
by
component_14
how
often
what
be
the
connector_2
time
whenever
we
want
to
connector_7
a
metric
we
need
to
select
it
type
prometheus
provide
type
of
metric
counter
be
a
cumulative
metric
that
represent
a
single
numerical
requirement_5
that
only
ever
go
up
a
counter
be
typically
use
to
count
connector_data_4
serve
connector_data_5
complete
error
occur
etc
gauge
be
a
metric
that
represent
a
single
numerical
requirement_5
that
can
arbitrarily
go
up
and
down
gauge
be
typically
use
for
measure
requirement_5
pattern_7
or
current
memory
usage
but
also
“counts”
that
can
go
up
and
down
the
number
of
run
goroutines
histogram
sample
observation
usually
thing
connector_data_6
duration
or
connector_2
size
and
count
them
in
quality_attribute_2
bucket
it
also
provide
a
sum
of
all
observe
requirement_5
summary
be
similar
to
a
histogram
a
summary
sample
observation
usually
thing
connector_data_6
duration
and
connector_2
size
while
it
also
provide
a
total
count
of
observation
and
a
sum
of
all
observe
requirement_5
it
calculate
quality_attribute_2
quantiles
over
a
slide
time
window
in
our
requirement_4
we
want
to
connector_7
the
component_13
time
of
connector_data_4
for
each
and
their
percentile
and
the
number
of
connector_data_4
per
time
unit
a
the
basis
for
these
metric
we’ve
chosen
the
histogram
type
let’s
look
at
the
1httpdurationshistogram
=
prometheus
newhistogramvec
prometheus
histogramopts{
name
http_durations_histogram_seconds
help
technology_3
connector_data_6
quality_attribute_3
distribution
bucket
prometheus
exponentialbuckets
5}
string{
version
pattern_8
action
}
6prometheus
mustregister
httpdurationshistogram
we’ve
a
metric
name
http_durations_histogram_seconds
and
say
that
we
want
to
connector_7
four
dimension
technology_3
status
version
opendata
component_7
version
pattern_8
the
pattern_8
that
handle
the
connector_data_6
action
the
name
of
the
action
within
the
pattern_8
for
the
histogram
type
metric
you
must
first
specify
the
interval
for
the
connector_11
requirement_5
in
our
requirement_4
the
requirement_5
be
connector_2
duration
on
line
we
have
create
exponentially
increasing
bucket
range
from
to
second
in
requirement_4
of
itms2014+
opendata
component_7
we
can
empirically
say
that
most
of
the
connector_data_4
only
last
30ms
or
le
the
maximum
requirement_5
of
second
be
therefore
large
enough
for
our
use
requirement_4
finally
for
each
connector_data_6
we
need
to
component_4
four
dimension
we
have
define
early
and
the
connector_data_6
duration
here
we
have
two
option
modify
each
pattern_4
to
component_4
the
metric
mention
above
or
create
a
technology_22
that
wrap
the
pattern_4
and
component_15
the
metric
obviously
we’ve
chosen
the
latter
1func
{
api2
=
goa
technology_19
v2
setup
technology_22
api2
use
technology_22
requestid
api2
use
technology_22
logrequest
false
api2
use
prometheushandler
httpdurationshistogram
api2
use
technology_22
recover
12}
16func
prometheushandler
hist
*prometheus
histogramvec
goa
technology_22
{
func
h
goa
pattern_4
goa
pattern_4
{
func
ctx
component_16
component_16
rw
technology_3
responsewriter
req
*http
connector_data_6
error
{
startedat
=
time
now
err
=
h
ctx
rw
req
version
=
n
a
split
=
split
req
url
path
if
len
split
{
version
=
split
}
resp
=
goa
contextresponse
ctx
hist
withlabelvalues
strconv
itoa
resp
status
version
version
goa
contextcontroller
ctx
pattern_8
goa
contextaction
ctx
action
observe
float64
time
since
startedat
float64
time
second
connector_data_6
duration
second
err
}
}
36}
a
you
can
see
the
technology_22
be
plug
in
on
line
and
the
entire
technology_22
be
roughly
line
long
on
line
to
we
fill
the
four
dimension
and
on
line
we
component_4
the
connector_data_6
duration
in
second
configuration
since
we
have
everything
ready
from
the
component_2
side
point
of
pattern_9
we
have
to
configure
prometheus
and
grafana
a
minimum
configuration
for
prometheus
be
show
below
we
be
mainly
interest
in
two
set
how
often
be
the
metric
download

and
the
metric
url
technology_3
opendata
itms2014
sk
metric
global
scrape_interval

evaluation_interval

scrape_configs
job_name
opendata
metrics_path
metric
technology_23
technology_24
static_configs
target
opendata
itms2014
sk
basic_auth
username
username_not_shown
password
password_not_shown
a
minimal
grafana
configuration
####################################
path
####################################
path
connector_data_2
=
var
db
grafana
requirement_1
=
var
requirement_1
grafana
plugins
=
var
db
grafana
plugins
####################################
component_6
####################################
component_6
technology_5
=
technology_3
#
the
technology_3
port
to
use
http_port
=
#
the
face
domain
name
use
to
connector_9
grafana
from
a
browser
domain
=
metric
itms
redbyte
eu
root_url
=
technology_3
metric
itms
redbyte
eu
note
a
we
can
see
a
non
tl
port
be
connector_7
but
don’t
worry
there
be
a
technology_25
in
front
of
grafana
listen
on
port
quality_attribute_4
by
let’s
pattern_10
certificate
pattern_3
finally
we
connector_12
to
the
point
where
we
have
everything
we
need
in
order
to
create
some
nice
requirement_2
it
be
necessary
to
open
a
web
browser
and
requirement_1
into
grafana
prometheus
connector_data_2
component_17
create
requirement_3
create
requirement_2
an
example
of
how
to
create
a
requirement_2
show
the
number
of
technology_3
connector_data_4
per
selected
interval
be
show
on
the
follow
figure
connector_data_2
component_17
for
reqs
interval
requirement_2
similarly
we’ve
create
additional
requirement_2
and
place
them
in
two
requirement_3
a
show
on
the
follow
figure
component_3
metric
runtime
metric
summary
in
this
we
have
show
that
the
component_3
and
runtime
pattern_3
not
be
difficult
at
all
prometheus
component_12
technology_6
allow
u
to
easily
connector_7
metric
from
your
component_3
whether
connector_8
in
technology_7
go
technology_26
or
technology_8
prometheus
even
allow
you
to
connector_7
metric
from
an
offline
component_9
behind
corporate
firewall
or
pattern_11
component_9
script
etc
in
this
requirement_4
connector_13
connector_9
can
be
use
the
component_3
then
connector_13
metric
into
a
connector_13
gateway
the
connector_13
gateway
then
connector_4
the
metric
a
describe
in
this
grafana
can
be
use
to
create
various
requirement_2
and
requirement_3
that
can
be
connector_6
even
snapshot
can
be
create
this
allow
you
to
capture
an
interest
moment
and
analyze
them
late
redbyte
s
r
o
m
technology_27
sklodowskej
bratislava
slovakia
+421
info@redbyte
eu
solution
&
component_1
reference
about
u
slovensky
