strategy
for
decompose
a
component_1
into
pattern_1
bt
live
webinar
and
q&a
web
component_2
and
reverse
pattern_2
pattern_3

live
webinar
16th

register
now
close
toggle
navigation
facilitate
the
technology_1
of
knowledge
and
innovation
in
professional
development
english
edition
english
edition
chinese
edition
japanese
edition
french
edition
contribute
search
sign
up
login
password
forget
password
infoq
account
back
to
login
resend
activation
back
to
login
login
with
twitter

t
have
an
infoq
account
sign
up
notifications1
login
to
unlock
infoq
s
feature
stay
up
to
date
and
connector_1
connector_2
your
favorite
content
follow
your
favorite
editor
and
peer
sign
up
login

t
have
an
account
register
here
logo
back
to
homepage



apr
unique
visitor
news

presentation
podcast
guide
topic
development
technology_2
technology_3
technology_4
technology_5
technology_6
go
technology_7
technology_8
feature
in
development
reproducible
development
with
container
avdi
grimm
describe
the
future
of
development
which
be
already
here
connector_1
a
tour
of
a
devcontainer
and
contrast
it
with
a
deployment
container
all
in
development
architecture
&
design
architecture
requirement_1
architecture
quality_attribute_1
requirement_2
design
requirement_3
study
pattern_1
component_3
mesh
pattern_4
quality_attribute_2
feature
in
architecture
&
design
oren
eini
on
technology_9
include
consistency
guarantee
and
technology_5
a
the
implementation
technology_10
wesley
reisz
talk
to
oren
eini
about
the
history
of
technology_9
technology_9
be
a
fully
pattern_5
technology_11
document
component_4
that
connector_3
both
cp
and
ap
guarantee
at
different
time
the
two
discus
those
cp
ap
quality_attribute_3
component_5
challenge
the
choice
of
implementation
technology_10
technology_12
and
the
current
plan
for
technology_9


which
include
a
component_2
side
sharding
implementation
all
in
architecture
design
requirement_4
ml
&
connector_data_1
engineering
requirement_5
requirement_6
technology_11
component_4
connector_data_1
requirement_7
connector_4
feature
in
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
katharine
jarmul
discus
utilize
quality_attribute_3
connector_data_1
science
and
requirement_6
component_6
such
a
federate

to
from
connector_data_1
at
the
edge
all
in
requirement_4
ml
connector_data_1
eng
culture
&
agile
diversity
leadership
lean
kanban
personal
growth
scrum
sociocracy
craftmanship
team
collaboration
test
ux
feature
in
culture
&
how
to
run
your
technology_13
department
a
coach
have
find
what
i
think
be
my
connector_5
a
an
agile
coach
i
take
the
tough
decision
to
move
sideways
into
technology_13
requirement_8
in
the
hope
of
use
what
i’d

to
one
day
run
my
own
department
i
believe
that
come
from
coach
would
allow
me
to
see
thing
others
could
not
and
create
something
special
time
will
tell
if
i
have
succeed
this
be
the
story
of
where
i
be
up
to
so
far
all
in
culture

devops
infrastructure
continuous
delivery
automation
container
requirement_9
observability
feature
in
devops
panel
quality_attribute_4
component_5
the
panelist
discus
the
quality_attribute_2
for
the
supply
chain
and
quality_attribute_2
risk
measurement
all
in
devops
eventsnew
helpful
connector_6
about
infoq
infoq
editor
contribute
about
c4media
diversity
choose
your
technology_10
en
中文
日本
fr
infoq
live
how
requirement_9
architecture
achieve
cost
connector_7
improve
quality_attribute_5
&
connector_8
requirement_10
register
now
infoq
live
how
to
migrate
an
component_7
to
serverless
and
what
be
the
common
mistake
to
avoid
register
now
qcon
san
francisco
understand
the
emerge
trend
you
should
pay
attention
to
attend
in
person
on
oct



infoq
homepage
news
strategy
for
decompose
a
component_1
into
pattern_1
architecture
&
design
qcon
san
francisco
oct


uncover
emerge
trend
and
practice
from
domain
expert
strategy
for
decompose
a
component_1
into
pattern_1
this
item
in
japanese
bookmark
jun



min
connector_9
by
jan
stenberg
connector_10
for
infoq
join
a
of
expert
increase
your
visibility
grow
your
career

more
a
couple
of
year
ago
vladik
khononov
and
his
team
decide
to
start
use
pattern_1
but
a
few
month
late
they
find
themselves
in
a
huge
mess
the
reason
be
that
they
concentrate
on
cool
technology_14
without
pay
due
attention
to
more
fundamental
thing
quality_attribute_6
and
how
to
achieve
it
he
explain
at
the
recent
ddd
exchange

conference
at
skill
matter
london
they
invest
in
serverless
technology_15
component_8
and
pattern_6
mechanism
but
too
little
in
think
how
to
decompose
a
component_1
into
pattern_1
—
find
the
boundary
and
where
different
requirement_11
should
be
locate
among
these
boundary
for
khononov
cto
at
internovus
and
his
team
the
belief
from
the
begin
be
that
the
small
a
component_3
be
the
quality_attribute_7
it
will
be
that
lead
them
straight
into
build
a
quality_attribute_3
monolith
and
during
the
come
year
they
struggle
to
move
away
from
their
tiny
component_9
while
evaluate
different
decomposition
strategy
bound
component_10
khononov
note
that
ubiquitous
technology_10
be
a
cornerstone
practice
in
domain
drive
design
ddd
and
a
way
to
practice
this
be
to
talk
to
domain
expert
in
their
own
technology_10
sometimes
you
will
find
that
they
have
different
mental
component_11
for
the
same
requirement_12
concept
or
use
the
same
term
to
describe
different
concept
and
if
so
it’s
an
indication
that
these
concept
belong
to
different
bound
component_10
from
the
begin
khononov
and
his
team
use
these
discover
boundary
to
define
component_3
with
each
boundary
become
a
component_3
he
note
though
that
these
component_9
represent
quite
wide
requirement_12
area
sometimes
connector_data_2
in
a
bound
component_10
cover
multiple
requirement_12
subdomains
requirement_12
subdomains
a
their
next
step
they
instead
use
these
subdomains
a
boundary
and
create
one
component_3
for
each
requirement_12
subdomain
in
khononov’s
experience
have
a
one
to
one
relationship
between
a
subdomain
and
a
component_3
be
a
quite
common
approach
in
the
ddd

but
they
didn’t
settle
for
this
instead
they
continue
and
strive
for
even
small
component_3
requirement_12
component_12
look
deep
into
the
subdomains
they
find
requirement_12
component_12
and
component_13
and
extract
these
into
their
own
component_3
from
the
begin
this
final
approach
fail
miserably
but
khononov
point
out
that
in
late
project
it
have
be
more
successful
look
at
these
three
strategy
khononov
note
that
work
with
bound
component_10
have
help
them
find
the
boundary
of
the
large
valid
monolith
however
although
it’s
a
viable
work
component_6
for
him
it
doesn’t
quite
fit
the
idea
of
pattern_1
when
choose
between
requirement_12
subdomains
and
component_14
he
claim
that
the
best
level
of
decomposition
quality_attribute_8
on
the
component_1
you
be
build
together
with
it
use
requirement_3
he
emphasize
that
pattern_1
be
not
really
about
the
inside
of
a
component_3
but
rather
about
the
connector_11
and
couple
between
component_3
the
threshold
upon
which
a
component_1
can
be
decompose
into
pattern_1
be
define
by
the
use
requirement_3
of
the
component_1
that
the
pattern_7
be
part
of
khononov
have
still
not
find
an
easy
way
to
evaluate
a
system’s
design
but
he
believe
that
we
now
have
accumulate
enough
design
heuristic
to
help
in
streamline
the
component_15
of
decompose
a
component_1
into
pattern_1
the
one
he
have
find
most
useful
include
always
decompose
to
the
level
of
bound
component_10
don’t
decompose
further
unless
you
have
quality_attribute_7
reason
to
quality_attribute_3
component_5
have
their
own
challenge
core
subdomains
be
where
a
requirement_13
be
make
money
hold
any
decomposition
until
you
have
gain
domain
knowledge
and
ensure
you
have
the
right
subdomains
buy
or
adopt
generic
subdomains
they
be
already
solve
problem
and
there
be
no
competitive
advantage
in
connector_12
them
yourself
support
subdomains
be
need
for
support
the
core
domain
but
don’t
any
competitive
advantage
they
be
often
so
quality_attribute_9
and
quality_attribute_10
that
they
can
be
further
decompose
at
an
early
stage
maybe
down
to
component_14
component_3
use
consistency
requirement
to
help
in
find
or
that
must
stay
in
the
same
component_3
ensure
that
be
explicit
and
self
describe
consider
use
private
a
an
implementation
detail
within
a
component_3
and
a
more
restrain
set
of
a
part
of
a
component_3
s

look
for
component_9
that
connector_13
at
the
same
rate
maybe
they
can
be
merge
to
reduce
complexity
evaluate
each
service’s

if
it’s
too
wide
maybe
the
component_3
can
be
decompose
into
small
one
with
a
large
part
target
integrational
aspect
then
consider
reassess
the
boundary
to
simplify
the
overall
component_1
design
khononov
conclude
by
note
that
a
the
average
size
of
component_9
in
a
component_1
connector_14
small
you
will
move
from
a
monolithic
big
ball
of
mud
through
relatively
large
component_9
base
on
bound
component_10
towards
pattern_1
but
he
emphasize
that
if
you
continue
towards
even
small
component_3
you
will
end
up
with
a
quality_attribute_3
big
ball
of
mud
component_14
component_9
be
sometimes
refer
to
a
an
anti
pattern_4
for
instance
by
michael
nygard
and
stefan
tilkov
inspire
by
this
content
connector_10
for
infoq
become
an
editor
for
infoq
be
one
of
the
best
decision
of
my
career
it
have
challenge
me
and
help
me
grow
in
so
many
way
we
technology_16
love
to
have
more
people
join
our
team
thomas
bettslead
editor
architecture
and
design
@infoq
senior
principal
engineer
connector_10
for
infoq
rate
this
adoption
style
author

this
content
be
in
the
methodology
topic
relate
topic
development
architecture
&
design
domain
drive
design
design
architecture
evaluation
pattern_1
methodology
domain
drive
design
architecture
relate
editorial
relate
sponsor
content
relate
sponsor
d2iq
the
lead
independent
technology_17
component_16
more
relate
content
technology_18
codespaces
support
for
pattern_1
and
monorepo
project
seven
way
to
fail
at
pattern_1
maintain
quality
with
pattern_1
seven
way
to
fail
at
pattern_1
kalix
build
serverless
requirement_9
requirement_14
requirement_12
crtical
component_17
with
no
component_4
present
and
future
of
the
pattern_7
architecture
technology_19
chronicle
the
end
of
the
component_18
strangler
how
meta
us
privacy
friendly
credential
in
de
identify
pattern_8
manage
tech
debt
in
a
pattern_7
architecture
connector_15
start
to
quarkus
reactive
pattern_6
with
technology_20
technology_21
best
practice
for
run
stateful
component_17
on
technology_17
be
technology_22
quality_attribute_4
enough
advice
for
configure
quality_attribute_4
container
image
and
runtimes
the
angular
mini
book


manage
technical
debt
in
a
pattern_7
architecture
why
connector_13
intelligence
be
necessary
to
effectively
troubleshoot
modern
component_17
hashicorp
vault
improve
eventual
consistency
with
component_2
side
consistent
connector_data_3
announce
the
general
quality_attribute_11
of
technology_23
container
component_19
at
build

requirement_6
at
the
edge
how
connector_15
feedback
from
angry
component_20
help
to
develop
quality_attribute_7
technology_13
jep

component_21
to
extend
pattern_4
match
in
technology_2
cloudflare
d1
provide
quality_attribute_3
technology_24
for
cloudflare
component_22
release

technology_10
requirement_4
train
dataset
massive
technology_2
news
roundup
openjdk
technology_25
connector_data_4
and
cf
payara
component_16
technology_20
technology_26
connector_data_4
how
to
run
your
technology_13
department
a
coach
jetpack
bring
update
architectural
and
ui
component_23
and
improve
requirement_2
technology_27
release
technology_23
dns
private
resolver
in
preview
technology_28
support
nitrotpm
and
uefi
quality_attribute_4
boot
architecting
for
the
edge
requirement_9
introduce
technology_29
quality_attribute_12
technology_30
for
requirement_1
component_4
workload
requirement_4
for
developer
a
future
or
a
reality
quality_attribute_13
by
agreement
requirement_10
outcome
over
impose
solution
technology_31
lambda
now
have
support
for
technology_32

runtime
effectively
pattern_9
your
pattern_9
miedwar
meshbesher
on
use
vigilance
control
meta
artificial_intelligence’s
connector_data_1
set
to
accelerate
renewable
energy
catalyst
discovery
for
hydrogen
fuel
deepmind
introduce
gato
a
generalist
requirement_4
agent
mammoth
stump
in
the
requirement_9
era
meet
eu
regulation
by
be
requirement_9
requirement_14
and
requirement_9
agnostic
go
requirement_14
with
technology_25
and
graalvm
deal
with
thunder
herd
at
braintree
how
norway
s
large
bureaucracy
optimise
for
fast
flow
how
to
prepare
for
the
unexpected
an
influxdata
outage
story
tell
at
kubeconeu

the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_16
out
every
tuesday
join
a
of
over


senior
developer
pattern_10
an
example
enter
your
e
mail
connector_17
select
your
country
select
a
country
i
to
infoq
technology_33
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
hello
stranger
you
need
to
register
an
infoq
account
or
login
or
login
to

but
there
s
so
much
more
behind
be
register
connector_1
the
most
out
of
the
infoq
experience
tell
u
what
you
think
allow
technology_34
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_5
to
any
of
my
connector_data_6
in
this
component_24

watch
component_24
why
not
aggregate
by
jérôme
avoustin
re
why
not
aggregate
by
jan
stenberg
why
not
aggregate
by
jérôme
avoustin
your
connector_data_7
be
await
moderation
thank
you
for
participate
in
the
discussion
you
can
decompose
component_9
further
not
by
consider
component_14
but
real
aggregate
that
be
autonomous
define
a
pattern_5
boundary
connector_1
command
in
and
publish
connector_data_8
back
to
top
re
why
not
aggregate
by
jan
stenberg
your
connector_data_7
be
await
moderation
thank
you
for
participate
in
the
discussion
quality_attribute_7
point
i
think
that
when
you
work
with
bound
component_10
or
requirement_12
subdomains
you
will
also
work
with
aggregate
it
s
when
you
decompose
further
you
connector_1
to
requirement_12
component_14
which
i
think
often
be
an
anti
pattern_4
component_14
component_9
increase
complexity
connector_data_8
back
to
top
close
your
connector_data_8
quote
original
connector_data_7
allow
technology_34
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_5
to
any
of
my
connector_data_6
in
this
component_24
cancel
close
your
connector_data_8
allow
technology_34
a
b
br
blockquote
i
li
pre
u
ul
p
me
connector_data_5
to
any
of
my
connector_data_6
in
this
component_24
cancel
close
ok

development
how
to
prepare
for
the
unexpected
an
influxdata
outage
story
tell
at
kubeconeu

reproducible
development
with
container
green
development
terminology
and
climate
commitment
explain
by
at
devoxx
uk
architecture
&
design
oren
eini
on
technology_9
include
consistency
guarantee
and
technology_5
a
the
implementation
technology_10
kalix
build
serverless
requirement_9
requirement_14
requirement_12
crtical
component_17
with
no
component_4
architecting
for
the
edge
culture
&
how
connector_15
feedback
from
angry
component_20
help
to
develop
quality_attribute_7
technology_13
how
to
run
your
technology_13
department
a
coach
build
a
culture
of
quality_attribute_14
and
curiosity
requirement_4
ml
&
connector_data_1
engineering
requirement_6
at
the
edge
release

technology_10
requirement_4
train
dataset
massive
requirement_4
for
developer
a
future
or
a
reality
devops
hashicorp
vault
improve
eventual
consistency
with
component_2
side
consistent
connector_data_3
cloudflare
d1
provide
quality_attribute_3
technology_24
for
cloudflare
component_22
effectively
pattern_9
your
pattern_9
miedwar
meshbesher
on
use
vigilance
control
the
infoq
newsletter
a
round
up
of
last
week’s
content
on
infoq
connector_16
out
every
tuesday
join
a
of
over


senior
developer
pattern_10
an
example
connector_1
a
quick
overview
of
content
publish
on
a
variety
of
innovator
and
early
adopter
technology_14
what
you
don’t
that
you
don’t
stay
up
to
date
with
the
late
connector_data_9
from
the
topic
you
be
interest
in
enter
your
e
mail
connector_17
select
your
country
select
a
country
i
to
infoq
technology_33
handle
my
connector_data_1
a
explain
in
this
privacy
notice
we
protect
your
privacy
qcon
development
conference
real
world
technical
talk
no
technology_13
pitch
practical
idea
to
inspire
you
and
your
team
qcon
san
francisco
oct


in
person
qcon
san
francisco
bring
together
the
world
s
most
innovative
senior
engineer
across
multiple
domain
to
connector_18
their
real
world
implementation
of
emerge
trend
and
practice
uncover
emerge
trend
and
practice
to
solve
your
complex
engineering
challenge
without
the
technology_13
pitch
connector_7
your
spot
now
home
create
account
login
qcon
conference
contribute
infoq
editor
about
infoq
about
c4media

technology_35
infoq
developer
requirement_15
diversity
infoq
live


infoq
live


infoq
live


qcon
san
francisco



qcon
plus



follow
u
on
youtube212k
follower
linkedin18k
follower
rss19k
reader
twitter50k
follower
facebook20k

alexanew
stay
in
the
the
infoq
podcast
engineering
culture
podcast
the
architect
newsletter
general
feedback
feedback@infoq
technology_33
advertising
sales@infoq
technology_33
editorial
editors@infoq
technology_33
requirement_15
marketing@infoq
technology_33
infoq
technology_33
and
all
content
copyright
©


c4media
inc
infoq
technology_33
component_25
at
contegix
the
best
isp
we
ve
ever
work
with
privacy
notice
term
and
condition
requirement_16
bt
