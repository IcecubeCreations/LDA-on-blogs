benchmarking
technology_1
vs
technology_2
vs
moshi
|
eric
the
coder
skip
to
content
eric
the
coder
home
tiktok
benchmarking
technology_1
vs
technology_2
vs
moshi
eric
decanini
technology_3
a
couple
week
ago
i
make
a
on
technology_1
vs
technology_2
vs
moshi
by
compare
them
on
a
more
general
sense
of
pattern_1
with
requirement_1
be
only
one
of
the
criterion
in
that
section
compare
their
requirement_1
i
decide
to
use
other
component_1
which
have
already
do
benchmarking
for
these
technology_4
in
the
past
date
a
recently
a
while
this
connector_1
me
do
the
work
it
also
raise
some
interest
question
the
connector_data_1
weren’t
always
very
consistent
across
the
and
we
can
only
guess
whether
this
be
due
to
a
difference
in
or
connector_2
requirement_1
with
update
version
of
each
technology_4
so
we’re
go
to
be
do
our
own
benchmark
test
for
each
of
these
technology_5
requirement_2
for
technology_3
each
test
be
go
to
be
do
within
the
component_2
of
technology_6
because
that’s
how
most
component_3
make
requirement_3
connector_data_2
nowadays
we’ll
be
run
the
test
on
the
technology_7
and
use
mockwebserver
to
connector_3
of
different
length
and
we’ll
have
them
a
rxjava
single
i’ll
be
run
each
of
these
test
at
least
twice
to
make
sure
there
aren’t
any
fluke
do
note
that
this
benchmarking
test
will
only
cover
requirement_4
technology_5
connector_3
into
technology_8
or
well
actually
technology_9
connector_data_3
and
not
the
other
way
around
rule
for
the
test
i
have
technology_6
set
up
one
for
each
requirement_2
i
also
have
different
technology_5
connector_3
connector_1
all
connector_data_4
of
the
jsonplaceholder
of
vary
length
the
short
one
have
line
of
technology_5
the
one
have
and
the
long
one
have
connector_data_5
postgson
val
userid
val
val
title
val
body
this
will
of
be
slightly
vary
for
their
technology_2
and
moshi
counterpart
but
they
all
achieve
the
bare
syntax
need
to
requirement_4
a
from
the
above
technology_10
to
avoid
have
the
technology_7
startup
time
be
a
factor
i
have
one
dummy
test
that
run
before
any
of
the
actual
test
i
also
run
a
dummy
test
for
each
of
the
requirement_2
to
minimise
the
factor
of
any
first
use
startup
time
affect
our
test
other
thing
to
note
that
moshi
be
make
use
of
it
kapt
and
technology_2
be
not
use
any
annotation
other
than
@jsonproperty
see
the
connector_4
in
the
begin
to
see
why
these
could
affect
requirement_1
iteration
these
be
test
where
each
connector_3
be
requirement_4
only
once
by
each
requirement_2
short
long
technology_1
technology_2
moshi
requirement_4
time
in
millisecond
there
be
negligible
difference
in
any
of
the
requirement_2
a
you’d
expect
long
technology_5
take
a
little
bit
long
to
requirement_4
do
note
that
these
time
also
fluctuate
another
run
of
the
test
show
that
moshi
have
a
short
‘short’
requirement_4
time
than
technology_1
so
for
all
intent
and
purpose
we’re
say
each
requirement_2
be
about
equal
in
this
regard
iteration
we’ll
see
if
we
connector_5
different
connector_data_1
by
have
each
test
requirement_4
the
connector_3
a
thousand
time
each
short
long
technology_1
technology_2
moshi
requirement_4
time
in
second
okay
now
we
have
some
connector_data_1
to
talk
about
what’s
interest
here
be
that
technology_1
have
the
worst
requirement_1
of
the
for
all
size
of
technology_5
connector_3
which
be
interest
because
it’s
suppose
to
be
the
most
simplistic
and
lack
in
feature
compare
to
the
other
it
be
however
the
old
and
still
100%
technology_8
base
which
well
be
a
factor
consider
we
be
requirement_4
the
connector_3
into
a
technology_9
connector_data_5
technology_2
and
moshi
have
requirement_4
time
but
technology_2
seem
to
have
the
fast
long
connector_3
requirement_4
time
of
the
bunch
while
moshi
have
a
slightly
fast
short
connector_3
requirement_4
time
these
trend
remain
true
no
matter
how
many
time
i
run
the
test
iteration
for
curiosity
i
want
to
see
the
connector_data_1
if
we
bump
up
the
number
of
iteration
yet
again
short
long
technology_1
technology_2
moshi
requirement_4
time
in
second
now
this
be
interest
for
short
test
only
technology_1
have
a
noticeable
slow
requirement_4
time
they’re
all
about
same
for
test
and
for
the
long
connector_3
test
surprisingly
moshi
have
the
worst
requirement_1
of
the
bunch
this
trend
remain
true
for
multiple
run
of
the
test
i’m
completely
clueless
a
to
any
assumption
why
this
might
be
the
requirement_5
but
all
we
can
say
for
now
be
moshi
doesn’t
seem
to
be
up
there
in
the
requirement_1
department
if
you
need
straight
up
hard
technology_5
requirement_4
firepower
and
yes
i
want
to
point
out
once
again
that
i
be
use
moshi’s
codegen
capability
iteration
with
more
technology_2
annotation
one
assumption
we
make
in
the
connector_4
above
a
to
why
technology_2
in
some
test
have
the
slow
requirement_4
time
be
due
to
use
of
some
of
it
annotation
so
let’s
put
that
to
the
test
@jsonignoreproperties
requirement_6
=
someid
@jsonautodetect
fieldvisibility
=
jsonautodetect
visibility
any
connector_data_5
postjackson
@jsonproperty
userid
val
userid
@jsonproperty
val
@jsonproperty
title
val
title
@jsonproperty
body
val
body
@jsonignore
val
ignoredfield
=
our
old
technology_2
connector_data_5
only
use
the
@jsonproperty
but
now
i
a
bunch
of
annotation
that
be
ultimately
useless
in
theory
this
should
bump
up
our
requirement_4
time
with
technology_2
by
even
a
little
bit
let’s
put
it
to
the
test
short
long
technology_2
without
annotation
technology_2
with
annotation
requirement_4
time
in
second
okay
wow
i
do
not
expect
that
in
the
slight
not
only
do
the
annotation
cut
down
the
requirement_4
time
but
it
effectively
halve
the
requirement_4
time
on
the
long
connector_3
it
appear
through
albeit
this
time
accidental
smart
use
of
technology_2
annotation
you
can
do
wonder
for
your
technology_2
requirement_1
requirement_4
large
connector_data_3
up
till
now
we’ve
be
requirement_4
which
only
have
this
time
let’s
try
requirement_4
component_4
from
the
jsonplaceholder
technology_10
this
component_5
have
a
more
complex
connector_data_6
than
the
quality_attribute_1
so
let’s
see
if
that
make
a
difference
in
our
connector_data_7
this
be
a
test
of
iteration
but
with
connector_data_5
for
requirement_4
a
component_6
connector_data_8
in
theory
our
requirement_4
time
should
be
long
across
the
board
we’ll
see
short
long
technology_1
technology_2
technology_2
annotation
moshi
requirement_4
time
in
second
i
think
the
most
interest
find
here
be
how
the
requirement_4
time
all
across
the
board
be
significantly
small
than
that
of
the
test
use
the
despite
the
component_6
be
a
much
more
complex
connector_data_8
than
in
it
connector_data_6
again
technology_2
use
annotation
take
the
lead
with
moshi
not
be
far
behind
conclusion
there
be
a
few
key
takeaway
here
technology_2
seem
to
be
the
best
requirement_1
wise
but
this
fact
only
remain
solidly
true
if
you
use
it
annotation
to
quality_attribute_2
up
it
requirement_1
moshi
be
not
far
behind
technology_2
in
term
of
requirement_1
technology_1
be
show
it
age
here
a
a
technology_5
requirement_2
a
it’s
a
fair
bit
behind
these
in
term
of
requirement_1
complex
connector_data_3
don’t
necessarily
take
long
to
requirement_4
than
small
and
quality_attribute_1
connector_data_3
one
thing
i
leave
out
for
these
test
be
the
technology_2
technology_9
it’s
possible
that
moshi’s
compete
edge
in
this
competition
be
it
technology_9
quality_attribute_3
which
the
base
version
of
technology_2
doesn’t
have
but
it
do
have
a
separate
for
technology_9
support
will
the
technology_9
support
quality_attribute_2
up
requirement_1
for
technology_2
or
will
the
extra
overhead
actually
cause
a
negative
impact
when
i
connector_5
some
spare
time
i’ll
run
those
test
too
but
for
now
happy
cod
༼
つ
◕_◕
༽つ
subscribe
to
the
newsletter
leave
this
empty
if
you
re
human
eric
decaninian
technology_3
developer
who
make
programming
meme
on
tiktok
gsonjacksonmoshiretrofit
navigation
previous
technology_1
style
in
real
lifenext
your
connector_data_5
livedata
technology_3
development
technology_11
theme
poseidon
by
themezee
close
buy
me
a
cup
of
coffee
keep
me
fuel
up
so
i
can
provide
you
with
the
best
content
