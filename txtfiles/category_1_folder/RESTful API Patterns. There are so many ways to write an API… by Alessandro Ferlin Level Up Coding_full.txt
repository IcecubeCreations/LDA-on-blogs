pattern_1
component_1
pattern_2
there
be
so
many
way
to
connector_1
an
api…
|
by
alessandro
ferlin
|
level
up
codingopen
in
apphomenotificationslistsstorieswritepublished
inlevel
up
codingalessandro
ferlinfollowjan
2020·13
min
readsaverestful
component_1
patternsthere
be
so
many
way
to
connector_1
an
component_1
that
be
pattern_3
architectural
style
compliant
i’ve
group
some
of
the
solution
here
the
pattern_3
architectural
style
have
well
define
constraint
that
help
a
developer
to
connector_1
quality_attribute_1
web
component_2
but
component_3
be
not
so
easy
to
connector_1
this
be
why
i’ve
group
some
tip
and
solution
here
resource
and
basic
operationslisting
and
paginationmany
to
many
relationsfields
filteringlong
run
operationsconcurrency
handlingversioningcombine
resource
into
compositesmulti
technology_1
fields1
resource
and
basic
operationsan
component_1
be
all
about
resource
and
connector_2
a
resource
can
have
all
or
some
of
the
basic
that
allow
a
component_4
to
connector_3
with
it
a
component_4
can
create
replace
update
delete
and
connector_4
a
resource
all
these
have
a
well
define
connector_data_1
to
technology_2
verb
let’s
see
an
example
give
the
resource
component_5
a
component_4
can
connector_3
with
it
through
the
follow
create
the
resourcepost
component_5
connector_4
the
detail
of
the
resource
identify
with
the
give
idget
component_5
partially
update
the
content
identify
with
the
give
idpatch
component_5
replace
the
content
identify
with
the
give
idput
component_5
delete
the
content
identify
with
the
give
iddelete
component_5
idto
create
a
component_5
a
component_4
submit
the
follow
connector_data_2
component_5
technology_2
1host
example
comcontent
type
component_6
json{
name
bob
age
76}to
connector_4
the
resource
identify
with
the
requirement_1
a
component_4
submit
the
follow
connector_data_2
connector_5
component_5
technology_2
1host
example
comto
partially
update
the
resource
identify
with
the
requirement_1
a
component_4
submit
the
follow
connector_data_2
patch
component_5
technology_2
1host
example
comcontent
type
component_6
json{
name
bob
update
}the
patch
connector_data_2
connector_data_3
partially
so
in
the
above
example
the
attribute
age
be
keep
unaltered
and
only
the
name
be
update
when
use
patch
be
not
an
option
use
the
verb
instead
don’t
overload
put
technology_2
define
that
put
be
for
fully
update
or
replace
a
resource
rfc7231
to
replace
the
content
of
the
component_5
identify
with
the
requirement_1
a
component_4
submit
the
follow
connector_data_2
put
component_5
technology_2
1host
example
comcontent
type
component_6
json{
age
54}after
the
put
connector_data_2
the
component_5
identify
by
the
give
will
miss
the
attribute
name
because
the
put
connector_data_2
replace
the
component_5
connector_data_4
with
the
body
provide
within
the
connector_data_2
finally
to
delete
the
resource
identify
with
the
requirement_1
a
component_4
submit
the
follow
connector_data_2
delete
component_5
technology_2
1host
example
com2
connector_data_5
and
paginationa
component_4
can
connector_4
multiple
element
with
the
connector_5
verb
and
pattern_4
them
with
query
parameter
the
connector_data_6
must
be
paginate
most
use
pagination
be
cursor
base
pagination
and
offset
base
pagination
each
pagination
have
an
input
parameter
that
limit
the
number
of
connector_data_7
the
component_7
will
contain
it
be
provide
a
a
query
parameter
let’s
connector_data_8
it
limit
cursor
base
paginationmaybe
you
have
also
see
it
with
the
name
of
keyset
base
pagination
it
be
the
most
quality_attribute_2
way
to
paginate
when
you
have
a
very
large
dataset
because
perform
quality_attribute_3
than
offset
base
pagination
under
most
implementation
when
a
component_4
require
a
collection
the
component_8
connector_data_9
with
the
connector_data_7
and
within
each
one
provide
a
cursor
that
at
the
time
of
the
component_8
connector_6
fall
on
the
item
it
be
include
here
an
example
#
requestget
component_5
limit=100
technology_2
1host
example
com#
responsehttp
okcontent
type
component_6
technology_3
charset=utf
8{
item
{
meta
{
cursor
js3hsji3nj
}
}
other
connector_data_7
{
meta
{
cursor
ke3gdk1xyi
}
}
}as
you
can
see
each
item
have
an
attribute
meta
cursor
this
cursor
be
a
random
of
character
that
mark
a
specific
item
on
a
connector_data_5
of
item
can
be
use
to
connector_4
next
or
previous
element
provide
it
a
the
requirement_1
of
after
and
or
before
parameter
when
after
be
provide
the
connector_data_7
must
have
a
it
first
item
the
item
that
be
immediately
after
the
cursor
if
there
be
no
connector_data_7
after
the
cursor
the
collection
must
be
empty
when
before
be
provide
the
collection
must
have
a
it
last
item
the
item
that
be
immediately
before
the
cursor
a
component_4
submit
the
follow
connector_data_2
to
connector_4
next
previous
or
between
range
element
#
connector_4
next
elementsget
component_5
after=ke3gdk1xyi&limit=100
technology_2
1host
example
com#
connector_4
previous
elementsget
component_5
before=js3hsji3nj&limit=100
technology_2
1host
example
com#
connector_4
element
between
two
elementget
component_5
after=ke3gdk1xyi&before=js3hsji3nj&limit=100
technology_2
1host
example
comoffset
base
paginationthe
offset
base
pagination
allow
the
component_4
to
jump
to
a
certain
component_7
but
most
of
the
time
have
bad
requirement_2
with
very
requirement_3
set
it
be
more
widely
than
the
other
pagination
a
component_4
submit
the
follow
connector_data_2
to
connector_4
a
collection
#
requestget
component_5
limit=100
technology_2
1host
example
com#
responsehttp
okcontent
type
component_6
technology_3
charset=utf
8{
item
the
connector_data_10
}to
connector_4
the
next
component_7
the
component_4
must
increase
the
skip
query
parameter
connector_4
second
pageget
component_5
skip=100&limit=100
technology_2
1host
example
technology_4
connector_4
third
pageget
component_5
skip=200&limit=100
technology_2
1host
example
compage
referenceyou
can
simplify
the
pagination
connector_data_11
use
a
component_7
reference
component_9
provide
an
opaque
pointer
to
a
component_7
or
in
other
word
a
cursor
that
mark
a
specific
component_7
the
component_7
reference
or
component_7
cursor
usually
encode
pattern_5
the
component_7
position
i
e
the
identifier
of
the
first
or
last
component_7
element
the
pagination
direction
and
the
apply
query
pattern_4
to
safely
recreate
the
collection
let’s
see
an
example
that
show
the
component_7
reference
in
action
a
component_4
submit
a
connector_data_2
to
connector_4
the
first
component_7
#
requestget
component_5
limit=100
technology_2
1host
example
com#
responsehttp
okcontent
type
component_6
technology_3
charset=utf
8{
item
the
connector_data_10
component_7
{
prev
kewijbwds2bsja
next
dfrdkdek2klmcd
}}the
component_7
next
be
the
component_7
reference
that
the
component_4
should
use
to
connector_7
the
next
pattern_6
of
connector_6
and
the
component_7
prev
be
the
component_7
reference
the
component_4
should
use
to
connector_8
the
previous
pattern_6
connector_5
component_5
page_ref=dfrdkdek2klmcd&limit=100
technology_2
1host
example
comafter
the
first
connector_data_2
the
limit
parameter
be
the
only
parameter
in
the
url
beside
page_ref
this
be
because
it
be
quality_attribute_4
to
modify
the
limit
in
between
connector_data_2
parameter
that
could
break
the
connector_data_2
such
a
sort
order
and
pattern_4
be
embed
directly
inside
of
page_ref
or
component_10
them
somehow
try
to
or
modify
pattern_4
or
order
parameter
will
cause
the
connector_data_2
to
fail
if
a
different
order
or
pattern_4
be
need
then
you
must
restart
on
the
first
component_7
it’s
also
important
to
note
that
the
component_7
reference
usually
be
temporary
and
should
not
be
connector_9
for
late
use
many
to
many
relationssome
time
two
resource
create
a
many
to
many
relation
you
can
create
a
resource
that
represent
this
relation
let’s
see
an
example
give
two
resource
student
and
each
student
can
rate
a
we
can
create
a
resource
that
explicate
the
relation
between
student
and
let’s
connector_data_8
it
student
rat
and
let’s
connector_data_1
to
technology_2
verb
a
student
ratepost
student
rat
connector_data_5
all
student
rat
pattern_4
by
student
or
courseget
student
rat
delete
a
rate
identify
by
the
give
iddelete
student
rat
ida
student
can
a
rate
to
a
with
the
follow
connector_data_8
#
requestpost
student
rat
technology_2
1host
example
comcontent
type
component_6
json{
studentid
3298wdi28dh28wid92
courseid
rate
10}#
responsehttp
okcontent
type
component_6
technology_3
charset=utf
8{
student
{
3298wdi28dh28wid92
age
}
{
description
}
rate
10}retrieve
all
rat
of
a
be
really
easy
#
requestget
student
rat
course=93710949600282&limit=10
technology_2
1host
example
com#
responsehttp
okcontent
type
component_6
technology_3
charset=utf
8{
item
{
student
{
i
be
a
student@college
technology_4
age
}
{
description
}
rate
}
other
connector_data_10
}as
you
can
see
a
student
rat
resource
have
an
identifier
the
attribute
you
can
also
omit
it
and
use
the
pair
studentid
courseid
in
this
way
a
delete
could
be
do
give
the
pair
via
query
parameter
delete
student
rat
course=
&student=
filteringsometimes
the
component_4
need
to
choose
which
attribute
should
be
include
in
the
connector_6
due
to
requirement_2
reason
a
quality_attribute_3
way
to
do
that
be
require
a
query
parameter
that
contain
a
comma
separate
connector_data_5
of
attribute
give
the
resource
component_5
#
requestget
component_5
12fw342ej1
technology_2
1host
example
com#responsehttp
okcontent
type
component_6
technology_3
charset=utf
8{
12fw342ej1
name
{
familyname
muro
givenname
rupert
}
age
67}a
component_4
can
choose
which
attribute
should
be
with
the
follow
connector_data_2
#
requestget
component_5
12fw342ej1
fields=name
familyname%2cage
technology_2
1host
example
com#responsehttp
okcontent
type
component_6
technology_3
charset=utf
8{
name
{
familyname
muro
}
age
67}you
can
also
connector_data_1
a
subset
of
to
predefined
style
in
this
way
a
component_4
can
choose
the
style
a
predefined
subset
of
provide
the
query
parameter
style
for
example
we
can
connector_data_1
the
name
familyname
and
age
to
the
style
compact
and
the
name
familyname
name
givenname
and
age
to
the
style
complete
#
connector_data_2
the
compact
style
connector_5
component_5
12fw342ej1
style=compact
technology_2
1host
example
com#
responsehttp
okcontent
type
component_6
technology_3
charset=utf
8{
12fw342ej1
name
{
familyname
muro
}
age
67}#
connector_data_2
the
complete
styleget
component_5
12fw342ej1
style=complete
technology_2
1host
example
com#
responsehttp
okcontent
type
component_6
technology_3
charset=utf
8{
12fw342ej1
name
{
familyname
muro
givenname
rupert
}
age
67}5
long
run
operationsto
improve
quality_attribute_5
and
simplify
the
quality_attribute_6
a
web
component_2
must
keep
response_time
a
lower
a
possible
but
sometimes
we
need
to
compute
long
run
how
can
we
do
that
first
of
all
create
a
resource
that
represent
the
long
run
when
the
component_4
submit
a
connector_5
connector_data_2
to
the
resource
connector_data_9
a
follow
quality_attribute_7
on
the
current
status
of
the
the
be
still
run
connector_data_9
with
status
ok
and
a
representation
of
the
status
the
finish
with
a
success
connector_data_9
with
status
see
other
and
the
location
contain
the
uri
to
the
create
resource
the
finish
with
a
failure
connector_data_9
with
status
ok
and
a
representation
of
the
status
give
the
connector_data_4
about
the
failure
let’s
see
the
solution
with
an
example
design
a
web
component_2
that
extract
from
a
uri
a
summary
we
have
two
resource
summary
and
extraction
connector_data_11
connector_4
a
summary
identify
by
the
give
idget
summary
create
a
long
run
connector_data_11
that
will
extract
the
summarypost
extraction
connector_data_11
connector_data_4
of
the
connector_data_11
identify
with
the
give
idget
extraction
connector_data_11
ida
component_4
can
create
a
extraction
connector_data_11
with
a
connector_data_2
the
component_8
will
connector_data_9
with
status
connector_10
and
a
representation
of
the
resource
with
any
useful
connector_data_4
e
g
the
date
after
which
the
component_4
can
retry
to
connector_11
the
status
of
the
the
checkafter
attribute
#
requestpost
extraction
connector_data_11
technology_2
1host
example
comcontent
type
component_6
json{
from
{
uri
technology_2
extract
from
here
technology_4
}}#
responsehttp
acceptedcontent
type
component_6
technology_3
charset=utf
8content
location
technology_2
example
technology_4
extraction
connector_data_11
348wd39{
348wd39
state
pending
checkafter
10t22
12z
info
{
from
{
uri
technology_2
extract
from
here
technology_4
}
}}the
component_4
can
then
pattern_7
the
state
with
a
connector_5
connector_data_2
if
the
component_8
be
still
component_11
the
it
will
connector_data_9
a
#
requestget
extraction
connector_data_11
348wd39
technology_2
1host
example
com#
responsehttp
acceptedcontent
type
component_6
technology_3
charset=utf
8{
348wd39
state
pending
checkafter
10t22
12z
info
{
from
{
uri
technology_2
extract
from
here
technology_4
}
}}when
the
component_8
complete
the
with
a
success
it
will
connector_data_9
with
a
see
other
which
mean
that
the
connector_data_6
can
be
find
under
another
uri
use
a
connector_5
it
doesn’t
mean
that
the
resource
hasmoved
to
a
location
#
requestget
extraction
connector_data_11
348wd39
technology_2
1host
example
com#
responsehttp
see
otherlocation
technology_2
example
technology_4
summary
239rfh392content
location
technology_2
example
technology_4
extraction
connector_data_11
348wd39{
348wd39
state
complete
info
{
from
{
uri
technology_2
extract
from
here
technology_4
}
}
finishdate
10t22
11z
}if
the
fail
the
component_8
will
connector_data_9
a
#
requestget
extraction
connector_data_11
348wd39
technology_2
1host
example
com#
responsehttp
oklocation
technology_2
example
technology_4
summary
239rfh392content
location
technology_2
example
technology_4
extraction
connector_data_11
348wd39{
348wd39
state
fail
info
{
from
{
uri
technology_2
extract
from
here
technology_4
}
}
finishdate
10t22
11z
detail
the
uri
doesn
t
exist
status
}if
you
prefer
a
pattern_8
style
solution
require
a
uri
during
creation
on
which
the
component_4
will
be
connector_12
when
the
end
#
requestpost
extraction
connector_data_11
technology_2
1host
example
comcontent
type
component_6
json{
from
{
uri
technology_2
extract
from
here
technology_4
}
notifyon
technology_2
component_4
technology_4
}6
pattern_9
handlinga
component_8
can
serve
many
component_12
at
the
same
time
this
increase
the
chance
to
incur
into
pattern_9
problem
e
g
two
component_12
that
modify
the
same
resource
at
the
same
time
with
a
put
or
connector_data_2
the
solution
come
from
technology_5
use
conditional
connector_data_2
rfc7232
the
conditional
connector_data_2
require
that
the
component_8
provide
one
or
both
conditional
last
modify
and
etag
for
each
resource
to
do
a
conditional
connector_data_2
the
component_4
must
connector_13
one
or
both
conditional
if
unmodified
since
and
if
match
let’s
see
an
example
the
goal
be
to
provide
conditional
connector_data_2
to
the
resource
component_5
the
component_8
must
provide
one
or
both
of
the
two
last
modify
and
etag
on
our
example
we
will
provide
both
#
requestget
component_5
12fw342ej1
technology_2
1host
example
com#
responsehttp
okcontent
type
component_6
technology_3
charset=utf
8etag
abcec491d0a4e8ecb8e14ff920622b9c
last
modify
sun
jan
gmt{
12fw342ej1
name
{
familyname
muro
givenname
rupert
}
age
67}to
be
compliant
to
conditional
connector_data_2
the
component_4
must
provide
one
or
both
of
two
if
unmodified
since
and
if
match
if
none
of
them
be
provide
the
component_8
will
connector_data_9
with
a
forbid
explain
why
in
the
body
of
the
connector_6
#
requestput
component_5
technology_2
1host
example
comcontent
type
component_6
json{
age
54}#
responsehttp
forbiddencontent
type
component_6
technology_3
charset=utf
8{
connector_data_12
the
conditional
be
require
if
unmodified
since
and
or
if
match
}if
the
component_4
provide
at
least
one
conditional
in
the
connector_data_2
the
component_8
must
compare
them
with
the
current
requirement_1
of
last
modify
and
or
etag
if
they
match
it
can
component_11
the
update
and
ok
or
a
no
content
#
requestput
component_5
technology_2
1host
example
comif
unmodified
since
sun
jan
gmtif
match
abcec491d0a4e8ecb8e14ff920622b9c
content
type
component_6
json{
age
54}#
responsehttp
okcontent
type
component_6
technology_3
charset=utf
8etag
1e0e5a0fb102db75aa36d4356936fe4c
last
modify
sun
jan
gmt{
age
54}if
not
the
component_8
must
status
precondition
fail
explain
why
in
the
body
of
the
connector_6
#
requestput
component_5
technology_2
1host
example
comif
unmodified
since
sun
jan
gmtif
match
b1b3833b514f4b4a5207b572405e786f
content
type
component_6
json{
age
54}#
responsehttp
precondition
failedcontent
type
component_6
technology_3
charset=utf
8{
connector_data_12
the
provide
conditional
doesn
t
match
current
requirement_1
the
connector_data_2
rely
on
stale
connector_data_4
}7
versioningsometimes
we
need
to
version
the
technology_6
provide
different
version
can
significantly
complicate
the
understand
and
maintain
the
technology_6
you
should
use
it
a
a
last
resort
you
can
use
the
type
versioning
via
the
connector_10
and
content
type
let’s
see
an
example
on
the
resource
component_5
#
connector_data_2
version
1get
component_5
12fw342ej1
technology_2
1host
example
comaccept
component_6
technology_3
version=1#
connector_6
version
1http
okcontent
type
component_6
technology_3
version=1
charset=utf
8{
12fw342ej1
familyname
muro
givenname
rupert
age
67}#
connector_data_2
version
2get
component_5
12fw342ej1
technology_2
1host
example
comaccept
component_6
technology_3
version=2#
connector_6
version
2http
okcontent
type
component_6
technology_3
version=2
charset=utf
8{
12fw342ej1
name
{
familyname
muro
givenname
rupert
}
age
67}8
combine
resource
into
compositessometimes
there
be
the
need
to
show
many
resource
in
the
same
place
the
component_4
have
to
connector_data_8
several
and
then
combine
the
representation
they
need
base
on
component_4
usage
pattern_2
requirement_2
and
quality_attribute_8
requirement
we
can
create
a
resource
that
aggregate
multiple
resource
let’s
do
an
example
we
need
to
show
a
component_7
that
recap
a
financial
state
of
a
component_5
the
component_7
need
to
show
the
follow
resource
user’s
connector_data_4
first
investment
last
bank
component_13
the
total
balance
and
credit
card
limit
require
each
resource
separately
lead
to
requirement_2
issue
#
require
each
requestget
component_5
12fw342ej1
technology_2
1host
example
comaccept
component_6
jsonget
investiments
user=12fw342ej1
technology_2
1host
example
comaccept
component_6
jsonget
bank
component_13
user=12fw342ej1
technology_2
1host
example
comaccept
component_6
jsonget
credit
card
user=12fw342ej1
technology_2
1host
example
comaccept
component_6
jsonget
bank
account
ew239wqw21ui32une
technology_2
1host
example
comaccept
component_6
jsonto
solve
the
problem
create
a
resource
that
aggregate
connector_data_6
let’s
connector_data_8
it
financial
report
and
because
it
be
strictly
relate
to
a
component_5
it
can
be
a
subresource
the
only
quality_attribute_9
verb
be
connector_5
#
require
each
requestget
component_5
12fw342ej1
financial
report
technology_2
1host
example
comaccept
component_6
json#
responsehttp
okcontent
type
component_6
technology_3
charset=utf
8{
userinfo
{
}
lastinvestiments
lastbankrecords
bankaccount
creditcartlimits
{
}}9
multi
technology_1
fieldshttp
provide
two
for
technology_1
content
negotiation
connector_10
technology_1
and
content
technology_1
the
connector_10
technology_1
be
provide
by
the
component_4
to
inform
the
component_8
about
the
prefer
technology_1
the
content
technology_1
be
provide
by
the
component_8
within
the
connector_6
the
connector_data_13
of
a
multi
technology_1
should
contain
all
the
translation
and
a
requirement_1
that
be
populate
base
on
the
connector_10
technology_1
let’s
see
an
example
a
component_4
require
a
resource
technology_7
which
have
the
description
attribute
that
be
a
multi
technology_1
#
requestget
technology_7
782hb1yufhd8923
technology_2
1host
example
comaccept
technology_1
en
en
u
itaccept
component_6
json#
responsehttp
okcontent
type
component_6
technology_3
charset=utf
8content
technology_1
envary
connector_10
language{
782hb1yufhd8923
description
{
localizedvalue
this
be
a
description
translation
{
lang
en
requirement_1
this
be
a
description
}
{
lang
it
requirement_1
}
}}as
you
can
see
the
description
have
an
attribute
name
localizedvalue
that
be
valorized
to
the
correct
translation
base
on
the
connector_10
technology_1
provide
by
the
component_4
if
the
be
miss
then
choose
a
default
technology_1
to
create
a
technology_7
the
attribute
localizedvalue
be
not
require
#
requestpost
technology_2
1host
example
comcontent
type
component_6
json{
description
{
the
localizedvalue
must
not
be
provide
translation
{
lang
en
requirement_1
this
be
a
description
}
{
lang
it
requirement_1
}
}}conclusionin
the
future
i
will
create
for
each
topic
a
separate
to
explore
deeply
the
give
solution
and
in
some
requirement_4
show
alternative
me
if
you
find
something
useful
or
if
you
have
some
advice
to
improve
the
above
solution
photo
by
hong
lin
on
unsplash
6more
from
level
up
codingfollowcoding
and
news
the
developer
homepage
gitconnected
technology_4
&&
skilled
dev
&&
levelup
devread
more
from
level
up
codingrecommended
from
mediumphil
wicklundinbetter
programmingfree
serverless
blogging
via
technology_8
amplify
and
hexoilias
shaikhinthe
startup
net
console
component_14
—
with
dragonfruit
prashant
dandriyalsynthetic
dataset
use
technology_9
+
technology_10
part
1sander
hiddingmaking
frontend
pattern_4
expressiveinvarchinvarch
weekly
2022joella
blassingamewhat
i
have
be
wait
for
have
come
rob
clougha
technology_11
administrator’s
journey
today
i
about
create
alert
with
flowkennard
wicoadysimple
spam
prevention
use
technology_12
in
golangabouthelptermsprivacyget
the
appget
startedalessandro
ferlin95
followerssenior
engineer
functional
programming
enthusiast
music
lover
followmore
from
mediumjules
granduryan
intermediate’s
guide
to
git
version
control
—
in
terminal
branch
and
mergingarun
rajeevancookbook
for
design
patternssai
yoganandhgetting
start
with
gittharindu
dasun
doloswalaare
you
still
didn’t
start
use
version
control
for
connector_data_14
helpstatuswritersblogcareersprivacytermsaboutknowable
