part
technology_1
exchange
connector_1
key
and
bind
technology_2
technology_2
tour
requirement_1
documentation
support
login
connector_2
start
start
part
technology_1
exchange
connector_1
key
and
bind
last
update
what
be
an
exchange
what
be
connector_1
key
and
bind
how
be
exchange
and
component_1
associate
with
each
other
when
should
i
use
them
and
how
this
explain
the
different
type
of
exchange
in
technology_1
and
scenario
for
how
to
use
them
connector_data_1
be
not
publish
directly
to
a
component_2
instead
the
component_3
connector_3
connector_data_1
to
an
exchange
exchange
be
connector_data_2
connector_1
agent
define
by
the
virtual
component_4
within
technology_1
an
exchange
be
responsible
for
connector_1
the
connector_data_1
to
different
component_1
with
the
help
of
attribute
bind
and
connector_1
key
a
bind
be
a
connector_4
that
you
set
up
to
bind
a
component_2
to
an
exchange
the
connector_1
key
be
a
connector_data_2
attribute
the
exchange
look
at
when
decide
how
to
connector_5
the
connector_data_2
to
component_1
quality_attribute_1
on
exchange
type
exchange
connector_6
and
component_1
can
be
configure
with
parameter
such
a
quality_attribute_2
temporary
and
auto
delete
upon
creation
quality_attribute_2
exchange
survive
component_5
restart
and
last
until
they
be
explicitly
delete
temporary
exchange
exist
until
technology_1
be
shut
down
auto
delete
exchange
be
remove
once
the
last
bind
connector_data_3
be
unbound
from
the
exchange
in
technology_1
there
be
four
different
type
of
exchange
that
connector_5
the
connector_data_2
differently
use
different
parameter
and
bind
setup
component_6
can
create
their
own
exchange
or
use
the
predefined
default
exchange
which
be
create
when
the
component_5
start
for
the
first
time
technology_3
technology_1
connector_data_2
flow
the
component_3
publish
a
connector_data_2
to
the
exchange
the
exchange
connector_7
the
connector_data_2
and
be
now
responsible
for
the
connector_1
of
the
connector_data_2
bind
must
be
set
up
between
the
component_2
and
the
exchange
in
this
requirement_2
we
have
bind
to
two
different
component_1
from
the
exchange
the
exchange
connector_8
the
connector_data_2
into
the
component_2
the
connector_data_1
stay
in
the
component_2
until
they
be
handle
by
a
component_7
the
component_7
handle
the
connector_data_2
if
you
be
not
familiar
with
technology_1
and
connector_data_2
component_2
connector_9
technology_1
for
beginner
what
be
technology_1
before
connector_10
about
exchange
connector_1
key
and
bind
exchange
type
direct
exchange
a
direct
exchange
connector_11
connector_data_1
to
component_1
base
on
a
connector_data_2
connector_1
key
the
connector_1
key
be
a
connector_data_2
attribute
to
the
connector_data_2
by
the
component_3
think
of
the
connector_1
key
a
an
connector_12
that
the
exchange
be
use
to
decide
how
to
connector_5
the
connector_data_2
a
connector_data_2
go
to
the
component_2
s
with
the
bind
key
that
exactly
match
the
connector_1
key
of
the
connector_data_2
the
direct
exchange
type
be
useful
to
distinguish
connector_data_1
publish
to
the
same
exchange
use
a
quality_attribute_3
identifier
the
default
exchange
technology_4
pattern_1
must
provide
for
the
direct
exchange
be
amq
direct
imagine
that
component_2
a
create_pdf_queue
in
the
image
below
direct
exchange
figure
be
bind
to
a
direct
exchange
pdf_events
with
the
bind
key
pdf_create
when
a
connector_data_2
with
connector_1
key
pdf_create
arrive
at
the
direct
exchange
the
exchange
connector_8
it
to
the
component_2
where
the
binding_key
=
routing_key
in
the
requirement_2
to
component_2
a
create_pdf_queue
scenario
exchange
pdf_events
component_2
a
create_pdf_queue
bind
key
between
exchange
pdf_events
and
component_2
a
create_pdf_queue
pdf_create
scenario
exchange
pdf_events
component_2
b
pdf_log_queue
bind
key
between
exchange
pdf_events
and
component_2
b
pdf_log_queue
pdf_log
example
example
a
connector_data_2
with
connector_1
key
pdf_log
be
connector_13
to
the
exchange
pdf_events
the
connector_data_1
be
connector_8
to
pdf_log_queue
because
the
connector_1
key
pdf_log
match
the
bind
key
pdf_log
if
the
connector_data_2
connector_1
key
do
not
match
any
bind
key
the
connector_data_2
be
discard
direct
exchange
a
connector_data_2
go
to
the
component_1
whose
bind
key
exactly
match
the
connector_1
key
of
the
connector_data_2
default
exchange
the
default
exchange
be
a
pre
declare
direct
exchange
with
no
name
usually
refer
by
an
empty
when
you
use
default
exchange
your
connector_data_2
be
connector_14
to
the
component_2
with
a
name
equal
to
the
connector_1
key
of
the
connector_data_2
every
component_2
be
automatically
bind
to
the
default
exchange
with
a
connector_1
key
which
be
the
same
a
the
component_2
name
topic
exchange
topic
exchange
connector_5
connector_data_1
to
component_1
base
on
wildcard
match
between
the
connector_1
key
and
the
connector_1
pattern_2
which
be
specify
by
the
component_2
bind
connector_data_1
be
connector_8
to
one
or
many
component_1
base
on
a
match
between
a
connector_data_2
connector_1
key
and
this
pattern_2
the
connector_1
key
must
be
a
connector_data_4
of
word
delimit
by
a
period
example
be
agreement
u
and
agreement
eu
stockholm
which
in
this
requirement_2
identify
agreement
that
be
set
up
for
a
requirement_3
with
office
in
lot
of
different
location
the
connector_1
pattern_2
contain
an
asterisk
“*”
to
match
a
word
in
a
specific
position
of
the
connector_1
key
e
g
a
connector_1
pattern_2
of
agreement
*
*
b
*
only
match
connector_1
key
where
the
first
word
be
agreement
and
the
fourth
word
be
b
a
pound
symbol
“#”
indicate
a
match
of
zero
or
more
word
e
g
a
connector_1
pattern_2
of
agreement
eu
berlin
#
match
any
connector_1
key
begin
with
agreement
eu
berlin
the
component_8
indicate
which
topic
they
be
interest
in
subscribe
to
a
fee
for
an
individual
tag
the
component_7
create
a
component_2
and
set
up
a
bind
with
a
give
connector_1
pattern_2
to
the
exchange
all
connector_data_1
with
a
connector_1
key
that
match
the
connector_1
pattern_2
be
connector_8
to
the
component_2
and
stay
there
until
the
component_7
connector_15
the
connector_data_2
the
default
exchange
technology_4
pattern_1
must
provide
for
the
topic
exchange
be
amq
topic
scenario
the
image
to
the
right
show
an
example
where
component_7
a
be
interest
in
all
the
agreement
in
berlin
exchange
agreement
component_2
a
berlin_agreements
connector_1
pattern_2
between
exchange
agreement
and
component_2
a
berlin_agreements
agreement
eu
berlin
#
example
of
connector_data_2
connector_1
key
that
match
agreement
eu
berlin
and
agreement
eu
berlin
headstore
scenario
component_7
b
be
interest
in
all
the
agreement
exchange
agreement
component_2
b
all_agreements
connector_1
pattern_2
between
exchange
agreement
and
component_2
b
all_agreements
agreement
#
example
of
connector_data_2
connector_1
key
that
match
agreement
eu
berlin
and
agreement
u
topic
exchange
connector_data_1
be
connector_8
to
one
or
many
component_1
base
on
a
match
between
a
connector_data_2
connector_1
key
and
the
connector_1
pattern_2
scenario
component_7
technology_5
be
interest
in
all
agreement
for
european
head
component_9
exchange
agreement
component_2
technology_6
headstore_agreements
connector_1
pattern_2
between
exchange
agreement
and
component_2
technology_5
headstore_agreements
agreement
eu
*
headstore
example
of
connector_data_2
connector_1
key
that
will
match
agreement
eu
berlin
headstore
and
agreement
eu
stockholm
headstore
example
a
connector_data_2
with
connector_1
key
agreement
eu
berlin
be
connector_13
to
the
exchange
agreement
the
connector_data_1
be
connector_8
to
the
component_2
berlin_agreements
because
the
connector_1
pattern_2
of
agreement
eu
berlin
#
match
the
connector_1
key
begin
with
agreement
eu
berlin
the
connector_data_2
be
also
connector_8
to
the
component_2
all_agreements
because
the
connector_1
key
agreement
eu
berlin
match
the
connector_1
pattern_2
agreement
#
fanout
exchange
a
fanout
exchange
copy
and
connector_8
a
connector_16
connector_data_2
to
all
component_1
that
be
bind
to
it
regardless
of
connector_1
key
or
pattern_2
match
a
with
direct
and
topic
exchange
the
key
provide
will
simply
be
ignore
fanout
exchange
can
be
useful
when
the
same
connector_data_2
need
to
be
connector_13
to
one
or
more
component_1
with
component_8
who
component_10
the
same
connector_data_2
in
different
way
the
image
to
the
right
fanout
exchange
show
an
example
where
a
connector_data_2
connector_16
by
the
exchange
be
copy
and
connector_8
to
all
three
component_1
bind
to
the
exchange
it
could
be
sport
or
weather
connector_data_5
that
should
be
connector_13
out
to
each
connector_17
requirement_4
component_11
when
something
happen
for
instance
the
default
exchange
technology_4
pattern_1
must
provide
for
the
topic
exchange
be
amq
fanout
fanout
exchange
the
connector_16
connector_data_2
be
connector_8
to
all
component_1
that
be
bind
to
the
exchange
scenario
exchange
sport_news
component_2
a
requirement_4
component_12
component_2
a
bind
bind
between
the
exchange
sport_news
and
component_2
a
requirement_4
component_12
component_2
a
example
a
connector_data_2
be
connector_13
to
the
exchange
sport_news
the
connector_data_2
be
connector_8
to
all
component_1
component_2
a
component_2
b
component_2
technology_6
because
all
component_1
be
bind
to
the
exchange
provide
connector_1
key
be
ignore
exchange
a
exchange
connector_8
connector_data_1
base
on
argument
contain
and
optional
requirement_5
exchange
be
very
similar
to
topic
exchange
but
connector_5
connector_data_1
base
on
requirement_5
instead
of
connector_1
key
a
connector_data_2
match
if
the
requirement_5
of
the
equal
the
requirement_5
specify
upon
bind
a
special
argument
name
x
match
in
the
bind
between
exchange
and
component_2
specify
if
all
must
match
or
one
either
any
common
between
the
connector_data_2
and
the
bind
count
a
a
match
or
all
the
reference
in
the
bind
need
to
be
present
in
the
connector_data_2
for
it
to
match
the
x
match
property
can
have
two
different
requirement_5
any
or
all
where
all
be
the
default
requirement_5
a
requirement_5
of
all
mean
all
pair
key
requirement_5
must
match
while
requirement_5
of
any
mean
at
least
one
of
the
pair
must
match
can
be
construct
use
a
wide
range
of
connector_data_6
type
or
hash
for
example
instead
of
a
the
exchange
type
use
with
the
bind
argument
any
be
useful
for
direct
connector_data_1
which
contain
a
subset
of
unordered
criterion
the
default
exchange
technology_4
pattern_1
must
provide
for
the
topic
exchange
be
amq
example
exchange
bind
to
component_2
a
with
argument
key
=
requirement_5
technology_7
=
pdf
type
=
report
x
match
=
all
exchange
bind
to
component_2
b
with
argument
key
=
requirement_5
technology_7
=
pdf
type
=
requirement_6
x
match
=
any
exchange
bind
to
component_2
technology_5
with
argument
key
=
requirement_5
technology_7
=
zip
type
=
report
x
match
=
all
scenario
connector_data_2
be
publish
to
the
exchange
with
argument
key
=
requirement_5
technology_7
=
pdf
type
=
report
connector_data_2
be
connector_14
to
component_2
a
because
all
key
requirement_5
pair
match
and
component_2
b
since
technology_7
=
pdf
be
a
match
bind
rule
set
to
x
match
=any
scenario
connector_data_2
be
publish
to
the
exchange
with
argument
of
key
=
requirement_5
technology_7
=
pdf
connector_data_2
be
only
connector_14
to
component_2
b
because
the
bind
of
component_2
a
require
both
technology_7
=
pdf
and
type
=
report
while
component_2
b
be
configure
to
match
any
key
requirement_5
pair
x
match
=
any
a
long
a
either
technology_7
=
pdf
or
type
=
requirement_6
be
present
example
of
exchange
connector_8
connector_data_1
to
component_1
that
be
bind
use
argument
key
and
requirement_5
in
the
amq
attribute
scenario
connector_data_2
be
publish
to
the
exchange
with
argument
of
key
=
requirement_5
technology_7
=
zip
type
=
requirement_6
connector_data_2
be
connector_14
to
component_2
b
since
it
bind
indicate
that
it
connector_18
connector_data_1
with
the
key
requirement_5
pair
type
=
requirement_6
it
doesn
t
mind
that
technology_7
=
zip
since
x
match
=
any
component_2
technology_5
doesn
t
connector_19
any
of
the
connector_data_1
since
it
bind
be
configure
to
match
all
of
the
x
match
=
all
with
technology_7
=
zip
type
=
pdf
no
connector_data_2
in
this
example
life
up
to
these
criterias
it
s
worth
note
that
in
a
exchange
the
actual
order
of
the
key
requirement_5
pair
in
the
connector_data_2
be
irrelevant
dead
letter
exchange
if
no
match
component_2
can
be
find
for
the
connector_data_2
the
connector_data_2
be
silently
drop
technology_1
provide
an
technology_4
extension
a
the
dead
letter
exchange
which
provide
the
requirement_7
to
capture
connector_data_1
that
be
not
deliverable
please
u
at
contact@cloudamqp
technology_8
if
you
have
any
suggestion
about
miss
content
or
other
feedback
guide
technology_1
for
beginner
technology_2
requirement_8
lead
technology_1
a
a
component_13
sign
up
go
back
to
part
the
requirement_9
enjoy
this
t
forget
to
connector_20
it
with
others
😉
lovisa
johansson
developer
free
ebook
the
optimal
technology_1
guide
download
your
copy
tweet
by
technology_2
home
tour
requirement_1
documentation
support
requirement_10
about
u
resource
changelog
faq
legal
and
requirement_11
quality_attribute_4
and
compliance
status
need
help
support
open
hour
a
day
day
a
week
talk
to
sale
+1
sale
inquiry
only
open
cst
bring
to
you
by
www
84codes
technology_8
our
component_14
cloudkarafka
–
technology_9
technology_10
elephantsql
–
technology_11
cloudmqtt
–
technology_12
©
copyright
cloudamqp
technology_1
and
the
technology_1
logo
be
trademark
of
vmware
inc
