connector_1
pattern_1
connector_2
through
a
pattern_2
pattern_3
component_1
with
technology_1
trifork
skip
to
content
you
be
currently
pattern_4
the
trifork
to
pattern_4
our
full
please
go
to
trifork
technology_2
about
trifork
development
axon
technology_3
from
the
trench
frontend
technology_4
technology_5
technology_1
requirement_1
ml
devops
requirement_2
requirement_3
iot
pattern_5
requirement_4
keep
update
on
the
technical
solution
trifork
be
work
on
about
trifork
development
axon
technology_3
from
the
trench
frontend
technology_4
technology_5
technology_1
requirement_1
ml
devops
requirement_2
requirement_3
iot
pattern_5
requirement_4
homesoftware
development
technology_1
axon
technology_3
axonexposing
pattern_1
connector_2
through
a
pattern_2
pattern_3
component_1
with
technology_1
connector_1
pattern_1
connector_2
through
a
pattern_2
pattern_3
component_1
with
technology_1
5april
2018written
by
erwin
de
gi
on
my
current
project
we
opt
not
to
use
pattern_3
for
the
connector_2
between
our
component_2
instead
we
make
use
of
axoniq‚Äôs
axonhub
which
act
a
a
specialize
connector_data_1
pattern_6
connector_data_2
can
be
of
three
type
command
‚Äì
you
want
to
connector_3
something
‚Äì
you
want
to
inform
others
of
something
that
happen
query
‚Äì
you
want
to
something
the
connector_2
be
pattern_1
and
we
also
have
to
deal
with
eventual
consistency
if
we
would
create
an
order
by
connector_4
a
createordercommand
this
order
would
connector_data_3
in
various
which
update
the
state
of
the
order
we
then
need
to
connector_5
a
query
of
which
we
also
connector_6
the
connector_data_3
pattern_1
our
web
and
requirement_5
frontend
connector_7
with
a
pattern_5
backend
through
a
pattern_3
technology_6
when
the
component_3
create
an
order
click
the
‚Äòbuy‚Äô
they
expect
a
connector_data_3
immediately
for
both
frontends
an
component_1
which
component_4
this
requirement_6
closely
make
the
most
sense
this
mean
that
we
want
a
more
pattern_2
technology_6
where
we
connector_5
a
‚Äòcreate
order‚Äô
connector_data_4
and
immediately
connector_6
a
connector_8
we
connector_9
this
use
a
small
pattern_3
pattern_7
which
pattern_8
our
pattern_1
connector_2
in
the
backend
to
the
pattern_2
connector_2
for
the
frontend
this
be
a
quality_attribute_1
use
requirement_7
for
technology_1
5‚Äôs
reactive
webflux
and
project
pattern_9
use
project
reactor‚Äôs
reactive
component_1
make
it
possible
to
combine
multiple
pattern_1
connector_data_5
and
operate
on
their
connector_data_3
webflux
handle
the
conversion
of
the
reactive
type
technology_7
flux
to
pattern_3
connector_8
it
optimize
the
use
of
component_5
by
connector_10
pattern_10
we
can
quality_attribute_2
component_6
between
pattern_1
connector_data_5
for
handle
other
connector_data_4
diagram
give
u
an
overview
of
this
approach
diagram
implementation
let‚Äôs
have
a
more
detail
look
at
the
for
the
create
order
example
connector_data_6
show
the
slightly
simplify
implementation
of
our
pattern_3
pattern_11
br
@postmapping
br
mono&amp
amp
lt
responseentity&amp
amp
lt
orderresponse&amp
amp
gt
&amp
amp
gt
createorder
createorderrequest
connector_data_4
br
{
br
createordercommand
command
=
createordercommand
fromrequest
connector_data_4
p
p
this
commandgateway
connector_5
command
br
flatmap
&amp
amp
gt
querygateway
connector_5
findordersummaryquery
br
retrywhen
error
&amp
amp
gt
error
delayelements
duration
of
millis
br
take
concatwith
technology_7
error
runtimeexception
next
br
onerrorreturn
orderresponse
orderid
orderstatus
create
br
connector_data_7
orderresponse
&amp
amp
gt
responseentity
ok
body
orderresponse
br
}
br
connector_data_6
we
first
create
a
command
out
of
the
pattern_3
connector_data_4
line
a
command
be
a
connector_data_1
with
the
specific
intent
to
connector_3
something
in
our
domain
in
this
specific
requirement_7
we
want
to
create
a
order
after
create
the
command
the
two
pattern_1
connector_data_5
we
make
be
br
mono&amp
amp
lt
string&amp
amp
gt
=
this
commandgateway
connector_5
command
br
and
br
mono&amp
amp
lt
orderresponse&amp
amp
gt
orderresponse
=
querygateway
connector_5
findordersummaryquery
br
both
connector_data_5
a
single
requirement_8
by
use
a
technology_7
a
technology_7
be
a
reactive
type
comparable
to
the
java‚Äôs
completablefuture
it
have
zero
or
one
element
and
can
represent
an
error
a
with
all
reactive
type
the
requirement_8
or
error
be
connector_11
over
time
the
second
connector_data_8
take
the
connector_data_3
of
the
first
connector_data_8
a
it
input
we
need
the
of
the
command
to
query
for
the
order
we
use
the
flatmap
operator
to
achieve
this
line
the
flatmap
take
the
pattern_1
connector_data_3
of
connector_data_8
and
pass
this
a
a
parameter
to
the
lambda
of
connector_data_8
the
pattern_12
version
can
be
see
in
connector_data_6
notice
the
nest
lambda
which
make
the
complex
and
le
readable
br
this
commandgateway
connector_5
command
&amp
amp
gt
{
br
querygateway
connector_5
findordersummaryquery
br
}
br
connector_data_6
there
be
a
delay
between
connector_4
the
command
and
be
able
to
query
the
connector_data_3
when
the
create
order
cannot
be
find
e
g
it
isn‚Äôt
create
yet
or
something
have
go
wrong
an
exception
be
throw
in
this
chain
this
be
represent
a
a
technology_7
error
throwable
we
use
the
retrywhen
to
retry
the
query
line
we
do
this
time
with
a
delay
of
m
when
we
still
don‚Äôt
connector_12
a
connector_data_3
we
throw
an
error
line
we
don‚Äôt
connector_13
the
error
to
the
component_7
but
pass
an
orderresponse
with
the
and
status
create
line
the
component_7
can
then
query
the
status
of
the
order
late
by
use
this
this
be
a
form
of
graceful
degradation
finally
we
connector_data_7
the
order
connector_8
from
the
query
to
a
connector_8
component_8
which
can
be
by
technology_1
technology_1
actually
subscribe
to
this
whole
chain
and
connector_14
out
the
pattern_3
connector_8
for
u
conclusion
technology_1
and
project
pattern_9
allow
u
to
handle
pattern_1
connector_2
with
concise
and
readable
we
can
do
retry
error
handle
and
the
combination
of
multiple
pattern_1
connector_data_5
in
a
few
line
the
requirement_9
of
webflux
with
project
pattern_9
allow
the
use
of
reactive
paradigm
in
a
pattern_3
pattern_11
webflux
u
an
pattern_1
approach
while
we
wait
for
a
backend
query
to
we
don‚Äôt
block
the
component_5
this
allow
it
to
be
use
for
other
connector_data_4
our
specific
use
requirement_7
be
a
quality_attribute_1
example
of
one
of
the
component_9
of
technology_1
webflux
and
project
pattern_9
axon
axon
technology_3
development
technology_1
axon
technology_3
axonhub
reactive
pattern_9
technology_1
webflux
quality_attribute_3
the
technology_8
parameter
component_10
with
technology_1
requirement_2
refactoring
from
elasticsearch
version
with
technology_4
transport
component_7
to
version
with
high
level
pattern_3
component_7
tomasz
zielichowski
how
can
you
use
‚Äúthis
commandgateway
connector_5
command
flatmap
‚Äù
etc
if
commandgateway
connector_5
completablefuture
not
technology_7
or
flux
erwin
de
gi
by
wrap
the
axon
command
gateway
with
our
own
implementation
which
convert
the
completablefuture
to
a
technology_7
with
use
of
technology_7
fromfuture
tomasz
zielichowski
thank
you
for
your
answer
that
make
a
lot
of
sense
üôÇ
great
work
and
great
cheer
be
close
recently
on
trifork
connector_15
out
of
a
codependent
relationship
or
how
i
move
to
a
healthy
component_11
base
technology_1
quality_attribute_4
configuration
don‚Äôt
regulatory
compliance
hold
you
back
requirement_10
drive
modern
component_9
the
requirement_7
of
the
lose
openai
codex
‚Äì
make
programmer
more
productive
categoriesagile
technology_9
technology_10
technology_11
technology_12
requirement_1
requirement_11
axon
axon
technology_3
requirement_4
technology_13
requirement_2
requirement_3
conference
content
requirement_12
devops
digital
transformation
technology_14
education
requirement_13
search
from
the
trench
frontend
general
technology_15
technology_16
hippo
technology_17
internet
of
thing
ipad
iphone
technology_4
knowledge
technology_5
technology_18
magnolia
pattern_5
requirement_5
newsletter
technology_19
technology_19
&
search
objective
technology_20
recruitment
development
technology_1
component_12
administration
train
requirement_6
window
phone
goto
academy
upcoming
it
virtual
&
on
virtual
|
core
technology_1
|
amsterdam
|
core
technology_1
|
amsterdam
|
architecture
for
developer
with
simon
brown
|
amsterdam
|
design
pattern_5
with
sam
newman
|
goto
conference
goto
amsterdam
|
trifork
¬©
trifork
a
s
all
right
reserve
trifork
