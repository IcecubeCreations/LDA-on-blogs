pattern_1
pattern_2
with
example
in
technology_1
by
chris
richardson
skip
to
content
ben
nadel
technology_2
navigation
home
activity
podcast
about
me
people
light
ui
dark
ui
ben
nadel
at
cfunited
washington
technology_3
technology_4
with
luis
majano
@lmajano
←
previous
photo
next
photo
→
pattern_1
pattern_2
with
example
in
technology_1
by
chris
richardson
by
ben
nadel
on
tag
book
i
first
become
familiar
with
chris
richardson
through
his
online
resource
pattern_1
io
which
to
be
honest
provide
an
overwhelm
amount
of
connector_data_1
connector_data_1
that
i
ve
defer
connector_1
because
i
didn
t
really
how
to
approach
it
especially
with
my
lack
of
pattern_1
experience
i
m
more
of
a
book
person
so
when
i
hear
that
chris
be
come
out
with
a
book
pattern_1
pattern_2
with
example
in
technology_1
i
be
thrill
so
thrill
in
fact
that
i
couldn
t
wait
for
it
be
publish
instead
i
purchase
it
through
man
s
early
connector_2
component_1
meap
i
ve
spend
the
last
week
connector_3
through
it
and
i
ve
find
it
to
be
a
fascinate
pragmatic
and
holistic
exploration
of
pattern_1
development
the
whole
book
follow
mary
the
cto
of
food
to
go
inc
ftgo
a
she
attempt
to
grow
her
requirement_1
by
refactoring
her
old
monolithic
component_2
into
a
pattern_1
architecture
she
s
do
this
because
her
development
technology_5
have
drop
and
upper
requirement_2
be
become
increasingly
frustrate
with
the
engineer
inability
to
ship
feature
with
sufficiently
high
quality
mary
be
of
suffer
from
what
richardson
term
monolithic
hell
and
while
a
monolith
represent
a
large
sprawl
component_2
richardson
focus
on
a
thin
enough
slice
of
the
ftgo
migration
such
that
he
can
connector_4
his
point
across
while
keep
the
content
incredibly
consumable
most
conversation
about
architecture
tend
to
be
either
too
simplistic
or
too
complicate
but
richardson
manage
to
hit
the
sweet
spot
conjure
up
a
domain
component_3
that
be
small
enough
to
almost
keep
in
your
head
but
complex
enough
to
require
interest
cross
component_4
workflow
right
off
the
bat
i
appreciate
that
richardson
be
pragmatic
in
all
thing
no
topic
in
the
book
be
discus
a
a
silver
bullet
or
the
one
solution
everything
be
a
calculate
choice
a
set
of
clearly
define
requirement_3
off
for
example
even
the
idea
of
move
to
a
pattern_1
architecture
be
present
a
one
that
should
be
avoid
until
it
be
necessary
another
challenge
with
use
the
pattern_3
architecture
be
decide
at
what
point
during
the
lifecycle
of
the
component_2
you
should
use
this
architecture
when
develop
the
first
version
of
an
component_2
you
often
do
not
have
the
problem
that
this
architecture
solve
moreover
use
an
elaborate
quality_attribute_1
architecture
will
slow
down
development
this
can
be
a
major
dilemma
for
startup
whose
big
challenge
be
usually
how
to
rapidly
quality_attribute_2
the
requirement_1
component_3
and
accompany
component_2
use
the
pattern_3
architecture
make
it
much
more
difficult
to
iterate
rapidly
a
startup
should
almost
certainly
begin
with
a
monolithic
component_2
kindle
location
richardson
also
approach
pattern_1
from
a
holistic
standpoint
talk
about
team
dynamic
a
a
completely
separate
concern
on
top
of
the
technology_6
of
he
cover
topic
conway
s
law
and
the
reverse
conway
maneuver
but
he
also
include
the
fact
that
engineer
be
emotional
elephant
rid
creature
who
need
to
be
sell
on
the
idea
of
pattern_1
adopt
the
pattern_3
architecture
connector_5
your
architecture
your
organization
and
your
development
component_5
ultimately
however
it
connector_5
the
work
environment
of
people
who
be
a
mention
early
emotional
creature
their
emotion
if
ignore
can
make
the
adoption
of
pattern_1
a
bumpy
ride
kindle
location
and
his
strategy
also
extend
to
the
requirement_1
a
a
whole
connector_6
manager
and
leadership
that
be
hesitant
to
take
on
big
refactoring
or
divert
resource
away
from
the
active
development
of
feature
an
important
benefit
of
incrementally
refactoring
to
a
pattern_3
architecture
be
that
you
connector_4
an
immediate
on
your
investment
that
s
very
different
than
a
big
bang
rewrite
which
doesn
t
connector_7
any
benefit
until
it
be
complete
another
benefit
of
be
able
to
connector_7
requirement_4
early
be
that
it
help
maintain
the
requirement_1
s
support
for
the
migration
effort
their
ongoing
support
be
essential
since
the
refactoring
effort
will
mean
that
le
time
be
spend
on
develop
feature
some
organization
have
difficulty
eliminate
technical
debt
because
past
attempt
be
too
ambitious
and
didn
t
provide
much
benefit
a
a
connector_data_2
the
requirement_1
become
reluctant
to
invest
in
further
clean
up
effort
the
incremental
nature
of
refactoring
to
pattern_1
mean
that
the
development
team
be
able
to
demonstrate
requirement_4
early
and
often
kindle
location
from
a
technology_6
standpoint
pattern_1
pattern_2
cover
a
wide
range
of
topic
from
hexagonal
architecture
to
test
and
continuous
requirement_5
to
pattern_4
pattern_2
to
the
creation
of
observable
component_6
because
of
this
scope
some
topic
be
discus
in
more
depth
than
be
others
but
again
richardson
really
find
the
right
balance
bring
in
enough
detail
to
facilitate
meaningful
conversation
without
overwhelm
the
reader
in
fact
he
organize
the
content
in
such
a
way
that
you
can
somewhat
self
select
into
how
deep
you
want
to
go
in
each
section
he
prefix
the
deep
dive
with
a
tl
dr
too
long
didn
t
connector_8
style
pro
con
connector_data_3
then
he
summarize
all
of
the
point
at
the
end
of
each
chapter
this
you
connector_2
the
high
level
point
without
have
to
necessarily
connector_8
every
word
and
to
be
honest
i
do
only
skim
the
two
chapter
on
test
pattern_1
and
the
one
chapter
on
quality_attribute_3
pattern_1
while
i
be
sure
these
topic
be
great
it
be
more
connector_data_1
than
i
felt
i
could
manage
to
absorb
deployment
be
outside
my
day
to
day
purview
and
i
ve
connector_9
only
a
handful
of
test
in
my
life
a
such
i
want
to
make
sure
that
i
leave
enough
room
in
my
unfreeze
caveman
lawyer
brain
for
all
the
other
chapter
on
topic
domain
drive
design
ddd
inter
component_5
connector_10
and
connector_data_4
synchronization
one
of
the
section
that
have
an
especially
profound
impact
on
me
be
the
discussion
of
which
component_4
should
handle
a
specialize
type
of
query
a
query
that
could
find
quality_attribute_4
restaurant
locate
near
the
connector_data_5
component_7
however
even
connector_11
that
be
local
to
a
single
component_4
can
be
difficult
to
connector_12
there
be
a
couple
of
reason
why
this
might
be
the
requirement_6
one
reason
be
because
a
i
describe
below
sometimes
it
s
not
appropriate
for
the
component_4
that
own
the
connector_data_4
to
connector_12
the
query
the
other
reason
be
that
sometimes
a
component_4
s
component_8
or
connector_data_4
component_3
doesn
t
efficiently
support
the
query
kindle
location
if
the
ftgo
component_2
connector_13
restaurant
in
some
other
kind
of
component_8
then
connector_14
the
findavailablerestaurant
query
be
more
challenge
it
must
maintain
a
replica
of
the
restaurant
connector_data_4
in
a
form
that
be
design
to
support
the
geospatial
query
the
component_2
could
for
example
use
the
geospatial
index
technology_7
for
technology_8
that
u
a
component_9
a
a
geospatial
index
alternatively
the
component_2
could
component_10
a
replica
of
the
restaurant
connector_data_4
in
an
entirely
different
type
of
component_8
a
situation
very
similar
to
use
a
text
search
component_8
for
text
query
kindle
location
give
that
this
component_4
own
the
connector_data_4
it
make
sense
at
least
on
surface
for
it
to
connector_12
this
query
however
connector_data_4
ownership
be
not
the
only
factor
to
consider
you
must
also
take
into
account
the
need
to
separate
concern
and
avoid
overload
component_11
with
too
many
responsibility
for
example
the
primary
responsibility
of
the
team
that
developer
restaurant
component_4
be
enabling
restaurant
manager
to
maintain
their
restaurant
that
be
quite
different
than
connector_14
a
high
volume
critical
query
what
s
more
if
they
be
responsible
for
the
findavailablerestaurants
query
the
team
would
constantly
live
in
fear
of
quality_attribute_3
a
connector_15
that
prevent
component_12
from
place
order
kindle
location
this
kind
of
blow
my
mind
because
it
be
the
first
time
i
can
remember
see
a
component_4
whose
sole
responsibility
be
make
another
component_4
s
connector_data_4
more
quality_attribute_5
for
a
give
connector_data_6
though
a
richardson
point
out
this
be
really
a
more
generalize
abstraction
of
the
idea
behind
a
full
text
component_4
technology_9
technology_10
which
provide
full
text
index
on
top
of
another
connector_data_4
component_10
i
suspect
or
rather
i
should
hope
that
see
this
separation
of
concern
will
completely
connector_15
the
way
that
i
approach
draw
component_4
boundary
instead
of
think
about
connector_data_4
ownership
i
need
to
start
think
about
requirement_1
capability
a
component_4
should
provide
a
requirement_1
capability
a
thing
that
provide
requirement_4
rather
than
be
a
pattern_5
for
state
one
other
thing
that
this
topic
underscore
be
the
absolute
importance
of
connector_data_4
synchronization
pattern_6
and
pattern_7
pattern_4
in
a
pattern_1
architecture
that
be
a
theme
that
richardson
weave
throughout
the
entire
book
whether
he
s
build
pattern_1
from
scratch
or
incrementally
refactoring
a
monolith
into
a
pattern_3
a
topic
that
connector_16
it
own
chapter
he
make
it
clear
that
connector_data_4
synchronization
be
a
foundational
force
that
truly
make
all
the
other
thing
possible
note
for
a
book
that
focus
entirely
on
pattern_7
connector_data_7
pattern_2
connector_17
out
requirement_7
requirement_5
pattern_2
design
build
and
quality_attribute_3
pattern_4
solution
by
gregor
hohpe
and
bobby
woolf
there
s
a
ton
of
other
stuff
i
could
bring
up
the
fact
that
richardson
actually
talk
about
pattern_8
and
pattern_9
in
a
quality_attribute_1
component_6
something
that
i
t
think
connector_18
explore
nearly
enough
or
the
fact
that
he
explain
domain
drive
design
in
a
way
that
felt
totally
quality_attribute_5
and
that
demonstrate
how
even
very
quality_attribute_6
can
have
behavior
to
end
this
review
perhaps
i
can
connector_19
a
few
other
expert
that
be
meaningful
for
me
one
pain
point
that
i
ve
felt
deeply
at
work
be
the
use
of
connector_19
technology_7
or
rather
the
abuse
of
connector_19
technology_7
a
such
i
really
appreciate
that
he
advocate
for
connector_19
technology_7
in
the
requirement_6
of
relatively
requirement_8
strive
to
use
technology_7
for
requirement_8
that
be
unlikely
to
connector_15
kindle
location
at
work
we
be
currently
in
the
component_5
of
decompose
our
monolith
into
a
quality_attribute_1
component_6
this
make
the
exist
monolith
a
bit
of
a
move
target
we
have
to
continue
active
development
on
it
but
do
so
in
a
way
that
doesn
t
over
leverage
the
team
s
build
the
hawtness
he
articulate
these
issue
very
well
it
s
important
to
be
sure
that
these
problem
be
because
you
have
outgrow
your
architecture
a
common
reason
for
slow
delivery
and
buggy
release
be
a
poor
development
component_5
for
example
if
you
be
still
rely
on
manual
test
then
simply
adopt
automate
test
can
significantly
increase
development
technology_5
similarly
you
can
sometimes
solve
quality_attribute_7
problem
without
connector_15
your
architecture
you
should
first
try
quality_attribute_6
solution
if
and
only
if
you
still
have
delivery
problem
should
you
then
migrate
to
the
pattern_3
architecture
the
most
important
lesson
over
the
year
be
to
not
do
a
big
bang
rewrite
a
big
bang
rewrite
be
when
you
develop
a
component_2
in
this
requirement_6
a
pattern_1
base
component_2
from
scratch
although
start
from
scratch
and
leave
the
component_13
base
behind
sound
appeal
it
be
extremely
risky
and
will
likely
end
in
failure
you
will
spend
month
possibly
year
duplicate
the
exist
requirement_8
and
only
then
can
you
connector_12
the
feature
that
the
requirement_1
need
today
also
you
will
need
to
develop
the
component_13
component_2
anyway
which
divert
effort
away
from
the
rewrite
and
mean
that
you
have
a
constantly
move
target
what
s
more
it
s
possible
that
you
will
waste
time
reimplementing
feature
that
be
no
long
need
a
martin
fowler
reportedly
say
the
only
thing
a
big
bang
rewrite
guarantee
be
a
big
bang
kindle
location
one
thing
that
richardson
say
that
give
me
pause
be
that
exception
be
rarely
requirement_9
a
someone
that
have
historically
requirement_9
all
the
thing
i
be
pique
by
his
description
of
error
aggregation
component_11
that
will
provide
meta
connector_data_4
on
top
of
the
raw
error
content
this
be
something
i
should
look
into
a
component_4
should
rarely
requirement_9
an
exception
a
quality_attribute_8
approach
be
to
use
an
exception
track
component_4
a
figure
show
you
configure
your
component_4
to
report
exception
to
an
exception
track
component_4
via
for
example
a
pattern_10
technology_11
the
exception
track
component_4
de
duplicate
exception
generate
alert
and
manage
the
resolution
of
exception
kindle
location
of
i
love
it
whenever
i
see
someone
identify
that
the
transaction
script
pattern_2
be
perfectly
legitimate
when
your
component_6
be
not
overly
complex
it
allow
me
to
feel
le
junky
about
my
every
day
activity
while
i
be
a
strong
advocate
of
the
connector_data_8
orient
approach
there
be
some
situation
where
it
be
overkill
such
a
when
you
be
develop
quality_attribute_6
requirement_1
component_14
in
such
a
situation
a
quality_attribute_8
approach
be
to
connector_9
procedural
and
use
what
martin
fowler
connector_data_9
the
transaction
script
pattern_2
kindly
location
i
really
the
way
richardson
explain
domain
drive
design
ddd
and
about
how
the
domain
component_3
dovetail
with
the
pattern_11
boundary
of
a
quality_attribute_1
component_6
this
be
something
i
ve
be
think
about
recently
and
it
s
nice
to
see
some
my
think
reflect
in
richardson
s
connector_9
though
it
be
sometimes
hard
to
reconcile
his
aggregate
transaction
note
with
the
idea
of
an
outbox
domain
transaction
in
so
much
that
a
domain
and
a
domain
mutation
must
happen
atomically
together
in
a
transaction
another
rule
aggregate
must
obey
be
that
a
transaction
can
only
create
or
update
a
single
aggregate
when
i
first
connector_8
about
it
many
year
ago
this
rule
make
no
sense
at
the
time
i
be
develop
traditional
monolithic
component_15
that
use
an
technology_12
and
so
transaction
could
update
multiple
aggregate
today
however
this
constraint
be
perfect
for
the
pattern_3
architecture
it
ensure
that
a
transaction
be
contain
within
a
component_4
this
constraint
also
match
the
limit
transaction
component_3
of
most
technology_13
component_8
kindle
location
also
do
you
there
be
a
law
of
hole
my
inner
child
be
currently
rotfl
ing
this
remind
me
of
the
conversation
we
have
internally
a
lot
phrase
a
throw
quality_attribute_8
money
after
bad
the
law
of
hole
state
that
if
you
find
yourself
in
a
hole
stop
dig
this
be
great
advice
to
follow
when
your
monolithic
component_2
have
become
unmanageable
kindle
location
and
honestly
i
could
keep
go
i
highlight
an
absurd
number
of
passage
while
i
be
connector_3
this
book
hopefully
the
one
that
i
have
connector_20
can
shed
some
light
on
both
the
broad
scope
of
the
book
and
richardson
s
attention
to
detail
for
the
past
year
or
so
i
ve
be
try
hard
to
wrap
my
head
around
quality_attribute_1
component_16
architecture
and
pattern_3
pattern_2
which
be
particularly
hard
consider
my
daily
work
keep
me
inside
a
monolith
much
of
what
i
ve
connector_8
on
the
matter
be
too
broad
and
shallow
other
thing
be
narrow
but
excessively
deep
pattern_1
pattern_2
by
chris
richardson
really
strike
a
healthy
balance
between
the
two
his
book
cover
a
range
of
topic
but
manage
to
cover
them
in
what
feel
a
very
appropriate
amount
of
detail
this
book
be
definitely
a
recommend
connector_8
for
anyone
think
about
or
struggle
to
move
from
a
monolithic
architecture
into
a
quality_attribute_1
component_16
architecture
enjoy
this
❤️
connector_19
the
love
with
your
friend
❤️
tweet
this
interest
by
@bennadel
pattern_1
pattern_2
with
example
in
technology_1
by
chris
richardson
you
might
also
enjoy
some
of
my
other
why
i
ve
be
merge
pattern_1
back
into
the
monolith
at
invision
monolith
to
pattern_1
evolutionary
pattern_2
to
transform
your
monolith
by
sam
newman
technology_14
pattern_1
architecture
for
containerize
technology_14
component_15
requirement_7
requirement_5
pattern_2
design
build
and
quality_attribute_3
pattern_4
solution
by
gregor
hohpe
and
bobby
woolf
technology_15
pattern_2
for
component_15
by
derick
bailey
i
heart
requirement_9
connector_data_4
connector_21
component_5
and
connector_data_4
requirement_5
by
jay
kreps
production
ready
pattern_1
build
standardize
component_16
across
an
engineering
organization
by
susan
j
fowler
release
it
design
and
quality_attribute_3
production
ready
by
michael
t
nygard
quality_attribute_7
rule
principle
for
quality_attribute_9
web
sit
by
martin
l
abbott
and
michael
t
fisher
build
pattern_1
design
fine
grain
component_6
by
sam
newman
show
all
relate
reader
oh
my
chicken
this
be
old
hit
me
up
on
twitter
if
you
want
to
discus
it
further
straight
ally
flag
ben
nadel
©
all
content
be
the
property
of
ben
nadel
for
use
of
see
license
back
to
top
about
ben
nadel
i
be
the
co
founder
and
a
principal
engineer
at
invision
component_17
inc
—
the
world
s
lead
online
whiteboard
and
productivity
component_18
power
the
future
of
work
i
also
rock
out
in
technology_16
and
technology_17
24x7
and
i
dream
about
chain
promise
resolve
asynchronously
social
connector_22
technology_18
twitter
linkedin
connector_22
home
activity
podcast
project
about
me
me
people
invision
technology_19
fee
