An Introduction to Stream Processing with Apache Flink | by Ehab Qadah | Towards Data ScienceGet unlimited accessOpen in appHomeNotificationsListsStoriesWritePublished inTowards Data ScienceEhab QadahFollowJan 7, 2020·5 min readAn Introduction to Stream Processing with Apache FlinkExploring the capabilities of the distributed stream processing engine of Apache Flink!Photo by Patrick Mayor on UnsplashIn many application domains, massive streaming data is generated from different sources, for example, user activities on the web, measurements from the Internet of Things (IoT) devices, transactions from financial services, and location-tracking feeds. These data streams (unbounded) that traditionally used to be stored as datasets (bounded), and processed later by batch processing jobs. Although this is not an efficient way in some scenarios due to the time value of the data, where the real-time processing is desirable by businesses to enable them to get insights from data and proactively respond to changes as close as the data is being produced (in motion).Toward that, the applications have to be updated to be more stream-based using real-time stream processors. That is where Apache Flink comes in; Flink is an open-source framework for stateful, large-scale, distributed, and fault-tolerant stream processing.This blog post presents an overview of Apache Flink and its key features for streaming applications. It focuses on Flink’s DataStream API and explores some of the underlying architectural design concepts.Most of the details of this post are based on my hands-on experience in Flink during my involvement in the datAcron EU research project as summarised in this paper.Distributed Online Learning System Archircture using Apache Flink. Photo by the author | Photo from A Distributed Online Learning Approach for Pattern Prediction over Movement Event Streams.Apache Flink is gaining more popularity and it is being used in production to build large-scale data analytics and processing components over massive streaming data, where it powers some of the world’s most demanding stream processing applications, for example, it is a crucial component of Alibaba’s search engine.Apache Flink OverviewApache Flink is an open-source platform that provides a scalable, distributed, fault-tolerant, and stateful stream processing capabilities. Flink is one of the most recent and pioneering Big Data processing frameworks.Apache Flink allows to ingest massive streaming data (up to several terabytes) from different sources and process it in a distributed fashion way across multiple nodes, before pushing the derived streams to other services or applications such as Apache Kafka, DBs, and Elastic search. Simply, the basics building blocks of a Flink pipeline: input, processing, and output. Its runtime supports low-latency processing at extremely high throughputs in a fault-tolerant manner. Flink capabilities enable real-time insights from streaming data and event-based capabilities. Flink enables real-time data analytics on streaming data and fits well for continuous Extract-transform-load (ETL) pipelines on streaming data and for event-driven applications as well.It gives processing models for both streaming and batch data, where the batch processing model is treated as a special case of the streaming one (i.e., finite stream). Flink’s software stack includes the DataStream and DataSet APIs for processing infinite and finite data, respectively. Flink offers multiple operations on data streams or sets such as mapping, filtering, grouping, updating state, joining, defining windows, and aggregating.The two main data abstractions of Flink are DataStream and DataSet, they represent read-only collections of data elements. The list of elements is bounded (i.e., finite) in DataSet, while it is unbounded (i.e., infinite) in the case of DataStream.Flink programs are represented by a data-flow graph (i.e., directed acyclic graph — DAG) that gets executed on the Flink’s core, which is a distributed streaming dataflow engine. The data flow graphs are composed of stateful operators and intermediate data stream partitions. The execution of each operator is handled by multiple parallel instances whose number is determined by the parallelism level. Each parallel operator instance is executed in an independent task slot on a machine within a cluster of computers. The figure below shows an example of the data flow graph for Flink’s application.Apache Flink®- a parallel data flow graph in FlinkThe following is a brief description of the main features of Flink:Robust Stateful Stream Processing: Flink applications give the ability to handle business logic that requires a contextual state while processing the data streams using its DataStream API at any scaleFault Tolerance: Flink offers a mechanism of state recovery from faults based on a periodic and asynchronous checkpointing (saving internal state to external persistent storage such as HDFS)Exactly-Once Consistency Semantics: the Flink’s core ensures that each event in the stream is delivered and processed exactly once in case of failuresScalability: applications are parallelized to scale in or out the number of the processing tasksIn-Memory Performance: Flink applications perform all computations by accessing local, often in-memory, state yielding very low processing latenciesFlink provides seamless connectivity to a variety of data sources including Apache Kafka, Elasticsearch, Apache Cassandra, Kinesis and … many moreFlexible deployment: Flink can be deployed on various clusters environments s such as YARN, Apache Mesos, and KubernetesA Complex Event Processing (CEP ) library to detect patterns (i.e., event sequences) in data streamsFluent APIs in Java and ScalaFlink is a true streaming engine comparing for instance to the micro-batch processing model of Spark StreamingSummaryIn this blog post, we covered the high-level stream processing components that are the building blocks of the Flink framework. In a nutshell, Apache Flink is a powerful system for implementing event-driven, data analytics, and ETL pipeline streaming applications and running them at large-scale. I barely scratched the surface in this post, I encourage you to check out the documentation of Apache Flink.Apache Flink® — Stateful Computations over Data StreamsResources:(1) Ehab Qadah, Michael Mock, Elias Alevizos, and Georg Fuchs. A Distributed Online Learning Approach for Pattern Prediction over Movement Event Streams with Apache Flink. In EDBT/ICDT Workshops, 2018.https://flink.apache.orgBlink: How Alibaba Uses Apache Flink®What makes for a great search engine on an e-commerce site? Results that, in real-time, are as relevant and accurate as…www.ververica.comPowered by FlinkApache Flink TrainingApache Flink® is an open source platform for scalable stream and batch data processing. It offers expressive APIs to…training.ververica.comExtending the Yahoo! Streaming BenchmarkUpdate December 18, 2017: Nearly 2 years after this initial post, we discussed the Yahoo streaming benchmark in another…www.ververica.com------More from Towards Data ScienceYour home for data science. A Medium publication sharing concepts, ideas and codes.Read more from Towards Data ScienceRecommended from MediumEduprojectngPotential sources of errors in students’ research project topicsFrank Zickert | Quantum Machine LearninginTowards Data ScienceHow To Setup JupyterLab For Quantum Computing — On WindowsChristianlauerinTowards Data ScienceHow to detect Fraud and Abnormalities in Financial DataKirapanHow to use Kaggle to Master Data ScienceNeha KatlaPoisson Regression Implementation- PythonLouis CasanaveWelcome to my Data Science Blog!SWine reviews Data AnalysisSameh SharafDatabricks Delta Lake — A Friendly IntroAboutHelpTermsPrivacyGet the Medium appGet startedEhab Qadah73 FollowersSenior SoftwareEngineer/Lead.FollowMore from MediumIvan SenilovinTowards Data ScienceUsing Kafka with AVRO in PythonVojtech TumainInside Amp XPractical Tips for Dask, vol3: Limited-fan RepartitionsRania ZYANEApache Oozie MonitoringTalha KhaninHevo Data EngineeringOptimizing Database LoadsHelpStatusWritersBlogCareersPrivacyTermsAboutKnowable






































