








Design patterns for microservices - To .NET




























































Skip to content



To .NET
Convert.ToDotNet("Everyone")


     Menu



Home
About Me
 












Design patterns for microservices
July 10, 2017 __Sander Azure


The goal of microservices is to increase the velocity of application releases, by decomposing the application into small autonomous services that can be deployed independently. A microservices architecture also brings some challenges. By applying certain patterns you can mitigate these challenges. If you are looking for guidance, patterns and practices, on microservice architecture, check out the Azure Architecture Center. The AzureCAT patterns & practices team has published nine new design patterns that are particularly useful when designing and implementing microservices.
Each of these patterns have pros and cons, so do not threat these patterns as a todo list for your own implementation. But study each scenario carefully to find out if the obstacles you face in moving to a microservices architecture can be lifted and how.
Here are the new patterns:
Ambassador
This pattern can be useful for offloading common client connectivity tasks such as monitoring, logging, routing, security (such as TLS), and resiliency patterns in a language agnostic way. It is often used with legacy applications, or other applications that are difficult to modify, in order to extend their networking capabilities. It can also enable a specialized team to implement those features. Put client frameworks and libraries into an external process that acts as a proxy between your application and external services. Deploy the proxy on the same host environment as your application to allow control over routing, resiliency, security features, and to avoid any host-related access restrictions. You can also use the ambassador pattern to standardize and extend instrumentation. The proxy can monitor performance metrics such as latency or resource usage, and this monitoring happens in the same host environment as the application.
Anti-corruption layer
Implement a façade or adapter layer between a modern application and a legacy system that it depends on. This layer translates requests between the modern application and the legacy system. Use this pattern to ensure that an application’s design is not limited by dependencies on legacy systems. Communication between the modern application and the anti-corruption layer always uses the application’s data model and architecture. Calls from the anti-corruption layer to the legacy system conform to that system’s data model or methods. The anti-corruption layer contains all of the logic necessary to translate between the two systems. The layer can be implemented as a component within the application or as an independent service.
Backends for Frontends
Create separate backend services to be consumed by specific frontend applications or interfaces. This pattern is useful when you want to avoid customizing a single backend for multiple interfaces. Create one backend per user interface. Fine tune the behavior and performance of each backend to best match the needs of the frontend environment, without worrying about affecting other frontend experiences. Because each backend is specific to one interface, it can be optimized for that interface. As a result, it will be smaller, less complex, and likely faster than a generic backend that tries to satisfy the requirements for all interfaces. Each interface team has autonomy to control their own backend and doesn’t rely on a centralized backend development team.
Bulkhead
The pattern whereby you isolate elements of an application into pools so that if one fails, the others will continue to function is named Bulkhead because it resembles the sectioned partitions of a ship’s hull. If the hull of a ship is compromised, only the damaged section fills with water, which prevents the ship from sinking. Partition service instances into different groups, based on consumer load and availability requirements. This design helps to isolate failures, and allows you to sustain service functionality for some consumers, even during a failure. A consumer can also partition resources, to ensure that resources used to call one service don’t affect the resources used to call another service. For example, a consumer that calls multiple services may be assigned a connection pool for each service. If a service begins to fail, it only affects the connection pool assigned for that service, allowing the consumer to continue using the other services.
Gateway Aggregation
Use a gateway to aggregate multiple individual requests into a single request. This pattern is useful when a client must make multiple calls to different backend systems to perform an operation. The gateway receives client requests, dispatches requests to the various backend systems, and then aggregates the results and sends them back to the requesting client. This way, you can reduce the number of requests that the application makes to backend services, and improve application performance over high-latency networks.
Gateway Offloading
Offload shared or specialized service functionality to a gateway proxy. This pattern can simplify application development by moving shared service functionality, such as the use of SSL certificates, from other parts of the application into the gateway. Simpler configuration results in easier management and scalability and makes service upgrades simpler. This also allows your core team to focus on the application functionality, leaving these specialized but cross-cutting concerns to the relevant experts. It also provides some consistency for request and response logging and monitoring. Even if a service is not correctly instrumented, the gateway can be configured to ensure a minimum level of monitoring and logging.
Gateway Routing
Route requests to multiple services using a single endpoint. This pattern is useful when you wish to expose multiple services on a single endpoint and route to the appropriate service based on the request. With this pattern, the client application only needs to know about and communicate with a single endpoint. If a service is consolidated or decomposed, the client does not necessarily require updating. It can continue making requests to the gateway, and only the routing changes. A gateway also lets you abstract backend services from the clients, allowing you to keep client calls simple while enabling changes in the backend services behind the gateway.
Sidecar
Deploy components of an application into a separate process or container to provide isolation and encapsulation. This pattern can also enable applications to be composed of heterogeneous components and technologies. This pattern is named Sidecar because it resembles a sidecar attached to a motorcycle. In the pattern, the sidecar is attached to a parent application and provides supporting features for the application. A sidecar service is not necessarily part of the application, but is connected to it. It goes wherever the parent application goes. Sidecars are supporting processes or services that are deployed with the primary application.
Strangler
Incrementally migrate a legacy system by gradually replacing specific pieces of functionality with new applications and services. As features from the legacy system are replaced, the new system eventually replaces all of the old system’s features, strangling the old system and allowing you to decommission it. This pattern helps to minimize risk from the migration, and spread the development effort over time. With the façade safely routing users to the correct application, you can add functionality to the new system at whatever pace you like, while ensuring the legacy application continues to function. Over time, as features are migrated to the new system, the legacy system is eventually “strangled” and is no longer necessary.
There are more Cloud Design Patterns, all of them useful for building reliable, scalable, secure applications in the cloud. Each pattern discusses challenges in cloud development in terms of Availability, Data Management, Design and Implementation, Messaging, Management and Monitoring, Performance and Scalability, Resiliency and Security.
Check out the complete catalog of patterns here: https://docs.microsoft.com/nl-nl/azure/architecture/patterns/ or download the PDF.




Post navigation
Previous Post:Pattern matching in C# 7Next Post:Building Azure Functions in C# with Visual Studio Code











Search for:



   Search


Categories

.NET

.NET Core

ASP.NET

Azure

Blockchain

C#

Front End Web Dev

TypeScript

Visual Studio


Archives

March 2019
November 2018
August 2018
March 2018
February 2018
September 2017
August 2017
July 2017
June 2017
May 2017
November 2016
November 2015
November 2013
June 2012
April 2011
April 2010
November 2009
August 2009
June 2009
May 2009
April 2009
March 2009
December 2008
November 2008
October 2008
July 2008
May 2008
April 2008
February 2008
November 2007
October 2007
September 2007
June 2007
April 2007
January 2007
December 2006
November 2006
October 2006
September 2006
August 2006
July 2006
June 2006
May 2006
April 2006
March 2006
February 2006
January 2006
December 2005
November 2005
October 2005
September 2005
August 2005
July 2005
June 2005

Recent CommentsMichael Valverde on Publishing and running your ASP.NET Core project on Linux__Sander on Public / Private Keys and SigningvonSchlau on Public / Private Keys and Signing__Sander on Public / Private Keys and SigningFrancisco Carlos on Public / Private Keys and Signing






		WordPress Theme: Poseidon by ThemeZee.	












