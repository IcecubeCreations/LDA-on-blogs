








Apache Kafka vs. Integration Middleware (MQ, ETL, ESB) - A Comparison

































































 







Home
Highlights
Activities

Talks at International Conferences
Video Recordings
Publications


Blog

Analytics

Analytics
Apache Spark
Big Data
Business Intelligence
Deep Learning
Hadoop
In Memory
Jupyter
Machine Learning
NoSQL
Open Source
Kafka Streams
Python
Social Network
TensorFlow


Cloud

Cloud
Apache Mesos
Cloud-Native
Docker
Kubernetes
Open Source
Persistence
Service Mesh


Internet of things

Internet of Things
Big Data
IIoT
MQTT
Open Source
PLC4X


Integration

Integration
API Management
Application Server
Blockchain
BPM
EAI
ESB
IT Certifications
IT Conferences
Java / JEE
Messaging
Microservices
Middleware
Open Source
Apache Kafka
Kafka Connect
Persistence
Service Mesh
SOA
Social Network
Web Framework


Stream Processing

Stream Processing
Apache Kafka
Big Data
Confluent
Kafka Connect
Kafka Streams
KSQL
Persistence




About me
Stay in Contact
















































 
Technology Evangelist â€“ Big Data Analytics â€“ Middleware â€“ Apache Kafka















 
Technology Evangelist â€“ Big Data Analytics â€“ Middleware â€“ Apache Kafka



Home
Highlights
Activities

Talks at International Conferences
Video Recordings
Publications


Blog 



Analytics 

Cloud 

Internet of things 

Integration 

Stream Processing 



Apache SparkBig DataBusiness IntelligenceDeep LearningHadoopIn MemoryJupyterKafka StreamsMachine LearningNoSQLOpen SourcePythonSocial NetworkTensorFlow 

Apache MesosCloud-NativeDockerKubernetesOpen SourcePersistenceService Mesh 

Big DataIIoTMQTTOpen SourcePLC4X 

Apache KafkaAPI ManagementApplication ServerBlockchainBPMEAIESBIT CertificationsIT ConferencesJava / JEEKafka ConnectMessagingMicroservicesMiddlewareOpen SourcePersistenceService MeshSOASocial NetworkWeb Framework 

Apache KafkaBig DataConfluentKafka ConnectKafka StreamsKSQLPersistence 




About ME
Stay in Contact
 













Search for:


Search





















Apache Kafka
Big Data
Confluent
EAI
ESB
Featured Posts
In Memory
Integration
Kafka Connect
Kafka Streams
KSQL
Messaging
Microservices
Middleware
Open Source
SOA
Stream Processing 
Apache Kafka vs. Middleware (MQ, ETL, ESB) â€“ Slides + Video
3 minute read 


 


This post shares a slide deck and video recording of the differences between an event-driven streaming platform like Apache Kafka and middleware like Message Queues (MQ), Extract-Transform-Load (ETL) and Enterprise Service Bus (ESB).


ByKai Waehner7. March 2019 

Total
0
Shares





0





0





0













											Share										



 0 
			people shared the story		





0





0





0





0











Learn the differences between an event-driven streaming platform like Apache Kafka and middleware like Message Queues (MQ), Extract-Transform-Load (ETL) and Enterprise Service Bus (ESB). Including best practices and anti-patterns, but also how these concepts and tools complement each other in an enterprise architecture.
This blog post shares my slide deck and video recording. I discuss the differences between Apache Kafka as Event Streaming Platform and integration middleware. Learn if they are friends, enemies or frenemies.
Problems of Legacy Middleware
Extract-Transform-Load (ETL) is still a widely-used pattern to move data between different systems via batch processing. Due to its challenges in todayâ€™s world where real time is the new standard, an Enterprise Service Bus (ESB) is used in many enterprises as integration backbone between any kind of microservice, legacy application or cloud service to move data via SOAP / REST Web Services or other technologies. Stream Processing is often added as its own component in the enterprise architecture for correlation of different events to implement contextual rules and stateful analytics. Using all these components introduces challenges and complexities in development and operations.

Apache Kafka â€“ An Open Source Event Streaming Platform
This session discusses how teams in different industries solve these challenges by building a native event streaming platform from the ground up instead of using ETL and ESB tools in their architecture. This allows to build and deploy independent, mission-critical streaming real time application and microservices. The architecture leverages distributed processing and fault-tolerance with fast failover, no-downtime, rolling deployments and the ability to reprocess events, so you can recalculate output when your code changes. Integration and Stream Processing are still key functionality but can be realized in real time natively instead of using additional ETL, ESB or Stream Processing tools.
A concrete example architecture shows how to build a complete streaming platform leveraging the widely-adopted open source framework Apache Kafka to build a mission-critical, scalable, highly performant streaming platform. Messaging, integration and stream processing are all build on top of the same strong foundation of Kafka; deployed on premise, in the cloud or in hybrid environments. In addition, the open source Confluent projects, based on top of Apache Kafka, adds additional features like a Schema Registry, additional clients for programming languages like Go or C, or many pre-built connectors for various technologies.

Slides: Apache Kafka vs. Integration Middleware
Here is the slide deck:
    Apache Kafka vs. Integration Middleware (MQ, ETL, ESB)  from Kai WÃ¤hner 
Video Recording: Kafka vs. MQ / ETL / ESB â€“ Friends, Enemies or Frenemies?
Here is the video recording where I walk you through the above slide deck:

Article: Apache Kafka vs. Enterprise Service Bus (ESB)
I also published a detailed blog post on Confluent blog about this topic in 2018:
Apache Kafka vs. Enterprise Service Bus (ESB)
Talk and Slides from Kafka Summit London 2019
The slides and video recording from Kafka Summit London 2019 (which are similar to above) are also available for free.
Why Apache Kafka instead of Traditional Middleware?
If you donâ€™t want to spend a lot of time on the slides and recording, here is a short summary of the differences of Apache Kafka compared to traditional middleware:

Questions and Discussionâ€¦
Please share your thoughts, too!
Does your infrastructure see similar architectures? Do you face similar challenges? Do you like the concepts behind an Event Streaming Platform (aka Apache Kafka)? How do you combine legacy middleware with Kafka? Whatâ€™s your strategy to integrate the modern and the old (technology) world? Is Kafka part of that architecture?
Please let me know either via a comment or via LinkedIn, Twitter, email, etc. I am curious about other opinions and experiences (and people who disagree with my presentation).
 

Total
0
Shares





Share
0





Tweet
0





Pin it
0












Please leave this field emptyDontâ€˜ miss my next post. Subscribe!









We donâ€™t spam! Read more in our privacy policy

Check your inbox or spam folder to confirm your subscription.
        
 




Related TagsActiveMQApacheApamaBig DataCacheCobolConfluentEdifactEnterprise Service BusESBETLEvent SourcingEvent Streaming PlatformExtract Transform LoadIBMIBM MQIn MemoryInformaticaIntegrationJSONkafkaKafka Connectkafka streamsKSQLLegacyMainframeMessage QueuemessagingmicroservicesmiddlewareMonolithMQopen sourceOracleRabbitMQRESTSOAPSoftware AGSolaceStream ProcessingStreamBasestreamsTIBCOTIBCO EMSweb serviceXML





 





								Kai Waehner							


builds cloud-native event streaming infrastructures for real-time data processing and analytics



































			2 comments		





 Roy Henley says: 

16. July 2020 at 12:34 


I completely agree with you on the benefits of moving to event streaming architecture. However, the replacement options for existing messaging and ESB tech is vastly simplified. There are a number of reasons why Kafka isnâ€™t immediately replacing these well established technologies.
1. Kafka doesnâ€™t have a mainframe native (CICS/COBOL) option. MQ is still the â€˜simplestâ€™ way to integrate with the mainframe and there is 30 years of integration experience and development in that space.
2. Orchestration and choreography are concerns that live outside most messaging systems so requires investment. If an organisation is going to invest in this area then they are looking at ESB style solutions. Kafka becomes a transport mechanism only. We need ksql, query, connect to be supported as first class citizens in these tools otherwise they become competing not coordinating choices.
3. ETL tools have many well developed patterns and UI based interfaces to facility their role in the ETL flows. Kafka requires significant development effort (coding) to perform the same functionality. Kafka needs a low code/no code option to compete in this space.
If we canâ€™t replace these older technologies with event streaming tool, weâ€™re just adding another tool to our already complex stack. It may provide new capabilities, but without facilitating simplification, itâ€™s ultimately going to become another piece of the puzzle. Hereâ€™s hoping we can solve all of these as event streaming is the best option for future integration requirements.

Reply 





 Kai Waehner says: 

6. August 2020 at 17:12 


I mostly agree with your comments, Ron. I want to point out that all my talks explain why this is not an immediate replacement for the reasons you brought up, but a complementary technology and concept. Some use cases can only be built with event streaming, some others need event streaming + existing middleware.
I also would like to see Kafka-native low code/no-code tools ðŸ™‚ This will come and solve some problems. On the other side, writing source code is not a negative point, it simply has trade-offs (â€“> pros and cons).

Reply 





Leave a Reply Cancel replyYour email address will not be published. Required fields are marked *Comment * Name * 
Email * 
Website 
 Save my name, email, and website in this browser for the next time I comment.
 

 


View Comments (2)








						You May Also Like					






Apache Kafka + MQTT = End-to-End IoT Integration (Code, Slides, Video)
Apache Kafka
Big Data
Confluent
EAI
Internet of Things
Kafka Connect
Messaging
Microservices
MQTT
Open Source
Stream Processing
ByKai Waehner10. September 2018 

				MQTT and Apache Kafka are a perfect combination for end-to-end IoT integration from edge to data center. This post discusses two different approaches and refers to implementations on Github using Apache Kafka, Kafka Connect, Confluent MQTT Proxy and Mosquitto.
			



								Read More							







0





0





0















 

Read More
10.2K views20 minute read 






Can Apache Kafka Replace a Database?
Analytics
Apache Kafka
Architecture
Big Data
Confluent
database
Integration
Kafka Connect
ByKai Waehner12. March 2020 

				Can and should Apache Kafka replace a database? How long can and should I store data in Kafka?â€¦
			



								Read More							







9





0





0
















 


Technology Evangelist


							Kai Waehner						



 



								builds cloud-native event streaming infrastructures for real-time data processing and analytics							

































 
Subscribe to my newsletter








Please leave this field empty
Stay informed about new blog posts!




We donâ€™t spam! Read our privacy policy for more info.

Check your inbox or spam folder to confirm your subscription.
        
 




End-to-End Integration 

Featured Posts









									1								




Apache Kafka, KSQL and Apache PLC4X for IIoT Data Integration and Processing












									2								




Apache Kafka vs. Middleware (MQ, ETL, ESB) â€“ Slides + Video












									3								




Deep Learning Example: Apache Kafka + Python + Keras + TensorFlow + Deeplearning4j







CategoriesCategories
Select Category
5G
Air Gapped
Airline
Airport
Allgemein
Amazon MSK
Analytics
Apache Camel
Apache Kafka
Apache Mesos
Apache Pulsar
Apache Spark
API
API Gateway
API Management
Application Server
Architecture
Ariba
Asset Tracking
Audio
Augmented Reality
Automation Industry
Automotive
Aviation
AWS
AWS Outposts
AWS Wavelength
Azure
Banking
BAPI
Betting
Big Data
Biotech
Biotechnology
Bitcoin
Blockchain
Bookmaker
BPM
BSS
Business Intelligence
Chatbot
Citizen
Cloud
Cloud-Native
Cloudera
Comparison
Concur
Condition Monitoring
Confluent
Confluent Cloud
Connected Cars
Connected Vehicles
Conversational AI
Core Banking
CRM
Crypto
Cryptocurrency
Cybersecurity
Data at Rest
Data Historian
Data Hub
Data in Motion
Data Integration
Data Lake
Data Mesh
Data Science
Data Streaming
Data Warehouse
database
Databricks
Deep Learning
DeFi
Digital Forensics
Digital Twin
Disaster Recovery
Distributed Ledger
Docker
Domain Driven Design
EAI
Edge
Edge Computing
EIPaaS
Elasticsearch
ELT
Energy
Enterprise Architecture
ERP
ESB
Ethereum
ETL
Event Streaming
Exactly once semantics
Featured Posts
Finance Industry
Food
Forensics
Fraud
Fraud Detection
Gambling
Games
Gaming
GCP
GDS
Government
Hadoop
Healthcare
Hivecell
HTTP
Hybrid Cloud
Hyperledger
IBM
IBM MQ
iDoc
IIoT
In Memory
Industrial IoT
Industry 4.0
Insurance
Insurance Industry
Integration
Internet of Things
Intrusion Detection
Inventory Management
IOTA
iPaaS
IT Certifications
IT Conferences
Java / JEE
JMS
Jupyter
Kafka Connect
Kafka Streams
Kappa Architecture
KSQL
ksqlDB
Kubernetes
Lake House
Lambda Architecture
Large Messages
Legacy
Libra
Life Science
Live Commerce
Logistics
Machine Learning
Machine Vision
Mainframe
Manufacturing
Message Queue
Messaging
Microservices
Middleware
Military
Mining
Mobility Services
MQTT
National Security
NFT
NLP
NoSQL
Oil and Gas
Omnichannel
OPC-UA
Open API
Open Banking
Open Source
Oracle
OSIsoft PI
OSS
OTT (Over the Top)
Payment
Persistence
Pharma
PLC4X
Predictive Maintenance
Public Sector
Python
QCon
Qualitrics
RabbitMQ
Ransomware
Recommendation
Red Hat
Redpanda
REST
Retail
Reverse ETL
Ripple
RTLS
Sales
SAP
SAP Hana
SCM
Security
Serverless
Service Mesh
SIEM
Situational Awareness
Smart Building
Smart City
Smart Grid
Snowflake
SOA
SOAP
SOAR
Social Network
Sparkplug
Splunk
Stream Processing
Streaming Analytics
Supply Chain
Telco
Telecom
Telecommunications Industry
TensorFlow
Threat Detection
Threat Intelligence
Tiered Storage
Transactions
Transportation
Trends
Uncategorized
Use Cases
V2X
Video
Video Streaming
Virtual Reality
Web Framework
Web Service
Web3
WSDL
XML
Zero Trust



Tag â€“ CloudAnalytics
Apache
Apache Camel
apache kafka
AWS
Big Data
BusinessWorks
Cloud
Cloud-Native
Confluent
Deep Learning
docker
EAI
Edge
Enterprise Application Integration
Enterprise Service Bus
ESB
event streaming
Hadoop
Hybrid
IBM
IIoT
Integration
IoT
J2EE
Java
JEE
kafka
Kafka Connect
kafka streams
KSQL
Kubernetes
machine learning
microservices
middleware
MQTT
open source
Oracle
Real Time
SOA
StreamBase
Streaming Analytics
Stream Processing
talend
TIBCO
 












 

Read More
43 views4 minute read 




Apache Kafka
Biotechnology
Healthcare
Omnichannel
Open API
Pharma 
Open API and Omnichannel with Apache Kafka in Healthcare

ByKai Waehner18. May 2022 






 

Read More
97 views19 minute read 




Amazon MSK
Apache Kafka
Apache Pulsar
Cloudera
Comparison
Confluent Cloud
IBM MQ
JMS
RabbitMQ
Redpanda 
Comparison: JMS Message Queue vs. Apache Kafka

ByKai Waehner12. May 2022 






 

Read More
76 views5 minute read 




Apache Kafka
Bitcoin
Blockchain
Cryptocurrency
Cybersecurity
Data Streaming
Ethereum
Fraud Detection 
Apache Kafka in Crypto and FinServ for Cybersecurity and Fraud Detection

ByKai Waehner29. April 2022 






 

Read More
112 views4 minute read 




Apache Kafka
Biotech
Confluent Cloud
Data Science
Data Streaming
Healthcare
Insurance
Kafka Streams
Life Science
Machine Learning 
Machine Learning and Data Science with Kafka in Healthcare

ByKai Waehner18. April 2022 









 

								2021 Â© Kai Waehner | Imprint  | Data Privacy 






 


























By continuing to use the site, you agree to the use of cookies. more information AcceptThe cookie settings on this website are set to "allow cookies" to give you the best browsing experience possible. If you continue to use this website without changing your cookie settings or you click "Accept" below then you are consenting to this.Close
