






















Parsing Large JSON Files using Jackson Streaming API Example












































Javarevisited






Learn Java, Programming, Spring, Hibernate throw tutorials, examples, and interview questions


















Topics and Categories



core java


spring


hibernate


collections


multithreading


design patterns


interview questions


coding


data structure


OOP


java 8


books


About Me


Java Certifications


JDBC


jsp-servlet


JSON


SQL


Linux


Courses


online resources


jvm-internals


REST


Eclipse


jQuery


Java IO


Java XML











Disclosure: This article may contain affiliate links. When you purchase, we may earn a small commission.












Parsing Large JSON Files using Jackson Streaming API Example













In the last couple of JSON tutorials for Java programmers, we have learned how to parse JSON using JSON-Simple library, parsing JSON array to Java array using GSon, and in this tutorial, we will learn how to parse a large JSON file in Java using Jackson's Streaming API. Jackson is one of the most popular JSON processing frameworks and provides three main models to parse and process JSON data including Streaming API, data binding, and tree model. Out of these three, Streaming works at the lowest level and can be used to parse huge JSON responses up to even gigabytes of size. If you are familiar with XML parsing, then you know that how difficult it is to parse huge XML files with DOM parser because it fully loads the file in memory before you can process it.
In case you have low memory e.g. Android devices you can't use that to parse XML. Thankfully, XML provides SAX and StAX parsers which are streaming-based and can be used to process huge files without loading them completely in memory.

Out of these two, StAX is even better because it allows pull-based processing where the client pulls data from parser instead of parser pushing data, which is the case with SAX parser. Jackson's Streaming API is similar to the StAX parser. You can pull the data you want and ignore what you don't want.

Though performance doesn't come without a cost, using Streaming API is a little difficult than using other Jackson models which provides a direct mapping between Java and Jackson objects. You have to handle all JSON data by yourself while using Streaming API.

And, if you are new to JSON Parsing in Java then I highly recommend you check out Jackson library. It's a very useful, versatile, and high-performance library for parsing JSON and CSV files and I think every Java developer should know about it. If you need a resource, check out Jackson Quick Start: JSON Serialization With Java Made Easy - a free course on Udemy to learn Jackson API basics.












Benefits of using Jackson Streaming API
There are several advantages of using Jackson's Streaming API to parse JSON String or convert Java object to JSON, but the most important one is that its very efficient. It has least memory and processing overhead and is extremely useful to parse large JSON responses, for example a JSON response containing thousands of order or list of books or list of electronic items downloaded from e-commerce sites like eBay or Amazon. Talking about other two model of Jackson API, data binding model converts JSON to and from Java object based either annotation or Java bean convention, while Tree Model provides a mutable in-memory tree representation of a JSON document, similar to DOM parser. In short, Streaming API is most powerful, has less memory and CPU overhead but tricky to use, while data binding is often most convenient, on the other hand Tree Model is most flexible. BTW, both of this model internally uses streaming API to parse JSON strings before converting it into respective models.



Library JARs and Dependency
In order to try following example, you need to download and add Jackson streaming API in your program's classpath. If you are using Maven then you can add following dependency in your pom.xml file :

<dependency>
   <groupId>org.codehaus.jackson</groupId>
   <artifactId>jackson-xc</artifactId>
   <version>1.9.12</version>
</dependency>

or just download and  add following JAR in CLASSPATH of your Java application.

C:\.m2\repository\org\codehaus\jackson\jackson-xc\1.9.12\jackson-xc-1.9.12.jar
C:\.m2\repository\org\codehaus\jackson\jackson-core-asl
                          \1.9.12\jackson-core-asl-1.9.12.jar
C:\.m2\repository\org\codehaus\jackson\jackson-mapper-asl\1.9.12
                           \jackson-mapper-asl-1.9.12.jar



It's often easier to manage dependency using Maven and that's why I strongly suggest switching to Maven if you are not using it yet. You can later upgrade to a newer version of Jackson library by just changing one line in Maven pom.xml file.



Parsing JSON in Java using Jackson Streaming API


This API has two main module, one fore reading JSON and other for writing JSON and in this tutorial we will learn both of them. JsonGenerator is used to write JSON while JsonParser is used to parse a JSON file. To demonstrate both reading and writing of JSON data in one program, I have created two static methods, createJSON() and parseJSON(). As name suggests first method creates a JSON file, which is then read by parseJSON() method. You can see in the code that we are dealing with quite low level, we have not created any Java object to represent content of JSON, instead we are writing and reading String, numbers and arrays.

You can get an instance of JsonGenerator from JsonFactory class by calling createJsonGenerator() method. You can also provide the encoding you are intended to use, in our case I have used "UTF-8" which is a convenient default in most cases.

You can use various write() methods to write contents.  Similarly, for parsing JSON, we need to create an instance of JsonParser, which can also be obtained from JsonFactory. 

We parse JSON by calling nextToken() method of JsonParser in a while loop until we reach JsonToken.END_OBJECT. Jackson API provides method to get name and value of token which you can use to identify data. Similarly while parsing JSON array, you wait until you get JsonToken.END_ARRAY identifier.

Since we never load the whole file in memory, this method can be used to read large JSON files with sizes from Megabytes to Gigabytes even with minimal memory environment e.g. in Android smartphones or Java ME enabled devices.

Here is the sample code example to read and write JSON using Jackson Streaming API :

import java.io.File;
import java.io.IOException;

import org.codehaus.jackson.JsonEncoding;
import org.codehaus.jackson.JsonFactory;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.JsonGenerator;
import org.codehaus.jackson.JsonParser;
import org.codehaus.jackson.JsonToken;
import org.codehaus.jackson.map.JsonMappingException;

/**
* Java program to demonstrate how to use Jackson Streaming API to read and
* write JSON Strings efficiently and fast.
*
* @author Javin Paul
*/
public class JsonJacksonStreamingAPIDemo{

    public static void main(String args[]) {

        System.out.println("Creating JSON file by using Jackson 
                                Streaming API in Java");
        createJSON("jacksondemo.json");
        System.out.println("done");

        System.out.println("Parsing JSON file by using Jackson 
                                Streaming API");
        parseJSON("jacksondemo.json");
        System.out.println("done");
    }

    /*
     * This method create JSON String by using Jackson Streaming API.
     */
    public static void createJSON(String path) {
        try {
            JsonFactory jsonfactory = new JsonFactory();
            File jsonDoc = new File(path);
            JsonGenerator generator = jsonfactory.createJsonGenerator(jsonDoc,
                                             JsonEncoding.UTF8);

            generator.writeStartObject();
            generator.writeStringField("firstname", "Garrison");
            generator.writeStringField("lastname", "Paul");
            generator.writeNumberField("phone", 847332223);

            generator.writeFieldName("address");

            generator.writeStartArray();
            generator.writeString("Unit - 232");
            generator.writeString("Sofia Streat");
            generator.writeString("Mumbai");
            generator.writeEndArray();

            generator.writeEndObject();

            generator.close();

            System.out.println("JSON file created successfully");

        } catch (JsonGenerationException jge) {
            jge.printStackTrace();
        } catch (JsonMappingException jme) {
            jme.printStackTrace();
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }

    /*
     * This method parse JSON String by using Jackson Streaming API example.
     */
    public static void parseJSON(String filename) {
        try {
            JsonFactory jsonfactory = new JsonFactory();
            File source = new File(filename);

            JsonParser parser = jsonfactory.createJsonParser(source);

            // starting parsing of JSON String
            while (parser.nextToken() != JsonToken.END_OBJECT) {
                String token = parser.getCurrentName();

                if ("firstname".equals(token)) {
                    parser.nextToken();  //next token contains value
                    String fname = parser.getText();  //getting text field
                    System.out.println("firstname : " + fname);

                }

                if ("lastname".equals(token)) {
                    parser.nextToken();
                    String lname = parser.getText();
                    System.out.println("lastname : " + lname);

                }

                if ("phone".equals(token)) {
                    parser.nextToken();
                    int phone = parser.getIntValue();  
                                  // getting numeric field
                    System.out.println("phone : " + phone);

                }

                if ("address".equals(token)) {
                    System.out.println("address :");
                    parser.nextToken(); 
                    // next token will be '[' which means JSON array

                    // parse tokens until you find ']'
                    while (parser.nextToken() != JsonToken.END_ARRAY) {
                        System.out.println(parser.getText());
                    }
                }
            }
            parser.close();

        } catch (JsonGenerationException jge) {
            jge.printStackTrace();
        } catch (JsonMappingException jme) {
            jme.printStackTrace();
        } catch (IOException ioex) {
            ioex.printStackTrace();
        }
    }




and here is the output of our program, when you run it from Eclipse or directly from the command line :

Creating JSON file by using Jackson Streaming API in Java
JSON file created successfully
done
Parsing JSON file by using Jackson Streaming API
firstname : Garrison
lastname : Paul
phone : 847332223
address :
Unit - 232
Sofia Streat
Mumbai
done


You will also see file jacksondemo.json in your project directory with the following JSON String :

{
  "firstname":"Garrison",
  "lastname":"Paul",
  "phone":847332223,
   "address":["Unit - 232","Sofia Streat","Mumbai"]
}


That's all about how to use Jackson Stream API to parse JSON String and to create JSON from Java objects. It's a powerful library with lots of features but Streaming is best. I know it's a little bit difficult and you need to write a lot of code with hard-coded filed names, it is the fastest way to read a large JSON file in Java with less memory overhead. If you are dealing with normal size JSON output and you don't have memory constraints then you can always use Jackson Data binding model to parse JSON to Java Object.

Other JSON tutorials you may like to explore

How to convert a JSON  String to POJO in Java? (tutorial)
3 Ways to parse JSON String in Java? (tutorial)
How to convert JSON array to String array in Java? (example)
How to convert a Map to JSON in Java? (tutorial)
How to use Google Protocol Buffer in Java? (tutorial)
How to use Gson to convert JSON to Java Object? (example)
5 Books to Learn REST and RESTful Web Services (books)


P.S. - If you are looking for online training to learn how to develop RESTful Web Services in Java using the Spring framework, I suggest you joining Eugen Paraschiv's REST with Spring course. The course has various options depending upon your experience level and how much you want to learn e.g. beginner's class, intermediate class, and master class. You can join the one which suits you better, though I suggest joining the master class if you are serious about becoming an expert Java REST developer. 

















By

javin paul
















Email This




BlogThis!




Share to Twitter




Share to Facebook






Labels:

Java JSON tutorial












2 comments
                      :
                    





Ankush

said...



how to validate Json against Json schema, do we have any validator to validate Json along with parsing ??





March 28, 2015 at 7:09 AM











Int64

said...



How Would you do it for multiple Json in a text file ?





August 6, 2015 at 9:08 PM














Post a Comment






















Newer Post




Older Post



Home





Subscribe to:

Post Comments
                      (
                      Atom
                      )
                    















Download Our Java Interview Books Sample [FREE]


Grokking the Java Interview PDF [FREE]
Grokking the Spring Boot Interview





























Subscribe for Discounts and Updates

    Follow 



Search This Blog



























Interview Questions



core java interview question
(175)


data structure and algorithm
(84)


interview questions
(78)


Coding Interview Question
(76)


object oriented programming
(37)


SQL Interview Questions
(35)


design patterns
(35)


spring interview questions
(30)


thread interview questions
(30)


collections interview questions
(25)


database interview questions
(16)


servlet interview questions
(15)


Programming interview question
(6)


hibernate interview questions
(6)











Best of Javarevisited


How Spring MVC works internally?
How to design a vending machine in Java?
How HashMap works in Java?
Why String is Immutable in Java?
10 Articles Every Programmer Must Read
How to convert lambda expression to method reference in Java 8?
10 Tips to improve Programming Skill 
10 OOP design principles programmer should know
How Synchronization works in Java?
10 tips to work fast in Linux
5 Books to improve Coding Skills















Java Tutorials



date and time tutorial
(24)


FIX protocol tutorial
(15)


Java Certification OCPJP SCJP
(33)


java collection tutorial
(79)


java IO tutorial
(29)


Java JSON tutorial
(14)


Java multithreading Tutorials
(60)


Java Programming Tutorials
(19)


Java xml tutorial
(16)


JDBC
(34)


jsp-servlet
(37)


online resources
(225)










Get New Blog Posts on Your Email

Get new posts by email:  Subscribe



Followers



















Translate This Blog





Categories



courses
(377)


SQL
(68)


database
(49)


linux
(46)


Java Certification OCPJP SCJP
(33)


Eclipse
(30)


REST
(26)


JVM Internals
(24)


JQuery
(21)


general
(18)


Testing
(16)


Maven
(15)





Blog Archive








        ► 
      



2022

(388)





        ► 
      



May

(68)







        ► 
      



April

(176)







        ► 
      



March

(29)







        ► 
      



February

(53)







        ► 
      



January

(62)









        ▼ 
      



2021

(1159)





        ► 
      



December

(165)







        ► 
      



November

(127)







        ► 
      



October

(49)







        ► 
      



September

(68)







        ► 
      



August

(250)







        ▼ 
      



July

(424)

Parsing Large JSON Files using Jackson Streaming A...
How to Solve UnrecognizedPropertyException: Unreco...
How to parse JSON with date field in Java - Jackso...
How to Ignore Unknown Properties While Parsing JSO...
Why use SerialVersionUID inside Serializable class...
How to Find Prime Factors of Integer Numbers in Ja...
java.lang.ClassNotFoundException: org.postgresql.D...
Why multiple inheritances are not supported in Java
How to create HTTP Server in Java - ServerSocket E...
Law of Demeter in Java - Principle of least Knowle...
How to do GROUP BY in Java 8? Collectors.groupingB...
10 Things Every Java Programmer Should Know about ...
How to Find If Linked List Contains Loop or Cycle ...
10 Tips to Debug Java Program in Eclipse - Examples
How SSL, HTTPS and Certificates Works in Java web ...
3 Ways to Convert an Array to ArrayList in Java? E...
Difference between LEFT and RIGHT OUTER Joins in S...
Difference Between Linked List and Array in Java? ...
When to Make a Method Static in Java? Example
Different Types of JDBC Drivers in Java - Quick Ov...
Is it possible to have an abstract method in a fin...
Difference between ClassNotFoundException vs NoCla...
Why Enum Singleton are better in Java? Examples
HashSet in Java – 10 Examples Programs Tutorial
Builder Design pattern in Java - Example Tutorial
5 Coding Tips for Improving Performance of Java ap...
Difference between repaint and revalidate method i...
How to Count number of Set bits or 1's of Integer ...
When a class is loaded and initialized in JVM - Ja...
How to Add Two Integer Numbers without using Plus ...
Java ArrayList and HashMap Performance Improvement...
Is Swing Thread Safe in Java? Answer
Invalid initial and maximum heap size in JVM - How...
Top 20 jQuery Interview Questions and Answers
How to Close Java Program or Swing Application wit...
How to Check if Integer Number is Power of Two in ...
InvokeLater and InvokeAndWait in Java Swing (an ex...
How to Use  Break, Continue, and Label in Loop in ...
How to get current URL, parameters and Hash tag us...
10 Examples of HotSpot JVM Options in Java
Difference between Sun (Oracle) JVM and IBM JVM?
How to Generate MD5 checksum for Files in Java? Ex...
How to find CPU and Memory used by Java process in...
10 XSLT or XML, XSL Transformation Interview Quest...
How ClassLoader Works in Java? Example
3 ways to solve java.lang.NoClassDefFoundError in ...
jQuery Tutorial - How to modify multiple HTML elem...
20 Design Patterns and Software Design Interview Q...
How to use Comparator and Comparable in Java? With...
10 Interview Questions on Java Generics for Progra...
What is -XX:+UseCompressedOops in 64 bit JVM? Example
Top 10 Garbage Collection Interview Questions and ...
How to Copy File in Java Program - Example Tutorial
What is Class File and Byte Code in Java? Example
Top 10 Java Swing Interview Questions Answers aske...
How to compare two lists of values in Microsoft Ex...
Difference between JVM, JIR, JRE, and JDK in Java?...
How to reload/refresh a page using JavaScript and ...
How to increase Heap memory of Apache Tomcat Serve...
How many characters allowed on VARCHAR(n) columns ...
What is bounded and unbounded wildcards in Generic...
How to Split String based on delimiter in Java? Ex...
Difference between Right shift and Unsigned right ...
What is the maximum Heap Size of 32 bit or 64-bit ...
How to Replace Line Breaks , New Lines From String...
How to Convert Byte Array to InputStream and Outpu...
How to Create JUnit Tests in Eclipse and NetBeans ...
10 Articles Every Programmer Must Read
What is java.library.path? How to set in Eclipse I...
How to add and substract days in current date in J...
10 JDK 7 Features to Revisit, Before You Welcome J...
Java Program to find factorial of number in Java -...
Top 50 Programmer Phone Interview Questions with A...
7 Examples to Read File into a Byte Array in Java
Difference between Connected vs Disconnected RowSe...
Difference between Stub and Mock object in Java Un...
How to Add Leading Zeros to Integers in Java ? Str...
How to Implement Linked List in Java with JUnit Te...
Difference between FileInputStream and FileReader ...
Top 10 Puzzles, Riddles, Logical, and Lateral Thin...
Difference between UTF-8, UTF-16 and UTF-32 Charac...
How to Remove Given Character From String in Java ...
How to Implement Thread in Java with Example
Difference between valueOf and parseInt method in ...
How to Compare Two Enum in Java? Equals vs == vs C...
Difference Between Abstract Class vs Interface in ...
What is String args[]  Argument in Java Main metho...
How to disable JUnit Test - @Ignore annotation Exa...
The Ultimate Guide of Generics in Java - Examples
Difference between trunk, tags and branches in SVN...
How to Check If Number is Even or Odd without usin...
How to Convert InputStream to Byte Array in Java -...
Java Program to print  Prime numbers in Java - Exa...
Java Program to Find Sum of Digits in a Number usi...
How to compare two XML files in Java - XMLUnit Exa...
JAXB Date Format Example using Annotation | Java D...
How to convert double to int in Java? Example
Does making all fields Final makes the class Immut...
Top 10 Tips on Logging in Java - Tutorial
How to Setup Java Remote Debugging in Eclipse - St...








        ► 
      



June

(9)







        ► 
      



May

(13)







        ► 
      



April

(17)







        ► 
      



March

(22)







        ► 
      



February

(8)







        ► 
      



January

(7)









        ► 
      



2020

(110)





        ► 
      



December

(13)







        ► 
      



November

(16)







        ► 
      



October

(9)







        ► 
      



September

(4)







        ► 
      



August

(5)







        ► 
      



July

(11)







        ► 
      



June

(2)







        ► 
      



May

(9)







        ► 
      



April

(21)







        ► 
      



March

(11)







        ► 
      



February

(9)









        ► 
      



2019

(25)





        ► 
      



December

(3)







        ► 
      



November

(6)







        ► 
      



October

(4)







        ► 
      



August

(1)







        ► 
      



July

(2)







        ► 
      



June

(2)







        ► 
      



May

(1)







        ► 
      



April

(3)







        ► 
      



February

(1)







        ► 
      



January

(2)









        ► 
      



2018

(5)





        ► 
      



September

(1)







        ► 
      



August

(1)







        ► 
      



July

(2)







        ► 
      



June

(1)









        ► 
      



2017

(26)





        ► 
      



December

(2)







        ► 
      



November

(3)







        ► 
      



October

(5)







        ► 
      



September

(3)







        ► 
      



July

(3)







        ► 
      



June

(6)







        ► 
      



May

(3)







        ► 
      



April

(1)














References


Oracle's Java Tech Network
jQuery Documentation
Microsoft SQL Server Documentation
Java SE 8 API Documentation
Spring Documentation
Oracle's JAva Certification
Spring Security 5 Documentation




Pages



Privacy Policy


Terms and Conditions






Copyright by Javin Paul 2010-2021. Powered by Blogger.









Search This Blog





















 

















