Fundamental principles of microservice design                  

   Skip to content    ProductsAnypoint PlatformConnect using APIs and integrationsIntegration Studio Exchange ConnectorsAPI managementFlex Gateway NewAPI Governance NewAPI ManagerSee allComposerConnect with clicks, not codeProduct announcementConnect your apps and data instantly, using clicks not code, with the new MuleSoft Composer. Read blog postTry for free Sign up for Anypoint Platform Download Studio & MuleGartner Magic Quadrant LeaderSee why Gartner named MuleSoft as a Leader in both Full Life Cycle API Management and iPaaS Read reports SolutionsBy industry Financial services Government Healthcare Higher education Insurance Manufacturing Media and telecom RetailBy technology API management B2B EDI Data integration DevOps ESB IoT iPaaS Microservices SOABy integration AWS Microsoft Salesforce SAP ServiceNow By role Architect CDO CIO Developer Business teamsBy initiative Business automation eCommerce Legacy system modernization Mobile Move to the cloud Omnichannel SaaS integrations Single view of customerSee all solutions Digital platforms in the API economyLearn how companies can build future-proof, agile, and scalable digital platforms Download whitepaper ServicesCustomer success Training and certification HelpAnypoint Platform FundamentalsGet hands-on experience using Anypoint Platform with a free online courseEnroll for free ResourcesFeatured Customer stories CIO webcast Developer podcast API strategy NewsExplore WebinarsDemos Videos Analyst reports eBooks Whitepapers Infographics Blog ArticlesEvents MuleSoft CONNECT Community Meetups All events See all resourcesLet's unleash innovation, togetherDiscover the power of together at MuleSoft CONNECTRegister now DevelopersGetting started Community Training Tutorials Documentation PartnersFOR CUSTOMERS Find a partner FOR PARTNERS Partner program Partner calendar Become a partner Partner login Contact Free trial LoginAnypoint Platform Composer Training Help Center    ProductsAnypoint PlatformConnect using APIs and integrationsIntegration Studio Exchange ConnectorsAPI managementFlex Gateway NewAPI Governance NewAPI ManagerSee allComposerConnect with clicks, not codeProduct announcementConnect your apps and data instantly, using clicks not code, with the new MuleSoft Composer. Read blog postTry for free Sign up for Anypoint Platform Download Studio & MuleGartner Magic Quadrant LeaderSee why Gartner named MuleSoft as a Leader in both Full Life Cycle API Management and iPaaS Read reports SolutionsBy industry Financial services Government Healthcare Higher education Insurance Manufacturing Media and telecom RetailBy technology API management B2B EDI Data integration DevOps ESB IoT iPaaS Microservices SOABy integration AWS Microsoft Salesforce SAP ServiceNow By role Architect CDO CIO Developer Business teamsBy initiative Business automation eCommerce Legacy system modernization Mobile Move to the cloud Omnichannel SaaS integrations Single view of customerSee all solutions Digital platforms in the API economyLearn how companies can build future-proof, agile, and scalable digital platforms Download whitepaper ServicesCustomer success Training and certification HelpAnypoint Platform FundamentalsGet hands-on experience using Anypoint Platform with a free online courseEnroll for free ResourcesFeatured Customer stories CIO webcast Developer podcast API strategy NewsExplore WebinarsDemos Videos Analyst reports eBooks Whitepapers Infographics Blog ArticlesEvents MuleSoft CONNECT Community Meetups All events See all resourcesLet's unleash innovation, togetherDiscover the power of together at MuleSoft CONNECTRegister now DevelopersGetting started Community Training Tutorials Documentation PartnersFOR CUSTOMERS Find a partner FOR PARTNERS Partner program Partner calendar Become a partner Partner login Contact Free trial LoginAnypoint Platform (English) Composer Training Help Center    © Copyright 2022 Salesforce, Inc.    MuleSoft Blog   Learn APIsIntegration strategyDev guidesDigital transformationNewsSeries Home > Dev guides > Microservices > 6 fundamental principles of microservice designMicroservices6 fundamental principles of microservice design  Ma-Keba FryeApril 11, 2022 |   11 mins readShare post   Reading Time:  11 minutesCompanies must remain proactive and innovative in today’s digital-first environment to keep pace with changing customer demands, emerging technologies, and improved processes. As organizations and their development teams aim to thrive in a continually evolving market, the microservice architecture brings value by laying the foundation to support continuous innovation and the agility to rapidly respond to new demands.  In the age of digital transformation and disruptive technology trends, the faster a business can innovate and adjust its strategies, the more aggressively it can meet rising customer expectations. The evolution of microservice architectureBefore microservices, legacy systems and monolithic architecture weren’t designed to support the rapid development and adoption of new technologies and modern applications. As a result, service-oriented architecture (SOA) was created to speed up project delivery, reduce integration costs, and increase scalability. Unfortunately, while it enabled development teams to make faster connections, traditional SOA introduced complexities and bottlenecks that slowed production times. Microservices are the next step in the evolution of SOA, bringing a cohesive, yet granular approach to software development. Its ability to work with multiple components to perform tasks while remaining independent has helped development teams boost productivity. These capabilities are expressed formally with business-oriented APIs. They encapsulate a core business capability and are assets to the business, further shaping their growing popularity amongst large-scale enterprises. The implementation of the service, which may involve integrations with systems of record, is completely hidden as the interface is defined purely in business terms.Several intrinsic benefits and business values are derived through microservices, including optimized business functionality, increased scalability, and improved productivity. Positioning services as valuable assets to the business implicitly makes them adaptable for use in multiple contexts. Additionally, the same service can deliver its capabilities to more than one business process or over different business channels or digital touchpoints. Here are six fundamental principles of microservice design. Microservice design principle 1: AutonomyA key function of microservices is their autonomy and ability to operate independently of each other. Autonomy is a measure of control that the implementation of the service has over its runtime environment and database schema. This enhances the performance and reliability of the service and gives consumers more guarantees about the quality of service they can expect from it. Coupled with statelessness, autonomy also contributes to the overall availability and scalability of the service. With increased autonomy, the microservices architecture is less likely to experience failures or performance issues because of another microservice.Microservice design principle 2: Loose couplingDependencies between services and their consumers are minimized with the application of the principle of loose coupling. By standardizing on contracts as expressed through business-oriented APIs, consumers aren’t impacted by changes in the implementation of the service. This enables increased evolvability and new solutions by allowing the service owners to change the implementation and switch out or modify the systems of record or even service compositions that may lie behind the interface and replace them without any downstream impact. Additionally, the increased efficiency and agility in the architecture created by loosely coupled services help to reduce coordination costs and yield faster results, respectively.Microservice design principle 3: ReuseReuse continues to be a principle of microservice design. However, the scope of reuse has been reduced to specific domains within the business. The effort of designing for this reuse, which in the early days of SOA included wasted efforts in developing enterprise-wide canonical models, was fruitless because it was too ambitious.However, it’s important to note that the canonical model in its restricted scope can be beneficial. In line with the reuse it facilitates, its scope has been reduced. An emerging model is preferred over a predetermined one with the merit-based reuse approach. Teams can agree on communication models for deciding how microservices must be adapted for use outside the contexts in which they were designed.A collaboration hub like Anypoint Exchange encourages merit-based reuse with reviews and ratings. If an existing microservice API doesn’t suit your domain or business group, you might be better off building another microservice that does it.Microservice design principle 4: Fault toleranceIf a component fails, fault tolerance is the capability that enables a system to continue operating properly. Each service is necessarily fault-tolerant so that failures on the side of its collaborating services will have minimal impact on its own SLA. Services, by virtue of being independent of each other, have the opportunity to cut off communication with a failed service. This technique, called a “circuit breaker” and inspired by the electrical component of the same name, stops individual service failures from propagating through the larger, distributed system.Microservice design principle 5: ComposabilityAll the design principles mentioned contribute to the principle of composability which allows the service to deliver value to the business in different contexts. Together with other services to form a new service aggregate, its composition is effectively the new form of application development.Microservice design principle 6: DiscoverabilityDiscoverability is to communicate to all interested parties a clear understanding of the business purpose and technical interface of the microservice. Thus, the service must be published in a way that ensures that developers of client software have everything they need to consume it easily.latest reportLearn why we are the Leaders in API management and iPaaSRead reportsWhat’s next for microservices?As the digital transformation continues and software development relies heavily on continuous integration and innovation, microservices architecture is here to stay. It has many advantages over previous architectural methods, especially in today’s fast-paced world, where solutions that offer increased efficiency, scalability, and innovation bring immense value. Many of the world’s largest enterprises continue to shift from a monolithic approach to implementing microservices. However, it’s important to be aware that this architecture can create disorganization and lack of governance if not managed properly. Additionally, microservices require more complex coordination and a systematic approach to implementation. Products developed with a microservices architecture will also need to be integrated with legacy technology stacks. If this is done poorly, it can create technical debt and more operational costs for the IT team. Therefore, instituting microservices to create a competitive advantage, improve software quality, and help your company innovate faster goes beyond a mere selection of products and software. Enterprises can better govern and manage their services by integrating a service mesh architecture into their microservices strategy. An architectural pattern for microservices deployment, a service mesh is a valuable component. It helps companies scale, maintain flexibility across services, and accelerate microservice adoption.Want to dive deeper? Get started with MuleSoft’s Anypoint Service Mesh and deploy microservices across your enterprise.TagsmicroservicesRelated articles   MicroservicesTop 6 microservices patternsJess Munday  8 mins read    MicroservicesMule microservices distributed transaction tracing With the advent of microservices, the functionalities that used to be bundled together in a single web/mule application are now running on different containers.Ravi Umapathy  7 mins read    MicroservicesIs this the end of microservices? With such euphoria greeting the concept of microservice architecture in 2014, it was only a matter of time before the trough of disillusionment swallowed…Matt McLarty  12 mins read  NewsletterGet the latest news delivered to your inboxSubscribe  mainfooter Related resources The value of APIs for business What is REST API design? API development best practices Recommended for you Connectivity benchmark report The application network How to design and manage APIs Watch now on demand Best practices for microservices API security best practices Anypoint Platform overviewSign up for our newsletter Developers Blog Terms Privacy Privacy Shield Cookie settings Contact  1-415-229-2009MuleSoft provides a widely used integration platform for connecting applications, data, and devices in the cloud and on-premises. MuleSoft’s Anypoint Platform™ is a unified, single solution for iPaaS and full lifecycle API management. Anypoint Platform, including CloudHub™ and Mule ESB™, is built on proven open-source software for fast and reliable on-premises and cloud integration without vendor lock-in.©2022 MuleSoft LLC, a Salesforce company    DeutschEnglish Full siteFrenchJapanesePortugueseSpanishDeutschFrenchJapanesePortugueseSpanishEnglish Full site  × Subscribe and get notified each time a new episode is published                                  