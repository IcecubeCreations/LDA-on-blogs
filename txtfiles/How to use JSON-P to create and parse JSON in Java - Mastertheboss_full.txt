







How to use JSON-P to create and parse JSON in Java - Mastertheboss






























































Skip to content 




						Mastertheboss
					

 





Menu 








Menu 
Configuration



Core configuration
CLI and scripting
Clustering
Datasource configuration
Deploy applications
JMS
Logging
Monitoring
Performance Tuning
Security


BPM



jBPM
Drools
Kogito
Bpmn 2.0
Activiti


Projects



ActiveMQ
Arquillian
Byteman
Debezium
Infinispan
IronJacamar
Keycloak
Netty
Undertow
Remoting
Primefaces


Enterprise API



Jakarta EE
Microprofile API
Batch API
CDI
Hibernate JPA
SOAP Web Services
EJB
JSF
Json
MongoDB
REST Services


Cloud



Docker
Openshift
Quarkus


Various



Eclipse IDE
IntelliJ IDEA
Jenkins
Vert-x
Java stuff
Testing Java


CheatSheets
 










How to use JSON-P to create and parse JSON in Java 
3 March 202213 November 2021 by F.Marchioni 









This tutorial shows how to use JSON Processing (JSR-353) API, part of the Jakarta EE specification. In general terms, there are two main APIs to handle JSON in Java:

JSON-P (JSON-Processing, JSR 374): Specifies a very low-level processing library which can be carried out with two models for JSON processing: the Object Model API and the Streaming API.
JSON-B (JSON-Binding, JSR 367): Provides a binding layer on top of JSON-P, making it easier to convert objects to and from JSON.

If you want an overview on both API, we recommend checking this tutorial: How to parse JSON in Java
Getting started with JSON Processing API
JSON-P is split into two core APIs, the Streaming API (javax.json.stream), and the JSON Object Model API (javax.json).

The Streaming API is used to parse (JsonParser) and generate JSON data (JsonGenerator).
The Object Model API, which is a simple, easy to use API implemented on top of the Streaming API. It creates an in-memory tree-like structure of the JSON data.

Firstly, let’s see a basic example which encodes some JSON data in various format:
package com.sample;

import java.io.IOException;
import javax.json.Json;
import javax.json.stream.JsonGenerator;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
 
@WebServlet("/json")
public class HelloWorldJson extends HttpServlet {

    @Override
    protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/json");
        final JsonGenerator generator = Json.createGenerator(response.getWriter());
       
        generator.writeStartObject();
        generator.write("Hello", "World");
        generator.write("Balance", new Double(1000));
        generator.write("IsMember", new Boolean(true));
        generator.writeEnd();
        generator.close();
    }
}

As you can see, this class uses the JsonGenerator to define a Json object and write it to the Servlet’s response stream. All you need in order to compile your javax.json.* classes is the jakarta.jakartaee-api dependency in place:
<dependency>
     <groupId>jakarta.platform</groupId>
     <artifactId>jakarta.jakartaee-api</artifactId>
     <version>8.0.0</version>
     <scope>provided</scope>
</dependency>
Testing the example
Let’s see the output using the cool SoapUI REST tester (if you don’t have it installed a Browser will be just enough):

Using JsonObjectBuilder
In the second example we are using the JsonObjectBuilder to generate a more complex JsonObject. A JsonObject class represents an immutable JSON object value containing a map view to the JSON object name/value mappings.
package com.sample;

import java.io.IOException;
import java.io.StringWriter;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonWriter;
import javax.json.stream.JsonGenerator;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/json2")
public class HelloWorldJson2 extends HttpServlet {

    @Override
    protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/json");
       
        JsonWriter jsonWriter = Json.createWriter(response.getWriter());
        JsonObject model = Json.createObjectBuilder()
                   .add("firstName", "johnny")
                   .add("lastName", "English")
                   .add("age", 48)
                   .add("streetAddress", "Downing Street 10")
                   .add("city", "London")
                   .add("state", "UK")
                   .add("phoneNumbers", Json.createArrayBuilder()
                      .add(Json.createObjectBuilder()
                         .add("type", "mobile")
                         .add("number", "338-111-1111"))
                      .add(Json.createObjectBuilder()
                         .add("type", "home")
                         .add("number", "0771-222-2222")))
                   .build();
        
        jsonWriter.writeObject(model);
        jsonWriter.close();
     
        jsonWriter.close();
    }
}

To create these object models, you can use the builder pattern (JsonObjectBuilder or JsonArrayBuilder) or read them from an input source (InputStream or Reader) using JsonReader. You can then write these object models to an output source (OutputStream or Writer) using the JsonWriter.
Done with object streaming, let’s see how to parse out examples. For this purpose we will use the JsonParser interface which provides read-only access to JSON data in a streaming way. This is the most efficient way for reading JSON data. The class Json contains methods to create parsers from input sources (InputStream and Reader).
The following example demonstrates how to create a parser from a StringReader which contains the JSON String:
package com.sample;

import java.io.StringReader;

import javax.json.Json;
import javax.json.stream.JsonParser;
import javax.json.stream.JsonParser.Event;

import org.junit.Test;

import com.sample.helper.ClientGet;

public class Tester {

    @Test
    public void test() {
        String result = ClientGet.get("http://localhost:8080/json/json");
        final JsonParser parser = Json.createParser(new StringReader(result));
        String key = null;
        String value = null;
        while (parser.hasNext()) {
            final Event event = parser.next();
            switch (event) {
                case KEY_NAME:
                    key = parser.getString();
                    System.out.println(key);
                    break;
                case VALUE_STRING:
                    value = parser.getString();
                    System.out.println(value);
                    break;
            }
        }
        parser.close();
    }

}

Finally, here’s the output from executing mvn test, which shows the key-value pairs for the first example:
Output from Server ....

Hello
World
Balance
IsMember
The source code for this tutorial is available here: https://github.com/fmarchioni/mastertheboss/tree/master/json/jsonp-demo
Using a different JSON Implementation
JSON-P is a standard Jakarta EE project, therefore the application server will try to run its implementation available as a module in jakarta.json-api-1.x.x.jar. if you want to switch to a different JSON implementation, you have to exclude the JSON API using the jboss-deployment-structure.xml file.
Here is an example:
<?xml version="1.0"?>
<jboss-deployment-structure xmlns="urn:jboss:deployment-structure:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <deployment>
  <exclusions>
    <module name="javax.json.bind.api"/>
    <module name="javax.json.api"/>
  </exclusions>
  </deployment>
</jboss-deployment-structure>


Post Views:
734












Categories Json 
Post navigation


Getting started with Hibernate reactive on Quarkus

Monitoring Quarkus runtime with DevUI 












Search for:







Recent Posts


WildFly custom caches configuration for Stateful Beans


How to consume Quarkus REST Services with React


Jakarta EE 10 is on its way with WildFly 27


Simple external resources Testing with Quarkus


How to use Camel extensions in Quarkus


WildFly books


Top 10 Tutorials

Configuring SSL/TLS with WildFly 
Using WildFly on OpenShift 
How to run CLI commands in WildFly Dockerfile 
Monitoring Quarkus with Prometheus 
Spring Boot on WildFly 
Active MQ Performance Tuning 
WildFly Interview Questions 
DataSource pool configuration 
Solving java.lang.OutOfMemoryError: Metaspace error 
How to redirect HTTP to HTTPS in WildFly 

 







© 2022 Mastertheboss • Built with GeneratePress 



We use cookies on our website to give you the most relevant experience by remembering your preferences and repeat visits. By clicking “Accept All”, you consent to the use of ALL the cookies. However, you may visit "Cookie Settings" to provide a controlled consent.Cookie SettingsAccept AllManage consent




Close






Privacy Overview 
This website uses cookies to improve your experience while you navigate through the website. Out of these, the cookies that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may affect your browsing experience.

 





								Necessary							


Necessary

Always Enabled 


Necessary cookies are absolutely essential for the website to function properly. These cookies ensure basic functionalities and security features of the website, anonymously.
CookieDurationDescriptioncookielawinfo-checkbox-analytics11 monthsThis cookie is set by GDPR Cookie Consent plugin. The cookie is used to store the user consent for the cookies in the category "Analytics".cookielawinfo-checkbox-functional11 monthsThe cookie is set by GDPR cookie consent to record the user consent for the cookies in the category "Functional".cookielawinfo-checkbox-necessary11 monthsThis cookie is set by GDPR Cookie Consent plugin. The cookies is used to store the user consent for the cookies in the category "Necessary".cookielawinfo-checkbox-others11 monthsThis cookie is set by GDPR Cookie Consent plugin. The cookie is used to store the user consent for the cookies in the category "Other.cookielawinfo-checkbox-performance11 monthsThis cookie is set by GDPR Cookie Consent plugin. The cookie is used to store the user consent for the cookies in the category "Performance".viewed_cookie_policy11 monthsThe cookie is set by the GDPR Cookie Consent plugin and is used to store whether or not user has consented to the use of cookies. It does not store any personal data.






								Functional							


Functional
 


Functional cookies help to perform certain functionalities like sharing the content of the website on social media platforms, collect feedbacks, and other third-party features.







								Performance							


Performance
 


Performance cookies are used to understand and analyze the key performance indexes of the website which helps in delivering a better user experience for the visitors.







								Analytics							


Analytics
 


Analytical cookies are used to understand how visitors interact with the website. These cookies help provide information on metrics the number of visitors, bounce rate, traffic source, etc.







								Advertisement							


Advertisement
 


Advertisement cookies are used to provide visitors with relevant ads and marketing campaigns. These cookies track visitors across websites and collect information to provide customized ads.







								Others							


Others
 


Other uncategorized cookies are those that are being analyzed and have not been classified into a category as yet.













SAVE & ACCEPT










 

				Go to mobile version			











