How To Create A Chatbot with Python & Deep Learning In Less Than An Hour | by Jere Xu | Towards Data ScienceOpen in appHomeNotificationsListsStoriesWritePublished inTowards Data ScienceJere XuFollowJan 11, 2020·8 min readSaveHow To Create A Chatbot with Python & Deep Learning In Less Than An HourObviously don’t expect it to be Siri or Alexa…Hopefully one day BB-8 will become reality…Some people genuinely dislike human interaction. Whenever they are forced to socialize or go to events that involve lots of people, they feel detached and awkward. Personally, I believe that I’m most extroverted because I gain energy from interacting with other people. There are plenty of people on this Earth who are the exact opposite, who get very drained from social interaction.I’m reminded of a very unique film called Her (2013). The basic premise of the film is that a man who suffers from loneliness, depression, a boring job, and an impending divorce, ends up falling in love with an AI (artificial intelligence) on his computer’s operating system. Maybe at the time this was a very science-fictiony concept, given that AI back then wasn’t advanced enough to become a surrogate human, but now? 2020? Things have changed a LOT. I fear that people will give up on finding love (or even social interaction) among humans and seek it out in the digital realm. Don’t believe me? I won’t tell you what it means, but just search up the definition of the term waifu and just cringe.Now isn’t this an overly verbose introduction to a simple machine learning project? Possibly. Now that I’ve detailed an issue that has grounds for actual concern for many men (and women) in this world, let’s switch gears and build something simple and fun!Here’s what the finished product will look like.Nice simple interfaceObviously this chatbot is EXTREMELY limited in its responsesAgendaLibraries & DataInitializing Chatbot TrainingBuilding the Deep Learning ModelBuilding Chatbot GUIRunning ChatbotConclusionAreas of ImprovementIf you want a more in-depth view of this project, or if you want to add to the code, check out the GitHub repository.Libraries & DataAll of the necessary components to run this project are on the GitHub repository. Feel free to fork the repository and clone it to your local machine. Here’s a quick breakdown of the components:train_chatbot.py — the code for reading in the natural language data into a training set and using a Keras sequential neural network to create a modelchatgui.py — the code for cleaning up the responses based on the predictions from the model and creating a graphical interface for interacting with the chatbotclasses.pkl — a list of different types of classes of responseswords.pkl — a list of different words that could be used for pattern recognitionintents.json — abunch of JavaScript objects that lists different tags that correspond to different types of word patternschatbot_model.h5 — the actual model created by train_chatbot.py and used by chatgui.pyThe full code is on the GitHub repository, but I’m going to walk through the details of the code for the sake of transparency and better understanding.Now let’s begin by importing the necessary libraries. (When you run the python files on your terminal, be sure to make sure they are installed properly. I use pip3 to install the packages.)We have a whole bunch of libraries like nltk (Natural Language Toolkit), which contains a whole bunch of tools for cleaning up text and preparing it for deep learning algorithms, json, which loads json files directly into Python, pickle, which loads pickle files, numpy, which can perform linear algebra operations very efficiently, and keras, which is the deep learning framework we’ll be using.Initializing Chatbot TrainingNow it’s time to initialize all of the lists where we’ll store our natural language data. We have our json file I mentioned earlier which contains the “intents”. Here’s a snippet of what the json file actually looks like.Typical json formatWe use the json module to load in the file and save it as the variable intents.If you look carefully at the json file, you can see that there are sub-objects within objects. For example, “patterns” is an attribute within “intents”. So we will use a nested for loop to extract all of the words within “patterns” and add them to our words list. We then add to our documents list each pair of patterns within their corresponding tag. We also add the tags into our classes list, and we use a simple conditional statement to prevent repeats.Next, we will take the words list and lemmatize and lowercase all the words inside. In case you don’t already know, lemmatize means to turn a word into its base meaning, or its lemma. For example, the words “walking”, “walked”, “walks” all have the same lemma, which is just “walk”. The purpose of lemmatizing our words is to narrow everything down to the simplest level it can be. It will save us a lot of time and unnecessary error when we actually process these words for machine learning. This is very similar to stemming, which is to reduce an inflected word down to its base or root form.Next we sort our lists and print out the results. Alright, looks like we’re set to build our deep learning model!Building the Deep Learning ModelLet’s initialize our training data with a variable training. We’re creating a giant nested list which contains bags of words for each of our documents. We have a feature called output_row which simply acts as a key for the list. We then shuffle our training set and do a train-test-split, with the patterns being the X variable and the intents being the Y variable.Now that we have our training and test data ready, we will now use a deep learning model from keras called Sequential. I don’t want to overwhelm you with all of the details about how deep learning models work, but if you are curious, check out the resources at the bottom of the article.The Sequential model in keras is actually one of the simplest neural networks, a multi-layer perceptron. If you don’t know what that is, I don’t blame you. Here’s the documentation in keras.This particular network has 3 layers, with the first one having 128 neurons, the second one having 64 neurons, and the third one having the number of intents as the number of neurons. Remember, the point of this network is to be able to predict which intent to choose given some data.The model will be trained with stochastic gradient descent, which is also a very complicated topic. Stochastic gradient descent is more efficient than normal gradient descent, that’s all you need to know.After the model is trained, the whole thing is turned into a numpy array and saved as chatbot_model.h5.We will use this model to form our chatbot interface!Building Chatbot GUIOnce again, we need to extract the information from our files.Here are some functions that contain all of the necessary processes for running the GUI and encapsulates them into units. We have the clean_up_sentence() function which cleans up any sentences that are inputted. This function is used in the bow() function, which takes the sentences that are cleaned up and creates a bag of words that are used for predicting classes (which are based off the results we got from training our model earlier).In our predict_class() function, we use an error threshold of 0.25 to avoid too much overfitting. This function will output a list of intents and the probabilities, their likelihood of matching the correct intent. The function getResponse() takes the list outputted and checks the json file and outputs the most response with the highest probability.Finally our chatbot_response() takes in a message (which will be inputted through our chatbot GUI), predicts the class with our predict_class() function, puts the output list into getResponse(), then outputs the response. What we get is the foundation of our chatbot. We can now tell the bot something, and it will then respond back.Here comes the fun part (if the other parts weren’t fun already). We can create our GUI with tkinter, a Python library that allows us to create custom interfaces.We create a function called send() which sets up the basic functionality of our chatbot. If the message that we input into the chatbot is not an empty string, the bot will output a response based on our chatbot_response() function.After this, we build our chat window, our scrollbar, our button for sending messages, and our textbox to create our message. We place all the components on our screen with simple coordinates and heights.Running ChatbotFinally it’s time to run our chatbot!Because I run my program on a Windows 10 machine, I had to download a server called Xming. If you run your program and it gives you some weird errors about the program failing, you can download Xming.Before you run your program, you need to make sure you install python or python3 with pip (or pip3). If you are unfamiliar with command line commands, check out the resources below.Once you run your program, you should get this.ConclusionCongratulations on completing this project! Building a simple chatbot exposes you to a variety of useful skills for data science and general programming. I feel that the best way (for me, at least) to learn anything is to just build and tinker around. If you want to become good at something, you need to get in lots of practice, and the best way to practice is to just get your hands dirty and build!Areas of ImprovementThank you for taking the time to read through this article! Feel free to check out my portfolio site or my GitHub.1. Trying out different neural networksWe used the simplest keras neural network, so there is a LOT of room for improvement. Feel free to try out convolutional networks or recurrent networks for your projects.2. Using more dataOur json file was extremely tiny in terms of the variety of possible intents and responses. Human language is billions of times more complex than this, so creating JARVIS from scratch will require a lot more.3. Using different frameworksThere are many more deep learning frameworks than just keras. There’s tensorflow, Apache Spark, PyTorch, Sonnet, and more. Don’t limit yourself to just one tool!ResourcesDeep LearningNatural Language ProcessingCommand LineNeural NetworksTkinter--10----10More from Towards Data ScienceFollowYour home for data science. A Medium publication sharing concepts, ideas and codes.Read more from Towards Data ScienceRecommended from MediumManish NehraIntegrating Machine Learning with DevOpsAhmed TahaCross-Iteration Batch NormalizationSarthak khandelwalinThe StartupFocal Loss: An efficient way of handling class imbalanceSamah WalidDeep Learning on Graphs with Graph Neural NetworkLuis CezeinOctoMLBuild ML models once, run anywhere.Oleg KhomenkoHow attractive you are? Analysing person’s photo using OpenAI CLIP modelNimish KhuranaIntroduction to Machine Learning and It’s Types for BeginnersSpencer HolleyTurning good into great | For Text ClassificationAboutHelpTermsPrivacyGet the Medium appGet startedJere Xu622 FollowersFounder of FirstFruits Analytics, lover of Christ, explorer/learnerFollowMore from MediumTapas DasinBetter ProgrammingHow to Perform Feature Engineering From Text DataKyle ZieglerinLevel Up CodingAn Analysis of Shingling and Random Projection AlgorithmsVinicius MonteiroinTowards Data ScienceDeploy MNIST Trained Model as a Web ServiceAmbuj PawarinPython in Plain EnglishValentine’s Day Gift Using NLP (aka Natural Language Processing)HelpStatusWritersBlogCareersPrivacyTermsAboutKnowable






































