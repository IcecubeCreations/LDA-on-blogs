







Redis, Kafka or RabbitMQ: Which MicroServices Message Broker To Choose?














































































 















MENUMENUCONTACT USSIGN IN 




















 








MENUMENUUse Cases






Put data to work with innovative mobility service solutions
EXPLORE USE CASES
 


Smart CitiesSafety & EmergencyFleet ManagementMapping & PlanningRemote DiagnosticsPredictive Maintenance 


EV ServicesInnovative InsuranceLocation IntelligenceConstruction EquipmentConcierge ServicesMedia Measurement 


Traffic ManagementMobility IntelligenceEV IntelligenceMaaS IntelligenceUrban IntelligenceParking Solutions 
 


 

Platform & Privacy






Ready for Connected Car Data?

REQUEST SAMPLE DATA

 


PlatformFleet SolutionsDynamic Blurring EngineConsent Management 


Neutral ServerCar Data APISecurity 


Privacy PolicyDriver PledgeGDPRMarketplace Privacy 
 


 

Data






Enrich traffic infowith real time &historical vehicle data
DOWNLOAD DATASHEET
 


Automotive DataTraffic DataMobility IntelligenceRoad Signs DataHazard Data 


Construction Equipment DataOEMs Fleet DataCommercial Fleet DataBMW CarDataBMW CarData for Fleets 


Avis Budget Group DataElectric Vehicle DataMercedes-Benz Data 
 

Resources






Data-Driven Driving:Consumer attitiudesabout shared mobility
DOWNLOAD REPORT
 


Reports & PapersBrochuresCase StudiesDatasheetsVideos & Podcasts 


What is Connected Car Data?Japanese Resources 


DevelopersDocumentationGlossary 
 

BlogAbout Us






Otonomo is hiring!
JOIN THE TEAM
 


LeadershipCompanyInvestors 


NewsCareersEvents 
 

Sign in 




Use Cases

Smart Cities
Fleet Management
Safety & Emergency
Mapping & Planning
Mobility Intelligence
Urban Intelligence
EV Intelligence
MaaS Intelligence
EV Services
Predictive Maintenance
Innovative Insurance
Location Intelligence
Remote Diagnostics
Parking Solutions
Media Measurement
Concierge Services
Traffic Management
Construction Equipment


Platform & Privacy

Platform
Dynamic Blurring Engine
Consent Management
Fleet Solutions
Driver Pledge
Privacy Policy
GDPR
Marketplace Privacy
Neutral Server
Security
Car Data API


Data

Automotive Data
Traffic Data
Mobility Intelligence
Road Signs Data
Hazard Data
Electric Vehicle Data
OEMs Fleet Data
Commercial Fleet Data
Construction Equipment Data
BMW CarData
BMW CarData for Fleets
Mercedes-Benz Data
Avis Budget Group Data


Resources

Reports & Papers
Brochures
Case Studies
Datasheets
Videos & Podcasts
What is Connected Car Data?
Glossary
Japanese Resources
Developers
Documentation


Blog
About Us

Leadership
Company
Investors
News
Events
Careers


Sign in
 

 Menu


Use Cases

Smart Cities
Fleet Management
Safety & Emergency
Mapping & Planning
Mobility Intelligence
Urban Intelligence
EV Intelligence
MaaS Intelligence
EV Services
Predictive Maintenance
Innovative Insurance
Location Intelligence
Remote Diagnostics
Parking Solutions
Media Measurement
Concierge Services
Traffic Management
Construction Equipment


Platform & Privacy

Platform
Dynamic Blurring Engine
Consent Management
Fleet Solutions
Driver Pledge
Privacy Policy
GDPR
Marketplace Privacy
Neutral Server
Security
Car Data API


Data

Automotive Data
Traffic Data
Mobility Intelligence
Road Signs Data
Hazard Data
Electric Vehicle Data
OEMs Fleet Data
Commercial Fleet Data
Construction Equipment Data
BMW CarData
BMW CarData for Fleets
Mercedes-Benz Data
Avis Budget Group Data


Resources

Reports & Papers
Brochures
Case Studies
Datasheets
Videos & Podcasts
What is Connected Car Data?
Glossary
Japanese Resources
Developers
Documentation


Blog
About Us

Leadership
Company
Investors
News
Events
Careers


Sign in
 





















Redis, Kafka or RabbitMQ: Which MicroServices Message Broker To Choose? 











When using asynchronous communication for Microservices, it is common to use a message broker. A broker ensures communication between different microservices is reliable and stable, that the messages are managed and monitored within the system and that messages don’t get lost. There are a few message brokers you can choose from, varying in scale and data capabilities. This blog post will compare the three most popular brokers: RabbitMQ, Kafka and Redis.But first, let’s learn about Microservices communication.Microservices Communication: Synchronous and AsynchronousThere are two common ways Microservices communicate with each other: Synchronous and Asynchronous. In a Synchronous communication, the caller waits for a response before sending the next message, and it operates as a REST protocol on top of HTTP. On the contrary, in an Asynchronous communication the messages are sent without waiting for a response. This is suited for distributed systems, and usually requires a message broker to manage the messages.The type of communication you choose should consider different parameters, such as how you structure your Microservices, what infrastructure you have in place, latency, scale, dependencies and the purpose of the communication. Asynchronous communication may be more complicated to establish and requires adding more components to stack, but the advantages of using Asynchronous communication for Microservices outweigh the cons.Asynchronous Communication AdvantagesFirst and foremost, asynchronous communication is non-blocking by definition. It also supports better scaling than Synchronous operations. Third, in the event Microservice crashes, Asynchronous communication mechanisms provide various recovery techniques and is generally better at handling errors pertaining to the crash. In addition, when using brokers instead of a REST protocol, the services receiving communication don’t really need to know each other. A new service can even be introduced after an old one has been running for a long time, i.e better decoupling services.Finally, when choosing Asynchronous operations, you increase your capability of creating a central discovery, monitoring, load balancing, or even policy enforcer in the future. This will provide you with abilities for flexibility, scalability and more capabilities in your code and system building.Choosing the Right Message BrokerAsynchronous communication is usually manages through a message broker. There are other ways as well, such as aysncio, but they’re more scarce and limited.When choosing a broker for executing your asynchronous operations, you should consider a few things:Broker Scale – The number of messages sent per second in the system.Data Persistency – The ability to recover messages.Consumer Capability – Whether the broker is capable of managing one-to-one and/or one-to-many consumers.One-to-OneOne-to-Many We checked out the latest and greatest services out there in order to find out which provider is the strongest within these three categories.Comparing Different Message BrokersRabbitMQ (AMQP)Scale: based on configuration and resources, the ballpark here is around 50K msg per second.Persistency: both persistent and transient messages are supported.One-to-one vs one-to-many consumers: both.RabbitMQ was released in 2007 and is one of the first common message brokers to be created. It’s an open source that delivers messages through both point-to-point and pub-sub methods by implementing Advanced Message Queuing Protocols (AMQP). It’s designed to support complex routing logic.There are some managed services that allow you to use it as a SaaS but it’s not part of the native major cloud provider stack. RabbitMQ supports all major languages, including Python, Java, .NET, PHP, Ruby, JavaScript, Go, Swift, and more.Expect some performance issues when in persistent mode.KafkaScale: can send up to a millions messages per second.Persistency: yes.One-to-one vs one-to-many consumers: only one-to-many (seems strange at first glance, right?!).Kafka was created by Linkedin in 2011 to handle high throughput, low latency processing. As a distributed streaming platform, Kafka replicates a publish-subscribe service. It provides data persistency and stores streams of records that render it capable of exchanging quality messages.Kafka has managed SaaS on Azure, AWS, and Confluent. They are all the creators and main contributors of the Kafka project. Kafka supports all major languages, including Python, Java, C/C++, Clojure, .NET, PHP, Ruby, JavaScript, Go, Swift and more.RedisScale: can send up to a million messages per second.Persistency: basically, no – it’s an in-memory datastore.One-to-one vs one-to-many consumers: both.Redis is a bit different from the other message brokers. At its core, Redis is an in-memory data store that can be used as either a high-performance key-value store or as a message broker. Another difference is that Redis has no persistency but rather dumps its memory into a Disk/DB. It’s also perfect for real-time data processing.Originally, Redis was not one-to-one and one-to-many. However, since Redis 5.0 introduced the pub-sub, capabilities boosted and one-to-many became a real option.Message Brokers per Use CaseWe covered some characteristics of RabbitMQ, Kafka, and Redis. All three are beasts in their category, but as described, they operate quite differently. Here is our recommendation for the right message broker to use according to different use cases.Short-lived Messages: RedisRedis’s in-memory database is an almost perfect fit for use-cases with short-lived messages where persistence isn’t required. Because it provides extremely fast service and in-memory capabilities, Redis is the perfect candidate for short retention messages where persistence isn’t so important and you can tolerate some loss. With the release of Redis streams in 5.0, it’s also a candidate for one-to-many use cases, which was definitely needed due to limitations and old pub-sub capabilities.Large Amounts of Data: KafkaKafka is a high throughput distributed queue that’s built for storing a large amount of data for long periods of time. Kafka is ideal for one to many use cases where persistency is required.Complex Routing: RabbitMQRabbitMQ is an older, yet mature broker with a lot of features and capabilities that support complex routing. It will even support complex routing communication when the required rate is not high (more than a few tens of thousands msg/sec).Consider Your Software StackThe final consideration, of course, is your current software stack. If you’re looking for a relatively easy integration process and you don’t want to maintain different brokers in a stack, you might be more inclined to work with a broker that is already supported by your stack.For example, if you’re using Celery for Task Queue in your system on top of RabbitMQ, you’ll have an incentive to work with RabbitMQ or Redis as opposed to Kafka who is not supported and would require some rewriting.We at Otonomo have used all the above through our platform evolution and growth and then some! It’s important to remember that each tool has its own pro & cons and it’s about understanding them and choosing the right tool for the job and that specific moment, situation and requirements. 



















More for Developers 



							Otonomo is more than a car data exchange. Read these blogs written by developers, for developers, about coding, technology and culture.						















Spark Cache Applied at Large Scale – Challenges, Pitfalls and SolutionsThe ultimate guide for Spark cache and Spark memory. Learn to apply Spark caching on production with confidence, for large-scales of data. Everything Spark cache.READ MOREOfek HodNovember 18, 2021@Otonomo: An Innovative Approach to Software DeliveryIn our Behind the Scenes Otonomo series, we talk to people from across the Otonomo family to hear what makes their job unique, and the innovative ways they take on their role within the company.READ MORENir Nahum - Software Engineering Team LeaderJune 15, 2021How We Run CI/CD in Our Development Process newWe developed a CI/CD pipeline to assist our R&D save time when merging to the master branch. Learn about our environment challenges, cloud pricing, and moreREAD MOREDanny GitelmanAugust 12, 2019Luigi, Airflow, Pinball, and Chronos: Comparing Workflow Management SystemsA comparison of Luigi, Airflow, Pinball and Chronos. Choose the best workflow management system for your automated jobs based on features and abilities.READ MOREHilla ShapiraJune 5, 2019How to Count Large Scale GeohashesA brand new effective way to count geohashes in any given region at any level, even in continents. Learn how you can now analyze geohashes properly.READ MOREItamar LandsmanJune 3, 2019Deleting Code MattersDeleting parts of your code is hard but necessary. Read how keeping your code short is better for code maintenance, reducing bugs etc., and best practices.READ MORETzahi FurmanskiMay 28, 2019Redis, Kafka or RabbitMQ: Which MicroServices Message Broker To Choose?Choose the best microservices message broker for your communication needs. Read this comparison of Redis, Kafka and RabbitMQ and become an expert.READ MORESefi Itzkovich - CTOMay 20, 2019





























 

Worldwide Headquarters
16 Abba Eban Blvd.
Herzeliya Pituach, Israel


Otonomo Inc
2443 Fillmore St #380-8751
San Francisco, CA 94115


Otonomo GmbH
Westendstr. 28
Frankfurt a.M. 60325, Germany


 







USE CASESSmart Cities
Safety & Emergency
Fleet Management
Mapping & Planning
Electric Vehicle (EV) Services
Innovative Insurance
Location Intelligence
Remote Diagnostics
Traffic Management
Parking Solutions
Predictive Maintenance
Media Measurement
Concierge Services
Construction Equipment
DATAAutomotive Data
Traffic Data
Road Signs
Hazard Data
Construction Equipment Data
Electric Vehicle Data
BMW CarData
BMW CarData for Fleets
Mercedes-Benz
Avis Budget Group
 







PLATFORM & SERVICESPlatform
Dynamic Blurring Engine
Consent Management
Neutral Server
Car Data API
Use Cases
PRIVACYDriver Pledge
GDPR
Privacy Policy
Security Policy
Driver Privacy Rights Portal
Privacy and Security Statement
 







RESOURCESBlog
Resources
Japanese Resources
What is Connected Car Data?
Documentation
Car Data API
ABOUTLeadership
Company
Investors
News
Events
Contact Us
Careers
 







Get updates 





 
















KEEP IN TOUCH info@otonomo.io
© Otonomo All Rights Reserved Terms of Use Cookie Policy
All map images attributed to ©Mapbox





facebooktwitterlinkedin



 














 

















































