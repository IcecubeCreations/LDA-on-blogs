

























 

Best Practices zu Microservice-Design, Logik und APIs
















































































                    Newsletter                





                    Whitepaper                





                    Webinare                




3

                    Stellenmarkt                






  









					Newsletter				



					Whitepaper				



					Webinare				



					Stellenmarkt				









					IT-Awards				



					Specials				



Canonical Ubuntu 

AWS 

Definitionen 




					Development				



Agile 

Security und Testing 

Coding 

Apps 

Web  

UI & UX 




					DevOps				



CI & CD 

Container 

DevSecOps 

Versionskontrolle 

Teamführung 




					Cloud Native				



Container-Orchestrierung 

Everything as Code 

Microservices 

Observability & Monitoring 

PaaS 




					Management				



Change Management 

Compliance 

Projektmanagement 

Rollout & Inventar 

Service & Support 

Softwarequalität 




					Solution Stack				



APIs 

Betriebssysteme 

Datenbanken 

Frameworks 

IDEs und Tools 

Programmiersprachen 




					Technologien				



Blockchain 

IoT & Embedded 

KI & ML 

Low-Code & No-Code 

Open Source 




					News				



					eBooks				



					Mediathek				



Anbieter 

Bilder 




					CIO Briefing				



					Forum				



					Akademie				





   

 








					IT-Awards				



		Aktuelle Beiträge aus "IT-Awards"















								
																
												
																	IT-Awards 2021															


								Das sind die Gewinner der IT-Awards 2021							
















								
																
												
																	Die IT-Awards 2021 – auch in diesem Jahr als Livestream															


								Wer sind Ihre IT-Anbieter und -Hersteller des Jahres?							
















								
																
												
																	IT-Awards 2020															


								Die Leser haben entschieden – die Gewinner der IT-Awards 2020							
















								
																
												
																	Die große Leserwahl ist aus: Wer gewinnt?															


								Die IT-Awards 2020 – jeder kann bei der Preisverleihung dabei sein							









					Specials				



Canonical Ubuntu


AWS


Definitionen




		Aktuelle Beiträge aus "Specials"















								
																
												
																	Definition „Steuerungsumkehr“															


								Was bedeutet Inversion of Control?							
















								
																
												
																	Definition „Black-Box- und White-Box-Testing“															


								Der Unterschied zwischen Black-Box- und White-Box-Test							
















								
																
												
																	Definition „Control Flow“															


								Was ist eine Kontrollstruktur?							









					Development				



Agile


Security und Testing


Coding


Apps


Web 


UI & UX




		Aktuelle Beiträge aus "Development"
















																
												
																	Das Javascript-Framework Vue.js, Teil 8															


								Arbeiten mit der Composition-API von Vue							
















								
																
												
																	TrustInSoft Analyzer															


								Mathematische Schwachstellen-Analyse							
















								
																
												
																	Bericht zeigt Defizite bezüglich Wissen und Erfahrung															


								Es hakt bei der cloudnativen Softwareentwicklung							









					DevOps				



CI & CD


Container


DevSecOps


Versionskontrolle


Teamführung




		Aktuelle Beiträge aus "DevOps"















								
																
												
																	Software-Auslieferungsprozess beherrschen, Teil 2															


								Continuous Delivery mit GitHub Actions							
















								
																
												
																	Update veröffentlicht															


								Canonical Kubernetes 1.24 ist verfügbar							
















								
																
												
																	Maschinenidentitäten verwalten und überwachen															


								4 Grundsätze für besseres DevSecOps							









					Cloud Native				



Container-Orchestrierung


Everything as Code


Microservices


Observability & Monitoring


PaaS




		Aktuelle Beiträge aus "Cloud Native"















								
																
												
																	Versicherungskonzern HDI setzt auf Cloud Native															


								Automatisierte Security- und Compliance-Prozesse 							
















								
																
												
																	Unternehmen brauchen heute vollständige Transparenz															


								Auf dem Weg zur Full-Stack Observability							
















								
																
												
																	Die starken Four Opens															


								Was ist Open Infrastructure?							









					Management				



Change Management


Compliance


Projektmanagement


Rollout & Inventar


Service & Support


Softwarequalität




		Aktuelle Beiträge aus "Management"















								
																
												
																	Versicherungskonzern HDI setzt auf Cloud Native															


								Automatisierte Security- und Compliance-Prozesse 							
















								
																
												
																	Gesetz zur Software-Updatepflicht															


								Bringt die Software-Updatepflicht neue Risiken für Unternehmen?							
















								
																
												
																	Open Source – unterstützend, unvermeidlich, unübersichtlich															


								Sind Open-Source-Lizenzen wirklich kompliziert?							









					Solution Stack				



APIs


Betriebssysteme


Datenbanken


Frameworks


IDEs und Tools


Programmiersprachen




		Aktuelle Beiträge aus "Solution Stack"
















																
												
																	Das Javascript-Framework Vue.js, Teil 8															


								Arbeiten mit der Composition-API von Vue							
















								
																
												
																	Definition „Steuerungsumkehr“															


								Was bedeutet Inversion of Control?							

















																
												
																	Code-Qualitätssicherung mit PDB und anderen Tools															


								Debugging von Python-Programmen							









					Technologien				



Blockchain


IoT & Embedded


KI & ML


Low-Code & No-Code


Open Source




		Aktuelle Beiträge aus "Technologien"















								
																
												
																	Bericht zeigt Defizite bezüglich Wissen und Erfahrung															


								Es hakt bei der cloudnativen Softwareentwicklung							
















								
																
												
																	Die starken Four Opens															


								Was ist Open Infrastructure?							
















								
																
												
																	Die Grenzen des IoT mit der Blockchain überwinden															


								Die Blockchain als Bindeglied zwischen IoT, Datenschutz und Cybersicherheit							









					News				



					eBooks				



					Mediathek				



Anbieter


Bilder






					CIO Briefing				



					Forum				



					Akademie				


mehr...





 

Login






















Solution Stack


APIs


Best Practices zu Microservice-Design, Logik und APIs




Mikrodienste entwerfen und strukturieren Best Practices zu Microservice-Design, Logik und APIs 01.02.2018Autor /                     Redakteur:                      Georg Lauer *                     /   Stephan AugstenWie sieht gutes Microservice-Design aus? Wenn Micro klein ist – wie klein sind dann die Services? Wie können APIs  und Frameworks dafür aussehen? Was kann eine lose Kopplung gefährden? Und wie stellt man Datenpersistenz sicher? Ein Blick auf die Entwicklung aus einer System-Perspektive.


		Anbieter zum Thema	



				CA Deutschland GmbH			







					PresseBox - unn | UNITED NEWS NETWORK GmbH				








					OutSystems				








					Confluent Germany GmbH				




Microservices müssen ein großes Ganzes ergeben, aber sich gleichzeitig auch flexibel strukturieren lassen.                                         (Bild gemeinfrei: Aenigmatis-3D - Pixabay.com)                                      Nachdem wir uns in den vorigen Artikeln zu Microservices mit deren prinzipiellen Eigenschaften, den institutionellen Voraussetzungen und organisatorischen Vorarbeiten beschäftigt haben, geht es jetzt an das eigentliche Design. Eins vorneweg: Die optimale Größe des Microservices bemisst sich nicht nach Kriterien wie Code-Zeilen. Es kommt vielmehr auf den Business-Kontext an, also auf die Funktion und den spezifischen Kontext des Microservices im System.  Die Aufteilungslogik hinter MicroservicesBei der Einführung von Microservices zerlegt man bestehende Komponenten, um ihre Qualität schneller verbessern zu können, ohne dass sie an Zuverlässigkeit verlieren. Es stellt sich grundsätzlich die Frage, nach welcher Logik man ein größeres System herunterbrechen sollte.Es kann sinnvoll sein, für rechenintensive Dienste andere Technologien zu nutzen (sei es C, Rust oder Go) als für I/O-fokussierte Features (etwa Node.js).Eine geographische Verteilung bietet sich an, wenn Qualifikationen im Team unterschiedlich verteilt sind – oder man auf rechtliche, geschäftliche oder kulturelle Anforderungen Rücksicht nehmen muss. Im Domain-Driven-Design setzt man auf Kontext: Diese Art zu modellieren versucht, einem System Grenzen zu geben, die naturgemäß in der Praxis nicht einheitlich sind – eine ideale Vorlage für Microservices. Die optimale GrößeGrundsätzlich gilt: je kleiner, desto besser. Kleinere „Batch sizes“ sind ohnehin bereits die Grundlage von Methoden wie Agile Development, Lean Startup und Continuous Delivery. Je kleiner der Microservice, desto einfacher ist die schnelle Entwicklung (agil), desto schneller lässt der Service sich weitergeben (lean) und desto häufiger kann er live geschaltet werden (continuous delivery). Orientiert man sich am Domain-Driven-Design, darf ein Microservice nicht so klein werden, dass er einen gegebenen Kontext zerhackt. Ergänzt man diese Modellierung um andere Ansätze, wird man flexibler. 

 API DesignAPI Design ist genauso wichtig wie der Quellcode selbst. Microservice-Komponenten entfalten erst dann ihren Nutzen, wenn sie mit anderen Komponenten im System kommunizieren können. Das läuft bei allen Komponenten über Programmierschnittstellen, also APIs. Diese APIs sind lose gekoppelt, um die unabhängige Nutzung der Komponenten zu sichern. Die Erstellung von APIs kann sich an zwei Methoden orientieren: a) Nachrichten-orientiertAPIs bieten einerseits einen allgemeinen Einstiegspunkt in eine Komponente (z. B. IP-Adresse und Portnummer), ermöglichen es aber andererseits, aufgabenspezifische Nachrichten zu übermitteln. Dies ermöglicht Änderungen am Inhalt der Nachrichten und die sichere, stetige Überarbeitung von Komponenten.Netflix zum Beispiel nutzt dafür Formate wie Avro, Protobuf und Thrift über TCP/IP für die interne Kommunikation und JSON über http für die Kommunikation zu den Anwendern (also zu Mobiltelefonen, Browsern etc.). Dieser Ansatz – ein System, in dem etliche Services Botschaften über APIs austauschen – ist extrem effizient.                								 								 				 									Kleine Services für schnelle Ergebnisse								 			  Microservices – Neue Geheimwaffe oder SOA-Remake?    b) Hypermedia-gestütztAber es geht noch besser: Bei Implementierungen, die Hypermedia nutzen, enthalten die zwischen den Komponenten übertragenen Nachrichten Daten sowie Beschreibungen möglicher Aktionen (z.B. Metadaten, Links und Formulare). Hier sind nicht nur die Daten, sondern auch die Kontrollen lose gekoppelt. Dieser Ansatz ist effizienter: Er hebt die Message-basierte Version auf eine neue Ebene, indem Botschaften zwischen den Komponenten mehr als nur Inhalte enthalten. Sie geben zum Beispiel Hinweise, was man mit der API tun könnte. 

Sind nicht nur die Daten lose gekoppelt, sondern auch die Aktionen, so werden die APIs leichter auffindbar, verwendbar und passen besser zum Konzept der Microservice-Architektur. Das API Gateway von Amazon und die APIs von AppStream unterstützen Antworten im Format der Hypertext Application Language (HAL). Diese APIs arbeiten ähnlich wie HTML für Browser: http-Botschaften werden im HTML-Format an eine IP-Adresse und eine Port-Nummer (meist 80 oder 443) geschickt.  Enge Kopplung vermeidenLose Kopplung ist ein essenzielles Merkmal von Microservices. Doch macht man Geschäftsfunktionen zu Design-Elementen für APIs, so kommt man schnell in einen Kopplungskonflikt.Risiko eins: Geteilte Daten. Oft ist es nicht möglich, Daten nur in einem Microservice zu nutzen – Daten werden für viele Funktionen gleichzeitig benötigt. Nun gibt es einige Methoden, die eine enge Kopplung vermeiden helfen. So könnte man beispielsweise nicht die Daten, die einen Zustand beschreiben, speichern, sondern Events, die dazu geführt haben (wie Geldbewegungen auf einem Konto, die zu einem Kontostand führen).Ergänzend trennt man die einzelnen Abfragen – beispielsweise Datenauswertungen für Reports – von den Updates (ein Ansatz namens Command Query Responsibility Segregation CQRS). Ein Service kann dann Benachrichtigungen über Veränderungen (also Events) quasi abonnieren. Mit CQRS kann man Datenmodelle komplett trennen – ein Microservice muss das Modell eines anderen nicht einmal kennen. Allerdings erhöht dieses Vorgehen die Komplexität der Implementierung und sollte nur angewandt werden, wenn wirklich nötig. 

   
Jetzt Newsletter abonnieren
Täglich die wichtigsten Infos zu Softwareentwicklung und DevOps


 
						Geschäftliche E-Mail					

Bitte geben Sie eine gültige E-Mailadresse ein.				



	                Newsletter abonnieren				
Mit Klick auf „Newsletter abonnieren“ erkläre ich mich mit der Verarbeitung und Nutzung meiner Daten gemäß Einwilligungserklärung (bitte aufklappen für Details) einverstanden und akzeptiere die Nutzungsbedingungen. Weitere Informationen finde ich in unserer Datenschutzerklärung.



Aufklappen für Details zu Ihrer Einwilligung





Stand vom 30.10.2020


    Es ist für uns eine Selbstverständlichkeit, dass wir verantwortungsvoll mit Ihren personenbezogenen Daten umgehen. Sofern wir personenbezogene Daten von Ihnen erheben, verarbeiten wir diese unter Beachtung der geltenden Datenschutzvorschriften. Detaillierte Informationen finden Sie in unserer Datenschutzerklärung.


    Einwilligung in die Verwendung von Daten zu Werbezwecken


    Ich bin damit einverstanden, dass die Vogel IT-Medien GmbH, Max-Josef-Metzger-Straße 21, 86157 Augsburg, einschließlich aller mit ihr im Sinne der §§ 15 ff. AktG verbundenen Unternehmen (im weiteren: Vogel Communications Group) meine E-Mail-Adresse für die Zusendung von redaktionellen Newslettern nutzt. Auflistungen der jeweils zugehörigen Unternehmen können hier abgerufen werden.


    Der Newsletterinhalt erstreckt sich dabei auf Produkte und Dienstleistungen aller zuvor genannten Unternehmen, darunter beispielsweise Fachzeitschriften und Fachbücher, Veranstaltungen und Messen sowie veranstaltungsbezogene Produkte und Dienstleistungen, Print- und Digital-Mediaangebote und Services wie weitere (redaktionelle) Newsletter, Gewinnspiele, Lead-Kampagnen, Marktforschung im Online- und Offline-Bereich, fachspezifische Webportale und E-Learning-Angebote. Wenn auch meine persönliche Telefonnummer erhoben wurde, darf diese für die Unterbreitung von Angeboten der vorgenannten Produkte und Dienstleistungen der vorgenannten Unternehmen und Marktforschung genutzt werden.


    Falls ich im Internet auf Portalen der Vogel Communications Group einschließlich deren mit ihr im Sinne der §§ 15 ff. AktG verbundenen Unternehmen geschützte Inhalte abrufe, muss ich mich mit weiteren Daten für den Zugang zu diesen Inhalten registrieren. Im Gegenzug für diesen gebührenlosen Zugang zu redaktionellen Inhalten dürfen meine Daten im Sinne dieser Einwilligung für die hier genannten Zwecke verwendet werden.


Recht auf Widerruf


    Mir ist bewusst, dass ich diese Einwilligung jederzeit für die Zukunft widerrufen kann. Durch meinen Widerruf wird die Rechtmäßigkeit der aufgrund meiner Einwilligung bis zum Widerruf erfolgten Verarbeitung nicht berührt. Um meinen Widerruf zu erklären, kann ich als eine Möglichkeit das unter https://support.vogel.de abrufbare Kontaktformular nutzen. Sofern ich einzelne von mir abonnierte Newsletter nicht mehr erhalten möchte, kann ich darüber hinaus auch den am Ende eines Newsletters eingebundenen Abmeldelink anklicken. Weitere Informationen zu meinem Widerrufsrecht und dessen Ausübung sowie zu den Folgen meines Widerrufs finde ich in der Datenschutzerklärung, Abschnitt Redaktionelle Newsletter.


 



               								 								 				 									Was sich bei der Microservice-Einführung bewährt hat								 			  Microservices – Ein Einstieg in die Praxis    Darüber hinaus stellt sich die Frage, wie man dieses „Abonnement“ als http API oder Microservice standardisieren kann. Dazu muss man den Workflow auf einen bestehenden Standard wie PubSubHubbub (ein Standard, der eigentlich für RSS und Atom Feeds im Blogging-Kontext entwickelt wurde, aber gut in einem Hypermedia API-Enabled Workflow performt) aufsetzen und weitere Standards definieren.Risiko zwei: Workflows. Viele Prozesse bestehen aus mehreren Schritten, von denen jeder essenziell ist. Hierfür gibt es sogenannte „Sagas“, die transaktionsähnliche, reversible Workflows in verteilten, lose gekoppelten Umgebungen ermöglichen. Jeder Arbeitsschritt wird autonom ausgeführt und fügt der weiterzuleitenden Botschaft einen „Routing Slip“ hinzu – eine Information, wie die Transaktion rückgängig gemacht werden kann. Geht in einem Schritt etwas schief, hilft der Routing Slip, um die kompensierende Aktion auszulösen. Damit erreichen Sagas eine hohe Fehlertoleranz und passen gut in eine Microservice-Architektur. Und was ist mit Abhängigkeiten?Traditionell wurden IT-Architekturen mit zentralisiertem Speicher entwickelt. Dies macht die Organisation einfacher, denn so können sich Teams spezialisieren (also etwa aufteilen in Datenbank- oder Systemadministratoren), die diese komplexen Systeme warten. Bei einer klaren Trennung von operativem Betrieb und Development haben die Entwickler mit dieser Komplexität nichts zu tun.Die neuen Ansätze wie DevOps wollen genau dies nicht mehr. Microservices hingegen embedden alle ihre Abhängigkeiten, um unabhängig einsetzbar zu bleiben. Danach aber müsste jeder Microservice seine eigene Datenbank, seinen Key-Value-Store, seinen Suchindex, die Queue etc. embedden – und das ist unhaltbar.  

In der Praxis muss nicht jeder Microservice jede einzelne Abhängigkeit enthalten, nur um mobil und unabhängig zu sein. Warum? Es genügt sicherzustellen, dass der Anwendungsort diese „heavy assets“ wie Datenbankcluster bereitstellt – allerdings so, dass sie schnell anwendbar und erkennbar sind.Microservices hingegen müssen so geschrieben sein, dass sie diese Assets beim Einsatz schnell erkennen und nutzen. Verschiebt man beispielsweise einen Microservice in ein anderes Rechenzentrum, sollte man dort auch einen funktionierenden Cassandra Cluster o.ä. erwarten und muss nur eine Möglichkeit finden, ihn auf die notwendigen Daten zugreifen zu lassen. Die Entscheidung „einbetten oder voraussetzen“ sollte sich daran orientieren, welche Option die Mobilität des Microservices erhöht. Keine Regeln, aber Best PracticesGeorg Lauer                                  (Bild: CA Technologies)                              Zwar kommt man nur in den Genuss der Vorteile von Microservices, wenn diese auch gut designt sind. Allgemeingültige Regeln, wie Standards oder APIs aussehen könnten, gibt es allerdings nicht. Immerhin aber gibt es bereits einige Beispiele, wie das Design gut funktionieren kann und Wege, die Fallen dabei zu vermeiden. Sicherlich werden sich weiterhin Erfolgsrezepte herauskristallisieren.Vieles aber ist – unabhängig von gutem Design – auch abhängig von der dahinterliegenden Architektur. Darüber reden wir in unserem nächsten Artikel.* Georg Lauer ist als Senior Principal Business Technology Architect bei CA Technologies tätig. (ID:45096334)







Please enable JavaScript to view comments 
 
 
 
 
 
 
 
 

 














Weiterführende Inhalte















Unternehmen arbeiten in Echtzeit – aber nicht ihre Anwendungen


Die Macht der ereignisgesteuerten Microservices


















Das Versprechen von Skalierbarkeit, Performance und Sicherheit


Wo Microservices ihre Stärken ausspielen können





 










Karrierechancen





 

 

Folgen Sie uns auf:








			 Cookie-Manager		

			AGB		

			Hilfe		

			Kundencenter		

			Mediadaten		

			Datenschutz		

			Impressum & Kontakt		



  
Copyright © 2022 Vogel Communications Group
Diese Webseite ist eine Marke von Vogel Communications Group. Eine Übersicht von allen Produkten und Leistungen finden Sie unter				 www.vogel.de				



bavarian_web_solutions - Pixabay.com; Dawn Armfield - Unsplash.com; Nmedia - stock.adobe.com; greenbutterfly - stock.adobe.com; CA Technologies; Aenigmatis-3D - Pixabay.com; Vogel IT-Medien; Vogel IT-Medien GmbH; geralt; wal_172619; startupstockphotos; TrustInSoft; © – kras99 – stock.adobe.com; J. Kürpig; Canonical; AndSus – stock.adobe.com; leowolfert - stock.adobe.com; TayebMEZAHDIA; gemeinfrei: Stux; everythingpossible - stock.adobe.com; Duncan Andison - adobe.stock.com; Joos / JetBrains; Siarhei - stock.adobe.com
























