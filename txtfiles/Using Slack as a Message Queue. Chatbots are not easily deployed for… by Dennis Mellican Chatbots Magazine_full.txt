Using Slack as a Message Queue. Chatbots are not easily deployed for… | by Dennis Mellican | Chatbots MagazineOpen in appHomeNotificationsListsStoriesWritePublished inChatbots MagazineDennis MellicanFollowMar 30, 2019·5 min readSaveUsing Slack as a Message QueueAll aboard the Chat Bus! Image: Dennis MellicanChatbots are not easily deployed for high availability. Typically, applications can be scaled by using a Message Queue, which is a way for applications to send messages between one another reliably. By leveraging Slack as a Message Queue discover how you can design or even retrofit your slack bot to become highly available and scalable out of the box.For cloud-based bots, serverless infrastructure can be used to attain high availability. However, bots that require greater local control and visibility commonly lack a distributed program design. These types of bots could use an active-passive configuration to achieve high availability, where one bot is live (i.e. active) and another bot is on standby (i.e. passive) ready to take over. For an active-active configuration (i.e. many live bots), distributed applications commonly use a message-oriented middleware to communicate and process operations asynchronously. The primary disadvantage of both types is that they require an extra component in the architecture. In this article, I’ll share how I leveraged Slack as a Message Queue to enable an active-active High Availability configuration without adding extra infrastructure, and share a few use cases that take advantage of a SlackMQ.The fewer moving parts, the better.Exactly. No truer words were ever spoken in the context of engineering.” ― Christian CantrellPreferring minimalist architecture, with some creativity Slack can do the heavy lifting of a simple Message Queue. When a message is received, it is “locked” while being processed. This keeps other worker bots from processing the message simultaneously.I use a Slack bot to automate the home. A “toggle dining light” message to a Slack channel would be read by a bot and actioned. For redundancy, I have the bot installed on each of my three Raspberry Pis. As seen below, each instance of the Slack Bot is revealed.Desired HA Slack Bot behaviourWithout a message broker, all three bot devices would trigger a strobe-like effect in the dining room. Inserting a random time condition to acknowledge a message does not entirely avoid race conditions and is an unsatisfactory workaround.The Slack API allows pins to be added once per message per channel. Also, reactions and stars can be added to a message once per bot. For example, a person or bot cannot pin a message that has already been pinned. A user or bot cannot give a post a thumbs up twice. In the UI, if you try, the action is revoked. In the API, an exception is thrown.SlackMQ basic acknowledgement and processing mechanism.Slack can be made to behave like a basic Message Queuing system by using pins to acknowledge (lock) and un-acknowledge a message, as shown above. Using pins is ideal as this allows “unlimited” bot workers. The Slack RTM API also allows a bot to connect multiple times. With this account concurrency, this method limits the bot to 16 concurrent workers. You may find using a combination of pins, stars and reactions more reliable for low latency messages.The SlackMQ Python library allows a Slack channel to become a basic Message Queue. The library is short and sweet. The implementation is just as simple.slackmq.pySlackMQ is available on GitHub https://github.com/meltaxa/slackmq, installable via pip:To use SlackMQ, wrap the post acknowledgement around a bot action. See figure 3 as an example of how a slackbot uses SlackMQ to pull from the “queue”, i.e, the channel.slackmq-example-client.pyAs a result of creative engineering, there is one less part to work with: no need for a RabbitMQ, ActiveMQ or an MQTT service.All aboard the Chat Bus! Next Stop Is …SlackMQ is suited to high latency message queuing applications due to rate limits and tier restrictions. Try to keep actionable posts to 1 per second and under the Slack free tier plan, maximum messages may be encountered earlier than expected, after which history is truncated.Troupe, which is a group of Slack bots working together to control and operate a smart home implements SlackMQ. My Troupe bots are running on multiple Raspberry Pis and this cheap hardware is susceptible to SD card corruption. High availability is important to keep the smart home running smoothly.Troupe is available on GitHub which provides a good insight into SlackMQ usage: https://github.com/meltaxa/troupe.Read The Travelling Slack Bot Troupe on how the highly available Slack Bot is used to control a smart home.Another implementation of the Slack Chat Bus is to perform DevOps manoeuvres, such as Remote Management, Continuous Delivery, Canary Deployments and Rolling Updates.DevOps Manoeuvres powered by SlackMQAs seen in the animation, a federation of Slack bots can self-update with zero downtime using the SlackMQ library.All aboard the Chat Bus if you want a minimalist architecture. Leverage the power of SlackMQ and you’ll also get the benefits of a highly available Slack Bot out of the box.The next stop is removing another architectural component, the key-value database that preserves state between SlackMQ worker bots.------More from Chatbots MagazineFollowChatbots, AI, NLP, Facebook Messenger, Slack, Telegram, and more.Read more from Chatbots MagazineRecommended from MediumWeb-Systems SolutionsWhat is web development today and how have its standards changed?Nahuel BulianA simple guide to setup Symfony PHP framework in a local environment using Docker.Tzahi KolberControlling TabPages order in PowerShell GUIDigitalNomad2nd LIFE => From Teaching to becoming a ‘NEAR’ Certified Software Developer via Patika.devSecureCompanyDocsWhat Is The Best Way To Explain An NFT?Jacob TadesseinThe StartupWeb Scraping Stock Images Using Google Selenium and PythonValterfi de Oliveira CostaA configuration management strategy for teams using kanban and continuous flowWonderHero[ANNOUNCEMENT] — WonderHero Announces Special WonderBox UpgradeAboutHelpTermsPrivacyGet the Medium appGet startedDennis Mellican11 Followers★★★★★FollowMore from MediumMohammed MachraouiGetting Started With Serverless FrameworkVipin Kumar GuptaServerless ExamplesKelvinPre Signup Validation on AWS CognitoAdhish PantaDo more with Cloud Functions Second GenerationHelpStatusWritersBlogCareersPrivacyTermsAboutKnowable





































