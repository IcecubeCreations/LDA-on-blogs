<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="description" content="A web log on Software Engineering subjects: Java, Spring, Big Data, Cassandra, etc.">
<meta name="author" content="Niels Dommerholt">
<meta name="keywords" content="java, spring, rest, services, webservices, javascript, angular, programming, code">
<meta name="generator" content="JBake">
<title>Micro services - Versioning strategies</title>

<link href="/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
<link href="/css/clean-blog.min.css" rel="stylesheet">
<link href="/vendor/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
<link href='https://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800' rel='stylesheet' type='text/css'>
<link href="/css/asciidoctor.css" rel="stylesheet">
<link href="/css/prettify.css" rel="stylesheet">
<link href="/css/custom.css" rel="stylesheet">
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
<link rel="canonical" href="https://niels.nu/blog/2016/microservice-versioning.html" />
<!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
</head>
<body onload="prettyPrint()">
<nav class="navbar navbar-default navbar-custom navbar-fixed-top">
<div class="container-fluid">
<div class="navbar-header page-scroll">
<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
<span class="sr-only">Toggle navigation</span>
Menu <i class="fa fa-bars"></i>
</button>
<a class="navbar-brand" href="/index.html">Niels.nu</a>
</div>
<div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
<ul class="nav navbar-nav navbar-right">
<li>
<a href="/index.html">Home</a>
</li>
<li>
<a href="/archive.html">Archive</a>
</li>
<li>
<a href="/about.html">About</a>
</li>
</ul>
</div>
</div>
</nav>
<header class="intro-header" style="background-image: url('/img/post-bg.jpg')">
<div class="container">
<div class="row">
<div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
<div class="post-heading">
<h1>Micro services - Versioning strategies</h1>
<h2 class="subheading">Identifying the problems with versioning and exploring possible solutions.</h2>
<span class="meta">Posted on 21 May 2016</span>
</div>
</div>
</div>
</div>
</header>
<article>
<div class="container">
<div class="row">
<div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>μServices are hip! They have been for a while now. But while a very strong
modular loosely coupled approach tends to make projects easier to maintain it
also brings it&#8217;s own set of problems. In this blog post I want to dive into one of
these problems; <strong>versioning</strong>.</p>
</div>
<div class="paragraph">
<p>This blog post comes with <a href="https://github.com/nielsutrecht/microservice-versioning">example code</a>.</p>
</div>
<div class="paragraph">
<p>Update: I have also created a more in-depth implementation of this adapter pattern
in Spring Boot. Read all about it <a href="/blog/2016/microservice-versioning.html">here</a>!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="introduction">Introduction</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A few years ago I worked on a project that used a μService (ish) approach.
While the code was well written and a complete joy to work on versioning the
services was not taken into account. For serialization between services a home
grown RPC layer based on Netty and Kryo was used. It was fast and easy to use but it
had one huge problem: the services could not communicate between each other
unless the serialized classes had the exact same structure and they used the
same (or at least compatible) Kryo versions.</p>
</div>
<div class="paragraph">
<p>Since there was also no version negotiation between the services there was only
one solution: deploy the entire ecosystem as one big monolith. And this is
something a lot with mic: a modular monolith instead of a
true μService architecture where you don&#8217;t have the benefits of a μService
architecture (agility: you should be able to swap one of the services
out) while you still have the downsides of a μService architecture (mainly
you lose the ability to do transactional updates).</p>
</div>
<div class="paragraph">
<p>This is why, if you decide on going for a μService architecture, you need to
figure out and decide on a strategy to use and stick to it.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="data_format">Data format</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Let&#8217;s start with a data format. In the example in the introduction we used a
binary format that while it was small and fast had one big issue in that it was
hard or almost impossible to make backward-compatible. This was a mistake. While
there are binary formats that allow for backwards-compatibility (Protobuf, Smile)
in our examples we&#8217;ll just use JSON. If a new protocol version just adds fields
it should be handled just fine by older clients.</p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
Make sure you test this! I am currently working at a large
bank where we had a misbehaving client that didn&#8217;t ignore unknown JSON fields
and crashed!
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="protocol_versions">Protocol versions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I mentioned the protocol version and this is the second important component that
you need to decide on: your protocol version numbering. You can in fact just use
a single integer number you bump whenever a new version breaks compatibility.
Since your protocol is backward compatible always within a version there is no
acute need for a &lt;major&gt;.&lt;minor&gt; versioning scheme.</p>
</div>
<div class="paragraph">
<p>Also make sure that the client always tells the service which protocol version
it expects. When the client doesn&#8217;t we should in fact thrown an error instead of
making the implicit assumption the client wants a certain version: this
tells a developer that he must always include the version. You also need this
information to know how many clients are still not up to date to assess the impact
of deprecating old versions.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="strategies">Strategies</h2>
<div class="sectionbody">
<div class="paragraph">
<p>So now that we decided on a data format and a protocol versioning strategy we
can now apply this and decide on a strategy. We&#8217;ll use a very simple "Order"
API for a web shop as an example. We just have a single GET call that returns an
order with it&#8217;s items based on it&#8217;s ID.</p>
</div>
<div class="paragraph">
<p>We have two versions, 1 and 2, that are not compatible. Version 1 response:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="json">{
  "id": 1,
  "customerFirstName": "John",
  "customerLsatName": "Williams",
  "orderTotal": 1886,
  "timestamp": 1464078528986,
  "items": [
    { "name": "Milk",  "qtty": 4, "price": 2.99 },
    { "name": "Bread", "qtty": 2, "price": 3.45 }
  ]
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see we made a few mistakes in this response. The customerLastName field
is misspelled and the orderTotal being in cents is inconsistent with the order item
prices being decimal numbers. So we fixed this in format version 2:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="json">{
  "id": 1,
  "customerFirstName": "John",
  "customerLastName": "Williams",
  "orderTotal": 18.86,
  "timestamp": 1464078528986,
  "items": [
    { "name": "Milk",  "qtty": 4, "price": 2.99 },
    { "name": "Bread", "qtty": 2, "price": 3.45 }
  ]
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Much better! Also; completely incompatible!</p>
</div>
<div class="sect2">
<h3 id="routing_based_versioning">Routing based versioning</h3>
<div class="paragraph">
<p>A relatively simply strategy that works well for API&#8217;s that are externally
exposed is to simply have the version in the route URL. So the first version of
our client will GET /v1/order/1 and newer versions based on our new API would
request GET /v2/order/1. We would then have the old version of the API running on
port 8001 and the new version on port 8002.</p>
</div>
<div class="paragraph">
<p>A reverse proxy (like Nginx) would then simply route the request (removing the
/vN bit) to the corresponding service.</p>
</div>
<div class="paragraph">
<p>This is a strategy that is relatively simply to implement (even in hindsight) but
it does some with a few drawbacks. The first one is obviously that you need to be
able to keep older versions of services running in parallel. A new version of
our Order server might for example alter the database in such a way that older
versions can&#8217;t access the data anymore.</p>
</div>
<div class="paragraph">
<p>Another issue is that while this works well for externally exposed services we&#8217;re
talking about μServices here. You&#8217;d have many services communicating between
each other that would all have to go through a reverse proxy.</p>
</div>
</div>
<div class="sect2">
<h3 id="view_based_versioning">View based versioning</h3>
<div class="paragraph">
<p>Another approach is to move the logic of handling backwards compatibility to the
code. In my opinion this makes sense: the developer who made the modification
tends to know how to be backwards compatible best.</p>
</div>
<div class="paragraph">
<p>Our example code is based on Spring Boot (although conceptually any language and
framework can be used) which internally uses Jackson for JSON serialization.
Jackson has the concept of 'views'. A common scenario of these
kinds of views is that you want to expose only a part of a Person&#8217;s details for
unauthorized users and more information for authorized / friends-of users.
Similar to how for example your e-mail on your Facebook profile can be made available
only to your close friends.</p>
</div>
<div class="paragraph">
<p>More info on Jackson Views <a href="https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring">here</a>.</p>
</div>
<div class="paragraph">
<p>In the <a href="https://github.com/nielsutrecht/microservice-versioning">example project</a>
I have created a <a href="https://github.com/nielsutrecht/microservice-versioning/blob/master/src/main/java/com/nibado/example/microserviceversioning/Controller.java">controller</a>
that shows the two approaches. Let&#8217;s take a look at the constructor first:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="java">public Controller() {
orderDb.add(new Order(1, "John", "Williams", currentTimeMillis(),
    new Order.Item("Milk", 4, "2.99"),
    new Order.Item("Bread", 2, "3.45")));

    viewMap.put(1, View.Version1.class);
    adapterMap.put(1, o -&gt; new MappingJacksonValue(new OrderV1(o)));
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see we fill our 'database' with a single Order and also configure the
view and adapter maps. A 'view', as explained in the
<a href="https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring">linked article</a>
is just any class. It uses classes instead of plain strings so that it can use
basic object inheritance.</p>
</div>
<div class="paragraph">
<p>The adapter is a simple Function that maps an order to a MappingJacksonValue
object.</p>
</div>
<div class="paragraph">
<p>I will also explain the getProtocolVersion utility method:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="java">private int getProtocolVersion() {
    String header = request.getHeader("X-Protocol-Version");
    if(header == null) {
        throw new NoProtocolVersionException();
    }
    else {
        return parseInt(header);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>This method, used by both versioning methods, is how we get the protocol version
from the client supplied header. If it&#8217;s not supplied it will respond with a 400
status code.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Normally you would have a generic (Filter-based) solution that handles this
but for simplicity&#8217;s sake this logic is in the Controller class.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The controller source is relatively simple:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="java">@RequestMapping(value = "/method1/{id}", method = RequestMethod.GET)
public MappingJacksonValue getMethod1(@PathVariable int id) {
    MappingJacksonValue result = new MappingJacksonValue(find(id));
    result.setSerializationView(getOrderView());

    return result;
}

private Class&lt;?&gt; getOrderView() {
    return viewMap.getOrDefault(getProtocolVersion(), View.Version2.class);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>What you probably notice is that we don&#8217;t return an "Order" object from the
controller like you&#8217;d normally do but use a Jackson MappingJacksonValue wrapper
instead. This gives us the flexibility to supply a different view based on the
version.</p>
</div>
<div class="paragraph">
<p>The getOrderView method simply looks up a view class based on the version or
returns the default Version2 view.</p>
</div>
<div class="paragraph">
<p>Now we set the view, let&#8217;s see how the backwards compatibility is handled. This
is handled in the OrderSerializer class which is a standard Jackson serializer:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="java">public class OrderSerializer extends JsonSerializer&lt;Order&gt; {
    private static final BigDecimal HUNDRED = new BigDecimal(100);
    @Override
    public void serialize(Order order,
        JsonGenerator jsonGenerator,
        SerializerProvider serializerProvider) throws IOException {

        jsonGenerator.writeStartObject();

        jsonGenerator.writeNumberField("id",
            order.getId());
        jsonGenerator.writeStringField("customerFirstName",
            order.getCustomerFirstName());

        if(serializerProvider.getActiveView() == View.Version1.class) {
            jsonGenerator.writeStringField("customerLsatName",
                order.getCustomerLastName());
            jsonGenerator.writeNumberField("orderTotal",
                order.getOrderTotal()
                    .multiply(HUNDRED)
                    .longValue());
        }
        else {
            jsonGenerator.writeStringField("customerLastName",
                order.getCustomerLastName());
            jsonGenerator.writeNumberField("orderTotal",
                order.getOrderTotal());
        }

        jsonGenerator.writeNumberField("timestamp",
            order.getTimestamp());


        serializerProvider.defaultSerializeField("items",
            order.getItems(), jsonGenerator);

        jsonGenerator.writeEndObject();
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The reason I&#8217;ve used a serializer instead of just using the standard View
functionality is because it can&#8217;t handle serializing a property under a different
name very well.</p>
</div>
<div class="paragraph">
<p>As you can see the view is supplied to the serializer through the
serializerProvider.getActiveView() method and you can perform your compatibility
logic based on this. The downside is that you have to do a lot of manual work.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="adapter_based_versioning">Adapter based versioning</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A method that is in my opinion a bit more elegant is the application of the
Adapter design pattern. We take advantage of the loosely coupled nature of
μServices and, based on the protocol version, just return a completely
different object. In this approach we will also use the X-Protocol-Version header
supplied by the client.</p>
</div>
<div class="paragraph">
<p>So let&#8217;s take a look at the second route:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="java">@RequestMapping(value = "/method2/{id}", method = RequestMethod.GET)
public MappingJacksonValue getMethod2(@PathVariable int id) {
    return adapt(find(id));
}

private MappingJacksonValue adapt(Order order) {
    return adapterMap
            .getOrDefault(getProtocolVersion(), MappingJacksonValue::new)
            .apply(order);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The controller passes the found Order to an adapt method that looks up the
mapping function (yay for Java 8!) and applies it to an order. As you have seen
in the constructor for version 1 it wraps the Order in an OrderV1 object that
then gets serialized by Jackson into the output. It looks like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="java">public class OrderV1 {
    private static final BigDecimal HUNDRED = new BigDecimal(100);

    private Order order;

    public OrderV1(Order order) {
        this.order = order;
    }

    public String getCustomerFirstName() {
        return order.getCustomerFirstName();
    }

    @JsonProperty("customerLsatName")
    public String getCustomerLastName() {
        return order.getCustomerLastName();
    }

    public long getOrderTotal() {
        return order.getOrderTotal().multiply(HUNDRED).longValue();
    }

    public long getTimeStamp() {
        return order.getTimestamp();
    }

    public List&lt;Order.Item&gt; getItems() {
        return order.getItems();
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>This is a typical adapter: it doesn&#8217;t contain any data itself; it just 'adapts'
the new version to an old interface. This way all the important logic is still
in the Order class and only 'adapter logic' is contained in the adapter.</p>
</div>
<div class="paragraph">
<p>What I like about this solution is that it is clear and easy to read, doesn&#8217;t
require a lot of code (keep in mind you only need adapters for classes that 'break'
between versions) and is also easy to adapt (heh) to different serialization
methods. This mechanism can easily be applied to for example Protobuf
serialization and / or services communicating with for example Kafka queues.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I&#8217;ve shown a few approaches in this blog post and each of these has their pro&#8217;s
and con&#8217;s. The important lesson however is that versioning should be part of your
architecture and not just some kind of afterthought. Just for external API&#8217;s it&#8217;s
already important but with the fine mesh of interconnected services you see in
a μService architecture. It&#8217;s a must to decide on a strategy.</p>
</div>
<div class="paragraph">
<p>And no matter which strategy you choose you have to make sure that you always
clearly communicate (in the URL, the name of your Kafka topic or a header) what
the expected protocol version is. Without it it is impossible to route, impossible
to write adapters and impossible to even know which versions are 'out there' in
the wild.</p>
</div>
<div class="paragraph">
<p>I hope you enjoyed this post as much as I enjoyed writing it. Feel free to play
around with the <a href="https://github.com/nielsutrecht/microservice-versioning">example</a>
and please let me know if you have comments or questions!</p>
</div>
</div>
</div>
</div>
</div>
</div>
</article>
<hr>
<footer>
<div class="container">
<div class="row">
<div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
<ul class="list-inline text-center">
<li>
<a href="https://twitter.com/nielsutrecht" target="_blank">
<span class="fa-stack fa-lg">
<i class="fa fa-circle fa-stack-2x"></i>
<i class="fa fa-twitter fa-stack-1x fa-inverse"></i>
</span>
</a>
</li>
<li>
<a href="https://nl.linkedin.com/in/nielsdommerholt" target="_blank">
<span class="fa-stack fa-lg">
<i class="fa fa-circle fa-stack-2x"></i>
<i class="fa fa-linkedin fa-stack-1x fa-inverse"></i>
</span>
</a>
</li>
<li>
<a href="https://github.com/nielsutrecht/" target="_blank">
<span class="fa-stack fa-lg">
<i class="fa fa-circle fa-stack-2x"></i>
<i class="fa fa-github fa-stack-1x fa-inverse"></i>
</span>
</a>
</li>
<li>
<a href="/feed.xml" target="_blank">
<span class="fa-stack fa-lg">
<i class="fa fa-circle fa-stack-2x"></i>
<i class="fa fa-rss fa-stack-1x fa-inverse"></i>
</span>
</a>
</li>
</ul>
<p class="copyright text-muted">Copyright &copy; Niels Dommerholt - Baked With <a href="http://jbake.org/" target="_blank">JBake</a> - Template <a href="https://startbootstrap.com/template-overviews/clean-blog/" target="_blank">Clean Blog</a></p>
</div>
</div>
</div>
</footer>

<script src="/vendor/jquery/jquery.min.js"></script>

<script src="/vendor/bootstrap/js/bootstrap.min.js"></script>

<script src="/js/jqBootstrapValidation.js"></script>

<script src="/js/clean-blog.min.js"></script>
<script src="/js/prettify.js"></script>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-44674861-2"></script>
<script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());

        gtag('config', 'UA-44674861-2');
    </script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/latest.js?config=AM_CHTML"></script>
</body>
</html>
