



















How to Parse JSON in Java Object using Jackson -  Example Tutorial | Java67
































































































Java67




Learn Java and Programming through articles, code examples, and tutorials for developers of all levels.
































Pages



Home


core java


spring


online courses


thread


java 8


coding


sql


books


oop


interview


certification


free resources


best








































































Disclosure: This article may contain affiliate links. When you purchase, we may earn a commission.













How to Parse JSON in Java Object using Jackson -  Example Tutorial








Hello guys, if you are wondering how to parse JSON in Java then don't worry, there are many options. In the last article, I have shown you 3 ways to parse JSON in Java in this example, You will learn how to parse a  JSON String to Java and how to convert Java Object to JSON format using Jackson. JSON stands for JavaScript Object notation is a subset of JavaScript object syntax, which allows all JavaScript clients to process it without using any external library. Because of its compact size, compared to XML and platform independence nature makes JSON a favorite format for transferring data via HTTP. Though Java doesn't have any inbuilt support to parse JSON responses in the core library, Java developers are lucky to have a couple of good and feature-rich JSON processing libraries such as GSON, Jackson, and JSON-simple. Jackson is a high-performance, one of the fasted JSON parsing libraries, which also provides streaming capability. It has no external dependency and solely depends on JDK. It is also powerful and provides full binding support for common JDK classes as well as any Java Bean class, like Player in our case. It also provides data binding for Java Collection classes like Map as well Enum.











Jackson Library
The complete Jackson library consists of 6 jar files that are used for many diffident operations. In this example, we are going to need just one, mapper-asl.jar. If you want to install the full library to your project you can download and use jackson-all-*.jar which includes all the jars. You can download them from the Jackson Download Page.
Alternatively, If you are using Maven in your project (which you should) then you can add the following dependency in your pom.xml.

<dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-all</artifactId>
      <version>1.9.11</version>
</dependency>








You need Default Constructor in Your Bean Class
When I first run my program, I get the following exception because  I had a parametric constructor in the Player class and did not bother to add a  no-argument default constructor :

org.codehaus.jackson.map.JsonMappingException: No suitable constructor 
found for type [simple type, class Player]: can not instantiate 
from JSON object (need to add/enable type information?)
at [Source: player.json; line: 1, column: 2]
               at org.codehaus.jackson.map.JsonMappingException
.from(JsonMappingException.java:163)
               at org.codehaus.jackson.map.deser.BeanDeserializer
.deserializeFromObjectUsingNonDefault(BeanDeserializer.java:746)
               at org.codehaus.jackson.map.deser.BeanDeserializer
.deserializeFromObject(BeanDeserializer.java:683)
               at org.codehaus.jackson.map.deser.BeanDeserializer
.deserialize(BeanDeserializer.java:580)
               at org.codehaus.jackson.map
.ObjectMapper._readMapAndClose(ObjectMapper.java:2732)
               at org.codehaus.jackson.map.ObjectMapper
.readValue(ObjectMapper.java:1817)
               at JSONParser.toJava(Testing.java:30)
               at JSONParser.main(Testing.java:17)

Once I added the default constructor on the Player class this error is gone. Probably this is another reason why you should have a default or no-arg constructor in the Java class.











How to parse JSON in Java [Example]
Here is our sample program to parse JSON String in Java. As I said, in this example, we will use Jackson, an open-source JSON parsing library with rich features. There are two static methods here, toJSON() which converts a Java instance to JSON, and fromJSON() method which reads a JSON file, parses it, and creates Java objects.The key object here is ObjectMapper class from the Jackson library, which is used for converting JSON to Java and vice-versa.

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

/**
 * Java Program to parse JSON String to Java object and converting 
 * a Java object to equivalent
 * JSON String.
 *
 * @author Javin Paul
 */
public class JSONParser {

    public static void main(String args[]) {
        toJSON();  // converting Java object to JSON String
        toJava();  // parsing JSON file to create Java object
    }

    /**
     * Method to parse JSON String into Java Object using Jackson Parser.
     *
     */
    public static void toJava() {
       
        // this is the key object to convert JSON to Java
        ObjectMapper mapper = new ObjectMapper();

        try {
            File json = new File("player.json");
            Player cricketer = mapper.readValue(json, Player.class);
            System.out.println("Java object created from JSON String :");
            System.out.println(cricketer);

        } catch (JsonGenerationException ex) {
            ex.printStackTrace();
        } catch (JsonMappingException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();

        }
    }

    /**
     * Java method to convert Java Object into JSON String with 
     * help of Jackson API.
     *
     */
    public static void toJSON() {
        Player kevin = new Player("Kevin", "Cricket", 32, 221, 
                      new int[]{33, 66, 78, 21, 9, 200});

        // our bridge from Java to JSON and vice versa
        ObjectMapper mapper = new ObjectMapper();

        try {
            File json = new File("player.json");
            mapper.writeValue(json, kevin);
            System.out.println("Java object converted to JSON String,
                                  written to file");
            System.out.println(mapper.writeValueAsString(kevin));

        } catch (JsonGenerationException ex) {
            ex.printStackTrace();
        } catch (JsonMappingException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();

        }
    }

}

/*
 * A simple Java values class with getters and setters. 
 * We will convert Player class instance into
 * JSON String and a JSON object to Player instance.
 */
class Player {

    private String name;
    private String sport;
    private int age;
    private int id;
    private int[] lastScores;

    public Player() {
        //just there, need by Jackson library
    }

    public Player(String name, String sport, int age, int id, 
                   int[] lastinnings) {
        this.name = name;
        this.sport = sport;
        this.age = age;
        this.id = id;
        lastScores = lastinnings;
    }

    public final String getName() {
        return name;
    }

    public final String getSport() {
        return sport;
    }

    public final int getAge() {
        return age;
    }

    public final int getId() {
        return id;
    }

    public final int[] getLastScores() {
        return lastScores;
    }

    public final void setName(String name) {
        this.name = name;
    }

    public final void setSport(String sport) {
        this.sport = sport;
    }

    public final void setAge(int age) {
        this.age = age;
    }

    public final void setId(int id) {
        this.id = id;
    }

    public final void setLastScores(int[] lastScores) {
        this.lastScores = lastScores;
    }

    @Override
    public String toString() {
        return "Player [name=" + name + ", sport=" + sport + ", age="
               + age + ", id=" + id
                + ", recent scores=" + Arrays.toString(lastScores) + "]";
    }

}


Output:
Java object converted to JSON String, written to file
{"name":"Kevin","sport":"Cricket","age":32,"id":221,"lastScores":
[33,66,78,21,9,200]}
Java object created from JSON String :
Player [name=Kevin, sport=Cricket, age=32, id=221, 
recent scores=[33, 66, 78, 21, 9, 200]]


This will also create a file called player.json in your current or project directory.


That's all about how to parse JSON String in Java and convert a Java object to JSON using Jackson API. Though there is a couple of more good open-source library available for JSON parsing and conversions like GSON and JSON-Simple Jackson is one of the best and feature-rich, its also tried and tested library in many places, which means you should be a little worried about any nasty bug while parsing your big JSON String.

If you like this tutorial and want to know more about how to work with JSON and Java, check out the following fantastic articles :

How to read JSON String from File in Java (solution)
How to parse JSON Array to Java array? (solution)Top 5 Websites to learn Java For FREE (websites)How to parse JSON with date fields in Java? (example)
How to convert JSON to Java Object? (example)How to parse JSON using Gson? (tutorial)How to solve UnrecognizedPropertyException in Jackson? (solution)10 Advanced Core Java Courses for Experienced Developers (courses)How to convert JSON to HashMap in Java? (guide)10 Things Java developers should learn?  (article)5 JSON parsing libraries Java Developers Should Know (libraries)10 Online courses to learn JavaScript in depth (courses)How to parse a JSON array in Java? (tutorial)Top 5 Courses to become full-stack Java developer (courses)How to ignore unknown properties while parsing JSON in Java? (tutorial)5 Courses to learn RESTful  API and Web services in Java? (courses)10 free courses to learn Java in-depth (free java courses)


And, if you are in doubt, always use Jackson to parse JSON in the Java program. Make sure you use the latest version of the Jackson library as well as newer versions always have some bug fixes and performance improvements. P.S. - If you want to learn more about the advanced Java libraries and concepts then I also suggest you join these Free Java Programming courses, which cover several advanced Java features like JSON, RESTFul Web Services, JAXB, JDBC, etc. 











Posted by



javin paul















Email ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest



Labels:
core java,
JSON









5 comments:




AnonymousFebruary 16, 2015 at 4:41 PMThis tutorial uses Jackson 1 (packaged under org.codehaus.jackson), but for any new development it would be preferable to start with Jackson 2 (com.fasterxml.jackson). Core comes in 3 jars (jackson-core, jackson-databind, jackson-annotations).ReplyDeleteRepliesReplyRickHighFebruary 17, 2015 at 10:01 AMString json = Boon.toJson(player);Player player = Boon.fromJson(json, Player.class);And it is the fastest, and it would not have given you an error for not having a no arg constructor.ReplyDeleteRepliesAnonymousAugust 5, 2015 at 2:37 AMThis is indeed the simplest way to convert JSON to Java or vice-versa. DeleteRepliesReplyReplyAl KrinkerMay 2, 2015 at 4:45 PMWhat's your source on this: "Jackson in a high performance, one of the fasted JSON parsing library" in many benchmarks Gson outperformed JSON...ReplyDeleteRepliesReplyAwesomeNovember 25, 2015 at 9:01 PMVery nice article and want to share json tool for testing and analyzing JSON data such as http://jsonformatter.org and http://codebeautify.org/jsonviewerReplyDeleteRepliesReplyAdd commentLoad more...





Feel free to comment, ask questions if you have any doubt. 
















Newer Post


Older Post

Home




Subscribe to:
Post Comments (Atom)









Download Free Sample of our Book


Grokking the Java Interview PDF [FREE]
Grokking the Spring Boot Interview PDF [FREE]




REST and JSON Tutorials



REST - Advanced Books


REST - Testing


REST - PUT vs POST


REST - Books


SOAP - Books


REST - Interview Questions


REST - GET vs POST


JSON - Gson Example


JSON - Serialization


JSON - to Java Object


JSON - Jackson Parsing


Web Service - Interview Questions











OOP Tutorials



oop - polymorphism


oop - object


oop - inheritance


oop - free courses


oop - class vs interface


oop - inheritance questions


oop- interview questions


oop - class vs object


oop - overriding


oop - abstraction


oop - encpasulation


oop - abstract class vs interface


oop - method


oop - constructor chaining


oop - static method


oop - java


oop - abstract class


oop - overloading vs overriding


oop - overloading


oop - interface


oop - constructor


















Blog Archive








        ▼ 
      



2022

(276)





        ► 
      



May

(68)







        ► 
      



April

(107)







        ► 
      



March

(22)







        ▼ 
      



February

(33)

How to use Context and useReducer for state manage...
What is "render props" in React.js? Example Tutorial
Top 20 Node.js Interview Questions with Answers fo...
How to send Emails in Java using Spring Framework?...
Top 5 Courses to learn UML for Software Design and...
Top 6 Courses to Learn Neural Networks and Deep Le...
Top 5 Online Courses to Learn Hibernate and Spring...
Top 5 Courses to Learn MySQL Database in 2022 - Be...
My Favorite Blockchain Courses and Certifications ...
Top 5 Design Pattern Courses for Experienced Java ...
Top 20 Hibernate Interview Questions with Answers ...
[Solved] Caused by: java.sql.SQLSyntaxErrorExcepti...
How to Parse JSON in Java Object using Jackson -  ...
How to use useReducer in React.js and JavaScript? ...
Top 10 Android Interview Questions Answers for Jav...
[Solved] java.lang.ClassNotFoundException: org.Spr...
3 ways to Count words in Java String - Google Inte...
Difference between save(), saveOrUpdate() and pers...
How to Remove all adjacent duplicates characters f...
How to test REST API from Command Line using cURL ...
11 JDBC Interview questions answers in Java - 2 to...
7 Examples of HttpURLConnection in Java - Sending ...
Top 50 Core Java Basics Interview Questions with H...
How to remove Duplicate(s) from linked list in Jav...
15 Technical Core Java Interview Questions Answers...
How to find Factorial in Java using Recursion and ...
Top 30 OOP Concept Interview Questions Answers in ...
How to Perform Binary Tree InOrder traversal in Ja...
Top 12 Servlet JSP Interview Questions for Java JE...
How to Find Duplicate Characters in String [Java C...
Top 21 Frequently Asked Java Interview Questions w...
How to check  if a node exists in a binary tree or...
How to Implement Binary Tree InOrder traversal in ...








        ► 
      



January

(46)









        ► 
      



2021

(764)





        ► 
      



December

(81)







        ► 
      



November

(81)







        ► 
      



October

(44)







        ► 
      



September

(49)







        ► 
      



August

(82)







        ► 
      



July

(284)







        ► 
      



June

(118)







        ► 
      



May

(5)







        ► 
      



April

(4)







        ► 
      



March

(7)







        ► 
      



January

(9)









        ► 
      



2020

(2)





        ► 
      



October

(2)



























Spring Interview Prep List


Spring Boot Interview questions
Spring Cloud Interview questions
Spring MVC Interview Questions
Microservices Interview questions
10 Spring MVC annotations
Spring Boot Courses
Spring Framework Courses
Hibernate Interview Questions with Answers
System Design Interview Questions
Java Design Pattern Interview Questions with Answers
40 Core Java Interview Questions with Answers
10 Frequently asked SQL query Interview questions

















Subscribe for Discounts and Updates

    Follow 








Interview Questions



core java interview questions


SQL interview questions


data structure interview question


coding interview questions


java collection interview questions


java design pattern interview questions


thread interview questions


hibernate interview questions


j2ee interview questions


Spring Interview Questions


object oriented programming questions











Recommended Reading


5 Free React.js Courses for Beginners
5 Free Courses to learn Spring Boot and Spring MVC
10 Free Java Courses for Beginners and Experienced
10 Framework Java Developer Should Learn
10 Books Java Programmers Should Read
10 Open Source Libraries and Framework for Java Developers
10 Programming language to Learn
10 Books Every Programmer Should Read
5 Great Books to Learn Java 8
5 Free Database and SQL Query Courses for Beginners
10 Free Data Structure and Algorithms Courses












Books and Resources


Best Book to Learn Java for Beginners
5 Books to Learn Spring MVC and Core Spring
2 books to learn Hibernate for Java developers
12 Advanced Java Programming Books for Experienced Programmers
5 Free JavaScript Books to download
5 Books to Improve Your Coding Skill 
Books Every Programmer Should Read
Top 10 Computer Algorithm Books 
10 Free Java Programming Books
5 Books to Learn Java 8 Better
Books Every Programmer Should Read
Top 10 Computer Algorithm Books 









Followers











Privacy



Privacy Policy


Terms and Conditions



















Recommended Articles Just for You



3 ways to convert String to JSON object in Java? Examples


How to declare and Initialize two dimensional Array in Java with Example


Best Way to Iterate Over Each Entry of HashMap in Java


15 Technical Core Java Interview Questions Answers for Experienced Developers


How to Convert String to LocalDateTime in Java 8 - Example Tutorial


Top 21 String Programming and Coding Interview Questions With Solutions


Top 10 Free Python Programming Books - Download PDF or Read Online


How to pause a Thread in Java? Thread.sleep and TimeUnit.sleep Example


10 Books and Courses to Prepare Technical Programming/Coding Job Interviews


How to find length/size of ArrayList in Java? Example



































Subscribe for New Posts on Email

Get new posts by email:  Subscribe


















Copyright by Soma Sharma 2021. Powered by Blogger.



































