

















Microservices architecture principle #4: Asynchronous communication over synchronous communication - Xebia










































































Xebia



Digital Transformation

Digital Strategy
DevOps and SRE
Agile Transformation
Cloud
Data and AI
Software Technology
Low Code
Microsoft Solutions
Xebia Academy


Industries

Finance
Retail
Travel | Hospitality
Healthcare
Public | Utilities
Non-Profit
Transport | Trade | Logistics
Business | IT
Technology | Telecom | Media


Training
Customer Stories
Insights

News
Blog
Articles
Events


Careers
About us

About us
Team
Partners
Contact and Locations








Europe



Europe
Americas
APAC
Middle East and Africa

×





  


Digital Transformation

Digital Strategy
DevOps and SRE
Agile Transformation
Cloud
Data and AI
Software Technology
Low Code
Microsoft Solutions
Xebia Academy


Industries

Finance
Retail
Travel | Hospitality
Healthcare
Public | Utilities
Non-Profit
Transport | Trade | Logistics
Business | IT
Technology | Telecom | Media


Training
Customer Stories
Insights

News
Blog
Articles
Events


Careers
About us

About us
Team
Partners
Contact and Locations






Globe


Europe



Europe
Americas
APAC
Middle East and Africa












Blog
Microservices architecture principle #4: Asynchronous communication over synchronous communication




by  Gero Vermaas 






29 May, 2015





Architecture 















Share















This post is part of a six-part series on Microservices Principles. Other parts are: Business Capability,  Autonomy, Small bounded context, Best Technology and One Team.
 
Microservices are a hot topic. Because of that a lot of people are saying a lot of things. To help organizations make the best of this new architectural style Xebia has defined a set of principles that we feel should be applied when implementing a Microservice Architecture.
This blog explains why we prefer asynchronous communication over synchronous communication
In a previous post in this series we explained that we prefer autonomy of Microservices over coordination between Microservices. That does not imply a Microservices landscape with all Microservices running without being dependent on any other Microservice. There will always be dependencies, but we try to minimise the number of dependencies.  Once you have minimised the number of dependencies, how should these be implemented such that autonomy is maintained as much as possible? Synchronous dependencies between services imply that the calling service is blocked and waiting for a response by the called service before continuing it’s operation. This is tight coupling, does not scale very well, and the calling service may be impacted by errors in the called service. In a high available robust Microservices landscape that is not preferable. Measures can be taken (think of things like circuit breakers) but it requires extra effort.
The preferred alternative is to use asynchronous communication. In this pattern the calling service simply publishes it’s request (or data) and continues with other work (unrelated to  this request). The service has a separate thread listening for incoming responses (or data) and processes these when they come in. It is not blocking and waiting for a response after it sent a request, this improves scalability. Problems in another service will not break this service. If other services are temporarily broken the calling service might not be able to complete a process completely, but the calling service is not broken itself. Thus using the asynchronous pattern the services are more decoupled compared to the synchronous pattern and which preserves the autonomy of the service .
 
[edited: 3 aug 2015 – added preamble and removed line “Over the next couple of days we will cover each of these principles in more detail in a series of blog posts.“]








by Gero Vermaas 












 






 Login 








 


Label












{}
[+]

 














Name*




Email*




Website






























 


Label












{}
[+]

 














Name*




Email*




Website



























4 Comments                    





Oldest


Newest
Most Voted





 Inline Feedbacks
View all comments












    Greg Young





    6 years ago














aka Tell Don’t Ask. Tell me something happened (event) vs asking me for current state.
There are also some places where you much prefer the ask. Its a matter of optimizing for autonomy vs authority (sometimes you prefer authority)






0






Reply

















    Jesse Tomchak





    6 years ago
















    Reply to 

    

        Greg Young

    


Greg,
What is an example of where you’d prefer authority over autonomy?






0






Reply

















    Greg Young





    6 years ago
















    Reply to 

    

        Jesse Tomchak

    


I can give lots of examples where you would prefer authority of autonomy.
Google maps is a good one. Do we really want to synchronize down all the maps on the planet to your mobile phone so you can query autonomously? Its quite common that you are interested in very small slices of a very large dataset in which case you suck it up and understand the possibility of problems.
Another example might be a police information system. A big requirement is that all views of data and searches are logged. Only the authority is trusted to do this (there are some ways of implementing this without having authority such as encryption and make the key provider an authority)
Another example would be when you would prefer to give no answer as opposed to having the possibility of conflicting answers.






0






Reply














    Ankit





    4 years ago














Want to know any example where we prefer Async MicroService over Sync Microservice? Any real example would be appriciated.






0






Reply




 














Explore related posts











Architecture

Microservices architecture principle #2: Autonomy over coordination




Gero Vermaas 
25 May, 2015













Agile
 |  Architecture

Lean Architecture Principle #10: Architecture emerging from Projects




Gero Vermaas 
28 Jul, 2010













Architecture

Lean Architecture Principle #7: Architecture Initiated by Business Goals




Gero Vermaas 
21 Jun, 2010
















Xebia


Creating Digital Leaders




Careers
Contact
Privacy Policy
Cookie Policy


Connect



Linkedin





Twitter





Github






                © Xebia 2022 | All rights reserved.
            



wpDiscuzInsert










