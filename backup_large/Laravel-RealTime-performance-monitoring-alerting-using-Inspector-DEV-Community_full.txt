



Laravel Real-Time performance monitoring & alerting using Inspector - DEV Community





































































Skip to content



Navigation menu













Search









Search





            Log in
          


          Create account
        






DEV Community

Close





DEV Community is a community of 851,150 amazing developers

  

      We're a place where coders share, stay up-to-date and grow their careers.
    

Create account
Log in




















      Home
    













      Listings
    




























      Podcasts
    













      Videos
    












      Tags
    














      FAQ
    













      Forem Shop
    








      Sponsors
    























      About
    












      Contact
    





      Other
    











      Code of Conduct
    















      Privacy Policy
    



















      Terms of use
    





Twitter




Facebook




Github




Instagram




Twitch


























































More...




Copy link
Copy link



Copied to Clipboard



            Share to Twitter
          

            Share to LinkedIn
          

            Share to Reddit
          

            Share to Hacker News
          

            Share to Facebook
          




Report Abuse


























Valerio
 for Inspector

                      Posted on Jun 26, 2019

                      • Updated on May 19

                      • Originally published at inspector.dev





              Laravel Real-Time performance monitoring & alerting using Inspector
            

#laravel
#productivity
#php





Hi, I'm Valerio, software engineer, CTO & founder at Inspector.
The time many developers discover the need to monitor their applications often coincides with when they first start working on a medium / large project.
The reason is simple: when your software becomes complex, or is used by highly valuable customers, software bugs become expensive; doubly so when your customers find them! Customers may rate you as unreliable and search for alternatives. 
Solving customers' critical problems can certainly generate great business opportunities, but the more critical the problem is, the more you need to be ready for really high customer expectations.
Monitoring is the way for developers to avoid unexpected incidents and retain customers or contracts as long as possible - which means stable income for your business over time.
The idea behind Inspector is to create a monitoring environment specifically designed for software developers avoiding any server or infrastructure configuration that many developers hate to deal with. 
It works with a lightweight software library that you can install in your application like any other dependencies.
Let me show you how it works.



  Install the Laravel package

Run the composer command in your terminal:


composer require inspector-apm/inspector-laravel



Enter fullscreen mode


Exit fullscreen mode








  Configure the Ingestion key

Get a fresh API key by signing up for Inspector and creating a new project, it takes 30 seconds.
You'll see installation instructions directly in the app screen:

Add the Ingestion key in your environment file:


INSPECTOR_INGESTION_KEY=9a304b04b8XXXXXXXXXXXX



Enter fullscreen mode


Exit fullscreen mode








  Test everything is working

Execute our test command to check if your app send data to inspector correctly:


php artisan inspector:test



Enter fullscreen mode


Exit fullscreen mode





Go to (https://app.inspector.dev/home)[https://app.inspector.dev/home] to explore your demo data.

By default Inspector monitors:

Database interactions
Queued Jobs execution
Artisan commands
Email sent
Notifications
Unhandled Exceptions

We turned on the light in the 50% of our app executed in background. The next step is to monitor all transactions generated by user interactions.



  Incoming Web Requests monitoring

To activate monitoring also when your app is executed due to an incoming http request you can use the WebRequestMonitoring middleware.
It works like any other Laravel middleware you are familiar to so you are free to decide which routes need to be monitored based on your routes configuration or on your personal monitoring preferences. 
The most easy way to cover all your application routes is attaching the middleware in the App\Http\Kernel class. :


/**
 * The application's route middleware groups.
 *
 * @var array
 */
protected $middlewareGroups = [
    'web' => [
       ...,
       \Inspector\Laravel\Middleware\WebRequestMonitoring::class,
    ],

    'api' => [
       ...,
       \Inspector\Laravel\Middleware\WebRequestMonitoring::class,
    ]
]



Enter fullscreen mode


Exit fullscreen mode





Instantly you will see transactions streams in your project’s dashboard:

and for each transaction you can monitor what your application is executing in real-time:




  Enrich your timeline

Inspector monitors database query, background jobs, artisan commands by default, but could be many critical statements in your code that need to be monitored in terms of performance and error:

Http calls to external services
Function that deals with files (pdf, excel, images)

Thanks to our package you can add custom segments in your timeline in addition to those detected by default, to measure the impact that an hidden code block has on a transaction's performance.
Let me show you a real life example.
Suppose you have a queued job that executes some database checks and an http request to an external service.
Job and queries are measured automatically, but it could be interesting to monitor and measure the execution of the http request and activate alerting if somethings goes wrong. Simply use the Inspector helper function:


class TagUserAsActive extends Job
{
    /** @param User $user */
    protected $user;

    // Monitoring an external HTTP requests
    public function handle()
    {
        inspector()->addSegment(function () {

            $this->guzzle->post('/mail-marketing/add_tag', [
                'email' => $this->user->email,
                'tag' => 'active',
            ]);

        }, 'http');
    }
}



Enter fullscreen mode


Exit fullscreen mode





You will see the impact of the new segment in your transaction timeline in real time:




  Errors & Exceptions Alerting

By default, every exception fired in your Laravel app will be reported automatically to be sure you’re alerted for unpredictable errors in real time.
I wish that every change I make to my code could be perfect. But the reality is, this is not always the case. Some errors appear immediately after an update, while others pop up unpredictably. It’s an unfortunate fact of life for developers which often also depends on problems caused by the connection between our application and other services.
However, Inspector makes my job easier. It automates the detection of unknown issues so I no longer need to manually check the status of my apps continuously or wait reports directly from users. If something goes wrong I’ll receive a notification in real time, and after each release I can stay informed about the impact of the latest code refactor.
If your code fires an exception but you don’t want to block the execution, you can report the error to inspector manually for private monitoring about availability of the external system.



try {

   // Your dangerous code here...

} catch (GuzzleException $exception) {
   inspector()->reportException($exception)
}



Enter fullscreen mode


Exit fullscreen mode





Furthermore, if the http request fails, you will be alerted in real time in your inbox to take a look at the error as it appears.

You even get access to detailed information gathered by Inspector in real time:




  Conclusion

When a customer reports to you that something isn’t working, it forces you to drop whatever you are doing and start trying to reproduce the scenario, then recapture and reanalyze the logs in your own toolset.
Getting a true picture of what’s happening can require hours or, based on my experience, even days. Inspector can make a huge difference in terms of efficiency, productivity and customers happiness.



  New to Inspector?

Are you looking for a "code-driven" monitoring tool instead of having to install things at the server level?
Get a monitoring environment specifically designed for software developers avoiding any server or infrastructure configuration.
Thanks to Inspector, you will never have the need to install things at the server level or make complex configuration in your cloud infrastructure to monitor your application in real-time.
Inspector works with a lightweight software library that you can install in your application like any other dependencies. In case of Laravel you can install our official Laravel package. Developers are not always comfortable installing and configuring software at the server level, because these installations are often managed by external teams, and they are out of the software development lifecycle.
Visit our website for more details: https://inspector.dev/laravel/





          Discussion (5)



Subscribe



























Upload image









Templates


Editor guide







Personal
Moderator







        Create template
      
Templates let you quickly answer FAQs or store snippets for re-use.



Submit
Preview
Dismiss








Collapse


Expand














William Desportes



      William Desportes
    







William Desportes



Follow





            Location
          

            France
          



          Joined
        

Apr 26, 2019







•


    Sep 10 '21
  



Dropdown menu





Copy link



              Hide
            









Typo "Monitring"
Thanks for the article !




Like comment: 
Like comment: 


2 likes


Comment button
Reply







Collapse


Expand














Valerio

Author






      Valerio
    







Valerio



Follow


    Software Engineer, CTO & founder at Inspector.dev
  




            Location
          

            Naples
          



              Work
            

              CTO at Inspector.dev
            



          Joined
        

Jun 10, 2019







Author




•


    Sep 17 '21
  



Dropdown menu





Copy link



              Hide
            









Thank you for reporting to me!




Like comment: 
Like comment: 


2 likes


Comment button
Reply











Collapse


Expand














muhsarip



      muhsarip
    







muhsarip



Follow





          Joined
        

Oct 2, 2018







•


    Aug 10 '21
  



Dropdown menu





Copy link



              Hide
            









is there any concern about security issue, since this package sending data to third party app to show data? 




Like comment: 
Like comment: 


2 likes


Comment button
Reply







Collapse


Expand














Valerio

Author






      Valerio
    







Valerio



Follow


    Software Engineer, CTO & founder at Inspector.dev
  




            Location
          

            Naples
          



              Work
            

              CTO at Inspector.dev
            



          Joined
        

Jun 10, 2019







Author




•


    Sep 17 '21
  

    • Edited on Sep 17



Dropdown menu





Copy link



              Hide
            









Hi @muhsarip
, thank you for the question. Inspector use the HTTPS connection to transfer data from your servers to our ingestion pipeline. 
Furthermore data are econded in base64 to transform them into a secure string for your machine and for our ingestion system. (github.com/inspector-apm/inspector...)
Feel free to write me for any questions, I'm here to help.




Like comment: 
Like comment: 


1 like


Comment button
Reply











Collapse


Expand














Pyae Sone Win



      Pyae Sone Win
    







Pyae Sone Win



Follow





          Joined
        

Nov 23, 2017







•


    Aug 3 '20
  



Dropdown menu





Copy link



              Hide
            









This looks amazing. I am definitely going to use it!




Like comment: 
Like comment: 


2 likes


Comment button
Reply










Code of Conduct
•
Report abuse







        Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
      


Hide child comments as well



          Confirm
        


 For further actions, you may consider blocking this person and/or reporting abuse



Read next






React debugging in VSCode

              Gleb Krishin - May 8










⚡️20 Easy Ways to Be More Productive as a Developer⚡️

              Code_Jedi - Apr 18










Laravel 9 Multi Update or Insert with this 'Magic'

              Laravel Indonesia - May 7










PHP Array: A Gross Mistake

              Anton Ukhanev - May 2















Inspector



Follow


    Simple Code Execution Monitoring, built for developers.
  

Avoid losing customers and money due to technical problems in your applications.



        Try it for free
      





            More from Inspector




              How to enable HTTPS in Laravel Homestead
              
#php
#laravel
#webdev
#devops



              Laravel cron scheduling and its secrets
              
#laravel
#php
#webdev
#devops



              Laravel validation and custom rules in Inspector
              
#laravel
#php
#validation
#webdev




















DEV Community — A constructive and inclusive social network for software developers. With you every step of your journey.
    

Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2022.


Forem logo




















          We're a place where coders share, stay up-to-date and grow their careers.
      



        Log in
      

        Create account
      








