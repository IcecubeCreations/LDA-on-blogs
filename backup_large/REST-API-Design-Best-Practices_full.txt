




REST API Design Best Practices











































Skip to main content
















Java Guides







Tutorials
Guides
YouTube
Udemy
Courses



Search






Search This Blog




















Java
	            



Java Programs
Java for Beginners
DS and Algorithms 
Java OOPS Tutorial
Java for Professionals
Java Collections Tutorial
Java String Tutorial
Java Exceptions Tutorial
Java Regex Tutorial
Java Multithreading 
Java Generics Tutorial


Java IO Tutorial
JDBC Tutorial
JavaFX Tutorial
Swing Tutorial
Java 9 Tutorial
Java 8 Tutorial
Java 8 Date Time 
Java 8 Stream API 
Head First Patterns
Core JavaEE Patterns
Java Best Practices




JavaEE
	            


JSP Tutorial
Servlet Tutorial
JSP Servlet Projects
JAXB Tutorial
Java JSON-P Tutorial
Maven Tutorial



 Library
	            


Java API Guides
JavaScript API Guides
Apache Velocity Tutorial
Kotlin Tutorial
Eclipse Tutorial
Java Lang Package
Java SQL Package
Java Util Package
Java IO Package
Java Time Package
Java Lang Reflect Package 
Lombok Tutorial
Java Utility Classes



REST
	            


REST API Tutorial
Rest with Java Tutorial
JAX-RS Tutorial
Jersey Rest Tutorial
Jackson JSON Tutorial
Google GSON Tutorial
Java JSON-P Tutorial
JSON.simple Tutorial
Java XML Tutorial
Apache HttpClient Tutorial



JUnit
	            


JUnit 5 Tutorial
JUnit 4 Tutorial
JUnit Examples



Spring Boot
                    


Spring Boot Tutorials [200+]
Spring Boot Testing Tutorial
Spring Core Tutorial
Spring MVC Tutorial
Spring Data JPA Tutorial
Spring Framework for Beginners
Spring AOP Tutorial
Spring Security Tutorial
Java Thymeleaf Tutorial
Spring Boot Annotations
Spring Boot Free Projects



Full Stack
	            


Angular CRUD Example with Spring Boot
Spring Boot + Angular 12 CRUD Full Stack
Spring Boot + Angular 8 CRUD Full Stack
Spring Boot + Angular 10 CRUD Full Stack
Spring Boot + React JS CRUD Full Stack
React JS ( React Hooks) + Spring Boot
Spring Boot Thymeleaf CRUD Full Stack
Spring Boot User Registration and Login
Node Js + Express + MongoDB CRUD
	Vue JS + Spring Boot REST API Tutorial




 YouTube



Spring Boot for Beginners
Spring Boot Tutorial Course
5 Spring Boot Projects Course
Spring MVC Tutorial Course
Validation in Spring Boot
Spring Data REST Course
Spring Boot Rest API Course
Spring Boot Hibernate Course
Spring Boot Web Application


Spring Boot Angular Full Stack
Spring Boot React Full Stack
React Hooks Spring Boot Full Stack
Vue JS Spring Boot Full Stack
Java Thymeleaf Template Course
Java Collections Framework
MongoDB Beginners Crash Course
Java 8 Stream API Tutorial




Angular
	            


Angular CRUD Operations
All Angular Tutorials
Angular 10 Tutorial
Angular 9 Tutorial
JavaScript Tutorial
TypeScript Tutorial
Lodash JS Tutorial



React
	            


ReactJS Tutorial
ReactJS Tutorial for Beginners
Spring Boot React CRUD Full Stack
Spring Boot React - Free Course




 Interview



Java Array Interview Q & A
Java Tricky Coding Interview Q & A
Java String Interview Q & A
Java String Tricky Coding Q & A
Java main() Interview Q & A
OOPS Interview Q & A
Java 8 Interview Q & A
Java OOPS Tricky Coding Q & A
Java Programs Asked in Interview
Java Exception Handling Q & A


Spring Boot Interview Q & A
Top 10 Spring MVC Interview Q & A
Hibernate Interview Q & A
JPA Interview Q & A
Design Patterns Interview Q & A
Spring Core Interview Q & A
Java Stream API Interview Q & A
Java Lambda Interview Q & A
Java Functional Interface Interview Q & A




Quiz
		



Java String Quiz
Java Arrays Quiz
Java Loops Quiz
Java OOPS Quiz
Java OOPS Quiz - Part 1
Java OOPS Quiz - Part 2
Java Exception Handling Quiz
Java Collections Quiz


Java Generics Quiz
Java Multithreading Quiz
JDBC Quiz
Java Lambda Expressions Quiz
Java Functional Interfaces Quiz
Java Streams API Quiz
Java Date Time Quiz
Java 8 Quiz




Hibernate
	            


Java Persistence API
Hibernate ORM Tutorial
Hibernate Developer Guide
Spring Hibernate Tutorials



DB
	            


Java MySQL Tutorial
Java PostgreSQL Tutorial
Java H2 Database Tutorial
Java HSQLDB Tutorial
NoSQL : MongoDB Tutorial
Java MongoDB Tutorial



Go
						


Golang - Functions
Golang - Operators
Golang - Read Input
Golang - Read Write File
Golang - Array
Golang - Slices
Golang - Maps
Golang - Structs
Golang - JSON
Golang Base64



Me
					


About Me
Udemy
GitHub
Courses
YouTube
Contact Me
Advertise
Resources








 My Udemy Bestseller Course -  					

Building Real-Time REST APIs with Spring Boot and Deploy on AWS Cloud (Production)
              





















REST API Design Best Practices






Author:




Ramesh Fadatare





Java Best Practices

Jersey Rest

Restful API






















Get link







Facebook







Twitter







Pinterest







Email







Other Apps











Hey guys, in this article, we will discuss a few best practices for Restful API's design. This post belongs to my favorite Java Best Practices Series category. Before designing and developing Rest API, I suggest you read this article to develop a good Restful API.What is REST?The REST stands for REpresentational State Transfer.Let's understand the meaning of each word in the REST acronym. State means data REpresentational means formats (such as XML, JSON, YAML, HTML, etc) Transfer means carrying data between consumer and provider using the HTTP protocolLearn more about Rest at https://www.javaguides.net/p/rest-api-tutorial.html
 Here are a few best practices to design a clean RESTful API.1. Use Nouns for Resource IdentificationThe fundamental concept of a REST-based system is the resource. A resource is anything you want to expose to the outside world, through your application.Example 1: Resources for Employee Management System:- Employee- Department- Projects- Task- AddressExample 2: Resources for Student Management System:- Student- Teacher- School- Class- SubjectA resource has an identifier, which is a URI that uniquely identifies that resource.It is best practice to use nouns as resource identification.For an easy understanding use this structure for every resource:

GET - /users - Returns a list of users
GET - users/100 - Returns a specific user
POST - /users - Create a new user
PUT - /users/ - Updates a specific user
DELETE - /users/711 - Deletes a specific user
Here is REST API design that I create before writing REST API. Refer to the URI that uniquely identifies the Employee resource:
Bad Practice: Do not use verbs like:/getAllUsers
/getUserById
/createNewUser
/updateUser
/deleteUser
2. Use Plural Nouns to Name a ResourceWhen you have to develop the resource in REST API, just go with plural nouns. Don't mix up singular and plural, use plural nouns to name a resource.For example:Use /students instead of /studentUse /employees instead of /employeeUse /orders instead of /orderUse /users instead of /userUse /customers instead of /customer3. Use Proper HTTP Headers for Serialization Formats
Both client and server, need to know which format is used for the communication. The format has to be specified in the HTTP-Header.
Content-Type defines the request format.
Accept defines a list of acceptable response formats.
On the server-side, an incoming request may have an entity attached to it. To determine its type, the server uses the HTTP request header Content-Type. Some common examples of content types are “text/plain”, “application/xml”, “text/html”, “application/json”, “image/gif”, and “image/jpeg”.Content-Type: application/jsonSimilarly, to determine what type of representation is desired on the client-side, an HTTP header ACCEPT is used. It will have one of the values mentioned for Content-Type above.Accept: application/json4. Get Method and Query Parameters Should Not Alter the State
Use PUT, POST, and DELETE methods instead of the GET method to alter the state. Do not use GET for state changes:
GET /users/711?activate or
GET /users/711/activate
5. Use Sub-Resources for Relations
If a relation can only exist within another resource, RESTful principles provide useful guidance.In REST, the relationships are often modeled by a sub-resource. Use the following pattern for sub-resources.GET  /{resource}/{resource-id}/{sub-resource}GET  /{resource}/{resource-id}/{sub-resource}/{sub-resource-id}POST /{resource}/{resource-id}/{sub-resource}Example: GET  /{post}/{post-id}/{comments}GET  /{post}/{post-id}/{comments}/{comment-id}POST /{post}/{post-id}/{comments}Use sub-resources child object cannot exist without its parent.Few more examples for sub-resources:
GET /cars/711/drivers/ Returns a list of drivers for car 711
GET /cars/711/drivers/4 Returns driver #4 for car 711

These messages can be logically mapped to the /tickets endpoint as follows:

GET /tickets/12/messages - Retrieves a list of messages for ticket #12
GET /tickets/12/messages/5 - Retrieves message #5 for ticket #12
POST /tickets/12/messages - Creates a new message in ticket #12
PUT /tickets/12/messages/5 - Updates message #5 for ticket #12
PATCH /tickets/12/messages/5 - Partially updates message #5 for ticket #12
DELETE /tickets/12/messages/5 - Deletes message #5 for ticket #12

6. Use Proper HTTP Methods (Verbs)
HTTP methods used by most RESTful web APIs are:
The URL is a sentence, where resources are nouns and HTTP methods are verbs.

GET - retrieves a representation of the resource at the specified URI. The body of the response message contains the details of the requested resource.
POST creates a new resource at the specified URI. The body of the request message provides the details of the new resource. Note that POST can also be used to trigger operations that don't actually create resources.
PUT either creates or replaces the resource at the specified URI. The body of the request message specifies the resource to be created or updated.
PATCH performs a partial update of a resource. The request body specifies the set of changes to apply to the resource.
DELETE removes the resource at the specified URI.


7. HTTP Response Status Codes
When the client raises a request to the server through an API, the client should know the feedback, whether it failed, passed or the request was wrong. HTTP status codes are a bunch of standardized codes which has various explanations in various scenarios. The server should always return the right status code.
Some of the frequently used status codes in this class are as follows:200 OK: This code indicates that the request is successful and the response content is returned to the client as appropriate.201 Created: This code indicates that the request is successful and a new resource is created.400 Bad Request: This code indicates that the server failed to process the request because of the malformed syntax in the request. The client can try again after correcting the request.401 Unauthorized: This code indicates that authentication is required for the resource. The client can try again with appropriate authentication.403 Forbidden: This code indicates that the server is refusing to respond to the request even if the request is valid. The reason will be listed in the body content if the request is not a HEAD method.404 Not Found: This code indicates that the requested resource is not found at the location specified in the request.500 Internal Server Error: This code indicates a generic error message, and it tells that an unexpected error occurred on the server and that the request cannot be fulfilled.


8. Field Name Casing Convention
You can follow any casing convention, but make sure it is consistent across the application. If the request body or response type is JSON then please follow camelCase to maintain consistency.The below example uses camelCase as JSON field name:	{
		"firstName": "Ramesh",
		"lastName": "Fadatare",
		"id": 100,
		"userName": "Ramesh Fadatare",
		"email": "ramesh@gmail.com"
	}
9. Searching, Sorting, Filtering, and Pagination
For searching, sorting, filtering, and pagination no need to create a new REST API, you can support these operations in the existing GET REST API, just append the query params with the GET REST API.For example:





Sorting - In case, the client wants to get the sorted list of companies, the GET /companiesendpoint should accept multiple sort params in the query. E.g GET /companies?sort=rank_asc would sort the companies by their rank in ascending order.


Filtering - For filtering the dataset, we can pass various options through query params. E.g GET /companies?category=banking&location=india would filter the companies list data with the company category of Banking and where the location is India. 


Searching - When searching for the company name in the companies list the API endpoint should be GET /companies?search=Digital .


Pagination - When the dataset is too large, we divide the data set into smaller chunks, which helps in improving the performance and is easier to handle the response. Eg. GET /companies?page=23 means get the list of companies on the 23rd page.

10. Restful API VersioningAPI versioning is the practice of transparently managing changes to your API.Here are the 4 ways of versioning a REST API.1. Versioning through URI Path2. Versioning through query parameters3. Versioning through custom headers4. Versioning through content negotiationVersioning through the URI Path strategy is widely used to version the REST API.To version the REST APIs, just include the version number in the URI path.Examples:http://www.example.com/api/1/productshttp://www.example.com/api/v1/productshttp://www.example.com/api/v2/productshttp://www.example.com/api/v1/postshttp://www.example.com/api/v1/employeesRead more about versioning REST APIs at https://www.javaguides.net/2021/04/rest-apis-versioning.html

Conclusion
In this article, we have seen the best practices for Restful API design. Learn more about Rest at https://www.javaguides.net/p/rest-api-tutorial.htmlRelated REST API ArticlesOverview of RESTWhat is Payload in REST API? // NewREST API - HTTP Methods  // PopularREST API - HTTP Status Codes  // PopularAdvantages of RESTREST API - REST Architectural Constraints  // PopularREST APIs VersioningREST API - REST Architectural PropertiesREST API - REST Architectural ElementsDifference Between SOAP vs REST Web ServicesHow to Identify REST ResourcesHow to Design URL to REST Resource  // PopularHow to Assign HTTP methods to REST ResourcesHow to Model JSON Representation Format  // PopularWhat HTTP Status Code to Return





Java Best Practices

Jersey Rest

Restful API


 Free Spring Boot Tutorial | Full In-depth Course | Learn Spring Boot in 10 Hours

 Watch this course on YouTube at Spring Boot Tutorial | Fee 10 Hours Full Course
      













Java Best Practices
Jersey Rest
Restful API





















Get link







Facebook







Twitter







Pinterest







Email







Other Apps














Comments





Post a Comment





















Subscriber to my top YouTube Channel (75K+ Subscribers)







Testing Spring Boot Application with JUnit and Mockito









Building Real-Time REST APIs with Spring Boot and Deploy on AWS Cloud










Master Spring Data JPA with Hibernate









Spring Boot + Apache Kafka - The Quickstart Practical Guide









About Me



   Hi, I am Ramesh Fadatare. I am VMWare Certified Professional for Spring and Spring Boot 2022. 
 I am founder and author of this blog website JavaGuides, a technical blog dedicated to the Java/Java EE technologies and Full-Stack Java development. 
	
 All the articles, guides, tutorials(2000 +) written by me so connect with me if you have any questions/queries. Read more about me at About Me. 
  Top YouTube Channel (75K+ Subscribers):  Check out my YouTube channel for free videos and courses - Java Guides YouTube Channel
  My Udemy Courses -  https://www.udemy.com/user/ramesh-fadatare/
 Connect with me on 
Twitter,
Facebook,
LinkedIn,
GitHub,
andStackOverflow 



















































Follow Me on Twitter


Follow @FadatareRamesh



Facebook Likes and Shares

























Free Courses on YouTube
Java Lambda Expressions
Java Collections Framework
Java Functional Interfaces
Spring Boot Tutorial
5 Spring Boot Projects in 10 Hours
Spring Boot + Angular Full Stack
Spring Boot React Full Stack
Spring MVC Tutorial



My Udemy Courses
Building Real-Time REST APIs with Spring Boot
Testing Spring Boot Application with JUnit and Mockito
Learn Spring Data JPA with Hibernate: The Masterclass
Learn Spring Boot: The Masterclass



Connect
YouTube
Twitter
Facebook
GitHub
Linkedin
StackOverflow



Dev Tools
JSON Formatter | Beautifier
Online HTML Editor and Compiler
Base64 Encode Online
Base64 Decode Online
URL Encoder Online
URL Decoder Online






    Copyright © 2018 - 2022
    Java Guides  All rights reversed | Privacy Policy | 
	Contact | 
	About Me | 
	YouTube | 
	GitHub









Powered by Blogger













