Components involved in creating a robust Micro Service Architecture - Java Code Geeks - 2022      

     


Knowledge BaseTutorialsJava TutorialCore Java TutorialsJava 8 TutorialsJava 9 TutorialsJava Concurrency TutorialsJava NIO TutorialsJava Logging TutorialsDesign Patterns TutorialsException Handling TutorialsJUnit TutorialsXPath TutorialsMockito TutorialsEnterprise Java TutorialsJava Spring TutorialSpring Boot TutorialsSpring Data TutorialsSpring Batch TutorialsSpring Integration TutorialsSpring MVC TutorialsSpring Security TutorialsJDBC TutorialsHibernate TutorialsSelenium TutorialsJava Servlet TutorialsJPA TutorialsJSF TutorialsJSP TutorialsJAX-RS TutorialsJAX-WS TutorialsJAXB TutorialsJMS TutorialsEJB TutorialsElasticSearch TutorialsJBoss Drools TutorialsJMeter TutorialsApache Camel TutorialsApache Hadoop TutorialsJava SLF4J TutorialsCDI TutorialsQuartz TutorialsDesktop Java TutorialsAWT TutorialsJava Swing TutorialsJavaFX TutorialsXuggler TutorialsEclipse IDE TutorialsIntelliJ IDEA TutorialsNetbeans IDE TutorialsAndroid TutorialsScala TutorialsPlay Framework TutorialsDevOps TutorialsDocker TutorialsNoSQL TutorialsMongoDB TutorialsGroovy TutorialsGit TutorialsExamplesCoursesMinibooksResourcesJavaSoftwareOur CoursesOur ProjectsAboutAbout JCGsAdvertisingTerms of UsePrivacy PolicyJoin UsJCGW4GSubmission GuidelinesTerms & ConditionsDealsLoginRegister 
Java Code Geeks Java Developers Resource Center
AndroidAndroid CoreAndroid GamesJavaCore JavaDesktop JavaEnterprise JavaJVM LanguagesCeylonClojureGroovyJRubyKotlinScalaSoft DevWeb DevelopmentPythonJavaScriptReact.jsPHPAgileCareerCommsDevOpsMeta JCGBest Of The WeekMiscHome » Java » Components involved in creating a robust Micro Service ArchitectureAbout Shivshankar Shet

Technology enthusiast currently working in position of a Principal Architect with 12+ years of IT experience in Java/J2EE related technologies.
His main expertise includes building distributed systems, data analytics, cognitive computing.

Components involved in creating a robust Micro Service Architecture
Posted by:  Shivshankar Shet 
in  Java
May 9th, 2016
0
 ViewsIn this article, we will learn in brief about various software components that are required in building a robust Micro Services Application. Before understanding each architectural component in brief, we will state general queries that comes up while designing Micro Services Architecture.
 
 
 
 
 
 1. Micro Services Architecture ComponentsWhenever we are creating a Micro Services Application, the following questions come to our mindHow will we register micro services so that clients can use that registration information(Service Discovery) and call in a Micro Service?How will we ensure that micro services application which is built is completely fault tolerant and highly available?How will we make sure that there is a single interface given to the client which reduces a lot of client side efforts and makes that Micro Services application very easy to use?How to load balance incoming requests to micro services seamlessly?Please see architectural diagram below and lets understand whether components involved in building the architecture solves all of the questions stated above:Micro Services Architecture Components1.1 Netflix Eureka ServerNetflix Eureka acts as a discovery server wherein a Micro Service after coming up registers itself as a discovery client. Netflix Eureka provides a REST interface to the outside for communicating with it. Eureka also has another software module called Eureka Client through which it alternately interacts with a Eureka Server for service discovery. Eureka Client also comes with inbuilt Load Balancer to load balance incoming client Requests.Netflix Eureka Server is an answer to Question 1 above.1.2 Hystrix ServerHystrix acts as a fault tolerant resilient system which is used to avoid complete failures of software application. It does this by providing a kind of Circuit breaker mechanism in which a circuit remains closed when application is running smoothly without any issues. If there are errors continuously encountered in the application then Hystrix Server Circuit opens and any further requests to a calling service are stopped by Hystrix and instead requests are diverted to a fall back service. In this way it provides a highly resilient system.Hystrix Server is an answer to Question 2 above.1.3 Netfilx Zuul ServerNetflix Zuul Server acts as a kind of Gateway Server wherein all the client requests hva to pass through it, so its acts as a kind of unified interface to a Client. Client uses a single communication protocol to communicate with all the Micro Services and Zuul server is in turn entrusted with the responsibility of calling various micro services with its appropriate communication protocols. Netflix Zuul also has an inbuilt Load Balancer to load balance all the incoming requests from the client.Netflix Zuul Server is an answer to Question 3 above.1.4 Netflix RibbonNetflix Ribbon acts as a kind of Load Balancer wherein it load balances all the incoming requests from the client. It uses a basic Round Robin Load Balancing strategy by default though you can configure it to use any other alternate Load Balancing mechanisms. Netflix Zuul Server has inbuilt Netflix Ribbon embedded with it. If you want to use Netflix Ribbon independently, we have to provision appropriate Maven packages of Netflix Ribbon for using it in any application.Netflix Ribbon Server is an answer to Question 4 above.2. ConclusionIn this article, we saw a brief overview on all the software components which goes in building a Micro Services application. In next article we will try to understand the working of Netflix Eureka in detail.
2016-05-09Shivshankar Shet
 (0 rating, 0 votes)You need to be a registered member to rate this. Start the discussion
 Views
Tweet it!Do you want to know how to develop your skillset to become a Java Rockstar?Subscribe to our newsletter to start Rocking right now!To get you started we give you our best selling eBooks for FREE!1. JPA Mini Book2. JVM Troubleshooting Guide3. JUnit Tutorial for Unit Testing4. Java Annotations Tutorial5. Java Interview Questions6. Spring Interview Questions7. Android UI Designand many more ....I agree to the Terms  and Privacy PolicySign up   Like This Article? Read More From Java Code Geeks    
 Subscribe Notify of
new follow-up commentsnew replies to my comments





Label









{}
[+]


Name*

Email*

Website

I agree to the Terms and Privacy Policy
The comment form collects your name, email and content to allow us keep track of the comments placed on the website.  Please read and accept our website Terms and Privacy Policy to post a comment.












Label









{}
[+]


Name*

Email*

Website

I agree to the Terms and Privacy Policy
The comment form collects your name, email and content to allow us keep track of the comments placed on the website.  Please read and accept our website Terms and Privacy Policy to post a comment.










This site uses Akismet to reduce spam. Learn how your comment data is processed.
0 Comments Inline FeedbacksView all commentsNewsletterInsiders are already enjoying weekly updates and complimentary whitepapers!Join them now to gain exclusive access to the latest news in the Java world, as well as insights about Android, Scala, Groovy and other related technologies.I agree to the Terms  and Privacy PolicySign up  Join Us

With 1,240,600 monthly unique visitors and over 500 authors we are placed among the top Java related sites around. Constantly being on the lookout for partners; we encourage you to join us. So If you have a blog with unique and interesting content then you should check out our JCG partners program. You can also be a guest writer for Java Code Geeks and hone your writing skills!Knowledge BaseCoursesExamplesMinibooksResourcesTutorialsPartnersMkyongThe Code Geeks Network.NET Code GeeksJava Code GeeksSystem Code GeeksWeb Code GeeksHall Of Fame“Android Full Application Tutorial” series11 Online Learning websites that you should check outAdvantages and Disadvantages of Cloud Computing – Cloud computing pros and consAndroid Google Maps TutorialAndroid JSON Parsing with Gson TutorialAndroid Location Based Services Application – GPS locationAndroid Quick Preferences TutorialDifference between Comparator and Comparable in JavaGWT 2 Spring 3 JPA 2 Hibernate 3.5 TutorialJava Best Practices – Vector vs ArrayList vs HashSetAbout Java Code GeeksJCGs (Java Code Geeks) is an independent online community focused on creating the ultimate Java to Java developers resource center; targeted at the technical architect, technical team lead (senior developer), project manager and junior developers alike. JCGs serve the Java, SOA, Agile and Telecom communities with daily news written by domain experts, articles, tutorials, reviews, announcements, code snippets and open source projects.DisclaimerAll trademarks and registered trademarks appearing on Java Code Geeks are the property of their respective owners. Java is a trademark or registered trademark of Oracle Corporation in the United States and other countries. Examples Java Code Geeks is not connected to Oracle Corporation and is not sponsored by Oracle Corporation.

Java Code Geeks and all content copyright © 2010-2022,  Exelixis Media P.C. | Terms of Use | Privacy Policy | Contact | Do not share my Personal Information

  









wpDiscuzInsert
                                                   

