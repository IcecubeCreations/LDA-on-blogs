Actson: a reactive (or non-blocking, or asynchronous) JSON parser « Michel KrÃ¤mer Michel KrÃ¤mer ResearchProjectsPhotographyMusicContactBlogActson: a reactive (or non-blocking, or asynchronous) JSON parserToday Iâm happy to anÂ­nounce the very first verÂ­sion of ActÂ­son, a reÂ­actÂ­ive JSON parser (someÂ­times reÂ­ferred to as non-blockÂ­ing or asynÂ­chronÂ­ous). ActÂ­son is event-based and can be used toÂ­gether with reÂ­actÂ­ive libÂ­rarÂ­ies/âtool-kits such as RxÂ­Java or Vert.x. The libÂ­rary is very small and has no deÂ­pendÂ­enÂ­cies. It only reÂ­quires Java 7 (or higher).DownÂ­load the ActÂ­son binÂ­arÂ­ies from http://âsearch.maven.org or the source code from the GitÂ­Hub reÂ­posÂ­itÂ­ory. ActÂ­son is reÂ­leased unÂ­der the MIT liÂ­cense.Why another JSON parser?Non-blockÂ­ing. Other JSON parsÂ­ers use blockÂ­ing I/âO (i.e. they read from an InputStream). If you want to deÂ­velop a reÂ­actÂ­ive apÂ­plicÂ­aÂ­tion you should use non-blockÂ­ing I/âO (see the ReÂ­actÂ­ive ManiÂ­festo).Big Data. Most parsÂ­ers read the full JSON text into memory to map it to a POJO, for exÂ­ample. ActÂ­son can handle arÂ­bitÂ­rarÂ­ily large JSON text. It is event-based and can be used for streamÂ­ing.GeoRÂ­ocket. ActÂ­son was primarÂ­ily deÂ­veloped for GeoRÂ­ocket, a high-perÂ­formÂ­ance reÂ­actÂ­ive data store for geoÂ­spaÂ­tial files. We use Aalto XML to parse XML in a non-blockÂ­ing way and we needed something simÂ­ilar for GeoRÂ­ockÂ­etâs GeoJSON supÂ­port.UsageThe JSON parser gets its inÂ­put data from a feeder. ActÂ­son uses a push-pull apÂ­proach: push data into the feeder unÂ­til it is full. Then call the parser unÂ­til it wants more data. ReÂ­peat this proÂ­cess unÂ­til the whole JSON text has been parsed.The folÂ­lowÂ­ing snipÂ­pet demonÂ­strates how you can use the parser seÂ­quenÂ­tially.// JSON text to parse
byte[] json = "{\"name\":\"Elvis\"}".getBytes(StandardCharsets.UTF_8);

JsonParser parser = new JsonParser(StandardCharsets.UTF_8);

int pos = 0; // position in the input JSON text
int event; // event returned by the parser
do {
    // feed the parser until it returns a new event
    while ((event = parser.nextEvent()) == JsonEvent.NEED_MORE_INPUT) {
        // provide the parser with more input
        pos += parser.getFeeder().feed(json, pos, json.length - pos);

        // indicate end of input to the parser
        if (pos == json.length) {
            parser.getFeeder().done();
        }
    }

    // handle event
    System.out.println("JSON event: " + event);
    if (event == JsonEvent.ERROR) {
        throw new IllegalStateException("Syntax error in JSON text");
    }
} while (event != JsonEvent.EOF);Reactive, non-blocking examplesFind more comÂ­plex and elabÂ­orÂ­ate usÂ­age exÂ­amples in the GitÂ­Hub reÂ­posÂ­itÂ­ory.Similar librariesJackÂ­son has a streamÂ­ing API that proÂ­duces JSON tokens/âevents. However, it uses blockÂ­ing I/âO beÂ­cause it reads from an InputStream.Aalto XML is simÂ­ilar to ActÂ­son but parses XML inÂ­stead of JSON.AcknowledgmentsThe event-based parser code and the JSON files used for testÂ­ing are largely based on the file JSON_checker.c and the JSON test suite from JSON.org oriÂ­ginÂ­ally reÂ­leased unÂ­der this liÂ­cense (baÂ­sicÂ­ally MIT liÂ­cense).Posted by Michel KrÃ¤meron August, 19th 2016.Please enable JavaScript to view the comments powered by Disqus.Next postActson 1.2.0 with RFC 7159 complianceThe new verÂ­sion of ActÂ­son 1.2.0 has just been reÂ­leased. ActÂ­son is a reÂ­actÂ­ive JSON parser (someÂ­times reÂ­ferred to as non-blockÂ­ing or asynÂ­chronÂ­ous). It is event-based and can be used toÂ­gether with reÂ­actÂ­ive libÂ­rarÂ­ies/âtool-kits such as RxÂ­Java or Vert.x.Previous postgradle-download-task 3.0.0The new verÂ­sion of the Gradle plugÂ­in gradle-downÂ­load-task 3.0.0 has just been reÂ­leased. The plugÂ­in provides a Download task that disÂ­plays proÂ­gress inÂ­formÂ­aÂ­tion while downÂ­loadÂ­ing files, just like Gradle does when it fetches an arÂ­tiÂ­fact from a reÂ­posÂ­itÂ­ory.Related postsActson 1.2.0 with RFC 7159 complianceThe new verÂ­sion of ActÂ­son 1.2.0 has just been reÂ­leased. ActÂ­son is a reÂ­actÂ­ive JSON parser (someÂ­times reÂ­ferred to as non-blockÂ­ing or asynÂ­chronÂ­ous). It is event-based and can be used toÂ­gether with reÂ­actÂ­ive libÂ­rarÂ­ies/âtool-kits such as RxÂ­Java or Vert.x.Binary JSON with bson4jacksonReÂ­cently, JSON has beÂ­come an exÂ­celÂ­lent alÂ­ternÂ­atÂ­ive to XML. But most JSON parsÂ­ers writÂ­ten in Java are still rather slow. On my search for faster libÂ­rarÂ­ies I found two things: BSON and JackÂ­son.Improved MongoDB compatibility for bson4jacksonVerÂ­sion 1.2.0 of bson4Â­jackÂ­son has just been reÂ­leased. bson4Â­jackÂ­son adds supÂ­port for BSON, a binÂ­ary repÂ­resÂ­entÂ­aÂ­tion of JSON, to the JackÂ­son JSON proÂ­cessor. Thanks to conÂ­triÂ­buÂ­tions from the comÂ­munity, the latest reÂ­lease of bson4Â­jackÂ­son now inÂ­cludes betÂ­ter supÂ­port for MonÂ­goDB.Copyright © 2009-2022 Michel KrÃ¤mer. All rights reserved.Legal notice/Impressum×Legal notice/ImpressumInformation in accordance with section 5 TMGMichel KrämerBuchenweg 1435418 BuseckGermanyContactE-Mail: michel@undercouch.deWebsite: https://michelkraemer.comPerson responsible for contentin accordance with 55 Abs. 2 RStVMichel KrämerDisclaimerAccountability for contentThe contents of my pages have been created with the utmost care. However, I cannot guarantee the contentsâ accuracy, completeness or topicality. According to statutory provisions, I am furthermore responsible for my own content on these web pages. In this context, please note that I am accordingly not obliged to monitor merely the transmitted or saved information of third parties, or investigate circumstances pointing to illegal activity. My obligations to remove or block the use of information under generally applicable laws remain unaffected by this as per §§ 8 to 10 of the Telemedia Act (TMG).Accountability for linksResponsibility for the content of external links (to web pages of third parties) lies solely with the operators of the linked pages. No violations were evident to me at the time of linking. Should any legal infringement become known to me, I will remove the respective link immediately.CopyrightMy web pages and their contents are subject to German copyright law. Unless expressly permitted by law (§ 44a et seq. of the copyright law), every form of utilizing, reproducing or processing works subject to copyright protection on my web pages requires the prior consent of the respective owner of the rights. Individual reproductions of a work are allowed only for private use, so must not serve either directly or indirectly for earnings. Unauthorized utilization of copyrighted works is punishable (§ 106 of the copyright law).Source: twigg.de