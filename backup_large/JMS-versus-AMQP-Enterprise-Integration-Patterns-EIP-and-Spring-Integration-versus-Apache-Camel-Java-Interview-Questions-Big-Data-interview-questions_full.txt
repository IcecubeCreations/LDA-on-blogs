        JMS versus AMQP, Enterprise Integration Patterns (EIP), and Spring Integration versus Apache Camel | Java Interview Questions & Big Data interview questions                     ‚Üì Skip to Main Content800+ interview Q&AsRegisterLoginContact  Search for:      HomeAboutWhy java-success.com?What are the benefits?ReviewsInterview FAQs300+ Java Developer FAQs üî•80+ Java Code Quality Q&As150+ Java Coding Q&As150+ Java Frameworks Q&As16+ Java Key Areas Q&As üî•150+ Java Architect FAQs120+ Companion Tech Q&As800+ Java Interview Q&As300+ Java Architect FAQs üî•300+ Big Data FAQs üî•Python 100+ FAQsScala 140+ FAQsSQL 50+ FAQsUnix 50+ FAQsCI/CD 30+ FAQsCloud computing AWS 50+ FAQsGit 30+ FAQsMaven 20+ FAQsCourses300+ Core Java Interview Questions & Answers300+ Java EE interview Questions & Answers300+ Java architects interview questions & answers‚èØ Getting started with self-taught Java projects step by step‚èØ Getting started with BigData on ClouderaCareerYour - Job hunting tipsYour - ResumesYour - Resume writing skillsYour - Resume samplesYour - Job interviewsYour - Job offers 2-6?Your - Earning more?Your - Feeling stagnated?Your - FreelancingYour - Lack of motivation?Your - Self-taught success?Your - CertificationYour - Soft skillsYour - Blogging benefitsYour - PhilosophiesYour - RantsMembershipMembership LevelsMembership InvoiceMembership CheckoutMembership BillingMembership AccountMembership CancelPrivacy PolicyPDF downloadsHome ‚Ä∫ Java-Success.com ‚Ä∫ Java-Success.com - Q&As ‚Ä∫ 300+ Enterprise Java Q&As ‚Ä∫ JEE - JMS ‚Ä∫ JMS versus AMQP, Enterprise Integration Patterns (EIP), and Spring Integration versus Apache CamelJMS versus AMQP, Enterprise Integration Patterns (EIP), and Spring Integration versus Apache Camel Posted on February 8, 2015 by  Q. Why do you need AMQP when there is JMS? A. AMQP stands for Advanced Message Queuing Protocol, and was developed to address the problem of interoperability by creating a standard for how messages should be structured and transmitted between platforms the same way as SMTP, HTTP, FTP, etc. have created interoperable systems. This standard binary wire level protocol for messaging would therefore allow hetrogeneous disparate systems between and within companies to exchange messages regrdless of the message broker vendor or platform.¬† RabbitMQ, Apache Qpid, StormMQ, etc are open source message broker softwares (i.e. MOM ‚Äì message-oriented middlewares) that implements the Advanced Message Queuing Protocol (AMQP).¬†  Q. How does AMQP differ from JMS? A. JMS is a standard messaging API for the Java platform. It provides a level of abstraction that frees developers from having to worry about specific implementation and wire protocols. This is similar to the JDBC API that allows you to easily switch databases. With JMS, you can switch from one JMS complian message broker (e.g. Web Methods) with another one (e.g. MQSeries or WebspehreMQ) with little or no changes to your source code. It also provides interoperability between other JVM based languages like Scala and Groovy. Altough JMS brokers can be used in .NET applications, ¬†the whole JMS specification does not guarantee interoperability, and integration between Java to .NET ¬†or Java to Ruby, is proprietary and can be quite tricky. In scenarios where you want to send a message from a Java based message producer to a .NET based message consumer, then you need a message based cross platform interoperability that is what AMQP does. With AMQP, you can use any AMQP compliant client library, and AMQP compliant message broker.  Q. What are the different alternatives to integrate various enterprise systems? A.  Alternative 1: Custom Solution. Implement an individual solution that works for your problem without separating problems into little pieces. For example, use Apache CXF for Web services, overnight batch job runs to load data feeds, JMS for messaging, etc. This is more suited for small use cases. This has higher maintainability and developer effort. The developer has to handle errors, service retries, transactional management, etc. This is suited if you want to integrate one or two applications using one or two protocols.¬† Alternative 2: Using an (opensource) integration framework like Spring Integration or Apache Camel. This helps you integrate systems in a standardised way adhering to the enterprise integration patterns (EIP). Apache Camel is a light weight integration framework that allows you to use HTTP, FTP, JMS, EJB, JPA, RMI, JMS, JMX, LDAP, and Netty to name a few. You use the same concept to integrate various protocols in Apache Camel. This increases maintainability and reduces developer effort. This is more suited ¬†if you want to integrate several applications with different protocols. Alternative 3: Using an ESB (Enterprise Service Bus) to integrate your applications. For example, Oracle Service Bus, TIBCO ESB, webMethods, etc. Under the hood, the ESB also uses an integration framework and provide more services and management functionalities like monitoring, high availability, clustering, graphical user inteface for routing and configuring, etc. Usually, an ESB is a complex and powerful product with a higher learning curve. Suited for very large integration projects. Projects requiring BPM (Business Process Managemnt) integration and other integrated services like monitoring, clustering, etc.Q. What is an architecture that enables separate applications to work together, but in a de-coupled fashion such that applications can be easily added or removed without affecting the others? A. This is achieved via a Message Oriented Middleware (aka a message bus).Q. How can the caller be sure that exactly one receiver will receive the document or perform the call? A. Use the point-to-point channel Q. How can the sender broadcast an event to all interested receivers? A. Use the publish subscribe channel.Q. What will the messaging system do with a message it cannot deliver? A. Put it on the dead letter channel.Q. How can the sender make sure that a message will be delivered, even if the messaging system fails? A. Use the ‚Äúguaranteed delivery‚Äù mechanism. Q. What are the diffrent ways to route messages? A. EIP (Enterprise Integration Patterns) define different types of rules based routing to solve common enterprise intergration problems. Like GoF design patterns is the EIP allows integration architects and designers to share a common vocabulary.Content based routing uses XPath predicates to route messages based on the message content. ¬†Content enricher supplements the original message with additional relevant information recieved from the other sources.Splitter ¬†provides the EIP service engine to split messages into separate parts based on the XPATH expression. Splits a composite message into a series of individual message parts.Split Aggregator is used to collect and store individual message parts until a complete set of co-related message parts has been recieved. Once all the related parts have been recieved, they are aggregated to form a single message.Static Recipent List based routing inspects an incoming message, and depending upon the number of recipients mentioned in the list, it can forward the message to all channels associated with the ‚Äúrecipients list‚Äù.¬†¬†A Resquencer is used to get a stream of related but out of sequence messages back into correct order. Because individual messages may follow different routes, some messages are likely to pass through the processing steps sooner than others, resulting in the messages getting out of order. A resequencer usually does not modify the message contents.A message filter is a processor that eliminates undesired messages based on specific criteria. Filtering is controlled by specifying a predicate in the filter: when the predicate is true, the incoming message is allowed to pass; otherwise, it is blocked. A message filter usually does not modify the message contents.  Q. How would you deal with large message volumes? A.You can reduce the data volume with the use of ‚ÄúClaim Check‚Äù pattern, which allows you to replace message content with a claim check (a unique key), which can be used to retrieve the message content at a later time. The message content will be stored temporarily in a persistent store like a database or file system. This pattern is very useful when message content is very large and not all components require all information.A Content Filter can be used to remove unwanted data elements from a message. It is useful to simplify the structure of the message. Very often, messages are represented as tree structures containing many levels of nested, repeating groups because they are modeled after generic, normalized database structures. Very often, this level of nesting is superfluous and a Content Filter can be used to ‚Äòflatten‚Äô the hierarchy into a simple list of elements that can be more easily understood and processed by other systems. Q. How would you go about choosing between Spring Integration and Apache Camel to solve common integration problems? A.¬†Spring Integration provides an extension to the Spring programming model to support the well-known Enterprise Integration Patterns while building on the Spring Framework‚Äôs existing support for enterprise integrationSpring Integration is more suited, if you already have got a Spring project and need to add some integration stuff to it. It requires almost no additional effort to learn Spring Integration if you know Spring itself. Nevertheless, Spring Integration only offers very rudimenary support for technologies such as AMQP, Spring Application Events, Feeds (e.g, RSS/ATOM), File, FTP, FTPS, SFTP, Gemfire, Groovy, HTTP (REST), TCP/IP, JDBC, JMS, JMX, Mail (IMAP/IDLE/POP3), MongoDB, Redis, RMI, Twitter, Web Services (SOAP), and XMPP. Integrations are implemented by writing a lot of XML based DSL(without a real DSL ‚Äì Domain Specific Language).¬†Spring Integration can be though of as a catch up game to Apache Camel as JavaEE did a catch up with Spring.Apache Camel is a powerful open source integration framework based on known Enterprise Integration Patterns with powerful support for integration with core Spring. Apache Camel is almost identical to Mule ESB, and offers many components (even more than Spring Integration) for almost every technology you could think of. If there is no component available, you can create your own component very easily starting with a Maven archetype. Camel also supports a Spring based XML configuration as well as a ‚ÄúDSL‚Äù for Java, Groovy, and Scala. The benefits of using the Java DSL is that your IDE can auto complete your code as you start typing, rather than having to mess around with buckets of XML. The Java DSL is also very expressive as you can mix and match your own code within the language for Expression or Predicate evaluations. So, it has better readability and there are commercial tools like ‚ÄúFuse IDE‚Äù for generating XML based DSL code.Mule ESB is another choice and as the name suggests, it is an ESB including additional bells and whistles. This can be compared to ‚ÄúApache ServiceMix‚Äù, which is an extension to Apache Camel. Mule also only offers XML based DSL. The Mule Studio is a visual designer. Mule does provide proprietary connector support for systems like SAP, Tibco Rendevous, PayPal, Sibel CRM, IBM‚Äôs CICS, etc.So, the decision is not clear cut and it depends on your needs. ‚Äπ Dealing with concurrent modifications in JavaUnderstanding Overriding, Hiding, and Overloading in Java? How does overriding give polymorphism? ‚Ä∫  300+ Java Developer Interview Q&As  300+ Java Interview FAQs üî•    FAQs Java - 01: Prepared?   FAQs Java - 02: Ice Breaker   FAQs Java - 03: Core Java   FAQs Java - 04: OOP & FP   FAQs Java - 05: JEE   FAQs Java - 06: Spring   FAQs Java - 07: Hibernate   FAQs Java - 08: Web Services   FAQs Java - 09: Microservices   FAQs Java - 10: Messaging   FAQs Java - 11: Architecture   FAQs Java - 12: RDBMS   FAQs Java - 13: SQL   FAQs Java - 14: Code Quality   FAQs Java - 15: Key Areas   FAQs Java - 16: UML   FAQs Java - 17: GIT   FAQs Java - 18: Unix   FAQs Java - 19: DevOps   FAQs Java - 20: AWS   FAQs Java - 21: Maven   FAQs Java - 22: Regex   FAQs Java - 23: JSON & XML   FAQs Java - 24: JMeter   80+ Java Code Quality Q&As    Code Quality - Automation   Code Quality - Code Coverage   Code Quality - FAQs   Code Quality - Profiling   Code Quality - Performance Test   Code Quality - Unit Testing    Code Quality - BDD   Code Quality ‚Äì Testing DAOs   Code Quality ‚Äì JUnit Spring   Code Quality ‚Äì JUnit Web   Code Quality - Spring TXN   150+ Java Coding Q&As    Coding - Can you write code?   Coding - Complete the code   Coding - Converting from A to B   Coding - Designing your classes   Coding - Data Structures    Coding - Arrays   Coding - Big O notation   Coding - Graph Structure   Coding - LinkedList Structure   Coding - Map Structure   Coding - Pointer Algorithms   Coding - Queue Structure   Coding - Searching Algo   Coding - Sorting Algo   Coding - Stack Structure   Coding - Tree structure   Coding - Data Which & Why   Coding - Passing the unit tests   Coding - What is wrong?   Coding - Home Assignments   Coding - Written Test Core Java   Coding - Written Test JEE 300+ Java Architect Interview Q&As  16+ Java Key Areas Q&As üî•    Key Area - Going places   Key Area - Ice Breaker   Key Area - Design Concepts   Key Area - Judging Experience   Key Area - Best Practices   Key Area - Concurrency Mgmt   Key Area - Low Latency   Key Area - CI/CD & DevOps   Key Area - Debugging    Key Area - Debug Hibernate   Key Area - Debug Java   Key Area - Debug JEE   Key Area - Debug Spark   Key Area - Debug Spring   Key Area - Design Patterns    Key Area - GoF Design   Key Area - JEE Design   Key Area - Exception Handling   Key Area - Memory Mgmt   Key Area - Performance   Key Area - Scalability   Key Area - SDLC   Key Area - Security   Key Area - Productivity Tools   Key Area - Transaction Mgmt   Key Area - QoS & SLAs   150+ Java Architect FAQs    Architecture - Patterns   Architecture - How to   Architecture - AWS   Architecture - Distributed   Architecture - Microservices   Architecture - QoS   Architecture - ERD   Architecture - ETL   Architecture - Low Latency   Architecture - UML 300+ Big Data Interview Q&As  300+ Big Data FAQs üî•    FAQs Data - 01: SQL   FAQs Data - 02: Data Modelling   FAQs Data - 02: Data Warehouse   FAQs Data - 03: Big Data   FAQs Data - 04: Hadoop (HDFS)   FAQs Data - 05: MapReduce   FAQs Data - 06: Hive   FAQs Data - 07: Impala   FAQs Data - 08: Spark   FAQs Data - 09: Spark SQL   FAQs Data - 10: Apache Kafka   FAQs Data - 11: Data Governance   FAQs Data - 11: NoSQL   FAQs Data - 12: Data security   FAQs Data - 13: Analytics & Science   FAQs Data - 14: AWS   FAQs Data - 15: Sqoop & Nifi   FAQs Data - 16: Yarn, Zookeeper   250+ Scala & Python FAQs    Python 100+ FAQs   Scala 140+ FAQs   Scala way of coding   Tutorials - Big Data    TUT - ‚èØ Starting Big Data   TUT - Starting Spark & Scala   TUT - Starting with Python   TUT - Kafka   TUT - Pig   TUT - Apache Storm   TUT - Spark Scala on Zeppelin   TUT - Cloudera   TUT - Cloudera on Docker   TUT - File Formats   TUT - Spark on Docker   TUT - Flume   TUT - Hadoop (HDFS)   TUT - HBase (NoSQL)   TUT - Hive (SQL)   TUT - Hadoop & Spark   TUT - MapReduce   TUT - Spark and Scala   TUT - Spark & Java   TUT - PySpark on Databricks   TUT - Zookeeper 800+ Java Interview Q&As  300+ Core Java Q&As    Core Java - Overview   Core Java - Data types   Core Java - Constructors   Core Java - Reserved Key Words   Core Java - Classes   Core Java - Objects   Core Java - OOP   Core Java - GC   Core Java - Generics   Core Java - FP   Core Java - OOP to FP   Core Java - I/O   Core Java - Multithreading   Core Java - Data Structures   Core Java - Annotations   Core Java - AOP   Core Java - Other   Core Java - Collection API   Core Java - Differences X & Y   Core Java - Event Driven   Core Java - Exceptions   Core Java - Java 7   Core Java - Java 8   Core Java - JVM   Core Java - Reactive Program   Core Java - Swing & AWT   Core Java - Understanding   300+ Enterprise Java Q&As    JEE - Overview   JEE - Web basics   JEE - Web Services   JEE - JPA   JEE - JTA   JEE - API Design   JEE - JDBC   JEE - Microservices   JEE - JMS   JEE - JMX   JEE - JNDI and LDAP   JEE - JSF   JEE - Other   150+ Java Frameworks Q&As    Framework - Hibernate Q&As   Framework - Spring Core   Framework - Spring MVC   Framework - Spring Cloud   Framework - Spring boot   Framework - Spring IO   Framework - Spring Config   120+ Companion Tech Q&As    Companion - Angular JS   Companion - Domain Knowledge   Companion - FIX   Companion - Git & SVN   Companion - Groovy   Companion - JavaScript   Companion - JMeter   Companion - Maven   Companion - NoSQL   Companion - Regex   Companion - SQL   Companion - Unix   Companion - JSON   Companion - XML   Companion - XSD   Companion - YAML   Tutorials - Enterprise Java    TUT - ‚èØ Starting with Java   TUT - Diagnosis   TUT - Akka    TUT - Akka Scala   TUT - Akka Java   TUT - AWS EC2   TUT - CI/CD Jenkins   TUT - Core Java    TUT - Debugging   TUT - Java 8   TUT - JSON and Java   TUT - Java Beginner   TUT - XML and Java   TUT - CSV and Java   TUT - Docker   TUT - JEE    TUT - Web & Web Services    TUT - REST Client   TUT - JSF   TUT - JDBC   TUT - FIX and Java   TUT - JAXB   TUT - JMX   TUT - JPA   TUT - MySQL   TUT - Scala    TUT - Scala Actors   TUT - Spring & Hibernate    TUT - Hibernate   TUT - Spring Basics   TUT - Spring batch   TUT - Hibernate & Spring   TUT - Spring Boot   TUT - Spring IO   TUT - Spring ORM   TUT - Spring other   TUT - Spring OXM   TUT - Spring Cloud   TUT - Tools    TUT - JMeter   TUT - Maven    TUT - Maven Assembly   TUT - Maven Profiles   TUT - Productivity Tools   TUT - Kubernetes   TUT - ‚èØ Videos    TUT - ‚èØ Starting with Java   TUT - ‚èØ Spring Core   TUT - ‚èØ Spring MVC   TUT - ‚èØ JDBC, Hibernate   TUT - ‚èØ Spring Boot   TUT - ‚èØ Angular with Spring   TUT - ‚èØ Q&As   TUT - Other    TUT - SQL   TUT - Drools   TUT - Apache POI   TUT - DOS   TUT - Dozer   TUT - ESB   TUT - Groovy   TUT - Jasper Reports   TUT - Logging and auditing   TUT - Metrics   TUT - Orika Mapping   TUT - Pentaho Kettle ETL   TUT - Unix   TUT - Webspeher MQ   TUT - YAML    Reviews... I am able to clear the tech interviews and started new job with a bank. I can definitely say that Java success played a major role in my success. --  Balakrishna D...I have cracked more than 10 companies and now i have joined Product based company... --  Naidu M"After landing a job I have kept on reading the book and recommend it to all my friends..."-- JavaRanch ForumDisclaimer The contents in this Java-Success are copyrighted and from EmpoweringTech pty ltd. The EmpoweringTech pty ltd has the right to correct or enhance the current content without any prior notice. These are general advice only, and one needs to take his/her own circumstances into consideration. The EmpoweringTech pty ltd will not be held liable for any damages caused or alleged to be caused either directly or indirectly by these materials and resources. Any trademarked names or labels used in this blog remain the property of their respective trademark owners. Links to external sites do not imply endorsement of the linked-to sites. Privacy Policy ¬© 2022 Java Interview Questions & Big Data interview questions    Responsive WordPress Theme powered by  CyberChimps  Top           