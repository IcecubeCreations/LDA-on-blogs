















Eventual Consistency in Microservices and My Front Yard: Event-Driven Architecture vs. REST - Solace
























































 



























Skip to Main Content






EN
CN
FR
DE
JP
KO
ES
PT


EnglishEN
中文 (Chinese) CN
Français (French) FR
Deutsch (German) DE
日本語 (Japanese) JP
한국어 (Korean) KO
Español (Spanish) ES
Português (Portuguese)PT


Search
Docs
Resources
Learn
Downloads
Careers
Contact Us
Search Solace…
Log In
Get PubSub+ for free
  
 





 




 

Products


PubSub+ Platform 
The complete event streaming and management platform for the real-time enterprise.
PubSub+ Platform, available as a service


EDA Platform
Build and manage an event mesh that integrates assets across your enterprise in real-time.


Event Broker
Stream information between applications and devices across clouds, datacenters and the Internet of Things.


Event Portal
Let architects, developers and stakeholders collaboratively create, manage and reuse events.


Plans and Pricing
From free software and low-cost cloud services to enterprise offerings that cost-effectively meet even the most extreme requirements.

Featured Video
Imagine your event mesh with Solace
Watch our demo


Solutions


Solutions
Harness the power of events to create new business value

empty

By Industry

Capital Markets
Retail Banking
Manufacturing
Transportation/Logistics
Retail
Aviation
Gaming
Telecom
Energy and Resources
Government


By Initiative

Event-Driven Architecture
Event Mesh
Hybrid Cloud
Microservices
Middleware
Event-Driven Integration
Internet Of Things
Payments Modernization
Connected Car
Decentralized Finance (DeFi)


By Technology

SAP
Boomi
Kafka
Kubernetes
VMware
Microsoft Azure
Amazon Web Services
Google Cloud Platform
IBM
TIBCO
Spring Framework
OpenShift






Company


Company
We make the event-driven architecture tooling relied on by many brands you know and love.
Connect with us Reviews
empty


About Us
What we do and why we do it.


Events
From live-streamed to in-person.


Careers
We’re hiring. Stay in the know.


Leadership
Our leadership team and board.


Blog
For software architects and developers.


News
Press releases and media mentions.


Information Security, Privacy, and Legal
One-stop shop for Solace legal information and documents.


Newsletter
Stay up-to-date with Solace technology and industry news with our monthly newsletter.





Partners


Partners
Meet your digital transformation goals by combining our tech with the expertise and tools of top SIs and technology providers.
Partner Login
empty


Partners
We partner with the world’s leading system integrators and technology innovators.


System Integrators
Accelerate and de-risk your deployment of Solace technology by working with expert consultants trained in our technology.


Technology Providers
Learn how we work with the leading providers of cloud, software and hardware offerings.



empty


Find a Partner
Find an SI or technology partner to accelerate your journey to EDA.


Become a Partner
Join our ecosystem of partners committed to helping enterprises become event-driven.


Education and Certification
Become an expert in event-driven systems and our technology, and demonstrate your expertise.





Customers
Developers


Developers
All the information and connections you need to achieve EDA success with Solace technology.
Follow us Watch us
empty

Getting Started


PubSub+ for Developers
Getting started for developers. Any platform, any language, open protocols and APIs.


Documentation
Everything you need to know to configure and use Solace products.



Learn More


API Tutorials
Learn the fundamentals to create apps with our Messaging and Management APIs.


Codelabs
Hands-on, step-by-step labs that demonstrate specific use-cases and integrations.


Free Courses
Online, at-your-pace training available to everyone, for free.



Join the Conversation


Solace Developer Community
Join our technical community for Solace PubSub+ and find the answer you’re searching for.


Events
From web streams to industry conferences, here’s where we’ll be in 2021.


Newsletter
Stay in-the-know with our monthly developer newsletter.







Get PubSub+ for Free
 Docs
Resources
Learn
Downloads
Careers
Contact Us
Search Solace…
Log In
Get PubSub+ for free
 

EnglishEN
中文 (Chinese) CN
Français (French) FR
Deutsch (German) DE
日本語 (Japanese) JP
한국어 (Korean) KO
Español (Spanish) ES
Português (Portuguese)PT


 
 
 
 










Eventual Consistency in Microservices and My Front Yard: Event-Driven Architecture vs. REST

 Jesse Menning|July 3, 2020








 















                   Subscribe Now!
                



 




Anyone who has ever done yard work as part of a team can understand the power of eventual consistency in microservices. This starts with understanding the fact that having multiple people work independently on specific tasks is the best way to complete a complex job, because the overall process doesn’t grind to a halt when something goes wrong with one task. While it might not be optimal for the rose bushes to remain untrimmed while everything else moves along, you know it – and therefore the whole job – will get done…eventually.
Aiming for eventual consistency in microservices works the same way: instead of insisting that microservices fire in a specific sequence and either complete or fail together, you let them run in parallel at their own speed, while making sure your architecture doesn’t let tasks fall through the cracks. If you have a solid, scalable architecture in place, you can be sure that eventually all the various tasks will be in the same (consistent) state of completion. This is in stark contrast from strong consistency, where all microservices operate under the same transaction and either commit or rollback at the same time.
Eventual consistency can take some getting used to, but it provides crucial flexibility in a world where many enterprises operate around the clock and rely on services that can’t be up and running 24/7. In the real world (and in microservices architecture) the concept of eventual consistency makes it easier to accommodate such systems and overcome obstacles.
You’ll face two key challenges when designing for eventual consistency:

You need a way to guarantee that nothing falls through the cracks, leaving some tasks done and some others permanently undone. Nothing looks worse than a yard with half-completed projects.
When things go wrong, you need a way to either resolve the problem right away or move on and try again later.

How do you overcome these two challenges? In microservices and yardwork alike, it’s all about communication.
REST vs. Microservices for Error Handling
Your successful implementation of eventual consistency in microservices largely depends on how your microservices interact with each other. In the microservices world, many organizations rely on synchronous, one-to-one interaction style, with one microservice directly calling another, usually via REST
Synchronous communication is simple and straightforward because you know exactly what will happen, in what order, and who is talking to whom—microservice A talks to microservice B, it’s right there in the code. However, REST struggles in a couple key areas:

First, REST doesn’t participate in transactions, so multiple microservices typically need to participate in a single XA transaction.
Secondly, REST doesn’t persist incoming messages. If something goes wrong, it can’t help you restore order. If things really go wrong, you could lose crucial information.

Since microservices don’t usually store state either, that lack of persistence is a challenging problem to overcome. In theory, it’s easy to implement a chain of synchronous tasks –each task leads immediately into the next task. But when something unexpected happens, watch out.
The Architect's Guide to Building a Responsive, Elastic and Resilient EnvironmentSr. Architect Jonathan Schabowsky addresses the challenges of microservices architecture and shares his perspective on the modern messaging integration patterns architects can leverage.Download Now
The other choice is to connect microservices asynchronously through an event-based architecture. Rather than having microservices directly interact with one another, Microservice A publishes an event to an event broker. The event broker then takes the event and distributes copies to individual queues watched by other interested microservices. Microservice B (and possibly C, D and E) pick up their copy of the event and do their thing.
Here’s how an event broker simplifies eventual consistency, and error handling in general:

By saving messages to disk and storing them until they’re no longer needed, an event broker relieves microservices of the need to persistent messages themselves.
In case of a disaster, event brokers can ensure that copies of your events exist in a failover data center for business continuity with no risk of lost information.
If one microservice goes down (because it runs out of memory, for example), another instance of that microservice can retrieve the same message from the queue.
Event brokers track who has successfully consumed each message, how many times each message has failed, and more. This makes error handling easy without the need to create long running transactions.
Event brokers always deliver events in the order in which they are received, which is important because some microservices need to operate on a first-come first-served basis.

To revisit my yardwork example, supervisor lead landscaping crews and won’t let each worker forget what they’re supposed to do as part of making your yard look more inviting. If some tasks aren’t getting done, you can be sure this supervisor will remind the lagging workers to wrap things up and take action if there’s some reason things aren’t happening.
Eventual Consistency, Error Handling, and my Front Yard
Sticking with that example, let’s analyze two approaches: RESTful and event-driven. First, let me explain the situation and the tasks (microservices) that needed to be completed.
Earlier this year, I sent a desperate email to my local garden center, appropriately entitled “Ugly Area by Front Step”. As I mentioned, the state of our front yard justifiably concerned my partner, because it looked like squatters were occupying our home. The reply from the garden center indicated they were shocked and dismayed by the images I had attached:

As a proud homeowner, I resolved to get things back on track, which in my mind involved three tasks:
1) repair the sprinkler system
2) spread mulch over everything dead, and
3) plant the world’s most vigorous plants.
It’s important to remember that a half-done job would look worse than if I had never started—it might take some time, but it all had to get done eventually.
In the meantime, the world had taken a turn for the worse; with the emergence of COVID-19, making a trip to the local garden store was no longer an option. This meant it would take longer for supplies to arrive, if they showed up at all. That threatened the entire project.
The RESTful approach to lawn maintenance
Let’s take some liberties and call my front yard situation a use case called “Fix Front Yard” and decompose my lawn maintenance into three distinct microservices called RepairSprinkler, SpreadMulch, PlantVigorousPlants, tied together into a front yard service called Do work. Like many enterprises, let’s link them together synchronously, like they would be with REST.

Imagine this scenario: In a stroke of luck, I’m able to successfully repair the sprinkler and spread the mulch. But then my luck then runs out. Border restrictions prevent all pachysandra plants (considered by many to be unkillable) from making it across the border. In the real world, the lawn threatens to remain permanently “half done.” In the microservice world, we’ve made our enterprise “inconsistent”.
Fighting back from an inconsistent state in a synchronous enterprise is a challenge. Here are a couple options:

Two-phase commit / XA transaction
Introduce local state logic and custom coding failure compensation
Return an exception back to the user
Wait for it to resolve itself, try again
Disaster ensues, events are lost

Let’s look at a couple of these in detail:
Two-Phase Commit Spanning Across Multiple Microservices
Some architects select a two-phase commit (XA transaction) that spans multiple microservices, in turn spanning databases and/or transaction monitors. For good reason, microservice dogma advocates avoiding two-phase commits for two reasons: First, even on a local network, they’re slow, which is death for the modern enterprise. Second, they add complexity to the implementation and can hold threads and connections open for extended periods of time.
In our lawn example, having a transaction span all three microservices means that the “exception” within PlantVigorousPlants, forces both RepairSprinkler and SpreadMulch to “roll back” their work. This is challenging and counterproductive: it is hard to remove mulch and why would you break the irrigation system again? But to establish strong consistency, that’s what it takes.

Local State Logic and Custom Coding
As an alternative to using two-phase commit, some architects choose to roll back changes by introducing local state logic and custom coding failure compensation. This again flies in the face of the microservice dogma that microservices should be stateless, and it may not even be possible if the exception scenario means you can’t reach a database or disk.
Returning an Exception & Idempotence
Another approach would be to keep the sprinkler repaired and the dead stuff mulched, but return an exception back to the user of “Do Work” indicating that the plants weren’t available so try again later. This approach works only if all the services are “idempotent”. In other words, the services can be re-run multiple times with the same result. If RepairSprinkler and SpreadMulch aren’t idempotent, then you’ll douse the sprinkler pipe with PVC glue and stack the mulch up to the roof line. It better be idempotent.
Even if you can finagle the necessary error handling, the elegance of your microservice architecture takes a major hit with a RESTful approach. Implementing complex error handling distracts coders from the business logic that should be at the core of a microservice. Instead of having a single purpose, the microservice needs to include logic about what service to call next and what to do if that service fails (or a service three down the line).
There’s gotta be a better way to fix a yard!
The Event-Driven Approach to Lawn Maintenance
Let’s keep the three distinct yard care microservices, but instead of tightly coupling them, let’s have them process asynchronously, as they’d be with event-driven architecture. The “Do Work” service still receives a REST request, but instead of initiating a chain of synchronous REST calls, it publishes an event to an event broker.

Rather than a brittle chain of microservices, each microservice now looks at the event and says “Ahhh, I know how I can help that situation.” However, once again, I complete the sprinkler repair and the mulching in short order, but the border holds up my unkillable plants, leaving the final stage of the project incomplete. Since the event broker handles state and persistence, we can leverage eventual consistency in microservices in this example. The event broker simply stores failed jobs, waiting for new inventory to arrive. This resolves several of the challenges with our REST example:

There isn’t a need for two-phase commit (XA transaction) that spans across multiple microservices. Eventual consistency, enabled by the event broker, assures that all of the tasks will be completed… eventually.
Instead of local state logic and custom coding failure compensation that must address multiple failure scenarios from downstream microservices, event-driven architecture insulates each microservice’s error handling. The SpreadMulch microservice takes care of mulching. The RepairSprinkler microservice takes care of the sprinkler. No need to keep state around within the microservice or include complex error handling that distracts from business purposes.
If there’s an error that may resolve itself shortly, throw the event on a queue until you’re ready to try again. Safe and sound. The microservice than can complete and release the thread. Eventually the microservice can retry it, hopefully with more success.
In a disaster, if you’ve used the disaster recovery options available from your broker (you did, right?) then the event broker replicates the events across data centers and are ready to go when you are.

Eventual Consistency in Microservices Makes Error Handling and Disaster Recovery Much Easier
As I said before, in domestic life and in microservices, communication makes all the difference. REST complicates error handling, and in the worst cases loses messages. That makes a post-apocalyptic front yard pale in comparison. Meanwhile, event-driven architecture eases you into a world of eventual consistency in microservices, which can make your error handing and disaster recovery much easier.
And if you’re wondering, my front yard is not yet suburban perfection, but it’s definitely getting better. I think our first post-COVID dinner party will be a roaring success.

      Array
(
    [117] => Array
        (
            [name] => Jesse Menning
            [picture] => 
            [bio] => As an architect in Solace’s Office of the CTO, Jesse helps organizations of all kinds design integration systems that take advantage of event-driven architecture and microservices to deliver amazing performance, robustness, and scalability. Prior to his tenure with Solace, Jesse was an independent consultant who helped companies design application infrastructure and middleware systems around IBM products like MQ, WebSphere, DataPower Gateway, Application Connect Enterprise and Transformation Extender.
Jesse holds a BA from Hope College and a masters from the University of Michigan, and has achieved certification with both Boomi and Mulesoft technologies. When he’s not designing the fastest, most robust, most scalable enterprise computing systems in the world, Jesse enjoys playing hockey, skiing and swimming.

            [position] => 
            [url] => https://solace.com/blog/author/jessemenning/
        )

)
    




Jesse Menning

As an architect in Solace’s Office of the CTO, Jesse helps organizations of all kinds design integration systems that take advantage of event-driven architecture and microservices to deliver amazing performance, robustness, and scalability. Prior to his tenure with Solace, Jesse was an independent consultant who helped companies design application infrastructure and middleware systems around IBM products like MQ, WebSphere, DataPower Gateway, Application Connect Enterprise and Transformation Extender.
Jesse holds a BA from Hope College and a masters from the University of Michigan, and has achieved certification with both Boomi and Mulesoft technologies. When he’s not designing the fastest, most robust, most scalable enterprise computing systems in the world, Jesse enjoys playing hockey, skiing and swimming.

See all posts written by Jesse Menning





























Subscribe to Our Blog
                        Get the latest trends, solutions, and insights into the event-driven future every week.
                    


By submitting this form, you agree to Solace’s privacy policy: solace.com/privacy-policy/
Thanks for subscribing.














Related Reading











REST vs Messaging for Microservices - Which One is Best?
Microservices are extremely popular these days, and for good reason. They provide a blueprint that


Learn more













Microservices Choreography vs Orchestration: The Benefits of Choreography
Microservices architecture — a software design paradigm in which an application and business use case


Learn more













Why Microservices Visualization is the Google Maps of Your Microservices Architecture
Have you ever spent weeks planning a road trip down to the last detail, only


Learn more













Six + 1 Steps to Implement Event-Driven Architecture
Implementing event-driven architecture (EDA) is a journey; and like all journeys, it begins with a


Learn more













Bringing Asynchronous Messaging to a RESTful world with Solace and Apigee
In order to demonstrate the power of combining traditional API management concepts and technologies with


Learn more













Why RESTful APIs Can’t Compete with the Event-Driven Approach to Microservices
Can RESTful APIs with microservices deliver when it comes to the critical real-time customer experience?


Learn more













AsyncAPI Code Generation: Microservices Using Spring Cloud Stream
Code generation is no simple feat. There are a lot of complexities when it comes


Learn more













A Guide for the Developer’s Journey to Event-Driven Development
After almost a year working in the world of event-driven architecture and development – and


Learn more













Comparing event streaming platforms and technologies for event-driven architecture
We often get asked how Solace PubSub+ compares with alternative event streaming platforms and other


Learn more













How to Automate Your Microservices Deployment Strategy
Microservices architecture breaks up monolithic applications into independent, isolated services. With that freedom comes the


Learn more













Unlocking the Potential of Event-Driven Microservices with a Unified Microservices Platform
One of the architects on my team named Jesse Menning just put to paper a


Learn more



















Get the guide read by tens of thousands of architects
Event-Driven Microservices: The Architect’s Guide to Building a Responsive, Elastic and Resilient Microservices Architecture
Download now


 
 
 




Back to top














Facebook







Linked In







Twitter







Youtube







Instagram







Github













Products

PubSub+ Platform
PubSub+ Event Broker
PubSub+ Event Portal
PubSub+ Mission Control
PubSub+ Insights
APIs & Protocols
Connector Hub








Facebook





Linked In





Twitter





Youtube





Instagram





Github












Company

Careers
Leadership
Customers
Partners
Events
Information Security, Privacy and Legal
Press Center


 

Developers

Docs
API Tutorials
Dev Portal
Codelabs
Free Courses
Blog
Community


 



Support


Contact


Log In







Newsletter Signup
Stay in-the-know and sign up to receive updates from Solace by choosing from our two monthly newsletters: The Solace Stream and Solly’s Developer Update. 
Learn more
 													Thanks for subscribing! We hope you enjoy the content we send
your way, and please let us know if you have any suggestions.
 










EnglishEN
中文 (Chinese) CN
Français (French) FR
Deutsch (German) DE
日本語 (Japanese) JP
한국어 (Korean) KO
Español (Spanish) ES
Português (Portuguese)PT






© 2022 Solace

Information Security, Privacy and Legal
Sitemap
 




 








Search for:




 Search 





 





















 





















