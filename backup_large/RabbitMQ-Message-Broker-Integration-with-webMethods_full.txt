RabbitMQ Message Broker Integration with webMethods        Kellton     ServicesExperience Engineering, Product & DesignExperience Engineering, Product & Design Experience Engineering Product Strategy Product Design Tech Advisory and Consulting Product EngineeringProduct Engineering Digital Application Development Application Transformation Product Operations Cloud API Driven Development DigiNextDigiNext Blockchain IoT Automation Data Engineering and AIData Engineering and AI Data Engineering AI & ML Data Visualization & Analytics Agile EnterpriseAgile Enterprise SAP Applications Enterprise Modernization Infrastructure Managed Services  TechnologiesTECHNOLOGIESTECHNOLOGIES API Management Apigee MuleSoft Software AG Back End Cloud CMS DevOps Enterprise Automation Automation Anywhere Workato Front End Hybrid Integration Dell Boomi Jitterbit MuleSoft Software AG IBM Mobility SAP Stacks  Software AGLearn More IoTLearn More  Platforms & ProductsPLATFORMS & PRODUCTSPLATFORMS & PRODUCTS Kellton4Media KLGAME Optima tHRive  OptimaLearn More  IndustriesIndustriesIndustries Banking and Financial Services Chemicals Distribution Education Energy & Utilites Food & Beverage Healthcare Independent Software Vendor Insurance Manufacturing Media Entertainment Non Profits Oil and Gas Real Estate Retail & E-commerce Travel Tourism & Hospitality  Retail and E-commerceLearn More Travel, Tourism and HospitalityLearn More  InsightsInsightsInsights Blogs Brochures Success Stories Infographics News / Announcements Videos Webinars Whitepapers  VideosWatch More Latest BlogsLearn More  AboutAboutAbout About Us Careers Contact Us Core Principles Event Calendar Investors Our History Our Leadership Our Partners Our Vision Testimonials  TestimonialsLearn More Contact UsLearn More   SearchSearch Enter the terms you wish to search for.       How to Integrate RabbitMQ with webMethods? January 14th , 2019Posted ByNageswara Reddy Chintakuntla Insights Blogs Brochures Success Stories Infographics News / Announcements Videos Webinars Whitepapers RabbitMQ, a message broker, is enterprise-level message-queuing software. It’s equipped with multiple features for reliable delivery, routing, and federation to cater to extensible business requirements beyond the throughput. RabbitMQ currently powers 35000+ projects for startups and large enterprises. The fact that it can implement AMQP, an open wire protocol for messaging with powerful routing features, is what makes RabbitMQ highly popular for an open-source messaging queuing broker. It’s one of the earliest enterprise-grade messaging software to achieve quality compliance in terms of features, dev tools, client libraries, and quality documentation.Java has always had messaging standards like JMS. However, it was a pain to find the right message broker for non-Java applications, which had distributed messaging, but limited to integration scenarios, monolithic or microservices. With the advent of AMQP, cross-language flexibility has become feasible for open-source message brokers. Guide: RabbitMQ Message Broker Integration with Software AG's webMethodsRabbitMQ can be integrated into webMethods using Java Client programs. Here is a step-by-step guide to performing smooth integration.Technologies usedwebMethods Integration Server 9.XRabbitMQ Server Version 3.7.4 with Erlang 20.3Jar files to place in Integration Server classpath (rabbitmq-client.jar & amqp-client-5.5.1.jar)Once both webMethods Integration Server and RabbitMQ Server are installed, consumers on the Queue need to be created to listen to the messages from RabbitMQ and invoke flow service by passing data received in message payload to perform business logic in the flow service.Receiving messages from RabbitMQFollowing are the steps to perform successful RabbitMQ integration with Java service:Step 1: Create RabbitMQ ConnectionWe need to create connection to RabbitMQ for receiving messages from RabbitMQ to webMethods.com.rabbitmq.client.ConnectionFactory factory = new com.rabbitmq.client.ConnectionFactory();                        factory.setHost("localhost");factory.setUsername("Guest");factory.setPassword("Guest");factory.setPort(5672);Connection connection = factory.newConnection();Step 2: Create ChannelChannel channel = connection.createChannel();channel.queueDeclare("RMQ_Out_Queue", true, false, false, null);Step 3: Create ConsumerConsumer consumer = new DefaultConsumer(channel) {@Overridepublic void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)throws IOException {String message = new String(body, "UTF-8");String headers = properties.getHeaders().toString();};channel.basicConsume("RMQ_Out_Queue",true,consumer);Step 4: Invoke flow service by passing inputs from Receive Client code                        NSName nsName = NSName.create( "RabbitMQTest.services:printMessage" );com.wm.app.b2b.server.User user = com.wm.app.b2b.server.UserManager.getUser("Administrator");Session s = StateManager.createContext(0x7fffffffL, "system", user);s.setUser(user);s.clearModified();Service.doThreadInvoke("RabbitMQTest.services","printMessage", s, idata);StateManager.deleteContext(s.getSessionID());Step 5: Implement flow service The flow service can perform actual business logic with the inputs passed from the received java client program. Step 6: Publish message from RabbitMQOnce the consumer is created for the queue from the Java client program, publish message on the same queue. Step 7: Once the message is published successfully in RabbitMQ, the consumer created by the received java client program gets the message and passes it to the flow service. You can see the debug message printed in Server logs of Integration Server as shown below.Send messages to RabbitMQStep 1: Create RabbitMQ ConnectionWe need to create connection to RabbitMQ for receiving messages from webMethods to RabbitMQ.com.rabbitmq.client.ConnectionFactory factory = new com.rabbitmq.client.ConnectionFactory();                        factory.setHost("localhost");factory.setUsername("Guest");factory.setPassword("Guest");factory.setPort(5672);Connection connection = factory.newConnection();Step 2: Create ChannelChannel channel = connection.createChannel();channel.queueDeclare("RMQ_In_Queue", true, false, false, null);Step 3: Publish MessageString message = "Hello!! this message is from webMethods.";channel.basicPublish("", "RMQ_In_Queue", new AMQP.BasicProperties.Builder().headers(headers).build(), message.getBytes("UTF-8"));Once you run the Send client program successfully, you can see the message being sent to queue in RabbitMQ.Complete Java Client code    Receiver Client Code:package RabbitMQTest.client;import com.wm.data.*;import com.wm.util.Values;import com.wm.app.b2b.server.Service;import com.wm.app.b2b.server.ServiceException;import com.wm.app.b2b.server.Session;import com.wm.app.b2b.server.StateManager;import com.wm.lang.ns.NSName;import com.rabbitmq.client.*;import java.io.IOException;import java.util.HashMap;import java.util.Map;import com.rabbitmq.client.AMQP;import com.rabbitmq.client.AMQP.Connection;import com.rabbitmq.client.Channel;import com.wm.util.JournalLogger;public final class receiveMessage_SVC{    /**      * The primary method for the Java service     *     * @param pipeline     *            The IData pipeline     * @throws ServiceException     */    public static final void receiveMessage(IData pipeline) throws ServiceException {        String log="";        String MsgFromQueue = "";        String queueName = "RMQ_Out_Queue";        try{            com.rabbitmq.client.ConnectionFactory factory = new com.rabbitmq.client.ConnectionFactory();                    factory.setHost("localhost");            factory.setUsername("Guest");            factory.setPassword("Guest");            factory.setPort(5672);            com.rabbitmq.client.Connection connection = factory.newConnection();                    Channel channel = connection.createChannel();            channel.queueDeclare(queueName, true, false, false, null);                    JournalLogger.log(4, JournalLogger.FAC_FLOW_SVC, JournalLogger.DEBUG,"function", "[**] Waiting for messages [**]");            Consumer consumer = new DefaultConsumer(channel) {                @Override                public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)                        throws IOException {                    String message = new String(body, "UTF-8");                    String headers = properties.getHeaders().toString();                            JournalLogger.log(4, JournalLogger.FAC_FLOW_SVC, JournalLogger.DEBUG,"function", message);                     IData idata = new IDataFactory().create();                    IDataCursor idc = idata.getCursor();                    IDataUtil.put(idc, "jsonString", headers+"::"+message);                    IData pipelineIn = IDataUtil.clone(idata);                    JournalLogger.log(4, JournalLogger.FAC_FLOW_SVC, JournalLogger.DEBUG,"@@@@", "Before calling service.doInvoke()");                    try {                        NSName nsName = NSName.create( "RabbitMQTest.services:printMessage" );                        com.wm.app.b2b.server.User user = com.wm.app.b2b.server.UserManager.getUser("Administrator");                        Session s = StateManager.createContext(0x7fffffffL, "system", user);                        s.setUser(user);                        s.clearModified();                                Service.doThreadInvoke("RabbitMQTest.services","printMessage", s, idata);                        StateManager.deleteContext(s.getSessionID());                        JournalLogger.log(4, JournalLogger.FAC_FLOW_SVC, JournalLogger.DEBUG,"@@@@", "After calling Service.doInvoke()");                    } catch (Exception e)                     {                        JournalLogger.log(4, JournalLogger.FAC_FLOW_SVC, JournalLogger.DEBUG,"*** EXCEPTION***", e.toString());                        e.printStackTrace();                    }                }            };            channel.basicConsume(queueName,true,consumer);                        log = "Consumer created Successfully for RabbitMQ Queue";            IDataCursor pipelineCursor = pipeline.getCursor();            IDataUtil.put( pipelineCursor, "message",log );            pipelineCursor.destroy();        }        catch(Exception e){            IDataCursor pipelineCursor = pipeline.getCursor();            IDataUtil.put( pipelineCursor, "Error", e.getStackTrace());            IDataUtil.put( pipelineCursor, "log-levl", log);            pipelineCursor.destroy();        }                }        // --- <<IS-BEGIN-SHARED-SOURCE-AREA>> ---                // --- <<IS-END-SHARED-SOURCE-AREA>> ---    /**     * The service implementations given below are read-only and show only the     * method definitions and not the complete implementation.     */    public static final void sendMessage(IData pipeline) throws ServiceException {    }    final static receiveMessage_SVC _instance = new receiveMessage_SVC();    static receiveMessage_SVC _newInstance() { return new receiveMessage_SVC(); }    static receiveMessage_SVC _cast(Object o) { return (receiveMessage_SVC)o; }}  Sender Client Code:  package RabbitMQTest.client;import com.wm.data.*;import com.wm.util.Values;import com.wm.app.b2b.server.Service;import com.wm.app.b2b.server.ServiceException;import com.wm.app.b2b.server.Session;import com.wm.app.b2b.server.StateManager;import com.wm.lang.ns.NSName;import com.rabbitmq.client.*;import java.io.IOException;import java.util.HashMap;import java.util.Map;import com.rabbitmq.client.AMQP;import com.rabbitmq.client.AMQP.Connection;import com.rabbitmq.client.Channel;import com.wm.util.JournalLogger;public final class sendMessage_SVC{    /**      * The primary method for the Java service     *     * @param pipeline     *            The IData pipeline     * @throws ServiceException     */    public static final void sendMessage(IData pipeline) throws ServiceException {        String queueName = "RMQ_In_Queue";        try{            com.rabbitmq.client.ConnectionFactory factory = new com.rabbitmq.client.ConnectionFactory();            factory.setHost("localhost");            factory.setUsername("Guest");            factory.setPassword("Guest");            factory.setPort(5672);            com.rabbitmq.client.Connection connection = factory.newConnection();            Map<String, Object> headers = new HashMap<String, Object>();            headers.put("ID",  12345);            headers.put("Name", "Kellton");            Channel channel = connection.createChannel();            channel.queueDeclare(queueName, true, false, false, null);            String message = "Hello!! this message is from webMethods.";            channel.basicPublish("", queueName, new AMQP.BasicProperties.Builder().headers(headers).build(), message.getBytes("UTF-8"));            channel.close();            connection.close();                    IDataCursor pipelineCursor = pipeline.getCursor();            IDataUtil.put( pipelineCursor, "message", "Message Sent To RabbitMQ Successfully !" );            pipelineCursor.destroy();        }        catch(Exception e){            IDataCursor pipelineCursor = pipeline.getCursor();            IDataUtil.put( pipelineCursor, "Error", e.getLocalizedMessage() );            IDataUtil.put( pipelineCursor, "StackTrace", e.getStackTrace() );            IDataUtil.put( pipelineCursor, "ErrorString", e.toString());            pipelineCursor.destroy();        }                }        // --- <<IS-BEGIN-SHARED-SOURCE-AREA>> ---                // --- <<IS-END-SHARED-SOURCE-AREA>> ---    /**     * The service implementations given below are read-only and show only the     * method definitions and not the complete implementation.     */    public static final void receiveMessage(IData pipeline) throws ServiceException {    }    final static sendMessage_SVC _instance = new sendMessage_SVC();    static sendMessage_SVC _newInstance() { return new sendMessage_SVC(); }    static sendMessage_SVC _cast(Object o) { return (sendMessage_SVC)o; }} Related Blogs Back to Main APIs, Applications, and Microservices Integration: Three Pillars to a Digital TransformationApril 05th , 2022The ongoing global crisis triggered by the COVID-19 pandemic has had a disruptive impact on the global industrial landscRead More 7 Best IoT Platforms Preferred by Businesses in 2022March 24th , 2022The market for the Internet of Things (IoT) platforms is evolving.Read More How Triggers, Conditions, and Actions Perform in Workato Enterprise Automation Platform?February 25th , 2021Workato is a modern enterprise automation platform that facilitates the integration of different business applications, includingRead More Jitterbit Citizen Integrator – Meaning, Significance, and Enterprise BenefitsNovember 18th , 2020OverviewRead More Boomi Molecule: The Dilemma of Maintaining Operational Capacity at Low Costs and The Solution to ItNovember 11th , 2020In a traditional on-premise integration development lifecycle, the emphasis is primarily put on the functional requirementsRead More Understanding the Key Components of Web Control Room in Automation Anywhere Platform: A Complete OverviewSeptember 23rd , 2020An early manifesto of automation includes simple tasks with creating macros and commands that could be saved and recalled wiRead More Automation Anywhere for RPA: Things You Should Know to Master Disruptive PerformanceSeptember 04th , 2020Automation is one of the fundamental disruptive technology forces that drives success and growth in the contemporary business environment.Read More Scaling MuleSoft Runtime Fabric (RTF): Objective, Implementation, and Key ConsiderationsAugust 21st , 2020Organizations leveraging MuleSoft solutions, when scaling MuleSoft Runtime Fabric (RTF), deal with several high-level yet conflicting customer requirements.Read More Top 5 Considerations for Your Hybrid Integration Strategy April 23rd , 2020Enterprises worldwide are busy forging hybrid integration strategies to build technology-led capabilities and maximize theRead More Unified API Management Rules in the Age of Extreme ConnectivitySeptember 12th , 2019Leveraging APIs to venture into new business models is standard practice in today’s digital economy. APIs allow users to access enterprise assets in a consumable way and facilitate user connectivity on the fly.Read More ESB Evaluation: Tackling the Devil in the Details and Treading the Path to SuccessJune 26th , 2019There is a notion catching up in the business circuit lately.Read More Role of EDI: Myths and Facts DemystifiedJune 25th , 2019Born in the second era of Information Technology, EDI (Electronic Data Interchange) is playing an incremental role in the age of digital transformation.Read More API Security Design Patterns: Protect Your APIsJune 04th , 2019Leaky Application Programming Interfaces (APIs) have harmed a number of businesses, including Google and Amazon, in terms of trust, data, and reputation.Read More Explained: How to Integrate Log4J2 with webMethods? May 07th , 2019Log4J is a Java-based framework that can be integrated with various platforms and used for custom logging purposes.Read More Software AG’s Apama Integration with Social Media for Building Data IntelligenceMarch 05th , 2019Social Media generates a wealth of data each day. Twitter generates over 500 million tweets every 24 hours.Read More Why Should Companies Bank on OAuth Frameworks to Fortify their API Servers? December 20th , 2018Connectivity and convergence are what the quintessential technologies such as the Internet of Things (IoT) have fretted into this digital-driven worldRead More 4 Approaches to Extending Your Digital Business Platform with DevOps for Infrastructure AgilityNovember 27th , 2018In today’s disruptive business economy, enterprises are increasingly poking holes into silos and integrating digital to automate and innovate their IT landscapes.Read More 5 Reasons Why You Should Use Cumulocity IoTNovember 12th , 2018The Internet of Things (IoT) is a moment of truth for transformative enterprises. Read More Software AG Cumulocity IoT: Three-phase Approach to the Internet of ThingsSeptember 19th , 2018 
We all are using the Internet of Things in our daily lives, though inadvertently.Read More A 20-step Guide to Choosing a Suitable IoT PlatformJanuary 11th , 2018To solve this confusion, we’ve curated a complete guide on what Internet of Things (IoT) platforms are, their types, and things organizations must keep in mind while choosing one.Read More   Request a CallbackRequest a CallbackCall Now:+1844 469 8900 +9124 469 8900  +353.76.604.2716 Country Code  Phone No  Math question 13 + 3 =  Solve this simple math problem and enter the result. E.g. for 1+3, enter 4.Request Callback Live chat QUICK ENQUIRYQuick Enquiry Form Name  Your Email  Message I have read Kellton's Privacy Policy and agree to the terms and conditions. Math question 2 + 0 =  Solve this simple math problem and enter the result. E.g. for 1+3, enter 4.Submit Enquiry LinkedInTwitterFacebookYoutube  Call Us Here:North America: +1.844.469.8900Asia: +91.124.469.8900Europe: +353.76.604.2716Email: ask@kelltontech.com    Footer menu left Services Technologies Digital Transformation Platform & Products Insights About Footer menu right Careers Contact Us News Privacy Policy Newsletter Signup Cookie Policy Newsletter subscription  I agree to signup to get the latest news, blogs, whitepapers and Insights.By clicking, you agree that we may process your information in accordance with our Privacy Policy.Subscribe © 2022 Kellton Tech    