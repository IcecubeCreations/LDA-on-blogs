









Advantages and Disadvantages of Kafka - DataFlair















































 










Skip to content


  













Search for:



 

Blogs
Data Science Tutorials
Python Tutorials
Big Data Tutorials
Hadoop Tutorials
Spark Tutorials
R Tutorials
Machine Learning Tutorials
 








        
Blog Home
Data Science

Data Science Tutorials
Machine Learning Tutorials
Big Data

Big Data Tutorials
Hadoop Ecosystem Tutorials
Apache Spark Tutorials
Apache Flink Tutorials
Apache Kafka Tutorials


Python Tutorials

Python Tutorials
TensorFlow Tutorials
Pandas Tutorials
Django Tutorials


BI Tutorials

Tableau Tutorials
Power BI Tutorials
QlikView Tutorials
Qlik Sense Tutorials
SAP HANA Tutorials


SQL & NoSQL

SQL Tutorials
Cassandra Tutorials
MongoDB Tutorials


IoT Tutorials
R Tutorials
SAS Tutorials
AI Tutorials


Categories

Programming

C Tutorials
Scala Tutorials
Java Tutorials
Spring Tutorials


Cloud

Cloud Computing Tutorials
AWS Tutorials


Android Tutorials
Blockchain Tutorials
Linux Tutorials
JavaScript Tutorials
AngularJS Tutorials


Free Courses
 






Search for:












   











Apache Kafka Tutorials
2















Advantages and Disadvantages of Kafka





Free Kafka course with real-time projects Start Now!!
In our last Kafka Tutorial, we discussed Books for Kafka. Today, we will discuss the Advantages and Disadvantages of Kafka. Because, it is very important to know the limitations of any technology before using it, same in case of advantages. 
So, let’s discuss Kafka Advantage and Disadvantage in detail.
Advantages of Kafka
So, here we are listing out some of the advantages of Kafka. Basically, these Kafka advantages are making Kafka ideal for our data lake implementation. So, let’s start learning advantages of Kafka in detail:
Kafka Pros and Cons – Kafka Advantages
a. High-throughput
Without having not so large hardware, Kafka is capable of handling high-velocity and high-volume data. Also, able to support message throughput of thousands of messages per second. 
b. Low Latency
It is capable of handling these messages with the very low latency of the range of milliseconds, demanded by most of the new use cases. 
c. Fault-Tolerant
One of the best advantages is Fault Tolerance. There is an inherent capability in Kafka, to be resistant to node/machine failure within a cluster. 
d. Durability
Here, durability refers to the persistence of data/messages on disk. Also, messages replication is one of the reasons behind durability, hence messages are never lost.
e. Scalability
Without incurring any downtime on the fly by adding additional nodes, Kafka can be scaled-out. Moreover, inside the Kafka cluster, the message handling is fully transparent and these are seamless. 
f. Distributed
The distributed architecture of Kafka makes it scalable using capabilities like replication and partitioning. 
g. Message Broker Capabilities
Kafka tends to work very well as a replacement for a more traditional message broker. Here, a message broker refers to an intermediary program, which translates messages from the formal messaging protocol of the publisher to the formal messaging protocol of the receiver. 
h. High Concurrency
Kafka is able to handle thousands of messages per second and that too in low latency conditions with high throughput. In addition, it permits the reading and writing of messages into it at high concurrency.
i. By Default Persistent
As we discussed above that the messages are persistent, that makes it durable and reliable. 
j. Consumer Friendly
It is possible to integrate with the variety of consumers using Kafka. The best part of Kafka is, it can behave or act differently according to the consumer, that it integrates with because each customer has a different ability to handle these messages, coming out of Kafka. Moreover, Kafka can integrate well with a variety of consumers written in a variety of languages. 
k. Batch Handling Capable (ETL like functionality)
Kafka could also be employed for batch-like use cases and can also do the work of a traditional ETL, due to its capability of persists messages.
l. Variety of Use Cases
It is able to manage the variety of use cases commonly required for a Data Lake. For Example log aggregation, web activity tracking, and so on. 
m. Real-Time Handling
Kafka can handle real-time data pipeline. Since we need to find a technology piece to handle real-time messages from applications, it is one of the core reasons for Kafka as our choice.


Stay updated with latest technology trends
Join DataFlair on Telegram!!
Disadvantages of Kafka
Cons of Kafka – Apache Kafka Disadvantages
It is good to know Kafka’s limitations even if its advantages appear more prominent then its disadvantages. However, consider it only when advantages are too compelling to omit. 
Here is one more condition that some disadvantages might be more relevant for a particular use case but not really linked to ours. So, here we are listing out some of the disadvantage associated with Kafka:
a. No Complete Set of Monitoring Tools
It is seen that it lacks a full set of management and monitoring tools. Hence, enterprise support staff felt anxious or fearful about choosing Kafka and supporting it in the long run.
b. Issues with Message Tweaking
As we know, the broker uses certain system calls to deliver messages to the consumer. However, Kafka’s performance reduces significantly if the message needs some tweaking. So, it can perform quite well if the message is unchanged because it uses the capabilities of the system.
c. Not support wildcard topic selection
There is an issue that Kafka only matches the exact topic name, that means it does not support wildcard topic selection. Because that makes it incapable of addressing certain use cases.
d. Lack of Pace
There can be a problem because of the lack of pace, while API’s which are needed by other languages are maintained by different individuals and corporates.
e. Reduces Performance
In general, there are no issues with the individual message size. However, the brokers and consumers start compressing these messages as the size increases. Due to this, when decompressed, the node memory gets slowly used. Also, compress happens when the data flow in the pipeline. It affects throughput and also performance.
f. Behaves Clumsy
Sometimes, it starts behaving a bit clumsy and slow, when the number of queues in a Kafka cluster increases.
g. Lacks some Messaging Paradigms
Some of the messaging paradigms are missing in Kafka like request/reply, point-to-point queues and so on. Not always but for certain use cases, it sounds problematic.
So, this was all about the advantages and disadvantages of Kafka. Hope you like our explanation.
Conclusion: Advantages and Disadvantages of Kafka
Hence, we have seen all the Advantages and Disadvantages of Kafka in detail. That will help you a lot before using it. However, if any doubt occurs regarding Kafka Pros and Cons, feel free to ask through the comment section.








Tags: Advantages and Disadvantages of Kafkaadvantages of kafkaCons of kafkaDisadvantages of KafkaKafka advantagesKafka ConsKafka disadvantagesKafka prosLimitations of Kafkapros of kafka

2 Responses

Comments2
Pingbacks0






Joe says: 

March 23, 2019 at 7:42 am 
Pros – k. Batch Handling Capable (ETL like functionality)
Cons – b. Issues with Message Tweaking
From my point of view the statements above are mutually exclusive. Can Kafka support ETL processes if there is an issue with Message Tweaking? ETL is not just aggregation it includes data standardization, data cleansing and data transformation. Can you please elaborate further with Kafka ETL capability?
Reply





L.B. says: 

November 15, 2019 at 10:05 am 
What are the risks / vulnerabilities to watch out for when using Kafka to create API Payment ?
Reply





Leave a Reply Cancel replyYour email address will not be published. Required fields are marked *Comment * Name * 
Email * 
Website 
This site is protected by reCAPTCHA and the Google Privacy Policy and Terms of Service apply. 

Δ 
 




 


Kafka Tutorials




Kafka – Tutorial


Kafka – Features


Kafka – Terminology


Kafka – Pros & Cons


Kafka – Applications


Kafka – Architecture


Kafka – Workflow


Kafka – Cluster


Kafka – Producer


Kafka – Consumer


Kafka – Broker


Kafka – Queuing


Kafka – Client


Kafka – Connect


Kafka – Docker


Kafka – Topic


Kafka – Tools


Kafka – Monitoring Tools


Kafka – Operations


Kafka – Role of Zookeeper


Kafka – Streams


Kafka – Spark Streaming 


Kafka – Performance Tuning


Kafka – Load Testing


Kafka – Storm Kafka Integration 


Kafka – SerDe 


Kafka – Schema Registry


Kafka – Security


Kafka Vs RabbitMQ


Kafka Vs Storm


Kafka – Career


Kafka – Books





Kafka Interview Questions




Kafka Interview Que. Part-1










 


 











 Home About us Contact us Terms and Conditions Privacy Policy Disclaimer Write For Us Success Stories

 







DataFlair © 2022. All Rights Reserved.



 










