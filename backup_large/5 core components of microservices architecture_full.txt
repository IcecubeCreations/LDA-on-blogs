




5 core components of microservices architecture





















































SearchAppArchitecture




Search the TechTarget Network




Sign-up now. Start my free, unlimited access.

Login
Register




Techtarget Network
News
Features
Tips
Webinars

More Content


Answers
Definitions
Essential Guides
Opinions
Photo Stories
Podcasts
Quizzes
Tutorials

Sponsored Communities











SearchAppArchitecture





Topic  
								Enterprise architecture management
  




 API design and management
 Application development and design
 Application management tools and practices
 Application integration
All Topics





Follow:
















Tech Accelerator
An A-to-Z guide to a microservices architecture transition


Prev
Next
What are some benefits of a microservices architecture?
10 microservices patterns all architects should know
Download this guide1









Feature


5 core components of microservices architecture



Before you build a microservices application, take a closer look at the components of the architecture and their capabilities.






Share this item with your network:



























































By


Fred Churchville,
Site Editor



	Published: 10 Apr 2020


 
A microservices architecture -- as the name implies -- is a complex coalition of code, databases, application functions and programming logic spread across servers and platforms. Certain fundamental components of a microservices architecture bring all these entities together cohesively across a distributed system.








In this article, we review five key components of microservices architecture that developers and application architects need to understand if they plan to take the distributed service route. Start with microservices themselves, then learn about service mesh as an additional layer, app management via service discovery, container-based deployment and API gateways.

1. Microservices
Microservices make up the foundation of a microservices architecture. The term illustrates the method of breaking down an application into generally small, self-contained services, written in any language, that communicate over lightweight protocols. With independent microservices, software teams can implement iterative development processes, as well as create and upgrade features flexibly.
Teams need to decide the proper size for microservices, keeping in mind that an overly granular collection of too-segmented services creates high overhead and management needs. Developers should thoroughly decouple services in order to minimize dependencies between them and promote service autonomy. And use lightweight communication mechanisms like REST and HTTP.



This article is part of
An A-to-Z guide to a microservices architecture transition

Which also includes:
What are some benefits of a microservices architecture?
5 core components of microservices architecture
10 microservices patterns all architects should know





Download1
Download this entire guide for FREE now!






The difference between monolithic and microservices design
  






2. Containers
Containers are units of software that package services and their dependencies, maintaining a consistent unit through development, test and production. Containers are not necessary for microservices deployment, nor are microservices needed to use containers. However, containers can potentially improve deployment time and app efficiency in a microservices architecture more so than other deployment techniques, such as VMs.
The major difference between containers and VMs is that containers can share an OS and middleware components, whereas each VM includes an entire OS for its use. By eliminating the need for each VM to provide an individual OS for each small service, organizations can run a larger collection of microservices on a single server.
The other advantage of containers is their ability to deploy on-demand without negatively impacting application performance. Developers can also replace, move and replicate them with fairly minimal effort. The independence and consistency of containers is a critical part of scaling certain pieces of a microservices architecture -- according to workloads -- rather than the whole application. It also supports the ability to redeploy microservices in a failure.
Docker, which started as an open-source platform for container management, is one of the most recognizable providers in the container space. However, Docker's success caused a large tooling ecosystem to evolve around it, spawning popular container orchestrators like Kubernetes.


3. Service mesh
In a microservices architecture, the service mesh creates a dynamic messaging layer to facilitate communication. It abstracts the communication layer, which means developers don't have to code in inter-process communication when they create the application.
Service mesh tooling typically uses a sidecar pattern, which creates a proxy container that sits beside the containers that have either a single microservice instance or a collection of services. The sidecar routes traffic to and from the container, and directs communication with other sidecar proxies to maintain service connections.
Two of today's most popular service mesh options are Istio, a project that Google launched alongside IBM and Lyft, and Linkerd, a project under the Cloud Native Computing Foundation. Both Istio and Linkerd are tied to Kubernetes, though they feature notable differences in areas such as support for non-container environments and traffic control capabilities.


4. Service discovery
Whether it's due to changing workloads, updates or failure mitigation, the number of microservice instances active in a deployment fluctuate. It can be difficult to keep track of large numbers of services that reside in distributed network locations throughout the application architecture.
Service discovery helps service instances adapt in a changing deployment, and distribute load between the microservices accordingly. The service discovery component is made up of three parts:

A service provider that originates service instances over a network;
A service registry, which acts as a database that stores the location of available service instances; and
A service consumer, which retrieves the location of a service instance from the registry, and then communicates with that instance.

Service discovery also consists of two major discovery patterns:

A client-side discovery pattern searches the service registry to locate a service provider, selects an appropriate and available service instance using a load balancing algorithm, and then makes a request.
In a server-side discovery pattern, the router searches the service registry and, once the applicable service instance is found, forwards the request accordingly.

Data residing in the service registry should always be current, so that related services can find their related service instances at runtime. If the service registry is down, it will hinder all the services, so enterprises typically use a distributed database, such as Apache ZooKeeper, to avoid regular failures.


5. API gateway
Another important component of a microservices architecture is an API gateway. API gateways are vital for communication in a distributed architecture, as they can create the main layer of abstraction between microservices and the outside clients. The API gateway will handle a large amount of the communication and administrative roles that typically occur within a monolithic application, allowing the microservices to remain lightweight. They can also authenticate, cache and manage requests, as well as monitor messaging and perform load balancing as necessary.
Additionally, an API gateway can speed up communication between microservices and clients by standardizing messaging protocols translation and freeing both the client and the service from the task of translating requests written in unfamiliar formats. Most API gateways will also provide built-in security features, which means they can manage authorization and authentication for microservices, as well as track incoming and outgoing requests to identify any possible intrusions.
There are a wide array of API gateway options on the market to choose from, both from proprietary cloud platform providers like Amazon and Microsoft and open source providers such as Kong and Tyk.


Next Steps
Test your knowledge of microservices architectures







			Related Resources


The Forrester Wave: Enterprise Architecture Management Suites, Q1 2021
–SoftwareAG






Dig Deeper on Enterprise architecture management



Service mesh vs. API gateway: Where, why and how to use them




By: Chris Tozzi




service mesh




By: Alexander Gillis




10 microservices patterns all architects should know




By: Sara Grier




Manage containerized microservices with a service registry




By: Clive Longbottom












Sponsored News


5 Key Elements of a Modern Cybersecurity Framework
–Dell Technologies


Simplify Cloud Migrations to Avoid Refactoring and Repatriation
–Dell Technologies


Reduce Risk in Moving Workloads to the Cloud
–Dell Technologies

See More






			Related Content


Fundamental patterns for service discovery in ...
– SearchAppArchitecture


Manage containerized microservices with a service ...
– SearchITOperations


service mesh
– SearchITOperations
















Latest TechTarget resources



							Software Quality





							Cloud Computing





							Java











SearchSoftwareQuality




Implement reliability testing methods, tools for better dev
Reliability testing can play an integral role in software development. Here are some methods and tools to incorporate into your ...



GitHub math support in Markdown useful but tardy
GitHub math support in Markdown took eight years to arrive. Had the feature been released in 2014, a wider audience might have ...



The ins and outs of low-code application testing
When teams use low-code for application development, it can save time and money. But don't neglect testing for potential issues ...






SearchCloudComputing




Implement these 4 AWS Organizations best practices
To successfully use AWS Organizations, admins must grasp key concepts related to organizational units, service control policies, ...



How to deploy an EKS cluster using Terraform
Terraform benefits include scalability, repeatable infrastructure and cost efficiency. Follow this step-by-step tutorial to learn...



Cost savings among the biggest cloud fallacies
Experts at the MIT Sloan CIO Symposium described the advantages that justify the high cost of moving to the cloud while ...






TheServerSide.com




Agile versus Scrum: What's the difference?
What's the difference between Agile and Scrum? What are their similarities? Learn how to compare and contrast these two popular ...



How to communicate effectively in the workplace
Don't bury the lead. Grab your audience's attention early. Be graceful when others disagree. These and other tips will help you ...



Either log or rethrow Java exceptions, but never do both
When an exception occurs in your Java code, you can log it or you can rethrow it -- but don't do both. Here's why you must avoid ...















About Us
Editorial Ethics Policy
Meet The Editors
Contact Us
Advertisers
Business Partners
Media Kit
Corporate Site


Contributors
Reprints
Answers
Definitions
E-Products
Events
Features


Guides
Opinions
Photo Stories
Quizzes
Tips
Tutorials
Videos




All Rights Reserved, 
Copyright 2019 - 2022, TechTarget


Privacy Policy



Cookie Preferences 



Do Not Sell My Personal Info












Close





