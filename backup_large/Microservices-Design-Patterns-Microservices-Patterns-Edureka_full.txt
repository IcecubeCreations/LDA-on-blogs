Microservices Design Patterns | Microservices Patterns | Edureka                  Subscribe        Training in Top Technologies  DevOps Certification Training AWS Architect Certification Training Big Data Hadoop Certification Training Tableau Training & Certification Python Certification Training for Data Science Selenium Certification Training PMP® Certification Exam Training Robotic Process Automation Training using UiPath Apache Spark and Scala Certification Training All Courses   Career Related Programs  Data Scienctist Masters Program Devops Engineer Masters Program Cloud Architect Masters Program BIg Data Architect Masters Program Machine Learning Engineer Masters Program Full Stack Web Developer Masters Program Business Intelligence Masters Program Data Analyst Masters Program Test Automation Engineer Masters Program All Programs   Webinars   Ebook NEW   Write for Us   Explore Online Courses   Subscribe   Become a Certified Professional     Back   Home   Categories    Online Courses   Webinars   Ebook NEW   Community   Write for Us    Categories   Artificial Intelligence AI vs Machine Learning vs Deep LearningMachine Learning AlgorithmsArtificial Intelligence TutorialWhat is Deep LearningDeep Learning TutorialInstall TensorFlowDeep Learning with PythonBackpropagationTensorFlow TutorialConvolutional Neural Network TutorialVIEW ALL BI and Visualization What is TableauTableau TutorialTableau Interview QuestionsWhat is InformaticaInformatica Interview QuestionsPower BI TutorialPower BI Interview QuestionsOLTP vs OLAPQlikView TutorialAdvanced Excel Formulas TutorialVIEW ALL Big Data What is HadoopHadoop ArchitectureHadoop TutorialHadoop Interview QuestionsHadoop EcosystemData Science vs Big Data vs Data AnalyticsWhat is Big DataMapReduce TutorialPig TutorialSpark TutorialSpark Interview QuestionsBig Data TutorialHive TutorialVIEW ALL Blockchain Blockchain TutorialWhat is BlockchainHyperledger FabricWhat Is EthereumEthereum TutorialBlockchain ApplicationsSolidity TutorialBlockchain ProgrammingHow Blockchain WorksVIEW ALL Cloud Computing What is AWSAWS TutorialAWS CertificationAzure Interview QuestionsAzure TutorialWhat Is Cloud ComputingWhat Is SalesforceIoT TutorialSalesforce TutorialSalesforce Interview QuestionsVIEW ALL Cyber Security Cloud SecurityWhat is CryptographyNmap TutorialSQL Injection AttacksHow To Install Kali LinuxHow to become an Ethical Hacker?Footprinting in Ethical HackingNetwork Scanning for Ethical HackingARP SpoofingApplication SecurityVIEW ALL Data Science Python Pandas TutorialWhat is Machine LearningMachine Learning TutorialMachine Learning ProjectsMachine Learning Interview QuestionsWhat Is Data ScienceSAS TutorialR TutorialData Science ProjectsHow to become a data scientistData Science Interview QuestionsData Scientist SalaryVIEW ALL Data Warehousing and ETL What is Data WarehouseDimension Table in Data WarehousingData Warehousing Interview QuestionsData warehouse architectureTalend TutorialTalend ETL ToolTalend Interview QuestionsFact Table and its TypesInformatica TransformationsInformatica TutorialVIEW ALL Databases What is MySQLMySQL Data TypesSQL JoinsSQL Data TypesWhat is MongoDBMongoDB Interview QuestionsMySQL TutorialSQL Interview QuestionsSQL CommandsMySQL Interview QuestionsVIEW ALL DevOps What is DevOpsDevOps vs AgileDevOps ToolsDevOps TutorialHow To Become A DevOps EngineerDevOps Interview QuestionsWhat Is DockerDocker TutorialDocker Interview QuestionsWhat Is ChefWhat Is KubernetesKubernetes TutorialVIEW ALL Front End Web Development What is JavaScript – All You Need To Know About JavaScriptJavaScript TutorialJavaScript Interview QuestionsJavaScript FrameworksAngular TutorialAngular Interview QuestionsWhat is REST API?React TutorialReact vs AngularjQuery TutorialNode TutorialReact Interview QuestionsVIEW ALL Mobile Development Android TutorialAndroid Interview QuestionsAndroid ArchitectureAndroid SQLite DatabaseProgramming & FrameworksAndroid Adapter TutorialCursor in AndroidSwift TutorialiOS Interview QuestionsVIEW ALL Operating Systems Linux TutorialUnix vs LinuxHow to Install UbuntuShell Scripting InterviewsInstall JDK on UbuntuLinux CommandsLinux Administrator ResponsibilitiesLinux CareerWhy Learn Shell ScriptingLinux Interview QuestionsVIEW ALL Programming & Frameworks C Programming TutorialJava TutorialInheritance in JavaTop Java Projects you need to know in 2021Java Interview QuestionsWhat is the use of Destructor in Java?Polymorphism in JavaMultithreading in JavaAll you Need to Know About Implements In JavaSpring Interview QuestionsPHP TutorialPHP Interview QuestionsPython TutorialPython Interview QuestionsVIEW ALL Project Management and Methodologies PMP ExamProject Management Life CycleProject Manager Interview QuestionsSupply Chain ManagementProject Manager SalaryPMP Exam Questions and AnswersEarned Value Analysis in Project ManagementProject Management Office SetupVIEW ALL Robotic Process Automation What Is RPALearn RPARPA ToolsSelenium vs RPARPA Developer SalaryUipath OrchestratorRPA Interview QuestionsUiPath RPA ArchitectureRPA ProjectsRPA LifeycycleVIEW ALL Software Testing What is Software TestingSoftware Testing Interview QuestionsSoftware Testing Life CycleTypes of Software TestingSelenium Interview QuestionsSelenium TutorialJMeter TutorialRegression TestingUnit TestingAutomation Testing TutorialFunctional TestingSmoke TestingAPI TestingIntegration TestingPenetration TestingVIEW ALL Home Blog Cloud Computing Everything You Need To Know Ab... Microservices Architecture Training  (12 Blogs) Become a Certified Professional  AWS Global Infrastructure  Introduction to Microservices  What Is Microservices – Introduction To Microservice ArchitectureMicroservices Tutorial – Learn all about Microservices with ExampleTop 10 Reasons Why You Should Learn MicroservicesMicroservices vs API : How Do These Two Fare Together?Top Microservices Tools You Must Know In 2019  Microservices Architecture  Microservice Architecture – Learn, Build and Deploy MicroservicesMicroservices vs SOA : What's the DifferenceEverything You Need To Know About Microservices Design Patterns  Microservices using Spring Boot  Spring Boot Eclipse and CLI Setup to Run Spring Boot ApplicationsSpring Boot Microservices: Building Microservices Application Using Spring Boot  Microservices Security How To Secure Your Microservice Infrastructure?   Microservices Interview Questions  Top 50 Microservices Interview Questions You Must Prepare In 2022Cloud Computing Topics CoveredAWS Architect Certification Training (46 Blogs)AWS Development (10 Blogs)SFDC Administration Foundation (1 Blogs)Salesforce Admin and Dev Foundation (10 Blogs)SEE MORE Everything You Need To Know About Microservices Design Patterns   Last updated on Mar 26,2022 88.4K Views ShareWhatsAppLinkedinTwitterFacebookRedditCopy Link!  Sahiti Kappagantula  Bookmark Copy Link! 3 / 3 Blog from Microservices Architecture    Become a Certified ProfessionalIn today’s market, Microservices have become the go-to solution, to build an application. They are known to solve various challenges, but yet, skilled professionals often face challenges while using this architecture. So, instead, developers can explore the common patterns in these problems, and can create reusable solutions to improve the performance of the application. Thus, in this article on Microservices Design Patterns, I will discuss the top patterns necessary to build a successful Microservices.The following topics will be covered in this article: What are Microservices? Principles Used to Design Microservice Architecture Design Patterns of MicroservicesWhat are Microservices?Microservices, aka microservice architecture, is an architectural style that structures an application as a collection of small autonomous services, modeled around a business domain. In a Microservice Architecture, each service is self-contained and implements a single business capability. If you want a  detailed understanding on Microservices, you can refer to my article on Microservices Architecture.Principles Used to Design Microservice ArchitectureThe principles used to design Microservices are as follows: Independent & Autonomous Services Scalability Decentralization Resilient Services Real-Time Load Balancing Availability Continuous delivery through DevOps Integration Seamless API Integration and Continuous Monitoring Isolation from Failures Auto -ProvisioningDesign Patterns of Microservices  Aggregator API Gateway Chained or Chain of Responsibility Asynchronous Messaging Database or Shared Data Event Sourcing Branch Command Query Responsibility Segregator Circuit Breaker Decomposition Aggregator PatternAggregator in the computing world refers to a website or program that collects related items of data and displays them. So, even in Microservices patterns, Aggregator is a basic web page which invokes various services to get the required information or achieve the required functionality. Also, since the source of output gets divided on breaking the monolithic architecture to microservices, this pattern proves to be beneficial when you need an output by combining data from multiple services. So, if we have two services each having their own database, then an aggregator having a unique transaction ID, would collect the data from each individual microservice, apply the business logic and finally publish it as a REST endpoint. Later on, the data collected can be consumed by the respective services which require that collected data.The Aggregate Design Pattern is based on the DRY principle. Based on this principle, you can abstract the logic into a composite microservices and aggregate that particular business logic into one service.So, for example, if you consider two services: Service A and B, then you can individually scale these services simultaneously by providing the data to the composite microservice.API Gateway Design PatternMicroservices are built in such a way that each service has its own functionality. But, when an application is broken down into small autonomous services, then there could be few problems that a developer might face. The problems could be as follows: How can I request information from multiple microservices? Different UI require different data to respond to the same backend database service How to transform data according to the consumer requirement from reusable Microservices How to handle multiple protocol requests?Well, the solution to these kinds of problems could be the API Gateway Design Pattern.  The API Gateway Design Pattern address not only the concerns mentioned above but it solves many other problems. This microservice design pattern can also be considered as the proxy service to route a request to the concerned microservice. Being a variation of the Aggregator service, it can send the request to multiple services and similarly aggregate the results back to the composite or the consumer service. API Gateway also acts as the entry point for all the microservices and creates fine-grained APIs’ for different types of clients.With the help of the API Gateway design pattern, the API gateways can convert the protocol request from one type to other. Similarly, it can also offload the authentication/authorization responsibility of the microservice.So, once the client sends a request, these requests are passed to the API Gateway which acts as an entry point to forward the clients’ requests to the appropriate microservices. Then, with the help of the load balancer, the load of the request is handled and the request is sent to the respective services. Microservices use Service Discovery which acts as a guide to find the route of communication between each of them. Microservices then communicate with each other via a stateless server i.e. either by HTTP Request/Message Bus.Chained or Chain of Responsibility PatternChained or Chain of Responsibility Design Patterns produces a single output which is a combination of multiple chained outputs. So, if you have three services lined up in a chain, then, the request from the client is first received by Service A. Then, this service communicates with the next Service B and collects data. Finally, the second service communicates with the third service to generate the consolidated output. All these services use synchronous HTTP request or response for messaging. Also, until the request passes through all the services and the respective responses are generated, the client doesn’t get any output. So, it is always recommended to not to make a long chain, as the client will wait until the chain is completedOne more important aspect which you need to understand, is that the request from Service A to Service B may look different from Service B to Service C. Similarly the response from Service C to Service B may look completely different from Service B to Service A.Asynchronous Messaging Design PatternFrom the above pattern, it is quite obvious that the client gets blocked or has to wait for a long time in synchronous messaging. But, if you do not want the consumer, to wait for a long time, then you can opt for the Asynchronous Messaging. In this type of microservices design pattern, all the services can communicate with each other, but they do not have to communicate with each other sequentially. So, if you consider 3 services: Service A, Service B, and Service C. The request from the client can be directly sent to the Service C and Service B simultaneously. These requests will be in a queue. Apart from this, the request can also be sent to Service A whose response need not have to be sent to the same service through which request has come.Database or Shared Data PatternFor every application, there is humongous amount of data present. So, when we break down an application from its monolithic architecture to microservices, it is very important to note that each microservice has sufficient amount of data to process a request. So, either the system can have a database per each service or it can have shared database per service.  You can use database per service and shared database per service to solve various problems.  The problems could be as follows: Duplication of data and inconsistency Different services have different kinds of storage requirements Few business transactions can query the data, with multiple services De-normalization of dataWell, to solve the first three problems, I think you can go for database per service, as it will be then accessed by the microservice API itself. So, each microservice will have its own database ID,  which thereafter prevents the other services in the system to use that particular database. Apart from this, to solve the issue of de-normalization, you can choose shared databases per service,  to align more than one database for each microservice. This will help you gather data, for the monolithic applications which are broken down into microservices. But, you have to keep in mind that, you have to limit these databases to 2-3 microservices; else, scaling these services will be a problem. Event Sourcing Design PatternThe event sourcing design pattern creates events regarding the changes in the application state. Also, these events are stored as a sequence of events to help the developers track which change was made when. So, with the help of this, you can always adjust the application state to cope up with the past changes. You can also query these events, for any data change and simultaneously publish these events from the event store. Once the events are published, you can see the changes of the application state on the presentation layer.Branch PatternBranch microservice design pattern is a design pattern in which you can simultaneously process the requests and responses from  two or more independent microservices. So, unlike the chained design pattern, the request is not passed in a sequence, but the request is passed to two or more mutually exclusive microservices chains. This design pattern extends the Aggregator design pattern and provides the flexibility to produce responses from multiple chains or single chain. For example, if you consider an e-commerce application, then you may need to retrieve data from multiple sources and this data could be a collaborated output of data from various services. So, you can use the branch pattern, to retrieve data from multiple sources.Command Query Responsibility Segregator (CQRS) Design PatternEvery microservices design has either the database per service model or the shared database per service. But, in the database per service model, we cannot implement a query as the data access is only limited to one single database. So, in such scenario you can use the CQRS pattern. According to this pattern, the application will be divided into two parts: Command and Query. The command part will handle all the requests related to CREATE, UPDATE, DELETE while the query part will take care of the materialized views. The materialized views are updated through a sequence of events which are creating using the event source pattern discussed above.Circuit Breaker PatternAs the name suggests, the Circuit Breaker design pattern is used to stop the process of request and response if a service is not working. So, for example, let’s say a client is sending a request to retrieve data from multiple services. But, due to some issues, one of the services is down. Now, there are mainly two problems you will face: first, since the client will not have any knowledge about a particular service being down, the request will be continuously sent to that service. The second problem is that the network resources will be exhausted with low performance and bad user experience.So, to avoid such problems, you can use the Circuit Breaker Design Pattern. With the help of this pattern, the client will invoke a remote service via a proxy. This proxy will basically behave as a circuit barrier. So, when the number of failures crosses the threshold number, the circuit breaker trips for a particular time period. Then, all the attempts to invoke the remote service will fail in this timeout period. Once that time period is finished, the circuit breaker will allow a limited number of tests to pass through and if those requests succeed, the circuit breaker resumes back to the normal operation. Else, if there is a failure, then the time out period begins again.Decomposition Design PatternMicroservices are developed with an idea on developers mind to create small services, with each having their own functionality. But, breaking an application into small autonomous units has to be done logically. So, to decompose a small or big application into small services, you can use the Decomposition patterns.With the help of this pattern, either you can decompose an application based on business capability or on based on the sub-domains. For example, if you consider an e-commerce application, then you can have separate services for orders, payment, customers, products if you decompose by business capability.But, in the same scenario, if you design the application by decomposing the sub-domains, then you can have services for each and every class. Here, in this example, if you consider the customer as a class, then this class will be used in customer management, customer support, etc. So, to decompose, you can use the Domain-Driven Design through which the whole domain model is broken down into sub-domains. Then, each of these sub-domains will have their own specific model and scope(bounded context).  Now, when a developer designs microservices, he/she will design those services around the scope or bounded context.Though these patterns may sound feasible to you, they are not feasible for big monolithic applications. This is because of the fact that identifying sub-domains and business capabilities is not an easy task for big applications. So, the only way to decompose big monolithic applications is by following the Vine Pattern or the Strangler Pattern.Strangler Pattern or Vine PatternThe Strangler Pattern or the Vine Pattern is based on the analogy to a vine which basically strangles a tree that it is wrapped around. So, when this pattern is applied on the web applications, a call goes back and forth for each URI call and the services are broken down into different domains. These domains will be hosted as separate services.According to the strangler pattern, two separate applications will live side by side in the same URI space, and one domain will be taken in to account at an instance of time. So, eventually, the new refactored application wraps around or strangles or replaces the original application until you can shut down the monolithic applicationSo, folks, with this we come to an end to this article on Microservices Design Patterns. I hope you have understood the top patterns to design Microservices. If you wish to learn Microservices and build your own applications, then check out our Microservices Architecture Training which comes with instructor-led live training and real-life project experience. This training will help you understand Microservices in-depth and help you achieve mastery over the subject.Got a question for us? Please mention it in the comments section of ” Microservices Design Patterns” and I will get back to you.Upcoming Batches For Microservices Certification Training CourseCourse NameDateMicroservices Certification Training CourseClass Starts on 28th May,202228th MaySAT&SUN (Weekend Batch)View DetailsMicroservices Certification Training CourseClass Starts on 11th June,202211th JuneSAT&SUN (Weekend Batch)View DetailsRecommended videos for you AWS Certifications – All You Need To Know Watch Now AWS Tutorial – A Complete Tutorial On Amazon Web Services Watch Now Efficient Disaster Recovery with Cloud Computing Watch Now Architecting in Cloud-II Watch Now AWS vs Google Cloud – Cloud Platform Compared Watch Now Cloud Computing with AWS – II Watch Now What Is Cloud Computing? – A Beginner’s Guide To Understanding Cloud Watch Now Architecting in Cloud-III Watch Now What Is AWS – Getting Started With AWS Watch Now AWS Vs Azure – Cloud Platform Comparison Watch Now Building Scalable Application on Cloud Watch Now Power The Hadoop Cluster With AWS Cloud Watch NowRecommended blogs for you Google Cloud vs AWS : Which Cloud Service Provider to Choose? Read Article What Is Cloud Computing? Read Article What is Identity and Access Management(IAM) in AWS? Read Article Top 10 Reasons Why You Should Learn Microservices Read Article Amazon Lightsail Tutorial – An Introduction Read Article Salesforce Marketing Cloud: A Powerful Marketing Platform Read Article Cloud Engineer Salary: All You Need To Know Read Article All You Need To Know About Application Load Balancer Read Article Creating Highly Available Websites using AWS Global Infrastructure Read Article What is AWS CLI and how to use it? Read Article What Are The Top 10 Myths Regarding Cloud Computing? Read Article What Is Amazon Athena? – The New Serverless Data Analytics Tool Read Article How to Launch an EC2 Instance From a Custom AMI? Read Article Cloud Security: A Guide for Cloud Users Read Article ServiceNow Tutorial: Getting Started With ServiceNow Read Article Salesforce Service Cloud – One Stop Solution For Customer Needs Read Article Big Data In AWS – Smart Solution For Big Data Read Article Microservice Architecture – Learn, Build and Deploy Microservices Read Article What Is Salesforce? A Beginner’s Guide To Understanding Salesforce Read Article What Is Microservices – Introduction To Microservice Architecture Read Article  Comments  0 Comments Join the discussion	Cancel reply     Trending Courses in Cloud Computing  AWS Solution Architect Certification Training ... 125k Enrolled Learners  Weekend/Weekday  Live Class  Reviews  5 (49850)   Salesforce Training Course: Administrator and ... 25k Enrolled Learners  Weekend/Weekday  Live Class  Reviews  5 (9750)   Google Cloud Platform (GCP) Certification Tra ... 13k Enrolled Learners  Weekend  Live Class  Reviews  5 (4850)   Microsoft Azure Certification Training Course ... 13k Enrolled Learners  Weekend/Weekday  Live Class  Reviews  5 (4950)   Microsoft Azure DevOps Certification Training ... 3k Enrolled Learners  Weekend  Live Class  Reviews  5 (850)   Microservices Certification Training Course 11k Enrolled Learners  Weekend  Live Class  Reviews  5 (4250)   AWS Development Certification Training 11k Enrolled Learners  Weekend  Live Class  Reviews  4 (4200)   Microsoft Azure Administrator Certification T ... 7k Enrolled Learners  Weekend  Live Class  Reviews  5 (2550)   IoT Certification Training on Azure 10k Enrolled Learners  Weekend/Weekday  Live Class  Reviews  5 (3850)   Salesforce Platform Developer 1 Certification ... 4k Enrolled Learners  Weekend  Live Class  Reviews  5 (1450) Browse CategoriesArtificial IntelligenceBI and VisualizationBig DataBlockchainCyber SecurityData ScienceData Warehousing and ETLDatabasesDevOpsDigital MarketingEnterpriseFront End Web DevelopmentMobile DevelopmentOperating SystemsProgramming & FrameworksProject Management and MethodologiesRobotic Process AutomationSoftware TestingSystems & Architecture  REGISTER FOR FREE WEBINAR         Send OTP   Years of Experience*Student0-2 Years2-5 Years5-10 Years10+ Years    REGISTER NOW  Thank you for registering  Join Edureka Meetup community for 100+ Free Webinars each month JOIN MEETUP GROUPSubscribe to our Newsletter, and get personalized recommendations.   Sign up with Google    Signup with Facebook Already have an account? Sign in.  ×   ×20,00,000 learners love us! Get personalised resources in your inbox.    Sign up with Gmail    Sign up with Facebook OR  Please provide a valid input      Password must haveAt least 1 upper-case and 1 lower-case letterMinimum 8 characters and Maximum 50 characters SIGN UP Already have an Edureka Account? Login  Please enter a valid emailid   Forgot Password? LOGIN Don’t have edureka account? Sign Up      resend ? Password must haveAt least 1 upper-case and 1 lower-case letterMinimum 8 characters and Maximum 50 characters reset password Don’t have edureka account? Sign Up      reset password Don’t have edureka account? Sign Up   Send Code Don’t have edureka account? Sign Up  ×  Reshape Your Career! Name*   Email ID*   Phone Number*    Your Total Work Experience* Years of Experience*Student0-2 Years2-5 Years5-10 Years10+ Years   Apply Now  AwesomeWe have recieved your contact details.You will recieve an email from us shortly.  ×  Main headingsub heading Click to avail You are here: Home Blog Cloud Computing Everything You Need To Know Ab... TRENDING CERTIFICATION COURSES DevOps Certification Training AWS Architect Certification Training Big Data Hadoop Certification Training Tableau Training & Certification Python Certification Training for Data Science Selenium Certification Training PMP® Certification Exam Training Robotic Process Automation Training using UiPath Apache Spark and Scala Certification Training Microsoft Power BI Training Online Java Course and Training Python Certification CourseTRENDING MASTERS COURSES Data Scientist Masters Program DevOps Engineer Masters Program Cloud Architect Masters Program Big Data Architect Masters Program Machine Learning Engineer Masters Program Full Stack Web Developer Masters Program Business Intelligence Masters Program Data Analyst Masters Program Test Automation Engineer Masters Program Post-Graduate Program in Artificial Intelligence & Machine Learning Post-Graduate Program in Big Data EngineeringCOMPANY About us News & Media Reviews Contact us Blog Community Sitemap Blog Sitemap Community Sitemap WebinarsWORK WITH US Careers Become an Instructor Become an Affiliate Become a Partner Hire from EdurekaDOWNLOAD APP        CATEGORIES CATEGORIES Cloud Computing DevOps Big Data Data Science BI and Visualization Programming & Frameworks Software Testing Project Management and Methodologies Robotic Process Automation Frontend Development Data Warehousing and ETL Artificial Intelligence Blockchain Databases Cyber Security Mobile Development Operating Systems Architecture & Design Patterns Digital Marketing  TRENDING BLOG ARTICLESTRENDING BLOG ARTICLESSelenium tutorial Selenium interview questions Java tutorial What is HTML Java interview questions PHP tutorial JavaScript interview questions Spring tutorial PHP interview questions Inheritance in Java Polymorphism in Java Spring interview questions Pointers in C Linux commands Android tutorial JavaScript tutorial jQuery tutorial SQL interview questions MySQL tutorial Machine learning tutorial Python tutorial What is machine learning Ethical hacking tutorial SQL injection AWS certification career opportunities AWS tutorial What Is cloud computing What is blockchain Hadoop tutorial What is artificial intelligence Node Tutorial Collections in Java Exception handling in java Python Programming Language Python interview questions Multithreading in Java ReactJS Tutorial Data Science vs Big Data vs Data Analytics Software Testing Interview Questions R Tutorial Java Programs JavaScript Reserved Words and Keywords Implement thread.yield() in Java: Examples Implement Optical Character Recognition in Python All you Need to Know About Implements In Java © 2022 Brain4ce Education Solutions Pvt. Ltd. All rights Reserved. Terms & Conditions Legal & Privacy     "PMP®","PMI®", "PMI-ACP®" and "PMBOK®" are registered marks of the Project Management Institute, Inc. MongoDB®, Mongo and the leaf logo are the registered trademarks of MongoDB, Inc.   Everything You Need To Know About Microservices Design Patternsedureka.co   Whatsapp  Linkedin  Twitter  Facebook  Reddit Copy Link                