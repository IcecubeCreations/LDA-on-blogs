




Can a pattern become an anti-pattern? How to avoid the loose coupling mistake



































































Search the TechTarget Network




Sign-up now. Start my free, unlimited access.

Login
Register




White Papers
Definitions
Java DevOps
Webinars



RSS




Topic  
								Java management
  




 Enterprise Java development
 Java in the cloud
 Java tools
 Mobile app dev
 Modular code
 Architecture
 Web dev tools
All Topics





SubTopic     RESTful Web services




 Middleware tools
 Java security
 ESB products
 Java testing
 Java development in cloud
 Java DevOps
 Java Web services
 RESTful Web services
 Agile methodologies
 Databases
All Subtopics





Follow:

















Feature


Can a pattern become an anti-pattern? How to avoid the loose coupling mistake



Nobody is debating the benefits of loose-coupling, but far too many SOA architects take the practice too far. Make sure you know when loose-coupling makes sense, and more importantly, when it doesn't.






Share this item with your network:



























































By


Cameron McKenzie,
TechTarget



	Published: 15 Jan 2015


 
Loose coupling is always a good idea. After all, what's wrong with abstracting away separate layers of concern, creating pluggability points, making your design more flexible, and creating a software design that can adapt to future changes and enhancements? Loose coupling is a great idea. But just because it's always a great idea, doesn't mean it's always a great practice.












Just because it's a great idea, doesn't mean it's always a great practice. 
Cameron McKenzie




There is nothing worse than being on a software development project where the architect has just come off a five day training course on service oriented architectures, because that architect wants to refractor every class and method into an interface and an implementation class, all in the name of loose coupling. And while the intention is valiant, the effort put into such an endeavor is not.
So when does loose coupling make sense? Here are three instances when loose coupling is worth the effort.
1. Interactions between physical access layers
If you're application is moving data across a network, the way your application interacts with the lower level transport APIs need to be abstracted away. After all, transport mechanisms can change, network protocols will evolve, and even more importantly, the data transfer format might get switched. For example, one day your application might be sending XML over HTTP, while the next the remote API you are invoking may require a JSON string. If the physical communication layers are loosely coupled, your application can easily adjust to such changes.
2. Interactions between logical software layers
All applications should be developed using, at the very least, a model-view-controller (MVC) type architecture, with those three layers having three distinct responsibilities. More software layers tend to be added to more complex applications, be it a dedicated data layer, a validation layer or security mechanism. But interactions between each of these clear logical layers should be abstracted away. Why? One reason is the fact that as an application scales, some of these logical layers may end up being separated into physical layers. For example, heavy business or database logic might be placed on a separate physical machine, separate from the presentation or view layer. If the various layers are loosely coupled, it would be easy to make this type of a change.
Another reason to loosely couple logical layers is the fact that it makes testing easier, as the various layers can be easily mocked out or have fakes or stubs created that can reproduce another layer's behavior when isolated testing needs to be done. Loosely coupled software layers can make testing easier, which in turn makes isolating and troubleshooting bugs and software problems much easier.
3. A clearly identifiable pluggability point
The third time a loosely coupled interaction makes sense is when there is a clear and obvious pluggability point in your application. For example, your application might use Hibernate to persist data. But there's always a good chance you may just decide to use another ORM tool, or perhaps even just use JDBC. That's a pretty clear plug-in point, where it might make sense to change one implementation of a given function with another. Applications will tend to have a bit more subtle instances for abstraction and loose coupling than something as significant as the ORM tool of choice, but you get the idea. If there is something in your application where it might make sense to swap one implementation out with another, loosely couple the interactions between that component and the rest of your application.
Now that might not be an exhaustive list of when loose coupling makes sense, but it is a pretty good one. If you're on a software project and you see the architect abstracting things away, and blabbering on about loose coupling, ask yourself if the scenario in question falls into one of the three categories above. If it doesn't, try steering the software project in the right direction by asking questions and making sure that loose coupling is being used in the right places and for the right reasons.
Which accepted software patterns have you seen abused and misused? Let us know.







Dig Deeper on REST Web services



How to use abstracted repositories in dependency injection




By: Tom Nolle




inversion of control (IoC)

By: TechTarget Contributor




The 6 non-negotiable REST architecture constraints




By: Tom Nolle




Can a loosely coupled architecture reduce technical debt?




By: Tom Nolle












Sponsored News


A New Vision for Storage and Data Management: DataOps
–HPE


Why Zero Trust, Why Now
–Microsoft


Three Ways to Beat the Complexity of Storage and Data Management to Spark ...
–HPE







			Related Content


inversion of control (IoC)
– TheServerSide.com


A quick rundown of 3 layered architecture design ...
– SearchAppArchitecture


sidecar proxy
– SearchITOperations
















Latest TechTarget resources




							SearchAppArchitecture






							Software Quality






							Cloud Computing






							Security






							AWS











SearchAppArchitecture




5 fundamental strategies for REST API authentication
There are various authentication methods for REST APIs, ranging from basic credentials and token encryption to complex, ...



6 ways cloud-native and cloud-agnostic architecture differ
While development teams should carefully weigh the tradeoffs between cloud-native and cloud-agnostic architectures, they don't ...



The deep-rooted relationship between REST and microservices
The REST paradigm can be a natural fit for microservices architectures, but it also presents potential challenges for development...






SearchSoftwareQuality




GitHub math support in Markdown useful but tardy
GitHub math support in Markdown took eight years to arrive. Had the feature been released in 2014, a wider audience might have ...



The ins and outs of low-code application testing
When teams use low-code for application development, it can save time and money. But don't neglect testing for potential issues ...



Google Firebase speeds developer process with new features
The new Firebase additions may not excite developers, but they do add some much-needed functionality to the platform.






SearchCloudComputing




How to deploy an EKS cluster using Terraform
Terraform benefits include scalability, repeatable infrastructure and cost efficiency. Follow this step-by-step tutorial to learn...



Cost savings among the biggest cloud fallacies
Experts at the MIT Sloan CIO Symposium described the advantages that justify the high cost of moving to the cloud while ...



Dell takes an 'E pluribus unum' approach to multi-cloud
At Dell Technologies World, multi-cloud was a popular topic, especially how it can happen by accident. However, it seems to be ...






SearchSecurity




Verizon DBIR: Stolen credentials led to nearly 50% of attacks
The 2022 Verizon Data Breach Investigations Report revealed enterprises' ongoing struggle with securing credentials and avoiding ...



Prepare for deepfake phishing attacks in the enterprise
Deepfake phishing has already cost at least one company $243,000. Learn how cybersecurity leaders can train users to recognize ...



Developers targeted by poisoned Python library
A developer's expired domain led to a threat actor taking control of an open source library and poisoning it with malware that ...






SearchAWS




In search of AWS Solutions Architect preparation?
Think you're ready for the AWS Certified Solutions Architect certification exam? Test your knowledge with these 12 questions, and...



Experts raise privacy concerns over Amazon fleet surveillance
Amazon said its van monitoring system is designed solely for driver safety. But many industry experts have concerns regarding the...



Here's why Amazon's global expansion won't come easy
Amazon would like to strengthen its global footprint, but the e-commerce giant faces roadblocks and challenges today that did not...















About Us
Editorial Ethics Policy
Meet The Editors
Contact Us
Advertisers
Business Partners
Media Kit
Corporate Site


Contributors
Reprints
Answers
Definitions
E-Products
Events
Features


Guides
Opinions
Photo Stories
Quizzes
Tips
Tutorials
Videos




All Rights Reserved, 
Copyright 2000 - 2022, TechTarget


Privacy Policy



Cookie Preferences 



Do Not Sell My Personal Info












Close




