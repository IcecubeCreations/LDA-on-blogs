JAXB JSON Example - Examples Java Code Geeks - 2022      

    


NewsKnowledge BaseTutorialsResourcesCoursesMinibooksDealsAboutAbout JCGsAdvertisingTerms of UsePrivacy Policy 
Examples Java Code Geeks Java Examples and Code Snippets
AndroidcoreactivityanimationappActionBarActivityFragmentListActivityBluetoothBluetoothAdaptercameracontentBroadcastReceiverContentProviderIntentSharedPreferencesdatabasesqliteSQLiteDatabaseEmailgoogle mapsgraphicsCanvashardwareCameraSensorlocationmediaAudioManagerMediaRecordernetworkosAsyncTaskHandlerSystemClockPackageManagerpreferenceproviderContactsContractpublishingServicesockettelephonyPhoneStateListenerSmsManagerTelephonyManagertext-to-speechThreaduiAlertDialogAnalogClockButtonCheckBoxcomponentDatePickerDialogDigitalClockDrag and DropEventsExpandableListViewGridViewHorizontalScrollViewImageButtonImageViewLinearLayoutListViewNotificationsPasswordProgressBarProgressDialogRadioButtonRadioGroupRatingBarRelativeLayoutScrollViewSelectorSettingsSpinnerSurfaceViewTextBoxTimePickerToastToggleButtonWebViewviewMenuOnClickListenerViewPagerwidgetAutoCompleteTextViewEditTextFrameLayoutSeekBarSlidingDrawerStackViewTextViewViewFlipperxmlgamescanvasmain loopOpenGL ESCore JavaanimationapacheANTcommonsbeanutilsconvertersArrayConvertercliBasicParsercodecbinaryBase64Base64OutputStreamcsvdbcpBasicDatasourcePoolingConnectioniocomparatorCompositeFileComparatorDirectoryFileComparatorLastModifiedFileComparatorNameFileComparatorPathFileComparatorFilenameUtilsFileUtilsIOUtilsmonitorFileAlterationMonitorlang3CharUtilsClassPathUtilsmathFractionNumberUtilsStringUtilsloggingLogfactorynetCookieStoreFTPClientURLClassLoaderURLConnectionluceneappletaspectjbeanscajoCharacterclassComperablecryptoDesign PatternsdecoratorstrategyGenericsGradlegsonGsonBuilderstreamJsonReaderJsonWriterioBufferedInputStreamBufferedOutputStreamBufferedReaderBufferedWriterByteArrayInputStreamByteArrayOutputStreamConsoleDataInputStreamDataOutputStreamExternalizableFileFileDescriptorFileInputStreamFilenameFilterFileOutputStreamFileReaderFileWriterInputStreamInputStreamReaderIOExceptionObjectInputStreamObjectOutputStreamOutputStreamPrintWriterRandomAccessFileSerializableStreamTokenizerStringReaderStringWriterjsonJacksonJSON.SimplejunitlangmanagementNumberFormatExceptionProcessBuilderReferenceQueueRunnableRuntimeStringStringBufferStringBuilderSystemmathMockitonetAuthenticatorConnectExceptionCookieManagerCookieStoreDatagramPacketHttpCookieInetAddressJarURLConnectionMalformedURLExceptionMulticastSocketNetworkInterfaceServerSocketSocketSocketExceptionSocketTimeoutExceptionUnknownHostExceptionURISyntaxExceptionURLURLClassLoaderURLConnectionURLDecoderURLEncodernioBufferByteBufferchannelsAsynchronousChannelGroupAsynchronousFileChannelAsynchronousSocketChannelCompletionHandlerFileLockScatteringByteChannelSelectorspiSelectorProviderCharBufferfilePathWatchEventFileChannelFileLockMappedByteBufferPowerMockitoreflectionrmiRemoteExceptionscriptsecurityInvalidKeyExceptionMessageDigestsqlBatchUpdateExceptionDatabaseMetaDataPreparedStatementResultSetResultSetMetaDataStringsunnethttpserverFilterHttpServertextDecimalFormatMessageFormatParseExceptionthreadsUncaughtExceptionHandlerTimeutilArrayListArraysBase64CalendarCollectionsComparatorDefaultFileComparatorconcurrentArrayBlockingQueueatomicAtomicBooleanAtomicIntegerAtomicIntegerArrayAtomicLongArrayAtomicReferenceCompletableFutureCompletionServiceConcurrentHashMapConcurrentNavigableMapConcurrentSkipListMapCopyOnWriteArrayListCopyOnWriteArraySetCountDownLatchCyclicBarrierDelayQueueExchangerExecutorServiceForkJoinWorkerThreadFutureTaskLinkedBlockingQueuelocksAbstractQueuedSynchronizerConditionReadWriteLockReentrantLockPhaserRecursiveTaskRejectedExecutionExceptionRejectedExecutionHandlerRunnableFutureRunnableScheduledFutureScheduledExecutorServiceScheduledThreadPoolExecutorSemaphoreSynchronousQueueThreadFactoryThreadLocalRandomCurrencyDateDequeEnumMapFunctionFunctional InterfaceHashMapHashSetHashtableIteratorjarLinkedHashMapLinkedHashSetLinkedListListLocaleloggingMissingResourceExceptionObserverOptionalPreferencesPriorityQueuePropertiesQueueRandomregexMatcherPatternPatternSyntaxExceptionResourceBundleScannerSetStringTokenizerTimerTimerTaskTreeMapTreeSetVectorzipFileInputStreamGZIPOutputStreamZipInputStreamZipOutputStreamxmlbindJAXBContextDOMJDOMparsersDocumentBuilderDocumentBuilderFactorySAXParserSAXtransformTransformerTransformerFactoryXPathDesktop JavaaccessibilityawtdatatransferdndeventfontgeomGridLayoutimageprintIDEEclipseIntelliJ IDEANetBeansimageioJavaFXComboBoxDatePickerDialogEventFXMLListViewSceneChartImageTableViewTextJFreeChartprintsoundswingJButtonJCheckboxJColorChooserJDialogJFileChooserJFrameJLabelJLayerJListJRadioButtonJScrollPaneJSplitPaneJTabbedPaneJTableJTextFieldxuggleryoutubeEnterprise JavaApache CamelApache HadoopApache HTTP ClientApache JMeterApache Solrejb3InjectionStateful Session BeanStateless Session BeanTimerTransactionsWeb ServicesgwthibernateHikariCPhtmljettyjmsjmxjpajsfJBoss DroolsJBoss WildFlyjspjstljwsLog4jLogbackmailMavenmchangec3p0mybatisnamingNinja Web FrameworkQuartzrestjerseyresteasySeleniumservletSLF4JSNMP4JspringAOPBatchBeansBootIntegrationDataJDBCJPA/ORMMailMVCsecuritySessionSpElWeb FlowsqlrowsetJdbcRowSetRowSetMetaDataStruts 2TestNGTomcatVaadinws-soaJava Basicsarraysbreak/continue statementdata typesEnumprimitivesexceptionsfor loopgenericsif/else statementinstallationjdtLambdasoperatorsstaticsStringswitch statementsynchronizedtry/catch/finallyweb startwhile loopJVM LanguagesGroovyGrailsScalaPythonSoftware DevelopmentAmazon AWSAtlassianConnectElasticSearchGitMongoDBDevOpsDockerHome » Core Java » xml » bind » JAXB JSON ExampleAbout Ashraf Sarhan

Ashraf Sarhan is a passionate software engineer, an open source enthusiast, has a Bsc. degree in Computer and Information Systems from Alexandria University. He is experienced in building large, scalable and distributed enterprise applications/service in multiple domains. He also has a keen interest in JavaEE, SOA, Agile and Big Data technologies.




JAXB JSON Example
Posted by:  Ashraf Sarhan 
in  bind
September 8th, 2014
1 Comment
 ViewsIn this example we shall show you how to make use of JAXB-JSON. JAXB is a java architecture for XML binding is an efficient technology to convert XML to and from Java Object. EclipseLink JAXB (MOXy) is one of JAXB implementation which is mostly used to create java classes from XML or JSON. In Java JAXB provides two general purpose implementation.Marshalling – It Converts a Java object into XML or JSON.Unmarshalling – It Converts XML or JSON into a Java Object.Now, We will demonstrate the native object-to-JSON binding MOXy JAXB introduced in EclipseLink 2.4. With MOXy as your JAXB provider you can produce/consume JSON using the standard JAXB APIs (available in Java SE 6) without adding any compile time dependencies.Example:1. MOXy Dependency:    <dependencies>
   	 <dependency>
   		 <groupId>org.eclipse.persistence</groupId>
   		 <artifactId>org.eclipse.persistence.moxy</artifactId>
   		 <version>2.5.2</version>
   	 </dependency>
         <dependency>
   		 <groupId>javax.xml.bind</groupId>
   		 <artifactId>jaxb-api</artifactId>
   		 <version>2.2.11</version>
   	 </dependency>
    </dependencies>

2. Simple Pojo:Create an employee object, initialized with some values, it will be converted to / from JSON.Employee.java:package com.jcg.jaxb.json;

import java.util.List;

import javax.xml.bind.annotation.XmlRootElement;

/**
 * @author ashraf_sarhan
 * 
 */
@XmlRootElement
public class Employee {

	private int id;

	private String name;

	private List skills;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public List getSkills() {
		return skills;
	}

	public void setSkills(List skills) {
		this.skills = skills;
	}

}
3. Marshal Java Object to JSON:Create a JaxBContext using the Employee class then convert the “employee” Java object into JSON formatted string using Marshaller object with following three properties:MEDIA_TYPE – Determine the produced output media type (JSON, XML).JSON_INCLUDE_ROOT – Flag to determine whether you want to include the JSON root element in the produced output or not.JAXB_FORMATTED_OUTPUT – Flag to determine whether you want to format the produced output or not.MarshallerDemo.java:package com.jcg.jaxb.json;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import org.eclipse.persistence.jaxb.MarshallerProperties;

/**
 * @author ashraf_sarhan
 * 
 */
public class MarshallerDemo {

	/**
	 * @param args
	 * @throws JAXBException
	 * Marshaller POJO to JSON using EclipseLink MOXy
	 */
	public static void main(String[] args) throws JAXBException {

		// Creating a new employee pojo object with data
		Employee employee = new Employee();
		employee.setId(1);
		employee.setName("Ashraf");
		List skills = new ArrayList();
		skills.add("java");
		skills.add("sql");
		employee.setSkills(skills);

		// Create a JaxBContext
		JAXBContext jc = JAXBContext.newInstance(Employee.class);

		// Create the Marshaller Object using the JaxB Context
		Marshaller marshaller = jc.createMarshaller();
		
		// Set the Marshaller media type to JSON or XML
		marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,
				"application/json");
		
		// Set it to true if you need to include the JSON root element in the JSON output
		marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT, true);
		
		// Set it to true if you need the JSON output to formatted
		marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
		
		// Marshal the employee object to JSON and print the output to console
		marshaller.marshal(employee, System.out);
	}

}
Output:{
   "employee" : {
      "id" : 1,
      "name" : "Ashraf",
      "skills" : [ "java", "sql" ]
   }
}
4. Unmarshal JSON to Java Object:Create a JaxBContext using the Employee class then read the provided JSON string and convert it back to the “employee” Java object using Unmarshaller object with following two properties:MEDIA_TYPE – Determine the provided input media type (JSON, XML).JSON_INCLUDE_ROOT – Flag to determine whether you want to include the JSON root element in the provided input or not.UnmarshallerDemo.java:package com.jcg.jaxb.json;

import java.io.StringReader;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.transform.stream.StreamSource;

import org.apache.commons.lang3.StringUtils;
import org.eclipse.persistence.jaxb.UnmarshallerProperties;

/**
 * @author ashraf_sarhan
 * 
 */
public class UnmarshallerDemo {

	/**
	 * @param args
	 * @throws JAXBException
	 *             Unmarshaller JSON to POJO using EclipseLink MOXy
	 */
	public static void main(String[] args) throws JAXBException {

		// Create a JaxBContext
		JAXBContext jc = JAXBContext.newInstance(Employee.class);

		// Create the Unmarshaller Object using the JaxB Context
		Unmarshaller unmarshaller = jc.createUnmarshaller();

		// Set the Unmarshaller media type to JSON or XML
		unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,
				"application/json");

		// Set it to true if you need to include the JSON root element in the
		// JSON input
		unmarshaller
				.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT, true);

		// Create the StreamSource by creating StringReader using the JSON input
		StreamSource json = new StreamSource(
				new StringReader(
						"{\"employee\":{\"id\":1,\"name\":\"Ashraf\",\"skills\":[\"java\",\"sql\"]}}"));

		// Getting the employee pojo again from the json
		Employee employee = unmarshaller.unmarshal(json, Employee.class)
				.getValue();

		// Print the employee data to console
		System.out.println("Employee Id: " + employee.getId());
		System.out.println("\nEmployee Name: " + employee.getName());
		System.out.println("\nEmployee Skills: "
				+ StringUtils.join(employee.getSkills(), ','));
	}

}
Output:Employee Id: 1
Employee Name: Ashraf
Employee Skills: java,sql
TipSpecify MOXy as the JAXB Provider (jaxb.properties)
To configure MOXy as your JAXB provider simply add a file named jaxb.properties in the same package as your domain model with the following entry:javax.xml.bind.context.factory=org.eclipse.persistence.jaxb.JAXBContextFactory
5. Download the Source Code of this example:This was an example of how to use JAXB-JSON to marshal and unmarshal java POJO using the native Object to JSON binding of MOXy JAXB.Download
You can download the full source code of this example here: JAXB-JSON Example Code
EclipseLink 2.4 JAXB json MOXy 2014-09-08+Ashraf SarhanTagged with: EclipseLink 2.4 JAXB json MOXy Do you want to know how to develop your skillset to become a Java Rockstar?Subscribe to our newsletter to start Rocking right now!To get you started we give you our best selling eBooks for FREE! 1. JPA Mini Book2. JVM Troubleshooting Guide3. JUnit Tutorial for Unit Testing4. Java Annotations Tutorial5. Java Interview Questions6. Spring Interview Questions7. Android UI Design and many more .... 
Email address: 

 Receive Java & Developer job alerts in your Area 
Leave this field empty if you're human: Like This Article? Read More From Java Code Geeks    
 Subscribe Notify of
new follow-up commentsnew replies to my comments





Label









{}
[+]


Name*

Email*

Website

I agree to the Terms and Privacy Policy
The comment form collects your name, email and content to allow us keep track of the comments placed on the website.  Please read and accept our website Terms and Privacy Policy to post a comment.












Label









{}
[+]


Name*

Email*

Website

I agree to the Terms and Privacy Policy
The comment form collects your name, email and content to allow us keep track of the comments placed on the website.  Please read and accept our website Terms and Privacy Policy to post a comment.










This site uses Akismet to reduce spam. Learn how your comment data is processed.
1 Comment
Oldest

Newest
Most Voted Inline FeedbacksView all comments

Chirag gupta

1 year ago
I am getting while implementing MarshalDemo.java classException in thread “main” java.lang.NoClassDefFoundError: org/eclipse/persistence/internal/oxm/mappings/VariableXPathObjectMapping
at org.eclipse.persistence.jaxb.compiler.Generator.<init>(Generator.java:145)
at org.eclipse.persistence.jaxb.JAXBContext$TypeMappingInfoInput.createContextState(JAXBContext.java:1088)
at org.eclipse.persistence.jaxb.JAXBContext.<init>(JAXBContext.java:189)
at org.eclipse.persistence.jaxb.JAXBContextFactory.createContext(JAXBContextFactory.java:165)
at org.eclipse.persistence.jaxb.JAXBContextFactory.createContext(JAXBContextFactory.java:152)
at org.eclipse.persistence.jaxb.JAXBContextFactory.createContext(JAXBContextFactory.java:112)
at org.eclipse.persistence.jaxb.JAXBContextFactory.createContext(JAXBContextFactory.java:102)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at javax.xml.bind.ContextFinder.newInstance(Unknown Source)
at javax.xml.bind.ContextFinder.newInstance(Unknown Source)
at javax.xml.bind.ContextFinder.find(Unknown Source)
at javax.xml.bind.JAXBContext.newInstance(Unknown Source)
at javax.xml.bind.JAXBContext.newInstance(Unknown Source)
at com.test.Test2.main(Test2.java:24)
Caused by: java.lang.ClassNotFoundException: org.eclipse.persistence.internal.oxm.mappings.VariableXPathObjectMapping
at java.net.URLClassLoader.findClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
… 17 more
0


ReplyNewsletter
106,939 insiders are already enjoying weekly updates and complimentary whitepapers!
Join them now to gain exclusive access to the latest news in the Java world, as well as insights about Android, Scala, Groovy and other related technologies.
Email address: 

 Receive Java & Developer job alerts in your Area 
Leave this field empty if you're human: Join Us

With 1,240,600 monthly unique visitors and over 500 authors we are placed among the top Java related sites around. Constantly being on the lookout for partners; we encourage you to join us. So If you have a blog with unique and interesting content then you should check out our JCG partners program. You can also be a guest writer for Java Code Geeks and hone your writing skills!Knowledge BaseCoursesMinibooksNewsResourcesTutorialsThe Code Geeks Network.NET Code GeeksJava Code GeeksSystem Code GeeksWeb Code GeeksHall Of FameAndroid Alert Dialog ExampleAndroid OnClickListener ExampleHow to convert Character to String and a String to Character Array in JavaJava Inheritance exampleJava write to File Examplejava.io.FileNotFoundException – How to solve File Not Found Exceptionjava.lang.arrayindexoutofboundsexception – How to handle Array Index Out Of Bounds Exceptionjava.lang.NoClassDefFoundError – How to solve No Class Def Found ErrorJSON Example With Jersey + JacksonSpring JdbcTemplate ExampleAbout Java Code GeeksJCGs (Java Code Geeks) is an independent online community focused on creating the ultimate Java to Java developers resource center; targeted at the technical architect, technical team lead (senior developer), project manager and junior developers alike. JCGs serve the Java, SOA, Agile and Telecom communities with daily news written by domain experts, articles, tutorials, reviews, announcements, code snippets and open source projects.DisclaimerAll trademarks and registered trademarks appearing on Java Code Geeks are the property of their respective owners. Java is a trademark or registered trademark of Oracle Corporation in the United States and other countries. Examples Java Code Geeks is not connected to Oracle Corporation and is not sponsored by Oracle Corporation.

Examples Java Code Geeks and all content copyright © 2010-2022,  Exelixis Media P.C. | Terms of Use | Privacy Policy | Contact | Do not share my Personal Information  









wpDiscuzInsert
                                            

