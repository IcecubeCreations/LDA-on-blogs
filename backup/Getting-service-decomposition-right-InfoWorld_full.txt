





  




Getting service decomposition right | InfoWorld














































































































Close Ad




















infoworld

UNITED STATES 


United States 


United Kingdom 















Welcome! Here are the latest Insider stories.

Review: Redpanda gives Kafka a run for its money
Review: YugabyteDB does PostgreSQL proud
Review: Databricks Lakehouse Platform 
Review: The 10 best JavaScript editors


More Insider
Sign Out




Sign In
Register
























Sign Out

Sign In
Register









NEW Insider PRO
								Learn More



Latest Insider

Review: The 6 best JavaScript IDEs
15 tools that make Kubernetes easier
13 tools that make Kubernetes better
How to evaluate software asset management tools



NEW FROM IDG

Learn More
















Welcome! Check out the latest Insider stories here.
Sign Out

Sign In
Register







More from the Foundry Network








About Us |
Contact |
Republication Permissions |
Privacy Policy |
Cookie Policy |
Member Preferences |
Advertising |
Foundry Careers |
Ad Choices |
E-commerce Links |
California: Do Not Sell My Personal Info |


Follow Us


















×





Close
























Home



Getting service decomposition right

Those building SOAs often are either over- or underdecomposing their services 














































By David Linthicum


InfoWorld |












































There seems to be some clear trends when you look at those building SOAs: They either break out way too many services or not enough.  Let's back up a bit.The core notion of SOA is to break your architecture down to information and information bound to services -- thus, the idea behind SOA, with the "S" being "services." However, many are taking service decomposition too far or not far enough. Perhaps I can help.[ Keep up on developments in SOA with InfoWorld's Technology: Architecture newsletter. ]If service decomposition appears to be new with SOA, it's really not. The fact is that decomposition, as a design technique, has been around since the structured programming days when we did process decomposition to better define systems before we turned the design over to programmers.Service decomposition, in essence, is breaking larger, coarser-grained services down to smaller, finer-grained services. Depending on the objectives of the architecture, many decomposition criteria can be created and applied. This criteria has a huge impact on the architecture, including:
Agility
Performance
Development time
Reuse
Complexity
Thus, you have to know when to stop decomposing services, no matter if the services are abstracted from an existing system or systems or built from scratch. But how? Here are Dave's quick and dirty tips for service decomposition: 
Make sure to establish architectural criteria around service decomposition, considering the items listed above. Make sure to write it down and share it among the other architects. For instance, somebody needs to determine how coarse- or fine-grained a service needs to be to provide both the required performance as well as the reuse.
As a rule of thumb, a service should provide a single bit of functionality that would typically take less than 500 lines of 3GL code (e.g., C++). For instance, Verify_Customer_Credit_Rating, which is directed to a discrete function, versus Process_Customer_Credit_Application, which is more about many functions combined. Again, just a rule of thumb.
Make sure to include the developers in the service decomposition process. They should be capable of letting you know what a usable service is and what it's not, and thus, when you're over- or underdecomposing.
That reminds me, what was Beethoven doing in his grave? Decomposing. Forgive me.


 




David S. Linthicum is an internationally recognized industry expert and thought leader. His views are his own.


Follow



















Copyright © 2009 IDG Communications, Inc.





 How to choose a low-code development platform
























InfoWorld
 

Follow us














About Us
Contact
Republication Permissions
Privacy Policy
Cookie Policy
Member Preferences
Advertising
Foundry Careers
Ad Choices
E-commerce Links
California: Do Not Sell My Personal Info







Copyright © 2022 IDG Communications, Inc.


Explore the Foundry Network descend

CIO
Computerworld
CSO Online
InfoWorld
Network World


















































