








Service Decomposition | Arcitura Patterns






































Arcitura Patterns

Search


Primary Menu
Skip to content
Symbol Legend
 





Search for:



 







Service Decomposition


Service API Patterns, Protocols, Coupling Types, Metrics > Service API Management Patterns > Service Decomposition
 
Service Decomposition
How can the granularity of a service be increased subsequent to its implementation?
Services may be initially designed with a coarse level of service granularity or they may become more coarse-grained over time, as functions are added in response to new requirements. However, at some point, it may become evident that the functional scope of a service has become bloated to an extent that the service is no longer performing adequately at runtime. Or, perhaps the service has become burdensome to maintain, scale or administer due to it having to serve too many different types of service consumers. 
The Service Decomposition pattern is applied to decompose a coarse-grained service into a set of fine-grained services that collectively represent the functional scope and context of the original service, but establish distinct functional contexts of their own.

 
 
 
 
 
 
 
 
 
 
 
 
The coarse-grained Invoice service is decomposed into a set of fine-grained services that collectively provide the functionality of the original Invoice service.
Carrying out this pattern essentially requires that the existing, coarse-grained service be broken apart and its logic reorganized and optimized into new, finer-grained functional boundaries. 

 
 
 
 
 
 
 
 
 
 
 
 
The three new fine-grained services are implemented with correspondingly narrower service APIs and individually leaner service architectures.
Unless it is decided to also retrofit previous service consumer programs that formed dependencies on the original service API, the Proxy Capability pattern will likely need to be applied to preserve the original service API for backwards compatibility purposes.
The preventative application of the Decomposed Capability pattern can ease the impact of applying the Service Decomposition pattern and will also result in a cleaner separation of functional service contexts. 






This pattern is covered in Module 12: Fundamental Service API Design & Management..
For more information regarding service API design & management courses and accreditation, visit the Service API Specialist program page.











About Arcitura Patterns
Cloud Computing Patterns, Mechanisms

Basics

Origins and Influences

A Brief History
Business Drivers
Technology Innovations


Basic Concepts and Terminology

Cloud
IT Resource
On-Premise
Scaling
Cloud Service
Cloud Service Consumer


Goals and Benefits

Reduced Investments and Proportional Costs
Increased Scalability
Increased Availability and Reliability


Risks and Challenges

Increased Security Vulnerabilities
Reduced Operational Governance Control
Limited Portability Between Cloud Providers
Multi-Regional Regulatory and Legal Issues


Roles and Boundaries

Cloud Provider
Cloud Consumer
Cloud Service Owner
Cloud Resource Administrator
Additional Resources
Organizational Boundary
Trust Boundary


Cloud Characteristics

On-Demand Usage
Ubiquitous Access
Multitenancy (and Resource Pooling)
Elasticity
Measured Usage
Resiliency


Cloud Delivery Models

Infrastructure-as-a-Service (IaaS)
Platform-as-a-Service (PaaS)
Software-as-a-Service (SaaS)
Combining Cloud Delivery Models


Cloud Deployment Models

Public Clouds
Community Clouds
Private Clouds
Hybrid Clouds
Other Deployment Models


Broadband Networks and Internet Architecture

Internet Service Providers (ISPs)
Connectionless Packet Switching (Datagram Networks)
Router-Based Interconnectivity
Technical and Business Considerations


Data Center Technology

Virtualization
Standardization and Modularity
Automation
Remote Operation and Management
High Availability
Security-Aware Design, Operation, and Management
Facilities
Computing Hardware
Storage Hardware
Network Hardware
Other Considerations


Virtualization Technology

Hardware Independence
Server Consolidation
Resource Replication
Operating System-Based Virtualization
Hardware-Based Virtualization
Virtualization Management
Technical and Business Considerations


Web Technology

Basic Web Technology
Web Applications


Multitenant Technology


Mechanisms

A – B

Audit Monitor
Automated Scaling Listener
Application Delivery Controller
Attribute Authority
Attribute-Based Access Control System
Attestation Service
Automatically Defined Perimeter Controller
Authentication Gateway Service
Billing Management System


C

Certificate
Certificate Authority
Certificate Revocation List
Certificate Trust Store
Certificate Validation Service
Cloud Consumer Gateway
Cloud Workload Scheduler
Cryptographic Key Management System
Cloud Storage Device
Cloud Storage Data Placement Auditor
Cloud Storage Device Performance Monitor
Cloud Storage Management Portal
Cloud Storage Data Aging Management
Cloud-Based Security Groups
Cloud Usage Monitor
Container


D – H

Data Transport
Digital Signature
Domain Name Service
Encryption
Endpoint Threat Detection and Response
Enterprise Mobility Management System
Failover System
Geotag
Hypervisor
Hardened Virtual Server Image
Hardware-Based VM Discovery System
Hardware Security Module
Honeypot
Host Based Security System


I – P

Identity and Access Management
Import and Export
Intrusion Detection and Prevention Systems
Live VM Migration
Load Balancer
Logical Network Perimeter
LUN Masking
Malware Hash
Multi-Device Broker
Network Forensic Monitor
Orchestration Engine
Pay-Per-Use Monitor
Physical Uplink
Platform Trust Policy
Public Key Infrastructure


R – S

RAID-level Identifier
Ready-Made Environment
Remote Administration System
Resource Cluster
Resource Management System
Resource Replication
Sandbox
Secure Token Service
Security Information and Event Management System
Single Sign-On
SLA Management System
SLA Monitor
Storage Path Masking
State Management Database
Sub-LUN Migration


T – Z

Threat Intelligence System
Virtual Disk
Virtual Firewall
Traffic Filter
Virtual Network
Traffic Monitor
Virtual Private Cloud
Trusted Platform Module
Virtual Private Network
Virtual Appliance
Virtual CPU
Virtual Server
VPN Cloud Hub
Virtual Infrastructure Manager
Virtual RAM
Virtual Server Snapshot
Virtual Server State Manager
Virtual Switch
Virtualization Agent
Virtualization Monitor




Sharing, Scaling and Elasticity Patterns

 Broad Access
 Cross-Storage Device Vertical Tiering
 Dynamic Data Normalization
 Dynamic Scalability
 Elastic Disk Provisioning
 Elastic Network Capacity
 Elastic Resource Capacity
 Intra-Storage Device Vertical Data Tiering
 Load Balanced Virtual Server Instances
 Load Balanced Virtual Switches
 Memory Over-Committing
 NIC Teaming
 Service Load Balancing
 Service State Management
 Shared Resources
 Storage Workload Management
 Workload Distribution


Reliability, Resiliency and Recovery Patterns

 Dynamic Failure Detection and Recovery
 Hypervisor Clustering
 Multipath Resource Access
 Non-Disruptive Service Relocation
 Redundant Physical Connection for Virtual Servers
 Redundant Storage
 Resource Pooling
 Resource Reservation
 Storage Maintenance Window
 Synchronized Operating State
 Virtual Server Auto Crash Recovery
 Zero Downtime


Data Management and Storage Device Patterns

 Direct I/O Access
 Direct LUN Access
 Single Root I/O Virtualization
 Cloud Storage Data at Rest Encryption
 Cloud Storage Data Lifecycle Management
 Cloud Storage Data Management
 Cloud Storage Data Placement Compliance Check
 Cloud Storage Device Masking
 Cloud Storage Device Path Masking
 Cloud Storage Device Performance Enforcement
 Virtual Disk Splitting
 Sub-LUN Tiering
 RAID-Based Data Placement
 IP Storage Isolation


Virtual Server and Hypervisor Connectivity and Management Patterns

 Cross-Hypervisor Workload Mobility
 External Virtual Server Accessibility
 Persistent Virtual Network Configuration
 Stateless Hypervisor
 Virtual Server Connectivity Isolation
 Virtual Server Folder Migration
 Virtual Server NAT Connectivity
 Virtual Server-to-Host Affinity
 Virtual Server-to-Host Anti-Affinity
 Virtual Server-to-Host Connectivity
 Virtual Server-to-Virtual Server Affinity
 Virtual Server-to-Virtual Server Anti-Affinity
 Virtual Switch Isolation


Monitoring, Provisioning and Administration Patterns

 Automated Administration
 Bare-Metal Provisioning
 Centralized Remote Administration
 Pay-as-You-Go
 Platform Provisioning
 Power Consumption Reduction
 Rapid Provisioning
 Realtime Resource Availability
 Resource Management
 Self-Provisioning
 Usage Monitoring


Cloud Service and Storage Security Patterns

 Cloud Data Breach Protection
 Cloud Resource Access Control
 Cloud VM Platform Encryption
 Detecting and Mitigating User-Installed VMs
 Geotagging
 Hypervisor Protection
 In-Transit Cloud Data Encryption
 Mobile BYOD Security
 Permanent Data Loss Protection
 Secure Cloud Interfaces and APIs
 Trusted Cloud Resource Pools
 Trusted Platform BIOS


Network Security, Identity & Access Management and Trust Assurance Patterns

 Automatically Defined Perimeter
 Cloud Authentication Gateway
 Cloud Denial-of-Service Protection
 Cloud Key Management
 Cloud Traffic Hijacking Protection
 Collaborative Monitoring and Logging
 Federated Cloud Authentication
 Independent Cloud Auditing
 Secure Connection for Scaled VMs
 Secure External Cloud Connection
 Secure On-Premise Internet Access
 Threat Intelligence Processing
 Trust Attestation Service


Containerization Patterns

 Container Chain
 Container Sidecar
 Logical Pod Container
 Rich Container
 Single Node Multi-Containers
 Leader Node Election
 Micro Scatter-Gather
 Multi-Container Isolation Control
 Serverless Deployment
 Volatile Configuration


Compound Patterns

Overview
Burst In
Burst Out to Private Cloud
Burst Out to Public Cloud
Cloud Authentication
Cloud Balancing
Elastic Environment
Cloud Bursting
Infrastructure-as-a-Service (IaaS)
Isolated Trust Boundary
Multitenant Environment
Platform-as-a-Service (PaaS)
Private Cloud
Public Cloud
Resilient Environment
Resource Workload Management
Secure Burst Out to Private Cloud/Public Cloud
Software-as-a-Service (SaaS)




Microservice and Containerization Patterns

Fundamental Microservice and Container Patterns

 Logical POD Container
 Micro Task Abstraction
 Micro Task Segregation
 Microservice Deployment
 Rich Container


Base Deployment Patterns

 Container Sidecar
 Dedicated Microservice Database
 Microservice Ambassador


Boundary Definition Patterns

 Microservice Layers
 Microservice Isolation Levels
 Multi-Container Isolation Control


Containerization Patterns

 Container Chain
 Container Sidecar
 Containerization
 Leader Node Election
 Logical POD Container
 Micro Scatter-Gather
 Multi-Container Isolation Control
 Rich Container
 Serverless Microservice Deployment
 Single Node Multi-Containers
 Volatile Configuration


Interchange Patterns

 Autonomous Proxy Service
 Microservice Compositor
 Microservice Instance Registration


State & Data Access Patterns

 Centralized Isolated State Database
 Pre-Defined Data View
 Shared Isolated Database
 Synchronized Cross-Instance Events


Scalability Patterns

 Dynamic Scalability
 Service Load Balancing
 Workload Distribution


High Performance & Reliability Patterns

 Composition Autonomy
 Container Chain
 Leader Node Election
 Micro Scatter-Gather
 Redundant Implementation
 Serverless Microservice Deployment
 Single Node Multi-Containers
 Volatile Configuration


Event Processing Patterns

 Appended Events
 Atomic Event Processing
 Event-Driven Messaging


Utility Patterns

 Distributed Diagnostics
 Log Aggregator




SOA Patterns

Basics

What is SOA

Fundamental Design Terminology and Concepts

Design Characteristic
Design Principle
Design Paradigm
Design Pattern
Design Standard
Best Practice


Elements of Service-Oriented Computing

Service-Oriented Architecture (SOA)
Services and Service-Orientation
Service Compositions
Service Inventory
A Conceptual View of Service-Oriented Computing
A Physical View of Service-Oriented Computing


Goals and Benefits of Service-Oriented Computing

Increased Intrinsic Interoperability
Increased Federation
Increased Vendor Diversification Options
Increased Business and Technology Alignment
Increased ROI
Increased Organizational Agility
Reduced IT Burden


Service-Oriented Computing in the Real World

About Web Services
Service Models and Service Layers
Service Inventory Blueprints
Service-Oriented Analysis
Service-Oriented Design




Service-Orientation Principles

Introduction to Service-Orientation

Services
The Service-Orientation Design Paradigm
Origins and Influences of Service-Orientation


Service-Orientation Design Principles

Standardized Service Contracts
Service Loose Coupling
Service Abstraction
Service Reusability
Service Autonomy
Service Statelessness
Service Discoverability
Service Composability
Service-Orientation and Interoperability


Effects of Service-Orientation on the Enterprise

Service-Orientation and the Concept of “Application”
Service-Orientation and the Concept of “Integration”
The Service Composition


Service-Orientation in the Real World

Life Before Service-Orientation
The Need for Service-Orientation
Challenges Introduced by Service-Orientation
Additional Considerations




SOA Manifesto

SOA Manifesto (Original)
SOA Manifesto (Annotated)

English
Chinese
Dutch
French
German
Portuguese
Russian
Spanish
Turkish




SOA Planning

Four Pillars of Service-Orientation

Teamwork
Education
Discipline
Balanced Scope


Levels of Organizational Maturity

Service Neutral Level
Service Aware Level
Service Capable Level
Business Aligned Level
Business Driven Level
Service Ineffectual Level
Service Aggressive Level


SOA Funding Models

Platform (Service Inventory) Funding
Service Funding




SOA Project Fundamentals

Project and Lifecycle Stages

SOA Adoption Planning
Service Inventory Analysis
Service-Oriented Analysis (Service Modeling)
Service-Oriented Design (Service Contract)
Service Logic Design
Service Development
Service Testing
Service Deployment and Maintenance
Service Usage and Monitoring
Service Discovery
Service Versioning and Retirement


Organizational Roles

Service Analyst
Service Architect
Service Developer
Service Custodian
Cloud Service Owner
Service Administrator
Cloud Resource Administrator
Schema Custodian
Policy Custodian
Service Registry Custodian
Technical Communications Specialist
Enterprise Architect
Enterprise Design Standards Custodian (and Auditor)
SOA Quality Assurance Specialist
SOA Security Specialist
SOA Governance Specialist
Other Roles


Service Profiles

Service-Level Profile Structure
Capability Profile Structure
Additional Considerations




SOA Methodology

Service Models

Service Models and Service Layers
Entity Services
Task Services
Utility Services


Delivery Processes

Top Down vs. Bottom Up
Choosing a Delivery Strategy




SOA Governance

Governance 101

The Scope of Governance
The Building Blocks of a Governance System
Governance and SOA


SGPO Jurisdiction Models

Centralized Enterprise SGPO
Centralized Domain SGPO
Federated Domain SGPOs
Independent Domain SGPOs






Foundational Inventory Patterns

 Canonical Protocol
 Canonical Schema
 Domain Inventory
 Enterprise Inventory
 Logic Centralization
 Service Layers
 Service Normalization


Logical Inventory Layer Patterns

 Entity Abstraction
 Process Abstraction
 Utility Abstraction
 Micro Task Abstraction


Inventory Centralization Patterns

 Policy Centralization
 Process Centralization
 Rules Centralization
 Schema Centralization


Inventory Implementation Patterns

 Canonical Resources
 Cross-Domain Utility Layer
 Dual Protocols
 Inventory Endpoint
 Service Grid
 State Repository
 Stateful Services
 Augmented Protocols


Inventory Governance Patterns

 Canonical Expression
 Canonical Versioning
 Metadata Centralization


Foundational Service Patterns

 Agnostic Capability
 Agnostic Context
 Functional Decomposition
 Non-Agnostic Context
 Service Encapsulation


Service Implementation Patterns

 Partial State Deferral
 Partial Validation
 Redundant Implementation
 Service Data Replication
 Service Façade
 UI Mediator
 Reference Data Centralization
 Microservice Deployment
 Containerization


Service Security Patterns

 Exception Shielding
 Message Screening
 Service Perimeter Guard
 Trusted Subsystem


Service Contract Design Patterns

 Concurrent Contracts
 Contract Centralization
 Contract Denormalization
 Decoupled Contract
 Validation Abstraction


Legacy Encapsulation Patterns

 File Gateway
 Legacy Wrapper
 Multi-Channel Endpoint


Service Governance Patterns

 Compatible Change
 Decomposed Capability
 Distributed Capability
 Proxy Capability
 Service Decomposition
 Service Refactoring
 Termination Notification
 Version Identification


Capability Composition Patterns

 Capability Composition
 Capability Recomposition


Service Messaging Patterns

 Asynchronous Queuing
 Event-Driven Messaging
 Intermediate Routing
 Messaging Metadata
 Reliable Messaging
 Service Agent
 Service Callback
 Service Instance Routing
 Service Messaging
 State Messaging


Composition Implementation Patterns

 Agnostic Sub-Controller
 Atomic Service Transaction
 Compensating Service Transaction
 Composition Autonomy


Service Interaction Security Patterns

 Brokered Authentication
 Data Confidentiality
 Data Origin Authentication
 Direct Authentication


Transformation Patterns

 Data Format Transformation
 Data Model Transformation
 Protocol Bridging


REST-inspired Patterns

 Entity Linking
 Lightweight Endpoint
 Reusable Contract
 Content Negotiation
 Endpoint Redirection
 Idempotent Capability


Compound Patterns

Overview
Canonical Schema Bus
Enterprise Service Bus
Federated Endpoint Layer
Official Endpoint
Orchestration
Service Broker
Three-Layer Inventory
Uniform Contract




Big Data Patterns, Mechanisms

Mechanisms

Overview
Compression Engine
Coordination Engine
Data Governance Manager
Data Transfer Engine
Processing Engine
Productivity Portal
Query Engine
Resource Manager
Security Engine
Serialization Engine
Storage Device
Workflow Engine


Data Source Patterns

 Data Size Reduction
 Dataset Decomposition
 File-based Source
 Relational Source
 Streaming Source


Storage Patterns

 Cloud-based Big Data Storage
 Confidential Data Storage
 High Volume Binary Storage
 High Volume Hierarchical Storage
 High Volume Linked Storage
 High Volume Tabular Storage
 Intermediate Results Storage
 Realtime Access Storage
 Streaming Storage


Data Processing Patterns

 Automated Dataset Execution
 Automated Processing Metadata Insertion
 Automatic Data Replication and Reconstruction
 Automatic Data Sharding
 Cloud-based Big Data Processing
 Complex Logic Decomposition
 File-based Sink
 High Velocity Realtime Processing
 Large-Scale Batch Processing
 Large-Scale Graph Processing
 Processing Abstraction
 Relational Sink
 Streaming Egress


Data Transfer and Transformation Patterns

 Canonical Data Format
 Dataset Denormalization
 Direct Data Access
 Fan-in Ingress
 Fan-out Ingress
 Indirect Data Access
 Integrated Access


Data Maintenance Patterns

 Centralized Access Management
 Centralized Dataset Governance


Compound Patterns

Overview
Analytical Sandbox
Application Enhancement
Batch Data Processing
Big Data Pipeline
Big Data Processing Environment
Big Data Warehouse
Data Transformation
Online Data Repository
Operational Data Storage
Poly Sink
Poly Source
Poly Storage
Random Access Storage
Realtime Data Processing
Streaming Access Storage
Unstructured Data Store




DevOps Mechanisms, Metrics, Tools

Mechanisms

Audit Monitor
Availability Monitor
Code Quality Monitor
Compliance Monitor
Continuous Testing Monitor
Functional/Operational Monitor
Performance Monitor
SLA Monitor


Metrics

Application Performance
Application Usage
Automated Test Pass Percentage
Availability
Customer Support Tickets
Cycle Time
Defect Escape Rate
Deployment Frequency
Deployment Time
Error Rate
Failed Deployments
Lead Time
Mean Time Between Failures (MTBF)
Mean Time to Detection (MTTD)
Mean Time to Failure (MTTF)
Mean Time to Recover (MTTR)
Service-Level Agreements (SLAs)


Tools

A – C
D – M
O – Z




Service API Patterns, Protocols, Coupling Types, Metrics

Fundamental Service API Patterns

Decoupled Service API
Endpoint Redirection
Idempotent Capability
Service Agent
Service API Centralization
Service API Proxy
Service Façade


Service API Design Patterns

Canonical Protocol
Canonical Schema
Concurrent Service APIs
Dual Protocols
Entity Linking
Legacy Wrapper
Lightweight Endpoint
Messaging Metadata
Schema Centralization
Service API Denormalization
Service Mesh
State Messaging


Service API Proxy and Gateway Patterns

Data Model Transformation
Data Format Transformation
Protocol Bridging
Intermediate Routing
Brokered Authentication
Multi-Channel Endpoint


Service API Versioning Patterns

Canonical Versioning
Termination Notification
Version Identification


Service API Management Patterns

Decomposed Capability
Distributed Capability
Partial Validation
Proxy Capability
Service API Monetization
Service Decomposition
Validation Abstraction




Blockchain Patterns, Mechanisms, Models, Metrics

Mechanisms

Automated Node Deployer
Block Maker
Chaining Engine
Consensus Processor
Hashing Engine
Ledger Replicator
Node Placement Monitor
Node Repository


Metrics

Active Nodes
Blocks Per Hour, Blocks Per Day
Full Node/Partial Node Ratio
Transaction Latency
Transactions Per Second
Transaction Throughput
Unique App Downloads


Integrity and Validation Patterns

Block Singleton
Sidechain
Block Validation Consensus


Scalability and Reliability Patterns

Auto-Scaling Nodes
Guaranteed Minimum Full Nodes
Block Size Update
Geo Scaling


Security and Privacy Patterns

Federated Chain
Forced On-Chain Transactions
User Data Protection


Utility Patterns

Node Task Abstraction
Transaction Record Tagging




Machine Learning Patterns, Mechanisms

Data Exploration Patterns

Associativity Computation
Central Tendency Computation
Graphical Summary Computation
Variability Computation


Data Reduction Patterns

Feature Selection
Feature Extraction


Data Wrangling Patterns

Feature Discretization
Feature Imputation
Feature Standardization


Unsupervised Learning Patterns

Category Discovery
Pattern Discovery


Supervised Learning Patterns

Numerical Prediction


Model Evaluation Patterns

Baseline Modeling
Training Performance Evaluation


Model Optimization Patterns

Ensemble Learning
Incremental Model Learning
Lightweight Model Implementation


Mechanisms

Data Governance Manager
Data Transfer Engine
Processing Engine
Storage Device




Artificial Intelligence (AI) Patterns, Neurons and Neural Networks

Data Wrangling Patterns

Feature Encoding
Feature Imputation
Feature Scaling
Dimensionality Reduction


Supervised Learning Patterns

Supervised Network Configuration


Model Evaluation Patterns

Training Performance Evaluation


Model Optimization Patterns

Overfitting Avoidance




Internet of Things (IoT) Patterns, Mechanisms, Layers, Metrics

Mechanisms

Trusted Platform Module


Fundamental Functional Distribution Patterns

Non-Controlling Sensor Device


Telemetry Data Processing Patterns

Information Transduction and Encoding




Containerization Patterns, Mechanisms
 




				Copyright © Arcitura Education Inc. All rights reserved. Arcitura is a trademark of Arcitura Education Inc.
			






