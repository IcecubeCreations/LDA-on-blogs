











Strategies for Decomposing a System into Microservices





























































BT









Live Webinar and Q&A: Web Server and Reverse-Proxy Cache 101 (Live Webinar June 16th, 2022)

                            Register Now
                        



Close
                    





Toggle Navigation 





                        Facilitating the Spread of Knowledge and Innovation in Professional Software Development
                    

English edition 




English edition
Chinese edition
Japanese edition
French edition






                        Contribute
                    





Search








Sign Up / Login











Email



Password





Forgot password ?




InfoQ Account Email





Back to login




Resend Activation





Back to login




Login with:

Google
Microsoft
Twitter
Facebook



Don't have an InfoQ account?
Sign Up







Notifications1




Login to unlock InfoQ's new features





Stay up to date and get notified
Like your favorite content
Follow your favorite editors and peers

Sign Up / Login
Don't have an account? Register Here









                        Logo - Back to homepage
                    

		
			
			
			
		2,429,182 Apr unique visitors
	


News
Articles
Presentations
Podcasts
Guides



Topics


Development


Java
Kotlin
.Net
C#
Swift
Go
Rust
JavaScript




Featured in  Development







Reproducible Development with Containers

Avdi Grimm describes the future of development, which is already here. Get a tour of a devcontainer, and contrast it with a deployment container.








All in  development




Architecture & Design


Architecture
Enterprise Architecture
Scalability/Performance
Design
Case Studies
Microservices
Service Mesh
Patterns
Security




Featured in  Architecture & Design







Oren Eini on RavenDB, including Consistency Guarantees and C# as the Implementation Language

Wesley Reisz talks to Oren Eini about the history of RavenDB. RavenDB is a fully transactional NoSQL Document database that implements both CP and AP guarantees at different times. The two discuss those CP/AP distributed systems challenges, the choice of implementation language (C#), and the current plans for RavenDB 6.0, which includes a server-side sharding implementation.








All in  architecture-design




AI, ML & Data Engineering


Big Data
Machine Learning
NoSQL
Database
Data Analytics
Streaming




Featured in  AI, ML & Data Engineering







Machine Learning at the Edge

Katharine Jarmul discusses utilizing new distributed data science and machine learning models, such as federated learning, to learn from data at the edge.








All in  ai-ml-data-eng




Culture & Methods


Agile
Diversity
Leadership
Lean/Kanban
Personal Growth
Scrum
Sociocracy
Software Craftmanship
Team Collaboration
Testing
UX




Featured in  Culture & Methods







How to Run Your Product Department Like a Coach

Having found what I thought was my calling as an agile coach, I took the tough decision to move sideways into Product Management in the hope of using what I’d learned to one day run my own department. I believed that coming from coaching would allow me to see things others could not and create something special. Time will tell if I have succeeded, this is the story of where I am up to so far.








All in  culture-methods




DevOps


Infrastructure
Continuous Delivery
Automation
Containers
Cloud
Observability




Featured in  DevOps







Panel: Secure Systems

The panelists discuss the security for the software supply chain and software security risk measurement.








All in  devops




EventsNew




Helpful links



                About InfoQ
            



                InfoQ Editors
            



                Contribute
            



                About C4Media
            


Diversity




Choose your language

En
中文
日本
Fr










InfoQ Live June
Learn how cloud architectures achieve cost savings, improve reliability & deliver value. Register Now.





InfoQ Live July
Learn how to migrate an application to serverless and what are the common mistakes to avoid. Register Now.





QCon San Francisco
Understand the emerging software trends you should pay attention to. Attend in-person on Oct 24-28, 2022.















InfoQ Homepage
News
Strategies for Decomposing a System into Microservices






            Architecture & Design
        





QCon San Francisco (Oct 24-28): Uncover emerging trends and practices from domain experts.  







							Strategies for Decomposing a System into Microservices
						



					This item in
					

						japanese
					





Like

Print
Bookmarks











Jun 21, 2018
								
								
								
									
									4
									min read
								
							


by





Jan Stenberg







Write for InfoQ Join a community of experts. Increase your visibility.  Grow your career.Learn more







A couple of years ago, Vladik Khononov and his team decided to start using microservices, but just a few months later they found themselves in a huge mess. The reason was that they concentrated on new cool technologies without paying due attention to more fundamental things like modularity and how to achieve it, he explained at the recent DDD eXchange 2018 conference at Skills Matter, London. They invested in serverless frameworks, platforms and messaging mechanisms, but too little in thinking how to decompose a system into microservices — finding the boundaries and where different functionalities should be located among these boundaries.
For Khononov, CTO at Internovus, and his team, the belief from the beginning was that the smaller a service is, the better it will be. That led them straight into building a distributed monolith, and during the coming years they struggled to move away from their tiny services while evaluating different decomposition strategies.
Bounded context
Khononov notes that ubiquitous language is a cornerstone practice in Domain-Driven Design (DDD), and a way to practice this is to talk to domain experts in their own language. Sometimes you will find that they have different mental models for the same business concepts or use the same terms to describe different concepts and if so, it’s an indication that these concepts belong to different bounded contexts. From the beginning Khononov and his team used these discovered boundaries to define services, with each boundary becoming a service. He notes though that these services represent quite wide business areas, sometimes resulting in a bounded context covering multiple business subdomains.
Business subdomains
As their next step, they instead used these subdomains as boundaries and created one service for each business subdomain. In Khononov’s experience, having a one-to-one relationship between a subdomain and a service is a quite common approach in the DDD community, but they didn’t settle for this, instead they continued and strived for even smaller services.
Business entities
Looking deeper into the subdomains, they found business entities and processes and extracted these into their own services. From the beginning this final approach failed miserably, but Khononov points out that in later projects it has been more successful.
Looking at these three strategies, Khononov notes that working with bounded contexts has helped them find the boundaries of the largest valid monolith, however, although it’s a viable working model, for him it doesn’t quite fit the ideas of microservices. When choosing between business subdomains and entities, he claims that the best level of decomposition depends on the system you are building together with its use cases. He emphasizes that microservices is not really about the inside of a service, but rather about the interaction and coupling between services.
The threshold upon which a system can be decomposed into microservices is defined by the use cases of the system that the microservice is part of.
Khononov has still not found an easy way to evaluate a system’s design, but he believes that we now have accumulated enough design heuristics to help in streamlining the process of decomposing a system into microservices. The ones he has found most useful include:

Always decompose to the level of bounded contexts. Don’t decompose further, unless you have good reasons to. Distributed systems have their own challenges.
Core subdomains is where a company is making money. Hold any decomposition until you have gained domain knowledge and ensured you have the right subdomains.
Buy or adopt generic subdomains. They are already solved problems and there is no competitive advantage in implementing them yourself.
Supporting subdomains are needed for supporting the core domains but don’t add any competitive advantage. They are often so stable and simple that they can be further decomposed at an early stage, maybe down to entity services.
Use consistency requirements to help in finding functions or methods that must stay in the same service.
Ensure that events are explicit and self-describing. Consider using private events as an implementation detail within a service, and a more restrained set of public events as part of a service's public interface.
Look for services that change at the same rate; maybe they can be merged to reduce complexity.
Evaluate each service’s interface. If it’s too wide, maybe the service can be decomposed into smaller ones, with a large part targeting integrational aspects, then consider reassessing the boundaries to simplify the overall system design.

Khononov concludes by noting that as the average size of services in a system gets smaller, you will move from a monolithic big ball of mud, through relatively large services based on bounded contexts towards microservices. But he emphasizes that if you continue towards even smaller services, you will end up with a distributed big ball of mud.
Entity services is sometimes referred to as an anti-pattern, for instance by Michael Nygard and Stefan Tilkov.


Inspired by this content? Write for InfoQ.
Becoming an editor for InfoQ was one of the best decisions of my career. It has challenged me and helped me grow in so many ways. We'd love to have more people join our team.

Thomas BettsLead Editor, Software Architecture and Design @InfoQ; Senior Principal Engineer

Write for InfoQ












Rate this Article


Adoption










Style


































 Author Contacted










                
                
                    
                This content is in the Methodologies topic
            

Related Topics:


Development


Architecture & Design


Domain-Driven Design


Design


Architecture Evaluation


Microservices


Methodologies


Domain Driven Design


Architecture










Related Editorial





Related Sponsored Content





Related Sponsor




D2iQ: The Leading Independent Kubernetes Platform. Learn more.









Related Content





GitHub Codespaces Add Support for Microservices and Monorepo Projects








Seven Ways to Fail at Microservices











Maintaining Software Quality with Microservices











Seven Ways to Fail at Microservices











Kalix: Build Serverless Cloud-Native Business-Crtical Applications with No Databases








Present and Future of the Microservice Architecture











SoundCloud Chronicles the End of the Public API Strangler








How Meta Uses Privacy-Friendly Credentials in De-Identified Authentication








Managing Tech Debt in a Microservice Architecture











Getting Started to Quarkus Reactive Messaging with Apache Kafka











Best Practices for Running Stateful Applications on Kubernetes











Is Docker Secure Enough? Advice for Configuring Secure Container Images and Runtimes











The Angular Mini-Book 2.0











Managing Technical Debt in a Microservice Architecture











Why Change Intelligence is Necessary to Effectively Troubleshoot Modern Applications











HashiCorp Vault Improves Eventual Consistency with Server-Side Consistent Tokens








Microsoft Announces the General Availability of Azure Container Apps at Build 2022








Machine Learning at the Edge











How Getting Feedback from Angry Users Helps to Develop Better Products








JEP 405: Record Classes to Extend Pattern Matching in Java








Cloudflare D1 Provides Distributed SQLite for Cloudflare Workers








Amazon Releases 51-Language AI Training Dataset MASSIVE








Java News Roundup: OpenJDK, Spring Updates and CVEs, Payara Platform, Apache Tomcat Updates








How to Run Your Product Department Like a Coach











Google Jetpack Brings Updated Architectural and UI Components and Improved Performance Tools








Microsoft Releases Azure DNS Private Resolver in Public Preview








Amazon EC2 Supports NitroTPM and UEFI Secure Boot








Architecting for the Edge











Google Cloud Introduces PostgreSQL-Compatible AlloyDB for Enterprise Database Workloads








AI for Software Developers: a Future or a New Reality?











Adaptability by Agreement: Valuing Outcomes over Imposed Solutions











AWS Lambda Now Has Support for Node.js 16 Runtime








Effectively Monitoring Your Monitoring - Miedwar Meshbesher on Using Vigilance Controls








Meta AI’s New Data Set to Accelerate Renewable Energy Catalyst Discovery for Hydrogen Fuel








DeepMind Introduces Gato, a New Generalist AI Agent








Mammoths Stumping in the Cloud Era: Meeting EU Regulations by Being Cloud Native and Cloud Agnostic








Go Native with Spring Boot and GraalVM











Dealing with Thundering Herd at Braintree








How Norway's Largest Bureaucracy Optimises for Fast Flow








How to Prepare for the Unexpected: an InfluxData Outage Story Told at KubeConEU 22








The InfoQ Newsletter


        A round-up of last week’s content on InfoQ sent out every Tuesday. Join a community of over 250,000 senior developers.

        

			View an example




Enter your e-mail address








Select your country

Select a country





I consent to InfoQ.com handling my data as explained in this Privacy Notice.





We protect your privacy.

















Hello stranger!
You need to Register an InfoQ account or  Login or login to post comments. But there's so much more behind being registered.
Get the most out of the InfoQ experience.





Tell us what you think







Allowed html: a,b,br,blockquote,i,li,pre,u,ul,p





 Email me replies to any of my messages in this thread
                            










Community comments


Watch thread




Why not aggregates ?
by Jérôme Avoustin, 


Re: Why not aggregates ?
by Jan Stenberg, 








Why not aggregates ?
by
                                        Jérôme Avoustin,
                                        


Your message is awaiting moderation. Thank you for participating in the discussion.
You can decompose services further, not by considering entities, but real aggregates, that are autonomous, define a transactional boundary, get commands in, and publish events


Like
Reply


Back to top











Re: Why not aggregates ?
by
                                        Jan Stenberg,
                                        


Your message is awaiting moderation. Thank you for participating in the discussion.
Good point. I think that when you work with Bounded contexts or Business subdomains you will also work with aggregates. It's when you decompose further you get to business entities, which I think often is an anti-pattern, Entity Services Increase Complexity.


Like
Reply


Back to top












Close





Your Reply


Quote original message








Allowed html: a,b,br,blockquote,i,li,pre,u,ul,p





 Email me replies to any of my messages in this thread
                    






                        Cancel
                    






Close





Your Reply








Allowed html: a,b,br,blockquote,i,li,pre,u,ul,p





 Email me replies to any of my messages in this thread
                    







                        Cancel
                    






Close




                   OK
                



2 












Development




How to Prepare for the Unexpected: an InfluxData Outage Story Told at KubeConEU 22


Reproducible Development with Containers


Green Software Development: Terminology and Climate Commitments Explained by Microsoft at Devoxx UK






Architecture & Design




Oren Eini on RavenDB, including Consistency Guarantees and C# as the Implementation Language


Kalix: Build Serverless Cloud-Native Business-Crtical Applications with No Databases


Architecting for the Edge






Culture & Methods




How Getting Feedback from Angry Users Helps to Develop Better Products


How to Run Your Product Department Like a Coach


Building a Culture of Accountability and Curiosity






AI, ML & Data Engineering




Machine Learning at the Edge


Amazon Releases 51-Language AI Training Dataset MASSIVE


AI for Software Developers: a Future or a New Reality?






DevOps




HashiCorp Vault Improves Eventual Consistency with Server-Side Consistent Tokens


Cloudflare D1 Provides Distributed SQLite for Cloudflare Workers


Effectively Monitoring Your Monitoring - Miedwar Meshbesher on Using Vigilance Controls












The InfoQ Newsletter
	
A round-up of last week’s content on InfoQ sent out every Tuesday. Join a community of over 250,000 senior developers.
		
			View an example


Get a quick overview of content published on a variety of innovator and early adopter technologies
Learn what you don’t know that you don’t know
Stay up to date with the latest information from the topics you are interested in




Enter your e-mail address








Select your country

Select a country





I consent to InfoQ.com handling my data as explained in this Privacy Notice.





We protect your privacy.








QCon Software Development Conference 



Real-world technical talks. No product pitches.Practical ideas to inspire you and your team.QCon San Francisco - Oct 24-28, In-person.QCon San Francisco brings together the world's most innovative senior software engineers across multiple domains to share their real-world implementation of emerging trends and practices.Uncover emerging software trends and practices to solve your complex engineering challenges, without the product pitches.Save your spot now








Home
Create account
Login
QCon Conferences
Events
Contribute
InfoQ Editors
About InfoQ
About C4Media

            Media Kit
        
InfoQ Developer Marketing Blog
Diversity



Events




InfoQ Live

JUNE 21, 2022





InfoQ Live

JULY 19, 2022





							InfoQ Live
							
AUGUST 23, 2022





QCon San Francisco

OCTOBER 24-28, 2022





								QCon Plus
							
NOVEMBER 29 - DECEMBER 9, 2022





Follow us on 

Youtube212K Followers
Linkedin18K Followers
RSS19K Readers
Twitter50k Followers
Facebook20K Likes
AlexaNew



Stay in the know

The InfoQ Podcast
Engineering Culture Podcast
The Software Architects' Newsletter









						General Feedback
						feedback@infoq.com


						Advertising
						sales@infoq.com


						Editorial
						editors@infoq.com


						Marketing
						marketing@infoq.com




InfoQ.com and all content copyright © 2006-2022 C4Media Inc. InfoQ.com hosted at Contegix, the best ISP we've ever worked with.
Privacy Notice, Terms And Conditions, Cookie Policy








BT














