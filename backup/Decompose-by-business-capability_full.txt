





Decompose by business capability

































Microservice Architecture
Supported by Kong




Patterns
Articles
Presentations
Resources
Adoptnew
Refactoringnew
Testingnew
Other Languages


About






Pattern: Decompose by business capability
Context
You are developing a large, complex application and want to use the microservice architecture.
The microservice architecture structures an application as a set of loosely coupled services.
The goal of the microservice architecture is to accelerate software development by enabling continuous delivery/deployment.

The microservice architecture does this in two ways:

Simplifies testing and enables components to deployed independently
Structures the engineering organization as a collection of small (6-10 members), autonomous teams, each of which is responsible for one or more services

These benefits are not automatically guaranteed.
Instead, they can only be achieved by the careful functional decomposition of the application into services.
A service must be small enough to be developed by a small team and to be easily tested.
A useful guideline from object-oriented design (OOD) is the Single Responsibility Principle (SRP).
The SRP defines a responsibility of a class as a reason to change, and states that a class should only have one reason to change.
It make sense to apply the SRP to service design as well and design services that are cohesive and implement a small set of strongly related functions.
The application also be decomposed in a way so that most new and changed requirements only affect a single service.
That is because changes that affect multiple services requires coordination across multiple teams, which slows down development.
Another useful principle from OOD is the Common Closure Principle (CCP), which states that classes that change for the same reason should be in the same package.
Perhaps, for instance, two classes implement different aspects of the same business rule.
The goal is that when that business rule changes developers, only need to change code in a small number - ideally only one - of packages.
This kind of thinking makes sense when designing services since it will help ensure that each change should impact only one service.
Problem
How to decompose an application into services?
Forces

The architecture must be stable
Services must be cohesive.
A service should implement a small set of strongly related functions.
Services must conform to the Common Closure Principle - things that change together should be packaged together - to ensure that each change affect only one service
Services must be loosely coupled - each service as an API that encapsulates its implementation.
The implementation can be changed without affecting clients
A service should be testable
Each service be small enough to be developed by a “two pizza” team, i.e. a team of 6-10 people
Each team that owns one or more services must be autonomous.
A team must be able to develop and deploy their services with minimal collaboration with other teams.

Solution
Define services corresponding to business capabilities.
A business capability is a concept from business architecture modeling.
It is something that a business does in order to generate value.
A business capability often corresponds to a business object, e.g.

Order Management is responsible for orders
Customer Management is responsible for customers

Business capabilities are often organized into a multi-level hierarchy.
For example, an enterprise application might have top-level categories such as Product/Service development, Product/Service delivery, Demand generation, etc.
Examples
The business capabilities of an online store include:

Product catalog management
Inventory management
Order management
Delivery management
…

The corresponding microservice architecture would have services corresponding to each of these capabilities.

Resulting Context
This pattern has the following benefits:

Stable architecture since the business capabilities are relatively stable
Development teams are cross-functional, autonomous, and organized around delivering business value rather than technical features
Services are cohesive and loosely coupled

Issues
There are the following issues to address:


How to identify business capabilities?
Identifying business capabilities and hence services requires an understanding of the business.
An organization’s business capabilities are identified by analyzing the organization’s purpose, structure, business processes, and areas of expertise.
Bounded contexts are best identified using an iterative process.
Good starting points for identifying business capabilities are:

organization structure - different groups within an organization might correspond to business capabilities or business capability groups.
high-level domain model - business capabilities often correspond to domain objects



Related patterns

The Decompose by subdomain pattern is an alternative pattern






About Microservices.io



Microservices.io is brought to you by Chris Richardson.
      Experienced software architect, author of POJOs in Action, the creator of the original CloudFoundry.com, and the author of Microservices patterns.
      
Chris helps clients around the world adopt the microservice architecture through consulting engagements, and training classes and workshops.





Public workshop in Australia/APAC timezone



        In June, I’ll be teaching a public microservices workshopover Zoom in an APAC-friendly (GMT+9) timezone.
      





Learn how to create a service template and microservice chassis



        Take a look at my Manning LiveProject that teaches you how to develop a service template and microservice chassis.
      





New virtual bootcamp: Distributed data patterns in a microservice architecture



My virtual bootcamp, distributed data patterns in a microservice architecture, is now open for enrollment!
It covers the key distributed data management patterns including Saga, API Composition, and CQRS.
It consists of video lectures, code labs, and a weekly ask-me-anything video conference repeated in multiple timezones.
The regular price is $395/person but use coupon YXEERWTJ to sign up for $195 (valid until May 26th, 2022).
There are deeper discounts for buying multiple seats.

Learn more




Signup for the newsletterFor Email Marketing you can trust.



LEARN about microservices


Chris offers numerous resources for learning the microservice architecture.
Training classes
Chris teaches comprehensive workshops, training classes and bootcamps for executives, architects and developers to help your organization use microservices effectively.
  

  Avoid the pitfalls of adopting microservices and learn essential topics, such as service decomposition and design and how to refactor a monolith to microservices.
  
Delivered in-person and remotely.

Get the book: Microservices Patterns

  Read Chris Richardson's book:

  




Example microservices applications
Want to see an example? Check out Chris Richardson's example applications.
      See code




BUILD microservices


    Ready to start using the microservice architecture?

    Consulting services
Engage Chris to create a microservices adoption roadmap and help you define your microservice architecture, 

The Eventuate platform
Use the Eventuate.io platform to tackle distributed data management challenges in your microservices architecture.

Eventuate is Chris's latest startup. It makes it easy to use the Saga pattern to manage transactions and the CQRS pattern to implement queries.




ASSESS your architecture


   Assess your application's microservice architecture and identify what needs to be improved.

  Consulting services
Engage Chris to conduct an architectural assessment.

Self assessment
Alternatively, conduct a self-assessment using the Microservices Assessment Platform.




Join the microservices google group




The patterns


How to apply the patterns
Application architecture patterns

Monolithic architecture
Microservice architecture

Decomposition

Decompose by business capability
Decompose by subdomain
Self-contained Servicenew
Service per teamnew

Refactoring to microservicesnew

Strangler Application
Anti-corruption layer

Data management

Database per Service
Shared database
Saga
API Composition
CQRS
Domain event
Event sourcing

Transactional messaging

Transactional outbox
Transaction log tailing
Polling publisher

Testing

Service Component Test
Consumer-driven contract test
Consumer-side contract test

Deployment patterns

Multiple service instances per host
Service instance per host
Service instance per VM
Service instance per Container
Serverless deployment
Service deployment platform

Cross cutting concerns

Microservice chassis
Service Template
Externalized configuration

Communication style

Remote Procedure Invocation
Messaging
Domain-specific protocol
Idempotent Consumer

External API

API gateway
Backend for front-end

Service discovery

Client-side discovery
Server-side discovery
Service registry
Self registration
3rd party registration

Reliability

Circuit Breaker

Security

Access Token

Observability

Log aggregation
Application metrics
Audit logging
Distributed tracing
Exception tracking
Health check API
Log deployments and changes

UI patterns

Server-side page fragment composition
Client-side UI composition


 











Tweet




Follow @MicroSvcArch



Copyright © 2021 Chris Richardson • All rights reserved • Supported by Kong.












Please enable JavaScript to view the comments powered by Disqus.


